/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt/defaults YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults struct {
	AppProfile   *string                                                                                      `path:"app-profile" module:"nokia-conf"`
	IntDestId    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId    `path:"int-dest-id" module:"nokia-conf"`
	SlaProfile   *string                                                                                      `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string                                                                                      `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) IsYANGGoStruct() {
}

// GetOrCreateIntDestId retrieves the value of the IntDestId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetOrCreateIntDestId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId {
	if t.IntDestId != nil {
		return t.IntDestId
	}
	t.IntDestId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId{}
	return t.IntDestId
}

// GetOrCreateSubscriberId retrieves the value of the SubscriberId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetOrCreateSubscriberId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId {
	if t.SubscriberId != nil {
		return t.SubscriberId
	}
	t.SubscriberId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId{}
	return t.SubscriberId
}

// GetIntDestId returns the value of the IntDestId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults. If the receiver or the field IntDestId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetIntDestId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId {
	if t != nil && t.IntDestId != nil {
		return t.IntDestId
	}
	return nil
}

// GetSubscriberId returns the value of the SubscriberId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults. If the receiver or the field SubscriberId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetSubscriberId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId {
	if t != nil && t.SubscriberId != nil {
		return t.SubscriberId
	}
	return nil
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IntDestId.PopulateDefaults()
	t.SubscriberId.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt/defaults/int-dest-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId struct {
	String  *string   `path:"string" module:"nokia-conf"`
	TopQTag YANGEmpty `path:"top-q-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) IsYANGGoStruct() {
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetTopQTag retrieves the value of the leaf TopQTag from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TopQTag is set, it can
// safely use t.GetTopQTag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TopQTag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) GetTopQTag() YANGEmpty {
	if t == nil || t.TopQTag == false {
		return false
	}
	return t.TopQTag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_IntDestId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt/defaults/subscriber-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId struct {
	AutoId YANGEmpty `path:"auto-id" module:"nokia-conf"`
	SapId  YANGEmpty `path:"sap-id" module:"nokia-conf"`
	String *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) IsYANGGoStruct() {
}

// GetAutoId retrieves the value of the leaf AutoId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoId is set, it can
// safely use t.GetAutoId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) GetAutoId() YANGEmpty {
	if t == nil || t.AutoId == false {
		return false
	}
	return t.AutoId
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) GetSapId() YANGEmpty {
	if t == nil || t.SapId == false {
		return false
	}
	return t.SapId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_Defaults_SubscriberId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt/single-sub-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters struct {
	NonSubTrafficProfiles *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles `path:"non-sub-traffic-profiles" module:"nokia-conf" yangPresence:"true"`
	ProfiledTrafficOnly   *bool                                                                                                            `path:"profiled-traffic-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) IsYANGGoStruct() {
}

// GetOrCreateNonSubTrafficProfiles retrieves the value of the NonSubTrafficProfiles field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) GetOrCreateNonSubTrafficProfiles() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles {
	if t.NonSubTrafficProfiles != nil {
		return t.NonSubTrafficProfiles
	}
	t.NonSubTrafficProfiles = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles{}
	return t.NonSubTrafficProfiles
}

// GetNonSubTrafficProfiles returns the value of the NonSubTrafficProfiles struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters. If the receiver or the field NonSubTrafficProfiles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) GetNonSubTrafficProfiles() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles {
	if t != nil && t.NonSubTrafficProfiles != nil {
		return t.NonSubTrafficProfiles
	}
	return nil
}

// GetProfiledTrafficOnly retrieves the value of the leaf ProfiledTrafficOnly from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfiledTrafficOnly is set, it can
// safely use t.GetProfiledTrafficOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfiledTrafficOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) GetProfiledTrafficOnly() bool {
	if t == nil || t.ProfiledTrafficOnly == nil {
		return false
	}
	return *t.ProfiledTrafficOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ProfiledTrafficOnly == nil {
		var v bool = false
		t.ProfiledTrafficOnly = &v
	}
	t.NonSubTrafficProfiles.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/sub-sla-mgmt/single-sub-parameters/non-sub-traffic-profiles YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles struct {
	AppProfile   *string `path:"app-profile" module:"nokia-conf"`
	SlaProfile   *string `path:"sla-profile" module:"nokia-conf"`
	SubProfile   *string `path:"sub-profile" module:"nokia-conf"`
	SubscriberId *string `path:"subscriber-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) GetSubscriberId() string {
	if t == nil || t.SubscriberId == nil {
		return ""
	}
	return *t.SubscriberId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_SubSlaMgmt_SingleSubParameters_NonSubTrafficProfiles) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters struct {
	ArpHost           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost      `path:"arp-host" module:"nokia-conf"`
	ArpReplyAgent     E_NokiaTypesServices_ArpReplyAgent                                                             `path:"arp-reply-agent" module:"nokia-conf"`
	Dhcp              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp         `path:"dhcp" module:"nokia-conf"`
	Egress            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress       `path:"egress" module:"nokia-conf"`
	IgmpSnooping      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping `path:"igmp-snooping" module:"nokia-conf"`
	Ingress           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress      `path:"ingress" module:"nokia-conf"`
	MacDaHashing      *bool                                                                                          `path:"mac-da-hashing" module:"nokia-conf"`
	SplitHorizonGroup *string                                                                                        `path:"split-horizon-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) IsYANGGoStruct() {
}

// GetOrCreateArpHost retrieves the value of the ArpHost field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetOrCreateArpHost() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost {
	if t.ArpHost != nil {
		return t.ArpHost
	}
	t.ArpHost = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost{}
	return t.ArpHost
}

// GetOrCreateDhcp retrieves the value of the Dhcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetOrCreateDhcp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp {
	if t.Dhcp != nil {
		return t.Dhcp
	}
	t.Dhcp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp{}
	return t.Dhcp
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress{}
	return t.Egress
}

// GetOrCreateIgmpSnooping retrieves the value of the IgmpSnooping field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetOrCreateIgmpSnooping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping {
	if t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	t.IgmpSnooping = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping{}
	return t.IgmpSnooping
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress{}
	return t.Ingress
}

// GetArpHost returns the value of the ArpHost struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters. If the receiver or the field ArpHost is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetArpHost() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost {
	if t != nil && t.ArpHost != nil {
		return t.ArpHost
	}
	return nil
}

// GetDhcp returns the value of the Dhcp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters. If the receiver or the field Dhcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetDhcp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp {
	if t != nil && t.Dhcp != nil {
		return t.Dhcp
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetIgmpSnooping returns the value of the IgmpSnooping struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters. If the receiver or the field IgmpSnooping is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetIgmpSnooping() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping {
	if t != nil && t.IgmpSnooping != nil {
		return t.IgmpSnooping
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetArpReplyAgent retrieves the value of the leaf ArpReplyAgent from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ArpReplyAgent is set, it can
// safely use t.GetArpReplyAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ArpReplyAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetArpReplyAgent() E_NokiaTypesServices_ArpReplyAgent {
	if t == nil || t.ArpReplyAgent == 0 {
		return 0
	}
	return t.ArpReplyAgent
}

// GetMacDaHashing retrieves the value of the leaf MacDaHashing from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacDaHashing is set, it can
// safely use t.GetMacDaHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacDaHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetMacDaHashing() bool {
	if t == nil || t.MacDaHashing == nil {
		return false
	}
	return *t.MacDaHashing
}

// GetSplitHorizonGroup retrieves the value of the leaf SplitHorizonGroup from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SplitHorizonGroup is set, it can
// safely use t.GetSplitHorizonGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SplitHorizonGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) GetSplitHorizonGroup() string {
	if t == nil || t.SplitHorizonGroup == nil {
		return ""
	}
	return *t.SplitHorizonGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MacDaHashing == nil {
		var v bool = false
		t.MacDaHashing = &v
	}
	t.ArpHost.PopulateDefaults()
	t.Dhcp.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.IgmpSnooping.PopulateDefaults()
	t.Ingress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/arp-host YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost struct {
	HostLimit       *uint32 `path:"host-limit" module:"nokia-conf"`
	MinAuthInterval *uint32 `path:"min-auth-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) IsYANGGoStruct() {
}

// GetHostLimit retrieves the value of the leaf HostLimit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostLimit is set, it can
// safely use t.GetHostLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) GetHostLimit() uint32 {
	if t == nil || t.HostLimit == nil {
		return 1
	}
	return *t.HostLimit
}

// GetMinAuthInterval retrieves the value of the leaf MinAuthInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAuthInterval is set, it can
// safely use t.GetMinAuthInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAuthInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) GetMinAuthInterval() uint32 {
	if t == nil || t.MinAuthInterval == nil {
		return 15
	}
	return *t.MinAuthInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HostLimit == nil {
		var v uint32 = 1
		t.HostLimit = &v
	}
	if t.MinAuthInterval == nil {
		var v uint32 = 15
		t.MinAuthInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_ArpHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp struct {
	LeasePopulate *uint32                                                                                            `path:"lease-populate" module:"nokia-conf"`
	Option_82     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82   `path:"option-82" module:"nokia-conf"`
	ProxyServer   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer `path:"proxy-server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) IsYANGGoStruct() {
}

// GetOrCreateOption_82 retrieves the value of the Option_82 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) GetOrCreateOption_82() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82 {
	if t.Option_82 != nil {
		return t.Option_82
	}
	t.Option_82 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82{}
	return t.Option_82
}

// GetOrCreateProxyServer retrieves the value of the ProxyServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) GetOrCreateProxyServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer {
	if t.ProxyServer != nil {
		return t.ProxyServer
	}
	t.ProxyServer = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer{}
	return t.ProxyServer
}

// GetOption_82 returns the value of the Option_82 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp. If the receiver or the field Option_82 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) GetOption_82() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82 {
	if t != nil && t.Option_82 != nil {
		return t.Option_82
	}
	return nil
}

// GetProxyServer returns the value of the ProxyServer struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp. If the receiver or the field ProxyServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) GetProxyServer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer {
	if t != nil && t.ProxyServer != nil {
		return t.ProxyServer
	}
	return nil
}

// GetLeasePopulate retrieves the value of the leaf LeasePopulate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeasePopulate is set, it can
// safely use t.GetLeasePopulate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeasePopulate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) GetLeasePopulate() uint32 {
	if t == nil || t.LeasePopulate == nil {
		return 1
	}
	return *t.LeasePopulate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LeasePopulate == nil {
		var v uint32 = 1
		t.LeasePopulate = &v
	}
	t.Option_82.PopulateDefaults()
	t.ProxyServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp/option-82 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82 struct {
	Action               E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_Action              `path:"action" module:"nokia-conf"`
	CircuitId            E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_CircuitId           `path:"circuit-id" module:"nokia-conf"`
	RemoteId             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId             `path:"remote-id" module:"nokia-conf"`
	VendorSpecificOption *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption `path:"vendor-specific-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) IsYANGGoStruct() {
}

// GetOrCreateRemoteId retrieves the value of the RemoteId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetOrCreateRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId {
	if t.RemoteId != nil {
		return t.RemoteId
	}
	t.RemoteId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId{}
	return t.RemoteId
}

// GetOrCreateVendorSpecificOption retrieves the value of the VendorSpecificOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetOrCreateVendorSpecificOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption {
	if t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	t.VendorSpecificOption = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption{}
	return t.VendorSpecificOption
}

// GetRemoteId returns the value of the RemoteId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82. If the receiver or the field RemoteId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetRemoteId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId {
	if t != nil && t.RemoteId != nil {
		return t.RemoteId
	}
	return nil
}

// GetVendorSpecificOption returns the value of the VendorSpecificOption struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82. If the receiver or the field VendorSpecificOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetVendorSpecificOption() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption {
	if t != nil && t.VendorSpecificOption != nil {
		return t.VendorSpecificOption
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_Action_keep
	}
	return t.Action
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) GetCircuitId() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_CircuitId {
	if t == nil || t.CircuitId == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_CircuitId_ascii_tuple
	}
	return t.CircuitId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_Action_keep
	}
	if t.CircuitId == 0 {
		t.CircuitId = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_CircuitId_ascii_tuple
	}
	t.RemoteId.PopulateDefaults()
	t.VendorSpecificOption.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp/option-82/remote-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId struct {
	Mac    YANGEmpty `path:"mac" module:"nokia-conf"`
	String *string   `path:"string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) IsYANGGoStruct() {
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) GetMac() YANGEmpty {
	if t == nil || t.Mac == false {
		return false
	}
	return t.Mac
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_RemoteId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp/option-82/vendor-specific-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption struct {
	ClientMacAddress *bool   `path:"client-mac-address" module:"nokia-conf"`
	SapId            *bool   `path:"sap-id" module:"nokia-conf"`
	ServiceId        *bool   `path:"service-id" module:"nokia-conf"`
	String           *string `path:"string" module:"nokia-conf"`
	SystemId         *bool   `path:"system-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) IsYANGGoStruct() {
}

// GetClientMacAddress retrieves the value of the leaf ClientMacAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMacAddress is set, it can
// safely use t.GetClientMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) GetClientMacAddress() bool {
	if t == nil || t.ClientMacAddress == nil {
		return false
	}
	return *t.ClientMacAddress
}

// GetSapId retrieves the value of the leaf SapId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapId is set, it can
// safely use t.GetSapId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) GetSapId() bool {
	if t == nil || t.SapId == nil {
		return false
	}
	return *t.SapId
}

// GetServiceId retrieves the value of the leaf ServiceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceId is set, it can
// safely use t.GetServiceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) GetServiceId() bool {
	if t == nil || t.ServiceId == nil {
		return false
	}
	return *t.ServiceId
}

// GetString retrieves the value of the leaf String from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if String is set, it can
// safely use t.GetString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.String == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) GetString() string {
	if t == nil || t.String == nil {
		return ""
	}
	return *t.String
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) GetSystemId() bool {
	if t == nil || t.SystemId == nil {
		return false
	}
	return *t.SystemId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClientMacAddress == nil {
		var v bool = false
		t.ClientMacAddress = &v
	}
	if t.SapId == nil {
		var v bool = false
		t.SapId = &v
	}
	if t.ServiceId == nil {
		var v bool = false
		t.ServiceId = &v
	}
	if t.SystemId == nil {
		var v bool = false
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_Option_82_VendorSpecificOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp/proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer struct {
	AdminState     E_NokiaTypesSros_AdminState                                                                                  `path:"admin-state" module:"nokia-conf"`
	EmulatedServer *string                                                                                                      `path:"emulated-server" module:"nokia-conf"`
	LeaseTime      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime `path:"lease-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) IsYANGGoStruct() {
}

// GetOrCreateLeaseTime retrieves the value of the LeaseTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) GetOrCreateLeaseTime() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime {
	if t.LeaseTime != nil {
		return t.LeaseTime
	}
	t.LeaseTime = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime{}
	return t.LeaseTime
}

// GetLeaseTime returns the value of the LeaseTime struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer. If the receiver or the field LeaseTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) GetLeaseTime() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime {
	if t != nil && t.LeaseTime != nil {
		return t.LeaseTime
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetEmulatedServer retrieves the value of the leaf EmulatedServer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EmulatedServer is set, it can
// safely use t.GetEmulatedServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EmulatedServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) GetEmulatedServer() string {
	if t == nil || t.EmulatedServer == nil {
		return ""
	}
	return *t.EmulatedServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.LeaseTime.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/dhcp/proxy-server/lease-time YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime struct {
	RadiusOverride *bool   `path:"radius-override" module:"nokia-conf"`
	Value          *uint32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) IsYANGGoStruct() {
}

// GetRadiusOverride retrieves the value of the leaf RadiusOverride from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusOverride is set, it can
// safely use t.GetRadiusOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) GetRadiusOverride() bool {
	if t == nil || t.RadiusOverride == nil {
		return false
	}
	return *t.RadiusOverride
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) GetValue() uint32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RadiusOverride == nil {
		var v bool = false
		t.RadiusOverride = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Dhcp_ProxyServer_LeaseTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) IsYANGGoStruct() {
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos struct {
	PolicyName *string `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping struct {
	FastLeave               *bool                                                                                                                   `path:"fast-leave" module:"nokia-conf"`
	ImportPolicy            *string                                                                                                                 `path:"import-policy" module:"nokia-conf"`
	MaximumNumberGroups     NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_MaximumNumberGroups_Union `path:"maximum-number-groups" module:"nokia-conf"`
	Mcac                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac                     `path:"mcac" module:"nokia-conf"`
	Mvr                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr                      `path:"mvr" module:"nokia-conf"`
	QueryInterval           *uint32                                                                                                                 `path:"query-interval" module:"nokia-conf"`
	QueryLastMemberInterval *uint32                                                                                                                 `path:"query-last-member-interval" module:"nokia-conf"`
	QueryResponseInterval   *uint32                                                                                                                 `path:"query-response-interval" module:"nokia-conf"`
	RobustCount             *uint32                                                                                                                 `path:"robust-count" module:"nokia-conf"`
	SendQueries             *bool                                                                                                                   `path:"send-queries" module:"nokia-conf"`
	Version                 E_NokiaTypesIgmp_IgmpVersion                                                                                            `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) IsYANGGoStruct() {
}

// GetOrCreateMcac retrieves the value of the Mcac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetOrCreateMcac() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac {
	if t.Mcac != nil {
		return t.Mcac
	}
	t.Mcac = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac{}
	return t.Mcac
}

// GetOrCreateMvr retrieves the value of the Mvr field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetOrCreateMvr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr {
	if t.Mvr != nil {
		return t.Mvr
	}
	t.Mvr = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr{}
	return t.Mvr
}

// GetMcac returns the value of the Mcac struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping. If the receiver or the field Mcac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetMcac() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac {
	if t != nil && t.Mcac != nil {
		return t.Mcac
	}
	return nil
}

// GetMvr returns the value of the Mvr struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping. If the receiver or the field Mvr is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetMvr() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr {
	if t != nil && t.Mvr != nil {
		return t.Mvr
	}
	return nil
}

// GetFastLeave retrieves the value of the leaf FastLeave from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FastLeave is set, it can
// safely use t.GetFastLeave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FastLeave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetFastLeave() bool {
	if t == nil || t.FastLeave == nil {
		return false
	}
	return *t.FastLeave
}

// GetImportPolicy retrieves the value of the leaf ImportPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportPolicy is set, it can
// safely use t.GetImportPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetImportPolicy() string {
	if t == nil || t.ImportPolicy == nil {
		return ""
	}
	return *t.ImportPolicy
}

// GetMaximumNumberGroups retrieves the value of the leaf MaximumNumberGroups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumNumberGroups is set, it can
// safely use t.GetMaximumNumberGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumNumberGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetMaximumNumberGroups() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_MaximumNumberGroups_Union {
	if t == nil || t.MaximumNumberGroups == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_MaximumNumberGroups_Enum_unlimited
	}
	return t.MaximumNumberGroups
}

// GetQueryInterval retrieves the value of the leaf QueryInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryInterval is set, it can
// safely use t.GetQueryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetQueryInterval() uint32 {
	if t == nil || t.QueryInterval == nil {
		return 125
	}
	return *t.QueryInterval
}

// GetQueryLastMemberInterval retrieves the value of the leaf QueryLastMemberInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryLastMemberInterval is set, it can
// safely use t.GetQueryLastMemberInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryLastMemberInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetQueryLastMemberInterval() uint32 {
	if t == nil || t.QueryLastMemberInterval == nil {
		return 10
	}
	return *t.QueryLastMemberInterval
}

// GetQueryResponseInterval retrieves the value of the leaf QueryResponseInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueryResponseInterval is set, it can
// safely use t.GetQueryResponseInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueryResponseInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetQueryResponseInterval() uint32 {
	if t == nil || t.QueryResponseInterval == nil {
		return 10
	}
	return *t.QueryResponseInterval
}

// GetRobustCount retrieves the value of the leaf RobustCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RobustCount is set, it can
// safely use t.GetRobustCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RobustCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetRobustCount() uint32 {
	if t == nil || t.RobustCount == nil {
		return 2
	}
	return *t.RobustCount
}

// GetSendQueries retrieves the value of the leaf SendQueries from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendQueries is set, it can
// safely use t.GetSendQueries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendQueries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetSendQueries() bool {
	if t == nil || t.SendQueries == nil {
		return false
	}
	return *t.SendQueries
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) GetVersion() E_NokiaTypesIgmp_IgmpVersion {
	if t == nil || t.Version == 0 {
		return NokiaTypesIgmp_IgmpVersion_3
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FastLeave == nil {
		var v bool = false
		t.FastLeave = &v
	}
	if t.MaximumNumberGroups == nil {
		t.MaximumNumberGroups = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_MaximumNumberGroups_Enum_unlimited
	}
	if t.QueryInterval == nil {
		var v uint32 = 125
		t.QueryInterval = &v
	}
	if t.QueryLastMemberInterval == nil {
		var v uint32 = 10
		t.QueryLastMemberInterval = &v
	}
	if t.QueryResponseInterval == nil {
		var v uint32 = 10
		t.QueryResponseInterval = &v
	}
	if t.RobustCount == nil {
		var v uint32 = 2
		t.RobustCount = &v
	}
	if t.SendQueries == nil {
		var v bool = false
		t.SendQueries = &v
	}
	if t.Version == 0 {
		t.Version = NokiaTypesIgmp_IgmpVersion_3
	}
	t.Mcac.PopulateDefaults()
	t.Mvr.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mcac YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac struct {
	Bandwidth       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth     `path:"bandwidth" module:"nokia-conf"`
	InterfacePolicy *string                                                                                                           `path:"interface-policy" module:"nokia-conf"`
	McConstraints   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints `path:"mc-constraints" module:"nokia-conf"`
	Policy          *string                                                                                                           `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) IsYANGGoStruct() {
}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateMcConstraints retrieves the value of the McConstraints field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetOrCreateMcConstraints() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints {
	if t.McConstraints != nil {
		return t.McConstraints
	}
	t.McConstraints = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints{}
	return t.McConstraints
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetBandwidth() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetMcConstraints returns the value of the McConstraints struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac. If the receiver or the field McConstraints is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetMcConstraints() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints {
	if t != nil && t.McConstraints != nil {
		return t.McConstraints
	}
	return nil
}

// GetInterfacePolicy retrieves the value of the leaf InterfacePolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfacePolicy is set, it can
// safely use t.GetInterfacePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfacePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetInterfacePolicy() string {
	if t == nil || t.InterfacePolicy == nil {
		return ""
	}
	return *t.InterfacePolicy
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.McConstraints.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mcac/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) IsYANGGoStruct() {
}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mcac/mc-constraints YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints struct {
	Level            map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level                     `path:"level" module:"nokia-conf"`
	NumberDown       map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown `path:"number-down" module:"nokia-conf"`
	UseLagPortWeight *bool                                                                                                                                                                                                                                                                                `path:"use-lag-port-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) IsYANGGoStruct() {
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) NewLevel(LevelId NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level)
	}

	key := LevelId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level{
		LevelId: LevelId,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.LevelId = newK

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) GetOrCreateLevel(LevelId NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level {

	key := LevelId

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(LevelId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) GetLevel(LevelId NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level {

	if t == nil {
		return nil
	}

	key := LevelId

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) DeleteLevel(LevelId NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union) {
	key := LevelId

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) AppendLevel(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) error {
	key := v.LevelId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) NewNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown)
	}

	key := NumberLagPortDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown{
		NumberLagPortDown: NumberLagPortDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberLagPortDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) GetOrCreateNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown {

	key := NumberLagPortDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberLagPortDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) GetNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberLagPortDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) DeleteNumberDown(NumberLagPortDown NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union) {
	key := NumberLagPortDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) error {
	key := v.NumberLagPortDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// GetUseLagPortWeight retrieves the value of the leaf UseLagPortWeight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseLagPortWeight is set, it can
// safely use t.GetUseLagPortWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseLagPortWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) GetUseLagPortWeight() bool {
	if t == nil || t.UseLagPortWeight == nil {
		return false
	}
	return *t.UseLagPortWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseLagPortWeight == nil {
		var v bool = false
		t.UseLagPortWeight = &v
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mcac/mc-constraints/level YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level struct {
	Bandwidth *uint32                                                                                                                              `path:"bandwidth" module:"nokia-conf"`
	LevelId   NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union `path:"level-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) IsYANGGoStruct() {
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) GetBandwidth() uint32 {
	if t == nil || t.Bandwidth == nil {
		return 1
	}
	return *t.Bandwidth
}

// GetLevelId retrieves the value of the leaf LevelId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LevelId is set, it can
// safely use t.GetLevelId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LevelId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) GetLevelId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level_LevelId_Union {
	if t == nil || t.LevelId == nil {
		return nil
	}
	return t.LevelId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Bandwidth == nil {
		var v uint32 = 1
		t.Bandwidth = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level-id": t.LevelId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mcac/mc-constraints/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown struct {
	Level             *uint32                                                                                                                                             `path:"level" module:"nokia-conf"`
	NumberLagPortDown NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union `path:"number-lag-port-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) GetLevel() uint32 {
	if t == nil || t.Level == nil {
		return 0
	}
	return *t.Level
}

// GetNumberLagPortDown retrieves the value of the leaf NumberLagPortDown from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberLagPortDown is set, it can
// safely use t.GetNumberLagPortDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberLagPortDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) GetNumberLagPortDown() NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown_NumberLagPortDown_Union {
	if t == nil || t.NumberLagPortDown == nil {
		return nil
	}
	return t.NumberLagPortDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-lag-port-down": t.NumberLagPortDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mcac_McConstraints_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/igmp-snooping/mvr YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr struct {
	FromVpls *string `path:"from-vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) IsYANGGoStruct() {
}

// GetFromVpls retrieves the value of the leaf FromVpls from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FromVpls is set, it can
// safely use t.GetFromVpls() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FromVpls == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) GetFromVpls() string {
	if t == nil || t.FromVpls == nil {
		return ""
	}
	return *t.FromVpls
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_IgmpSnooping_Mvr) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) IsYANGGoStruct() {
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/msap-policy/vpls-only-sap-parameters/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos struct {
	PolicyName  *string                                                                                                    `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos_QueuingType `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) IsYANGGoStruct() {
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) GetQueuingType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos_QueuingType {
	if t == nil || t.QueuingType == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos_QueuingType_multipoint_shared
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueuingType == 0 {
		t.QueuingType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos_QueuingType_multipoint_shared
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_MsapPolicy_VplsOnlySapParameters_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp struct {
	Association  map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association `path:"association" module:"nokia-conf"`
	UpResiliency *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency           `path:"up-resiliency" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) IsYANGGoStruct() {}

// NewAssociation creates a new entry in the Association list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) NewAssociation(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Association[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Association", key)
	}

	t.Association[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association{
		Name: &Name,
	}

	return t.Association[key], nil
}

// RenameAssociation renames an entry in the list Association within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) RenameAssociation(oldK, newK string) error {
	if _, ok := t.Association[newK]; ok {
		return fmt.Errorf("key %v already exists in Association", newK)
	}

	e, ok := t.Association[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Association", oldK)
	}
	e.Name = &newK

	t.Association[newK] = e
	delete(t.Association, oldK)
	return nil
}

// GetOrCreateAssociation retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) GetOrCreateAssociation(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association {

	key := Name

	if v, ok := t.Association[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAssociation(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAssociation got unexpected error: %v", err))
	}
	return v
}

// GetAssociation retrieves the value with the specified key from
// the Association map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) GetAssociation(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Association[key]; ok {
		return lm
	}
	return nil
}

// DeleteAssociation deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) DeleteAssociation(Name string) {
	key := Name

	delete(t.Association, key)
}

// AppendAssociation appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association struct to the
// list Association of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) AppendAssociation(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Association == nil {
		t.Association = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association)
	}

	if _, ok := t.Association[key]; ok {
		return fmt.Errorf("duplicate key for list Association %v", key)
	}

	t.Association[key] = v
	return nil
}

// GetOrCreateUpResiliency retrieves the value of the UpResiliency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) GetOrCreateUpResiliency() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency {
	if t.UpResiliency != nil {
		return t.UpResiliency
	}
	t.UpResiliency = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency{}
	return t.UpResiliency
}

// GetUpResiliency returns the value of the UpResiliency struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp. If the receiver or the field UpResiliency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) GetUpResiliency() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency {
	if t != nil && t.UpResiliency != nil {
		return t.UpResiliency
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.UpResiliency.PopulateDefaults()
	for _, e := range t.Association {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	AssociationReleaseTimeout NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_AssociationReleaseTimeout_Union `path:"association-release-timeout" module:"nokia-conf"`
	AssociationSetupRetry     *uint32                                                                                          `path:"association-setup-retry" module:"nokia-conf"`
	Description               *string                                                                                          `path:"description" module:"nokia-conf"`
	Heartbeat                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat                      `path:"heartbeat" module:"nokia-conf"`
	Interface                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface                      `path:"interface" module:"nokia-conf"`
	Name                      *string                                                                                          `path:"name" module:"nokia-conf"`
	Nat                       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat                            `path:"nat" module:"nokia-conf"`
	NodeId                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId                         `path:"node-id" module:"nokia-conf"`
	PathRestorationTime       *uint32                                                                                          `path:"path-restoration-time" module:"nokia-conf"`
	Peer                      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer                           `path:"peer" module:"nokia-conf"`
	Tx                        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx                             `path:"tx" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) IsYANGGoStruct() {}

// GetOrCreateHeartbeat retrieves the value of the Heartbeat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreateHeartbeat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat {
	if t.Heartbeat != nil {
		return t.Heartbeat
	}
	t.Heartbeat = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat{}
	return t.Heartbeat
}

// GetOrCreateInterface retrieves the value of the Interface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreateInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface {
	if t.Interface != nil {
		return t.Interface
	}
	t.Interface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface{}
	return t.Interface
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat{}
	return t.Nat
}

// GetOrCreateNodeId retrieves the value of the NodeId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreateNodeId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId {
	if t.NodeId != nil {
		return t.NodeId
	}
	t.NodeId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId{}
	return t.NodeId
}

// GetOrCreatePeer retrieves the value of the Peer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreatePeer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer {
	if t.Peer != nil {
		return t.Peer
	}
	t.Peer = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer{}
	return t.Peer
}

// GetOrCreateTx retrieves the value of the Tx field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetOrCreateTx() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx {
	if t.Tx != nil {
		return t.Tx
	}
	t.Tx = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx{}
	return t.Tx
}

// GetHeartbeat returns the value of the Heartbeat struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field Heartbeat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetHeartbeat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat {
	if t != nil && t.Heartbeat != nil {
		return t.Heartbeat
	}
	return nil
}

// GetInterface returns the value of the Interface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field Interface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface {
	if t != nil && t.Interface != nil {
		return t.Interface
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetNat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetNodeId returns the value of the NodeId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field NodeId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetNodeId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId {
	if t != nil && t.NodeId != nil {
		return t.NodeId
	}
	return nil
}

// GetPeer returns the value of the Peer struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field Peer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetPeer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer {
	if t != nil && t.Peer != nil {
		return t.Peer
	}
	return nil
}

// GetTx returns the value of the Tx struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association. If the receiver or the field Tx is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetTx() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx {
	if t != nil && t.Tx != nil {
		return t.Tx
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAssociationReleaseTimeout retrieves the value of the leaf AssociationReleaseTimeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationReleaseTimeout is set, it can
// safely use t.GetAssociationReleaseTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationReleaseTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetAssociationReleaseTimeout() NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_AssociationReleaseTimeout_Union {
	if t == nil || t.AssociationReleaseTimeout == nil {
		return UnionUint32(3600)
	}
	return t.AssociationReleaseTimeout
}

// GetAssociationSetupRetry retrieves the value of the leaf AssociationSetupRetry from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AssociationSetupRetry is set, it can
// safely use t.GetAssociationSetupRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AssociationSetupRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetAssociationSetupRetry() uint32 {
	if t == nil || t.AssociationSetupRetry == nil {
		return 10
	}
	return *t.AssociationSetupRetry
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPathRestorationTime retrieves the value of the leaf PathRestorationTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PathRestorationTime is set, it can
// safely use t.GetPathRestorationTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PathRestorationTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) GetPathRestorationTime() uint32 {
	if t == nil || t.PathRestorationTime == nil {
		return 0
	}
	return *t.PathRestorationTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AssociationReleaseTimeout == nil {
		t.AssociationReleaseTimeout = UnionUint32(3600)
	}
	if t.AssociationSetupRetry == nil {
		var v uint32 = 10
		t.AssociationSetupRetry = &v
	}
	t.Heartbeat.PopulateDefaults()
	t.Interface.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.NodeId.PopulateDefaults()
	t.Peer.PopulateDefaults()
	t.Tx.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/heartbeat YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat struct {
	Interval *uint32 `path:"interval" module:"nokia-conf"`
	Retries  *uint32 `path:"retries" module:"nokia-conf"`
	Timeout  *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 60
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 60
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Heartbeat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Interface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat struct {
	NatGroup    *uint32 `path:"nat-group" module:"nokia-conf"`
	WlanGwGroup *uint32 `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) IsYANGGoStruct() {}

// GetNatGroup retrieves the value of the leaf NatGroup from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatGroup is set, it can
// safely use t.GetNatGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) GetNatGroup() uint32 {
	if t == nil || t.NatGroup == nil {
		return 0
	}
	return *t.NatGroup
}

// GetWlanGwGroup retrieves the value of the leaf WlanGwGroup from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WlanGwGroup is set, it can
// safely use t.GetWlanGwGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WlanGwGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) GetWlanGwGroup() uint32 {
	if t == nil || t.WlanGwGroup == nil {
		return 0
	}
	return *t.WlanGwGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/node-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId struct {
	Fqdn         *string   `path:"fqdn" module:"nokia-conf"`
	UseIpAddress YANGEmpty `path:"use-ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetUseIpAddress retrieves the value of the leaf UseIpAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseIpAddress is set, it can
// safely use t.GetUseIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) GetUseIpAddress() YANGEmpty {
	if t == nil || t.UseIpAddress == false {
		return false
	}
	return t.UseIpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_NodeId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/association/tx YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx struct {
	Retries *uint32 `path:"retries" module:"nokia-conf"`
	Timeout *uint32 `path:"timeout" module:"nokia-conf"`
	Ttl     *uint32 `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) IsYANGGoStruct() {}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 3
	}
	return *t.Retries
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 255
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Retries == nil {
		var v uint32 = 3
		t.Retries = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.Ttl == nil {
		var v uint32 = 255
		t.Ttl = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_Association_Tx) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pfcp/up-resiliency YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency struct {
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) IsYANGGoStruct() {}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Pfcp_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pim-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy struct {
	Description *string `path:"description" module:"nokia-conf"`
	Name        *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PimPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy struct {
	AllowSameCircuitIdForDhcp *bool                                                                             `path:"allow-same-circuit-id-for-dhcp" module:"nokia-conf"`
	Cookies                   *bool                                                                             `path:"cookies" module:"nokia-conf"`
	DefaultPapPassword        *string                                                                           `path:"default-pap-password" module:"nokia-conf"`
	DefaultUserName           *string                                                                           `path:"default-user-name" module:"nokia-conf"`
	Description               *string                                                                           `path:"description" module:"nokia-conf"`
	ForcePppMtuGt_1492        *bool                                                                             `path:"force-ppp-mtu-gt-1492" module:"nokia-conf"`
	IpcpSubnetNegotiation     *bool                                                                             `path:"ipcp-subnet-negotiation" module:"nokia-conf"`
	Keepalive                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive              `path:"keepalive" module:"nokia-conf"`
	LcpIgnoreIdentifier       *bool                                                                             `path:"lcp-ignore-identifier" module:"nokia-conf"`
	LcpIgnoreMagicNumbers     *bool                                                                             `path:"lcp-ignore-magic-numbers" module:"nokia-conf"`
	MaxSessionsPerCid         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid      `path:"max-sessions-per-cid" module:"nokia-conf" yangPresence:"true"`
	MaxSessionsPerMac         *uint32                                                                           `path:"max-sessions-per-mac" module:"nokia-conf"`
	Mlppp                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp                  `path:"mlppp" module:"nokia-conf" yangPresence:"true"`
	Name                      *string                                                                           `path:"name" module:"nokia-conf"`
	NcpRenegotiation          E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_NcpRenegotiation      `path:"ncp-renegotiation" module:"nokia-conf"`
	PadoAcName                *string                                                                           `path:"pado-ac-name" module:"nokia-conf"`
	PadoDelay                 *uint32                                                                           `path:"pado-delay" module:"nokia-conf"`
	PppAuthentication         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppAuthentication     `path:"ppp-authentication" module:"nokia-conf"`
	PppChapChallengeLength    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength `path:"ppp-chap-challenge-length" module:"nokia-conf"`
	PppInitialDelay           *bool                                                                             `path:"ppp-initial-delay" module:"nokia-conf"`
	PppMtu                    *uint32                                                                           `path:"ppp-mtu" module:"nokia-conf"`
	PppOptions                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions             `path:"ppp-options" module:"nokia-conf"`
	ReEstablishSession        *bool                                                                             `path:"re-establish-session" module:"nokia-conf"`
	RejectUnconfiguredNcp     *bool                                                                             `path:"reject-unconfigured-ncp" module:"nokia-conf"`
	ReplyOnPadt               *bool                                                                             `path:"reply-on-padt" module:"nokia-conf"`
	SessionTimeout            *uint32                                                                           `path:"session-timeout" module:"nokia-conf"`
	SidAllocation             E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_SidAllocation         `path:"sid-allocation" module:"nokia-conf"`
	UniqueSid                 E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_UniqueSid             `path:"unique-sid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive{}
	return t.Keepalive
}

// GetOrCreateMaxSessionsPerCid retrieves the value of the MaxSessionsPerCid field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetOrCreateMaxSessionsPerCid() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid {
	if t.MaxSessionsPerCid != nil {
		return t.MaxSessionsPerCid
	}
	t.MaxSessionsPerCid = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid{}
	return t.MaxSessionsPerCid
}

// GetOrCreateMlppp retrieves the value of the Mlppp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetOrCreateMlppp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp {
	if t.Mlppp != nil {
		return t.Mlppp
	}
	t.Mlppp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp{}
	return t.Mlppp
}

// GetOrCreatePppChapChallengeLength retrieves the value of the PppChapChallengeLength field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetOrCreatePppChapChallengeLength() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength {
	if t.PppChapChallengeLength != nil {
		return t.PppChapChallengeLength
	}
	t.PppChapChallengeLength = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength{}
	return t.PppChapChallengeLength
}

// GetOrCreatePppOptions retrieves the value of the PppOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetOrCreatePppOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions {
	if t.PppOptions != nil {
		return t.PppOptions
	}
	t.PppOptions = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions{}
	return t.PppOptions
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetKeepalive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetMaxSessionsPerCid returns the value of the MaxSessionsPerCid struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy. If the receiver or the field MaxSessionsPerCid is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetMaxSessionsPerCid() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid {
	if t != nil && t.MaxSessionsPerCid != nil {
		return t.MaxSessionsPerCid
	}
	return nil
}

// GetMlppp returns the value of the Mlppp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy. If the receiver or the field Mlppp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetMlppp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp {
	if t != nil && t.Mlppp != nil {
		return t.Mlppp
	}
	return nil
}

// GetPppChapChallengeLength returns the value of the PppChapChallengeLength struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy. If the receiver or the field PppChapChallengeLength is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPppChapChallengeLength() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength {
	if t != nil && t.PppChapChallengeLength != nil {
		return t.PppChapChallengeLength
	}
	return nil
}

// GetPppOptions returns the value of the PppOptions struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy. If the receiver or the field PppOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPppOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions {
	if t != nil && t.PppOptions != nil {
		return t.PppOptions
	}
	return nil
}

// GetAllowSameCircuitIdForDhcp retrieves the value of the leaf AllowSameCircuitIdForDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSameCircuitIdForDhcp is set, it can
// safely use t.GetAllowSameCircuitIdForDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSameCircuitIdForDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetAllowSameCircuitIdForDhcp() bool {
	if t == nil || t.AllowSameCircuitIdForDhcp == nil {
		return false
	}
	return *t.AllowSameCircuitIdForDhcp
}

// GetCookies retrieves the value of the leaf Cookies from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cookies is set, it can
// safely use t.GetCookies() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cookies == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetCookies() bool {
	if t == nil || t.Cookies == nil {
		return true
	}
	return *t.Cookies
}

// GetDefaultPapPassword retrieves the value of the leaf DefaultPapPassword from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultPapPassword is set, it can
// safely use t.GetDefaultPapPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultPapPassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetDefaultPapPassword() string {
	if t == nil || t.DefaultPapPassword == nil {
		return ""
	}
	return *t.DefaultPapPassword
}

// GetDefaultUserName retrieves the value of the leaf DefaultUserName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultUserName is set, it can
// safely use t.GetDefaultUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetDefaultUserName() string {
	if t == nil || t.DefaultUserName == nil {
		return ""
	}
	return *t.DefaultUserName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetForcePppMtuGt_1492 retrieves the value of the leaf ForcePppMtuGt_1492 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForcePppMtuGt_1492 is set, it can
// safely use t.GetForcePppMtuGt_1492() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForcePppMtuGt_1492 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetForcePppMtuGt_1492() bool {
	if t == nil || t.ForcePppMtuGt_1492 == nil {
		return false
	}
	return *t.ForcePppMtuGt_1492
}

// GetIpcpSubnetNegotiation retrieves the value of the leaf IpcpSubnetNegotiation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpcpSubnetNegotiation is set, it can
// safely use t.GetIpcpSubnetNegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpcpSubnetNegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetIpcpSubnetNegotiation() bool {
	if t == nil || t.IpcpSubnetNegotiation == nil {
		return false
	}
	return *t.IpcpSubnetNegotiation
}

// GetLcpIgnoreIdentifier retrieves the value of the leaf LcpIgnoreIdentifier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreIdentifier is set, it can
// safely use t.GetLcpIgnoreIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetLcpIgnoreIdentifier() bool {
	if t == nil || t.LcpIgnoreIdentifier == nil {
		return false
	}
	return *t.LcpIgnoreIdentifier
}

// GetLcpIgnoreMagicNumbers retrieves the value of the leaf LcpIgnoreMagicNumbers from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LcpIgnoreMagicNumbers is set, it can
// safely use t.GetLcpIgnoreMagicNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LcpIgnoreMagicNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetLcpIgnoreMagicNumbers() bool {
	if t == nil || t.LcpIgnoreMagicNumbers == nil {
		return false
	}
	return *t.LcpIgnoreMagicNumbers
}

// GetMaxSessionsPerMac retrieves the value of the leaf MaxSessionsPerMac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessionsPerMac is set, it can
// safely use t.GetMaxSessionsPerMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessionsPerMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetMaxSessionsPerMac() uint32 {
	if t == nil || t.MaxSessionsPerMac == nil {
		return 1
	}
	return *t.MaxSessionsPerMac
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNcpRenegotiation retrieves the value of the leaf NcpRenegotiation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NcpRenegotiation is set, it can
// safely use t.GetNcpRenegotiation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NcpRenegotiation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetNcpRenegotiation() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_NcpRenegotiation {
	if t == nil || t.NcpRenegotiation == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_NcpRenegotiation_terminate_session
	}
	return t.NcpRenegotiation
}

// GetPadoAcName retrieves the value of the leaf PadoAcName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadoAcName is set, it can
// safely use t.GetPadoAcName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadoAcName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPadoAcName() string {
	if t == nil || t.PadoAcName == nil {
		return ""
	}
	return *t.PadoAcName
}

// GetPadoDelay retrieves the value of the leaf PadoDelay from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PadoDelay is set, it can
// safely use t.GetPadoDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PadoDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPadoDelay() uint32 {
	if t == nil || t.PadoDelay == nil {
		return 0
	}
	return *t.PadoDelay
}

// GetPppAuthentication retrieves the value of the leaf PppAuthentication from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppAuthentication is set, it can
// safely use t.GetPppAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPppAuthentication() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppAuthentication {
	if t == nil || t.PppAuthentication == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppAuthentication_pref_chap
	}
	return t.PppAuthentication
}

// GetPppInitialDelay retrieves the value of the leaf PppInitialDelay from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppInitialDelay is set, it can
// safely use t.GetPppInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppInitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPppInitialDelay() bool {
	if t == nil || t.PppInitialDelay == nil {
		return false
	}
	return *t.PppInitialDelay
}

// GetPppMtu retrieves the value of the leaf PppMtu from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppMtu is set, it can
// safely use t.GetPppMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetPppMtu() uint32 {
	if t == nil || t.PppMtu == nil {
		return 0
	}
	return *t.PppMtu
}

// GetReEstablishSession retrieves the value of the leaf ReEstablishSession from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReEstablishSession is set, it can
// safely use t.GetReEstablishSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReEstablishSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetReEstablishSession() bool {
	if t == nil || t.ReEstablishSession == nil {
		return false
	}
	return *t.ReEstablishSession
}

// GetRejectUnconfiguredNcp retrieves the value of the leaf RejectUnconfiguredNcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RejectUnconfiguredNcp is set, it can
// safely use t.GetRejectUnconfiguredNcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RejectUnconfiguredNcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetRejectUnconfiguredNcp() bool {
	if t == nil || t.RejectUnconfiguredNcp == nil {
		return false
	}
	return *t.RejectUnconfiguredNcp
}

// GetReplyOnPadt retrieves the value of the leaf ReplyOnPadt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplyOnPadt is set, it can
// safely use t.GetReplyOnPadt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplyOnPadt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetReplyOnPadt() bool {
	if t == nil || t.ReplyOnPadt == nil {
		return false
	}
	return *t.ReplyOnPadt
}

// GetSessionTimeout retrieves the value of the leaf SessionTimeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionTimeout is set, it can
// safely use t.GetSessionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetSessionTimeout() uint32 {
	if t == nil || t.SessionTimeout == nil {
		return 0
	}
	return *t.SessionTimeout
}

// GetSidAllocation retrieves the value of the leaf SidAllocation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SidAllocation is set, it can
// safely use t.GetSidAllocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SidAllocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetSidAllocation() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_SidAllocation {
	if t == nil || t.SidAllocation == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_SidAllocation_sequential
	}
	return t.SidAllocation
}

// GetUniqueSid retrieves the value of the leaf UniqueSid from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UniqueSid is set, it can
// safely use t.GetUniqueSid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UniqueSid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) GetUniqueSid() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_UniqueSid {
	if t == nil || t.UniqueSid == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_UniqueSid_per_sap_mac
	}
	return t.UniqueSid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowSameCircuitIdForDhcp == nil {
		var v bool = false
		t.AllowSameCircuitIdForDhcp = &v
	}
	if t.Cookies == nil {
		var v bool = true
		t.Cookies = &v
	}
	if t.ForcePppMtuGt_1492 == nil {
		var v bool = false
		t.ForcePppMtuGt_1492 = &v
	}
	if t.IpcpSubnetNegotiation == nil {
		var v bool = false
		t.IpcpSubnetNegotiation = &v
	}
	if t.LcpIgnoreIdentifier == nil {
		var v bool = false
		t.LcpIgnoreIdentifier = &v
	}
	if t.LcpIgnoreMagicNumbers == nil {
		var v bool = false
		t.LcpIgnoreMagicNumbers = &v
	}
	if t.MaxSessionsPerMac == nil {
		var v uint32 = 1
		t.MaxSessionsPerMac = &v
	}
	if t.NcpRenegotiation == 0 {
		t.NcpRenegotiation = NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_NcpRenegotiation_terminate_session
	}
	if t.PppAuthentication == 0 {
		t.PppAuthentication = NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppAuthentication_pref_chap
	}
	if t.PppInitialDelay == nil {
		var v bool = false
		t.PppInitialDelay = &v
	}
	if t.ReEstablishSession == nil {
		var v bool = false
		t.ReEstablishSession = &v
	}
	if t.RejectUnconfiguredNcp == nil {
		var v bool = false
		t.RejectUnconfiguredNcp = &v
	}
	if t.ReplyOnPadt == nil {
		var v bool = false
		t.ReplyOnPadt = &v
	}
	if t.SidAllocation == 0 {
		t.SidAllocation = NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_SidAllocation_sequential
	}
	if t.UniqueSid == 0 {
		t.UniqueSid = NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_UniqueSid_per_sap_mac
	}
	t.Keepalive.PopulateDefaults()
	t.MaxSessionsPerCid.PopulateDefaults()
	t.Mlppp.PopulateDefaults()
	t.PppChapChallengeLength.PopulateDefaults()
	t.PppOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive struct {
	HoldUpMultiplier *uint32 `path:"hold-up-multiplier" module:"nokia-conf"`
	Interval         *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) IsYANGGoStruct() {}

// GetHoldUpMultiplier retrieves the value of the leaf HoldUpMultiplier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldUpMultiplier is set, it can
// safely use t.GetHoldUpMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldUpMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) GetHoldUpMultiplier() uint32 {
	if t == nil || t.HoldUpMultiplier == nil {
		return 3
	}
	return *t.HoldUpMultiplier
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldUpMultiplier == nil {
		var v uint32 = 3
		t.HoldUpMultiplier = &v
	}
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/max-sessions-per-cid YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid struct {
	AllowSessionsWithoutCid *bool   `path:"allow-sessions-without-cid" module:"nokia-conf"`
	Limit                   *uint32 `path:"limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) IsYANGGoStruct() {
}

// GetAllowSessionsWithoutCid retrieves the value of the leaf AllowSessionsWithoutCid from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSessionsWithoutCid is set, it can
// safely use t.GetAllowSessionsWithoutCid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSessionsWithoutCid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) GetAllowSessionsWithoutCid() bool {
	if t == nil || t.AllowSessionsWithoutCid == nil {
		return false
	}
	return *t.AllowSessionsWithoutCid
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) GetLimit() uint32 {
	if t == nil || t.Limit == nil {
		return 0
	}
	return *t.Limit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowSessionsWithoutCid == nil {
		var v bool = false
		t.AllowSessionsWithoutCid = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_MaxSessionsPerCid) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/mlppp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp struct {
	AcceptMrru           *bool                                                                     `path:"accept-mrru" module:"nokia-conf"`
	Endpoint             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint `path:"endpoint" module:"nokia-conf"`
	ShortSequenceNumbers *bool                                                                     `path:"short-sequence-numbers" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) IsYANGGoStruct() {}

// GetOrCreateEndpoint retrieves the value of the Endpoint field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) GetOrCreateEndpoint() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint {
	if t.Endpoint != nil {
		return t.Endpoint
	}
	t.Endpoint = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint{}
	return t.Endpoint
}

// GetEndpoint returns the value of the Endpoint struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp. If the receiver or the field Endpoint is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) GetEndpoint() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint {
	if t != nil && t.Endpoint != nil {
		return t.Endpoint
	}
	return nil
}

// GetAcceptMrru retrieves the value of the leaf AcceptMrru from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptMrru is set, it can
// safely use t.GetAcceptMrru() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptMrru == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) GetAcceptMrru() bool {
	if t == nil || t.AcceptMrru == nil {
		return false
	}
	return *t.AcceptMrru
}

// GetShortSequenceNumbers retrieves the value of the leaf ShortSequenceNumbers from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShortSequenceNumbers is set, it can
// safely use t.GetShortSequenceNumbers() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShortSequenceNumbers == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) GetShortSequenceNumbers() bool {
	if t == nil || t.ShortSequenceNumbers == nil {
		return false
	}
	return *t.ShortSequenceNumbers
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcceptMrru == nil {
		var v bool = false
		t.AcceptMrru = &v
	}
	if t.ShortSequenceNumbers == nil {
		var v bool = false
		t.ShortSequenceNumbers = &v
	}
	t.Endpoint.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/mlppp/endpoint YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint struct {
	Ip  NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint_Ip_Union  `path:"ip" module:"nokia-conf"`
	Mac NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint_Mac_Union `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) IsYANGGoStruct() {}

// GetIp retrieves the value of the leaf Ip from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ip is set, it can
// safely use t.GetIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ip == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) GetIp() NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint_Ip_Union {
	if t == nil || t.Ip == nil {
		return nil
	}
	return t.Ip
}

// GetMac retrieves the value of the leaf Mac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mac is set, it can
// safely use t.GetMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) GetMac() NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint_Mac_Union {
	if t == nil || t.Mac == nil {
		return nil
	}
	return t.Mac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_Mlppp_Endpoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/ppp-chap-challenge-length YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength struct {
	Max *uint32 `path:"max" module:"nokia-conf"`
	Min *uint32 `path:"min" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) IsYANGGoStruct() {
}

// GetMax retrieves the value of the leaf Max from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Max is set, it can
// safely use t.GetMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Max == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) GetMax() uint32 {
	if t == nil || t.Max == nil {
		return 64
	}
	return *t.Max
}

// GetMin retrieves the value of the leaf Min from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Min is set, it can
// safely use t.GetMin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Min == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) GetMin() uint32 {
	if t == nil || t.Min == nil {
		return 32
	}
	return *t.Min
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Max == nil {
		var v uint32 = 64
		t.Max = &v
	}
	if t.Min == nil {
		var v uint32 = 32
		t.Min = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppChapChallengeLength) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/ppp-options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions struct {
	CustomOption map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption `path:"custom-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key represents the key for list CustomOption of element /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/ppp-options.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key struct {
	Protocol     NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union     `path:"protocol"`
	OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union `path:"option-number"`
}

// NewCustomOption creates a new entry in the CustomOption list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) NewCustomOption(Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union, OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomOption == nil {
		t.CustomOption = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key{
		Protocol:     Protocol,
		OptionNumber: OptionNumber,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CustomOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CustomOption", key)
	}

	t.CustomOption[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption{
		Protocol:     Protocol,
		OptionNumber: OptionNumber,
	}

	return t.CustomOption[key], nil
}

// RenameCustomOption renames an entry in the list CustomOption within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) RenameCustomOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key) error {
	if _, ok := t.CustomOption[newK]; ok {
		return fmt.Errorf("key %v already exists in CustomOption", newK)
	}

	e, ok := t.CustomOption[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CustomOption", oldK)
	}
	e.Protocol = newK.Protocol
	e.OptionNumber = newK.OptionNumber

	t.CustomOption[newK] = e
	delete(t.CustomOption, oldK)
	return nil
}

// GetOrCreateCustomOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) GetOrCreateCustomOption(Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union, OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key{
		Protocol:     Protocol,
		OptionNumber: OptionNumber,
	}

	if v, ok := t.CustomOption[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCustomOption(Protocol, OptionNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCustomOption got unexpected error: %v", err))
	}
	return v
}

// GetCustomOption retrieves the value with the specified key from
// the CustomOption map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) GetCustomOption(Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union, OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key{
		Protocol:     Protocol,
		OptionNumber: OptionNumber,
	}

	if lm, ok := t.CustomOption[key]; ok {
		return lm
	}
	return nil
}

// DeleteCustomOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) DeleteCustomOption(Protocol NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union, OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key{
		Protocol:     Protocol,
		OptionNumber: OptionNumber,
	}

	delete(t.CustomOption, key)
}

// AppendCustomOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption struct to the
// list CustomOption of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) AppendCustomOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) error {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key{
		Protocol:     v.Protocol,
		OptionNumber: v.OptionNumber,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CustomOption == nil {
		t.CustomOption = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption)
	}

	if _, ok := t.CustomOption[key]; ok {
		return fmt.Errorf("duplicate key for list CustomOption %v", key)
	}

	t.CustomOption[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CustomOption {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption represents the /nokia-conf/configure/groups/group/subscriber-mgmt/ppp-policy/ppp-options/custom-option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption struct {
	Address      *string                                                                                              `path:"address" module:"nokia-conf"`
	AsciiString  *string                                                                                              `path:"ascii-string" module:"nokia-conf"`
	Empty        YANGEmpty                                                                                            `path:"empty" module:"nokia-conf"`
	HexString    *string                                                                                              `path:"hex-string" module:"nokia-conf"`
	OptionNumber NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union `path:"option-number" module:"nokia-conf"`
	Protocol     NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union     `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetOptionNumber retrieves the value of the leaf OptionNumber from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionNumber is set, it can
// safely use t.GetOptionNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetOptionNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_OptionNumber_Union {
	if t == nil || t.OptionNumber == nil {
		return nil
	}
	return t.OptionNumber
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) GetProtocol() NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"option-number": t.OptionNumber,
		"protocol":      t.Protocol,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppPolicy_PppOptions_CustomOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pppoe-client-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy struct {
	Description    *string                                                                           `path:"description" module:"nokia-conf"`
	Keepalive      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive      `path:"keepalive" module:"nokia-conf"`
	Mru            *uint32                                                                           `path:"mru" module:"nokia-conf"`
	Mtu            *uint32                                                                           `path:"mtu" module:"nokia-conf"`
	Name           *string                                                                           `path:"name" module:"nokia-conf"`
	PythonPolicy   *string                                                                           `path:"python-policy" module:"nokia-conf"`
	RestartBackoff *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff `path:"restart-backoff" module:"nokia-conf"`
	Stack          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack          `path:"stack" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) IsYANGGoStruct() {}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetOrCreateKeepalive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive{}
	return t.Keepalive
}

// GetOrCreateRestartBackoff retrieves the value of the RestartBackoff field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetOrCreateRestartBackoff() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff {
	if t.RestartBackoff != nil {
		return t.RestartBackoff
	}
	t.RestartBackoff = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff{}
	return t.RestartBackoff
}

// GetOrCreateStack retrieves the value of the Stack field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetOrCreateStack() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack {
	if t.Stack != nil {
		return t.Stack
	}
	t.Stack = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack{}
	return t.Stack
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetKeepalive() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetRestartBackoff returns the value of the RestartBackoff struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy. If the receiver or the field RestartBackoff is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetRestartBackoff() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff {
	if t != nil && t.RestartBackoff != nil {
		return t.RestartBackoff
	}
	return nil
}

// GetStack returns the value of the Stack struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy. If the receiver or the field Stack is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetStack() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack {
	if t != nil && t.Stack != nil {
		return t.Stack
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMru retrieves the value of the leaf Mru from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mru is set, it can
// safely use t.GetMru() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mru == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetMru() uint32 {
	if t == nil || t.Mru == nil {
		return 1492
	}
	return *t.Mru
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1492
	}
	return *t.Mtu
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPythonPolicy retrieves the value of the leaf PythonPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonPolicy is set, it can
// safely use t.GetPythonPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) GetPythonPolicy() string {
	if t == nil || t.PythonPolicy == nil {
		return ""
	}
	return *t.PythonPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mru == nil {
		var v uint32 = 1492
		t.Mru = &v
	}
	if t.Mtu == nil {
		var v uint32 = 1492
		t.Mtu = &v
	}
	t.Keepalive.PopulateDefaults()
	t.RestartBackoff.PopulateDefaults()
	t.Stack.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pppoe-client-policy/keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive struct {
	HoldUpMultiplier *uint32 `path:"hold-up-multiplier" module:"nokia-conf"`
	Interval         *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) IsYANGGoStruct() {
}

// GetHoldUpMultiplier retrieves the value of the leaf HoldUpMultiplier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldUpMultiplier is set, it can
// safely use t.GetHoldUpMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldUpMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) GetHoldUpMultiplier() uint32 {
	if t == nil || t.HoldUpMultiplier == nil {
		return 3
	}
	return *t.HoldUpMultiplier
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldUpMultiplier == nil {
		var v uint32 = 3
		t.HoldUpMultiplier = &v
	}
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pppoe-client-policy/restart-backoff YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff struct {
	InitialTime *uint32 `path:"initial-time" module:"nokia-conf"`
	MaxTime     *uint32 `path:"max-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) IsYANGGoStruct() {
}

// GetInitialTime retrieves the value of the leaf InitialTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialTime is set, it can
// safely use t.GetInitialTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) GetInitialTime() uint32 {
	if t == nil || t.InitialTime == nil {
		return 30
	}
	return *t.InitialTime
}

// GetMaxTime retrieves the value of the leaf MaxTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTime is set, it can
// safely use t.GetMaxTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) GetMaxTime() uint32 {
	if t == nil || t.MaxTime == nil {
		return 600
	}
	return *t.MaxTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialTime == nil {
		var v uint32 = 30
		t.InitialTime = &v
	}
	if t.MaxTime == nil {
		var v uint32 = 600
		t.MaxTime = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_RestartBackoff) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack represents the /nokia-conf/configure/groups/group/subscriber-mgmt/pppoe-client-policy/stack YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack struct {
	Ipv4      *bool `path:"ipv4" module:"nokia-conf"`
	Ipv6Slaac *bool `path:"ipv6-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) IsYANGGoStruct() {}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) GetIpv4() bool {
	if t == nil || t.Ipv4 == nil {
		return true
	}
	return *t.Ipv4
}

// GetIpv6Slaac retrieves the value of the leaf Ipv6Slaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Slaac is set, it can
// safely use t.GetIpv6Slaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Slaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) GetIpv6Slaac() bool {
	if t == nil || t.Ipv6Slaac == nil {
		return false
	}
	return *t.Ipv6Slaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4 == nil {
		var v bool = true
		t.Ipv4 = &v
	}
	if t.Ipv6Slaac == nil {
		var v bool = false
		t.Ipv6Slaac = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_PppoeClientPolicy_Stack) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy struct {
	AcctTunnelConnectionFmt *string                                                                                         `path:"acct-tunnel-connection-fmt" module:"nokia-conf"`
	CustomRecord            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord            `path:"custom-record" module:"nokia-conf" yangPresence:"true"`
	DelayStartTime          *uint32                                                                                         `path:"delay-start-time" module:"nokia-conf"`
	Description             *string                                                                                         `path:"description" module:"nokia-conf"`
	HostAccounting          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting          `path:"host-accounting" module:"nokia-conf"`
	IncludeRadiusAttribute  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute  `path:"include-radius-attribute" module:"nokia-conf"`
	McsInterval             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval             `path:"mcs-interval" module:"nokia-conf"`
	Name                    *string                                                                                         `path:"name" module:"nokia-conf"`
	QueueInstanceAccounting *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting `path:"queue-instance-accounting" module:"nokia-conf"`
	RadiusServerPolicy      *string                                                                                         `path:"radius-server-policy" module:"nokia-conf"`
	SessionAccounting       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting       `path:"session-accounting" module:"nokia-conf"`
	SessionIdFormat         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionIdFormat        `path:"session-id-format" module:"nokia-conf"`
	TriggeredUpdates        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates        `path:"triggered-updates" module:"nokia-conf"`
	UpdateInterval          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval          `path:"update-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) IsYANGGoStruct() {}

// GetOrCreateCustomRecord retrieves the value of the CustomRecord field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateCustomRecord() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord {
	if t.CustomRecord != nil {
		return t.CustomRecord
	}
	t.CustomRecord = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord{}
	return t.CustomRecord
}

// GetOrCreateHostAccounting retrieves the value of the HostAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateHostAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting {
	if t.HostAccounting != nil {
		return t.HostAccounting
	}
	t.HostAccounting = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting{}
	return t.HostAccounting
}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetOrCreateMcsInterval retrieves the value of the McsInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateMcsInterval() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval {
	if t.McsInterval != nil {
		return t.McsInterval
	}
	t.McsInterval = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval{}
	return t.McsInterval
}

// GetOrCreateQueueInstanceAccounting retrieves the value of the QueueInstanceAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateQueueInstanceAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting {
	if t.QueueInstanceAccounting != nil {
		return t.QueueInstanceAccounting
	}
	t.QueueInstanceAccounting = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting{}
	return t.QueueInstanceAccounting
}

// GetOrCreateSessionAccounting retrieves the value of the SessionAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateSessionAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting {
	if t.SessionAccounting != nil {
		return t.SessionAccounting
	}
	t.SessionAccounting = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting{}
	return t.SessionAccounting
}

// GetOrCreateTriggeredUpdates retrieves the value of the TriggeredUpdates field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateTriggeredUpdates() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates {
	if t.TriggeredUpdates != nil {
		return t.TriggeredUpdates
	}
	t.TriggeredUpdates = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates{}
	return t.TriggeredUpdates
}

// GetOrCreateUpdateInterval retrieves the value of the UpdateInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetOrCreateUpdateInterval() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval {
	if t.UpdateInterval != nil {
		return t.UpdateInterval
	}
	t.UpdateInterval = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval{}
	return t.UpdateInterval
}

// GetCustomRecord returns the value of the CustomRecord struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field CustomRecord is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetCustomRecord() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord {
	if t != nil && t.CustomRecord != nil {
		return t.CustomRecord
	}
	return nil
}

// GetHostAccounting returns the value of the HostAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field HostAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetHostAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting {
	if t != nil && t.HostAccounting != nil {
		return t.HostAccounting
	}
	return nil
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetMcsInterval returns the value of the McsInterval struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field McsInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetMcsInterval() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval {
	if t != nil && t.McsInterval != nil {
		return t.McsInterval
	}
	return nil
}

// GetQueueInstanceAccounting returns the value of the QueueInstanceAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field QueueInstanceAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetQueueInstanceAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting {
	if t != nil && t.QueueInstanceAccounting != nil {
		return t.QueueInstanceAccounting
	}
	return nil
}

// GetSessionAccounting returns the value of the SessionAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field SessionAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetSessionAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting {
	if t != nil && t.SessionAccounting != nil {
		return t.SessionAccounting
	}
	return nil
}

// GetTriggeredUpdates returns the value of the TriggeredUpdates struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field TriggeredUpdates is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetTriggeredUpdates() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates {
	if t != nil && t.TriggeredUpdates != nil {
		return t.TriggeredUpdates
	}
	return nil
}

// GetUpdateInterval returns the value of the UpdateInterval struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy. If the receiver or the field UpdateInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetUpdateInterval() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval {
	if t != nil && t.UpdateInterval != nil {
		return t.UpdateInterval
	}
	return nil
}

// GetAcctTunnelConnectionFmt retrieves the value of the leaf AcctTunnelConnectionFmt from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTunnelConnectionFmt is set, it can
// safely use t.GetAcctTunnelConnectionFmt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTunnelConnectionFmt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetAcctTunnelConnectionFmt() string {
	if t == nil || t.AcctTunnelConnectionFmt == nil {
		return "%n"
	}
	return *t.AcctTunnelConnectionFmt
}

// GetDelayStartTime retrieves the value of the leaf DelayStartTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayStartTime is set, it can
// safely use t.GetDelayStartTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayStartTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetDelayStartTime() uint32 {
	if t == nil || t.DelayStartTime == nil {
		return 0
	}
	return *t.DelayStartTime
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// GetSessionIdFormat retrieves the value of the leaf SessionIdFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionIdFormat is set, it can
// safely use t.GetSessionIdFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionIdFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) GetSessionIdFormat() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionIdFormat {
	if t == nil || t.SessionIdFormat == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionIdFormat_description
	}
	return t.SessionIdFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctTunnelConnectionFmt == nil {
		var v string = "%n"
		t.AcctTunnelConnectionFmt = &v
	}
	if t.SessionIdFormat == 0 {
		t.SessionIdFormat = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionIdFormat_description
	}
	t.CustomRecord.PopulateDefaults()
	t.HostAccounting.PopulateDefaults()
	t.IncludeRadiusAttribute.PopulateDefaults()
	t.McsInterval.PopulateDefaults()
	t.QueueInstanceAccounting.PopulateDefaults()
	t.SessionAccounting.PopulateDefaults()
	t.TriggeredUpdates.PopulateDefaults()
	t.UpdateInterval.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord struct {
	OverrideCounter    map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter `path:"override-counter" module:"nokia-conf"`
	Queue              map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue                     `path:"queue" module:"nokia-conf"`
	RefOverrideCounter *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter                                                                                                               `path:"ref-override-counter" module:"nokia-conf"`
	RefQueue           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue                                                                                                                         `path:"ref-queue" module:"nokia-conf"`
	SignificantChange  *uint32                                                                                                                                                                                                               `path:"significant-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) IsYANGGoStruct() {
}

// NewOverrideCounter creates a new entry in the OverrideCounter list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) NewOverrideCounter(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OverrideCounter == nil {
		t.OverrideCounter = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.OverrideCounter[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list OverrideCounter", key)
	}

	t.OverrideCounter[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter{
		Id: Id,
	}

	return t.OverrideCounter[key], nil
}

// RenameOverrideCounter renames an entry in the list OverrideCounter within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) RenameOverrideCounter(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union) error {
	if _, ok := t.OverrideCounter[newK]; ok {
		return fmt.Errorf("key %v already exists in OverrideCounter", newK)
	}

	e, ok := t.OverrideCounter[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in OverrideCounter", oldK)
	}
	e.Id = newK

	t.OverrideCounter[newK] = e
	delete(t.OverrideCounter, oldK)
	return nil
}

// GetOrCreateOverrideCounter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetOrCreateOverrideCounter(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter {

	key := Id

	if v, ok := t.OverrideCounter[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOverrideCounter(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOverrideCounter got unexpected error: %v", err))
	}
	return v
}

// GetOverrideCounter retrieves the value with the specified key from
// the OverrideCounter map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetOverrideCounter(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.OverrideCounter[key]; ok {
		return lm
	}
	return nil
}

// DeleteOverrideCounter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) DeleteOverrideCounter(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union) {
	key := Id

	delete(t.OverrideCounter, key)
}

// AppendOverrideCounter appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter struct to the
// list OverrideCounter of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) AppendOverrideCounter(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.OverrideCounter == nil {
		t.OverrideCounter = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter)
	}

	if _, ok := t.OverrideCounter[key]; ok {
		return fmt.Errorf("duplicate key for list OverrideCounter %v", key)
	}

	t.OverrideCounter[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) NewQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue{
		Id: Id,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Id = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetOrCreateQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue {

	key := Id

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) DeleteQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union) {
	key := Id

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) AppendQueue(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetOrCreateRefOverrideCounter retrieves the value of the RefOverrideCounter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetOrCreateRefOverrideCounter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter {
	if t.RefOverrideCounter != nil {
		return t.RefOverrideCounter
	}
	t.RefOverrideCounter = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter{}
	return t.RefOverrideCounter
}

// GetOrCreateRefQueue retrieves the value of the RefQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetOrCreateRefQueue() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue {
	if t.RefQueue != nil {
		return t.RefQueue
	}
	t.RefQueue = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue{}
	return t.RefQueue
}

// GetRefOverrideCounter returns the value of the RefOverrideCounter struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the receiver or the field RefOverrideCounter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetRefOverrideCounter() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter {
	if t != nil && t.RefOverrideCounter != nil {
		return t.RefOverrideCounter
	}
	return nil
}

// GetRefQueue returns the value of the RefQueue struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord. If the receiver or the field RefQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetRefQueue() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue {
	if t != nil && t.RefQueue != nil {
		return t.RefQueue
	}
	return nil
}

// GetSignificantChange retrieves the value of the leaf SignificantChange from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SignificantChange is set, it can
// safely use t.GetSignificantChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SignificantChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) GetSignificantChange() uint32 {
	if t == nil || t.SignificantChange == nil {
		return 0
	}
	return *t.SignificantChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RefOverrideCounter.PopulateDefaults()
	t.RefQueue.PopulateDefaults()
	for _, e := range t.OverrideCounter {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/override-counter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter struct {
	ECounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters `path:"e-counters" module:"nokia-conf"`
	ICounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters `path:"i-counters" module:"nokia-conf"`
	Id        NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union   `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) IsYANGGoStruct() {
}

// GetOrCreateECounters retrieves the value of the ECounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) GetOrCreateECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters {
	if t.ECounters != nil {
		return t.ECounters
	}
	t.ECounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters{}
	return t.ECounters
}

// GetOrCreateICounters retrieves the value of the ICounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) GetOrCreateICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters {
	if t.ICounters != nil {
		return t.ICounters
	}
	t.ICounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters{}
	return t.ICounters
}

// GetECounters returns the value of the ECounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter. If the receiver or the field ECounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) GetECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters {
	if t != nil && t.ECounters != nil {
		return t.ECounters
	}
	return nil
}

// GetICounters returns the value of the ICounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter. If the receiver or the field ICounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) GetICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters {
	if t != nil && t.ICounters != nil {
		return t.ICounters
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ECounters.PopulateDefaults()
	t.ICounters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/override-counter/e-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters struct {
	InProfileOctetsDiscardedCount   *bool `path:"in-profile-octets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsDiscardedCount  *bool `path:"in-profile-packets-discarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	OutProfileOctetsDiscardedCount  *bool `path:"out-profile-octets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsDiscardedCount *bool `path:"out-profile-packets-discarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) IsYANGGoStruct() {
}

// GetInProfileOctetsDiscardedCount retrieves the value of the leaf InProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsDiscardedCount is set, it can
// safely use t.GetInProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetInProfileOctetsDiscardedCount() bool {
	if t == nil || t.InProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.InProfileOctetsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsDiscardedCount retrieves the value of the leaf InProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsDiscardedCount is set, it can
// safely use t.GetInProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetInProfilePacketsDiscardedCount() bool {
	if t == nil || t.InProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.InProfilePacketsDiscardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetOutProfileOctetsDiscardedCount retrieves the value of the leaf OutProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsDiscardedCount is set, it can
// safely use t.GetOutProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetOutProfileOctetsDiscardedCount() bool {
	if t == nil || t.OutProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsDiscardedCount retrieves the value of the leaf OutProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsDiscardedCount is set, it can
// safely use t.GetOutProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetOutProfilePacketsDiscardedCount() bool {
	if t == nil || t.OutProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsDiscardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.InProfileOctetsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.InProfilePacketsDiscardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.OutProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.OutProfileOctetsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.OutProfilePacketsDiscardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ECounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/override-counter/i-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters struct {
	AllOctetsOfferedCount           *bool `path:"all-octets-offered-count" module:"nokia-conf"`
	AllPacketsOfferedCount          *bool `path:"all-packets-offered-count" module:"nokia-conf"`
	HighOctetsDiscardedCount        *bool `path:"high-octets-discarded-count" module:"nokia-conf"`
	HighPacketsDiscardedCount       *bool `path:"high-packets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	LowOctetsDiscardedCount         *bool `path:"low-octets-discarded-count" module:"nokia-conf"`
	LowPacketsDiscardedCount        *bool `path:"low-packets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) IsYANGGoStruct() {
}

// GetAllOctetsOfferedCount retrieves the value of the leaf AllOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOctetsOfferedCount is set, it can
// safely use t.GetAllOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetAllOctetsOfferedCount() bool {
	if t == nil || t.AllOctetsOfferedCount == nil {
		return false
	}
	return *t.AllOctetsOfferedCount
}

// GetAllPacketsOfferedCount retrieves the value of the leaf AllPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllPacketsOfferedCount is set, it can
// safely use t.GetAllPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetAllPacketsOfferedCount() bool {
	if t == nil || t.AllPacketsOfferedCount == nil {
		return false
	}
	return *t.AllPacketsOfferedCount
}

// GetHighOctetsDiscardedCount retrieves the value of the leaf HighOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsDiscardedCount is set, it can
// safely use t.GetHighOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetHighOctetsDiscardedCount() bool {
	if t == nil || t.HighOctetsDiscardedCount == nil {
		return false
	}
	return *t.HighOctetsDiscardedCount
}

// GetHighPacketsDiscardedCount retrieves the value of the leaf HighPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsDiscardedCount is set, it can
// safely use t.GetHighPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetHighPacketsDiscardedCount() bool {
	if t == nil || t.HighPacketsDiscardedCount == nil {
		return false
	}
	return *t.HighPacketsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetLowOctetsDiscardedCount retrieves the value of the leaf LowOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsDiscardedCount is set, it can
// safely use t.GetLowOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetLowOctetsDiscardedCount() bool {
	if t == nil || t.LowOctetsDiscardedCount == nil {
		return false
	}
	return *t.LowOctetsDiscardedCount
}

// GetLowPacketsDiscardedCount retrieves the value of the leaf LowPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsDiscardedCount is set, it can
// safely use t.GetLowPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetLowPacketsDiscardedCount() bool {
	if t == nil || t.LowPacketsDiscardedCount == nil {
		return false
	}
	return *t.LowPacketsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllOctetsOfferedCount == nil {
		var v bool = false
		t.AllOctetsOfferedCount = &v
	}
	if t.AllPacketsOfferedCount == nil {
		var v bool = false
		t.AllPacketsOfferedCount = &v
	}
	if t.HighOctetsDiscardedCount == nil {
		var v bool = false
		t.HighOctetsDiscardedCount = &v
	}
	if t.HighPacketsDiscardedCount == nil {
		var v bool = false
		t.HighPacketsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.LowOctetsDiscardedCount == nil {
		var v bool = false
		t.LowOctetsDiscardedCount = &v
	}
	if t.LowPacketsDiscardedCount == nil {
		var v bool = false
		t.LowPacketsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_OverrideCounter_ICounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue struct {
	ECounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters `path:"e-counters" module:"nokia-conf"`
	ICounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters `path:"i-counters" module:"nokia-conf"`
	Id        NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union   `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) IsYANGGoStruct() {
}

// GetOrCreateECounters retrieves the value of the ECounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) GetOrCreateECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters {
	if t.ECounters != nil {
		return t.ECounters
	}
	t.ECounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters{}
	return t.ECounters
}

// GetOrCreateICounters retrieves the value of the ICounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) GetOrCreateICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters {
	if t.ICounters != nil {
		return t.ICounters
	}
	t.ICounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters{}
	return t.ICounters
}

// GetECounters returns the value of the ECounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue. If the receiver or the field ECounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) GetECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters {
	if t != nil && t.ECounters != nil {
		return t.ECounters
	}
	return nil
}

// GetICounters returns the value of the ICounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue. If the receiver or the field ICounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) GetICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters {
	if t != nil && t.ICounters != nil {
		return t.ICounters
	}
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ECounters.PopulateDefaults()
	t.ICounters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/queue/e-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters struct {
	InProfileOctetsDiscardedCount   *bool `path:"in-profile-octets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsDiscardedCount  *bool `path:"in-profile-packets-discarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	OutProfileOctetsDiscardedCount  *bool `path:"out-profile-octets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsDiscardedCount *bool `path:"out-profile-packets-discarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) IsYANGGoStruct() {
}

// GetInProfileOctetsDiscardedCount retrieves the value of the leaf InProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsDiscardedCount is set, it can
// safely use t.GetInProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetInProfileOctetsDiscardedCount() bool {
	if t == nil || t.InProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.InProfileOctetsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsDiscardedCount retrieves the value of the leaf InProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsDiscardedCount is set, it can
// safely use t.GetInProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetInProfilePacketsDiscardedCount() bool {
	if t == nil || t.InProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.InProfilePacketsDiscardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetOutProfileOctetsDiscardedCount retrieves the value of the leaf OutProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsDiscardedCount is set, it can
// safely use t.GetOutProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetOutProfileOctetsDiscardedCount() bool {
	if t == nil || t.OutProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsDiscardedCount retrieves the value of the leaf OutProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsDiscardedCount is set, it can
// safely use t.GetOutProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetOutProfilePacketsDiscardedCount() bool {
	if t == nil || t.OutProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsDiscardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.InProfileOctetsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.InProfilePacketsDiscardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.OutProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.OutProfileOctetsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.OutProfilePacketsDiscardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ECounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/queue/i-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters struct {
	AllOctetsOfferedCount           *bool `path:"all-octets-offered-count" module:"nokia-conf"`
	AllPacketsOfferedCount          *bool `path:"all-packets-offered-count" module:"nokia-conf"`
	HighOctetsDiscardedCount        *bool `path:"high-octets-discarded-count" module:"nokia-conf"`
	HighOctetsOfferedCount          *bool `path:"high-octets-offered-count" module:"nokia-conf"`
	HighPacketsDiscardedCount       *bool `path:"high-packets-discarded-count" module:"nokia-conf"`
	HighPacketsOfferedCount         *bool `path:"high-packets-offered-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	LowOctetsDiscardedCount         *bool `path:"low-octets-discarded-count" module:"nokia-conf"`
	LowOctetsOfferedCount           *bool `path:"low-octets-offered-count" module:"nokia-conf"`
	LowPacketsDiscardedCount        *bool `path:"low-packets-discarded-count" module:"nokia-conf"`
	LowPacketsOfferedCount          *bool `path:"low-packets-offered-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
	UncolouredOctetsOfferedCount    *bool `path:"uncoloured-octets-offered-count" module:"nokia-conf"`
	UncolouredPacketsOfferedCount   *bool `path:"uncoloured-packets-offered-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) IsYANGGoStruct() {
}

// GetAllOctetsOfferedCount retrieves the value of the leaf AllOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOctetsOfferedCount is set, it can
// safely use t.GetAllOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetAllOctetsOfferedCount() bool {
	if t == nil || t.AllOctetsOfferedCount == nil {
		return false
	}
	return *t.AllOctetsOfferedCount
}

// GetAllPacketsOfferedCount retrieves the value of the leaf AllPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllPacketsOfferedCount is set, it can
// safely use t.GetAllPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetAllPacketsOfferedCount() bool {
	if t == nil || t.AllPacketsOfferedCount == nil {
		return false
	}
	return *t.AllPacketsOfferedCount
}

// GetHighOctetsDiscardedCount retrieves the value of the leaf HighOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsDiscardedCount is set, it can
// safely use t.GetHighOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetHighOctetsDiscardedCount() bool {
	if t == nil || t.HighOctetsDiscardedCount == nil {
		return false
	}
	return *t.HighOctetsDiscardedCount
}

// GetHighOctetsOfferedCount retrieves the value of the leaf HighOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsOfferedCount is set, it can
// safely use t.GetHighOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetHighOctetsOfferedCount() bool {
	if t == nil || t.HighOctetsOfferedCount == nil {
		return false
	}
	return *t.HighOctetsOfferedCount
}

// GetHighPacketsDiscardedCount retrieves the value of the leaf HighPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsDiscardedCount is set, it can
// safely use t.GetHighPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetHighPacketsDiscardedCount() bool {
	if t == nil || t.HighPacketsDiscardedCount == nil {
		return false
	}
	return *t.HighPacketsDiscardedCount
}

// GetHighPacketsOfferedCount retrieves the value of the leaf HighPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsOfferedCount is set, it can
// safely use t.GetHighPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetHighPacketsOfferedCount() bool {
	if t == nil || t.HighPacketsOfferedCount == nil {
		return false
	}
	return *t.HighPacketsOfferedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetLowOctetsDiscardedCount retrieves the value of the leaf LowOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsDiscardedCount is set, it can
// safely use t.GetLowOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetLowOctetsDiscardedCount() bool {
	if t == nil || t.LowOctetsDiscardedCount == nil {
		return false
	}
	return *t.LowOctetsDiscardedCount
}

// GetLowOctetsOfferedCount retrieves the value of the leaf LowOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsOfferedCount is set, it can
// safely use t.GetLowOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetLowOctetsOfferedCount() bool {
	if t == nil || t.LowOctetsOfferedCount == nil {
		return false
	}
	return *t.LowOctetsOfferedCount
}

// GetLowPacketsDiscardedCount retrieves the value of the leaf LowPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsDiscardedCount is set, it can
// safely use t.GetLowPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetLowPacketsDiscardedCount() bool {
	if t == nil || t.LowPacketsDiscardedCount == nil {
		return false
	}
	return *t.LowPacketsDiscardedCount
}

// GetLowPacketsOfferedCount retrieves the value of the leaf LowPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsOfferedCount is set, it can
// safely use t.GetLowPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetLowPacketsOfferedCount() bool {
	if t == nil || t.LowPacketsOfferedCount == nil {
		return false
	}
	return *t.LowPacketsOfferedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// GetUncolouredOctetsOfferedCount retrieves the value of the leaf UncolouredOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncolouredOctetsOfferedCount is set, it can
// safely use t.GetUncolouredOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncolouredOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetUncolouredOctetsOfferedCount() bool {
	if t == nil || t.UncolouredOctetsOfferedCount == nil {
		return false
	}
	return *t.UncolouredOctetsOfferedCount
}

// GetUncolouredPacketsOfferedCount retrieves the value of the leaf UncolouredPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncolouredPacketsOfferedCount is set, it can
// safely use t.GetUncolouredPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncolouredPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) GetUncolouredPacketsOfferedCount() bool {
	if t == nil || t.UncolouredPacketsOfferedCount == nil {
		return false
	}
	return *t.UncolouredPacketsOfferedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllOctetsOfferedCount == nil {
		var v bool = false
		t.AllOctetsOfferedCount = &v
	}
	if t.AllPacketsOfferedCount == nil {
		var v bool = false
		t.AllPacketsOfferedCount = &v
	}
	if t.HighOctetsDiscardedCount == nil {
		var v bool = false
		t.HighOctetsDiscardedCount = &v
	}
	if t.HighOctetsOfferedCount == nil {
		var v bool = false
		t.HighOctetsOfferedCount = &v
	}
	if t.HighPacketsDiscardedCount == nil {
		var v bool = false
		t.HighPacketsDiscardedCount = &v
	}
	if t.HighPacketsOfferedCount == nil {
		var v bool = false
		t.HighPacketsOfferedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.LowOctetsDiscardedCount == nil {
		var v bool = false
		t.LowOctetsDiscardedCount = &v
	}
	if t.LowOctetsOfferedCount == nil {
		var v bool = false
		t.LowOctetsOfferedCount = &v
	}
	if t.LowPacketsDiscardedCount == nil {
		var v bool = false
		t.LowPacketsDiscardedCount = &v
	}
	if t.LowPacketsOfferedCount == nil {
		var v bool = false
		t.LowPacketsOfferedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
	if t.UncolouredOctetsOfferedCount == nil {
		var v bool = false
		t.UncolouredOctetsOfferedCount = &v
	}
	if t.UncolouredPacketsOfferedCount == nil {
		var v bool = false
		t.UncolouredPacketsOfferedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_Queue_ICounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-override-counter YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter struct {
	All       YANGEmpty                                                                                                         `path:"all" module:"nokia-conf"`
	ECounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters `path:"e-counters" module:"nokia-conf"`
	ICounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters `path:"i-counters" module:"nokia-conf"`
	Id        *uint32                                                                                                           `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) IsYANGGoStruct() {
}

// GetOrCreateECounters retrieves the value of the ECounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetOrCreateECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters {
	if t.ECounters != nil {
		return t.ECounters
	}
	t.ECounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters{}
	return t.ECounters
}

// GetOrCreateICounters retrieves the value of the ICounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetOrCreateICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters {
	if t.ICounters != nil {
		return t.ICounters
	}
	t.ICounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters{}
	return t.ICounters
}

// GetECounters returns the value of the ECounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter. If the receiver or the field ECounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters {
	if t != nil && t.ECounters != nil {
		return t.ECounters
	}
	return nil
}

// GetICounters returns the value of the ICounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter. If the receiver or the field ICounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters {
	if t != nil && t.ICounters != nil {
		return t.ICounters
	}
	return nil
}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ECounters.PopulateDefaults()
	t.ICounters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-override-counter/e-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters struct {
	InProfileOctetsDiscardedCount   *bool `path:"in-profile-octets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsDiscardedCount  *bool `path:"in-profile-packets-discarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	OutProfileOctetsDiscardedCount  *bool `path:"out-profile-octets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsDiscardedCount *bool `path:"out-profile-packets-discarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) IsYANGGoStruct() {
}

// GetInProfileOctetsDiscardedCount retrieves the value of the leaf InProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsDiscardedCount is set, it can
// safely use t.GetInProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetInProfileOctetsDiscardedCount() bool {
	if t == nil || t.InProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.InProfileOctetsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsDiscardedCount retrieves the value of the leaf InProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsDiscardedCount is set, it can
// safely use t.GetInProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetInProfilePacketsDiscardedCount() bool {
	if t == nil || t.InProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.InProfilePacketsDiscardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetOutProfileOctetsDiscardedCount retrieves the value of the leaf OutProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsDiscardedCount is set, it can
// safely use t.GetOutProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetOutProfileOctetsDiscardedCount() bool {
	if t == nil || t.OutProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsDiscardedCount retrieves the value of the leaf OutProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsDiscardedCount is set, it can
// safely use t.GetOutProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetOutProfilePacketsDiscardedCount() bool {
	if t == nil || t.OutProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsDiscardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.InProfileOctetsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.InProfilePacketsDiscardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.OutProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.OutProfileOctetsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.OutProfilePacketsDiscardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ECounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-override-counter/i-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters struct {
	AllOctetsOfferedCount           *bool `path:"all-octets-offered-count" module:"nokia-conf"`
	AllPacketsOfferedCount          *bool `path:"all-packets-offered-count" module:"nokia-conf"`
	HighOctetsDiscardedCount        *bool `path:"high-octets-discarded-count" module:"nokia-conf"`
	HighPacketsDiscardedCount       *bool `path:"high-packets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	LowOctetsDiscardedCount         *bool `path:"low-octets-discarded-count" module:"nokia-conf"`
	LowPacketsDiscardedCount        *bool `path:"low-packets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) IsYANGGoStruct() {
}

// GetAllOctetsOfferedCount retrieves the value of the leaf AllOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOctetsOfferedCount is set, it can
// safely use t.GetAllOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetAllOctetsOfferedCount() bool {
	if t == nil || t.AllOctetsOfferedCount == nil {
		return false
	}
	return *t.AllOctetsOfferedCount
}

// GetAllPacketsOfferedCount retrieves the value of the leaf AllPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllPacketsOfferedCount is set, it can
// safely use t.GetAllPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetAllPacketsOfferedCount() bool {
	if t == nil || t.AllPacketsOfferedCount == nil {
		return false
	}
	return *t.AllPacketsOfferedCount
}

// GetHighOctetsDiscardedCount retrieves the value of the leaf HighOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsDiscardedCount is set, it can
// safely use t.GetHighOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetHighOctetsDiscardedCount() bool {
	if t == nil || t.HighOctetsDiscardedCount == nil {
		return false
	}
	return *t.HighOctetsDiscardedCount
}

// GetHighPacketsDiscardedCount retrieves the value of the leaf HighPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsDiscardedCount is set, it can
// safely use t.GetHighPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetHighPacketsDiscardedCount() bool {
	if t == nil || t.HighPacketsDiscardedCount == nil {
		return false
	}
	return *t.HighPacketsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetLowOctetsDiscardedCount retrieves the value of the leaf LowOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsDiscardedCount is set, it can
// safely use t.GetLowOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetLowOctetsDiscardedCount() bool {
	if t == nil || t.LowOctetsDiscardedCount == nil {
		return false
	}
	return *t.LowOctetsDiscardedCount
}

// GetLowPacketsDiscardedCount retrieves the value of the leaf LowPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsDiscardedCount is set, it can
// safely use t.GetLowPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetLowPacketsDiscardedCount() bool {
	if t == nil || t.LowPacketsDiscardedCount == nil {
		return false
	}
	return *t.LowPacketsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllOctetsOfferedCount == nil {
		var v bool = false
		t.AllOctetsOfferedCount = &v
	}
	if t.AllPacketsOfferedCount == nil {
		var v bool = false
		t.AllPacketsOfferedCount = &v
	}
	if t.HighOctetsDiscardedCount == nil {
		var v bool = false
		t.HighOctetsDiscardedCount = &v
	}
	if t.HighPacketsDiscardedCount == nil {
		var v bool = false
		t.HighPacketsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.LowOctetsDiscardedCount == nil {
		var v bool = false
		t.LowOctetsDiscardedCount = &v
	}
	if t.LowPacketsDiscardedCount == nil {
		var v bool = false
		t.LowPacketsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefOverrideCounter_ICounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue struct {
	All       YANGEmpty                                                                                               `path:"all" module:"nokia-conf"`
	ECounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters `path:"e-counters" module:"nokia-conf"`
	ICounters *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters `path:"i-counters" module:"nokia-conf"`
	Id        *uint32                                                                                                 `path:"id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) IsYANGGoStruct() {
}

// GetOrCreateECounters retrieves the value of the ECounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetOrCreateECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters {
	if t.ECounters != nil {
		return t.ECounters
	}
	t.ECounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters{}
	return t.ECounters
}

// GetOrCreateICounters retrieves the value of the ICounters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetOrCreateICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters {
	if t.ICounters != nil {
		return t.ICounters
	}
	t.ICounters = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters{}
	return t.ICounters
}

// GetECounters returns the value of the ECounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue. If the receiver or the field ECounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetECounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters {
	if t != nil && t.ECounters != nil {
		return t.ECounters
	}
	return nil
}

// GetICounters returns the value of the ICounters struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue. If the receiver or the field ICounters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetICounters() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters {
	if t != nil && t.ICounters != nil {
		return t.ICounters
	}
	return nil
}

// GetAll retrieves the value of the leaf All from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if All is set, it can
// safely use t.GetAll() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.All == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetAll() YANGEmpty {
	if t == nil || t.All == false {
		return false
	}
	return t.All
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ECounters.PopulateDefaults()
	t.ICounters.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-queue/e-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters struct {
	InProfileOctetsDiscardedCount   *bool `path:"in-profile-octets-discarded-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsDiscardedCount  *bool `path:"in-profile-packets-discarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	OutProfileOctetsDiscardedCount  *bool `path:"out-profile-octets-discarded-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsDiscardedCount *bool `path:"out-profile-packets-discarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) IsYANGGoStruct() {
}

// GetInProfileOctetsDiscardedCount retrieves the value of the leaf InProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsDiscardedCount is set, it can
// safely use t.GetInProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetInProfileOctetsDiscardedCount() bool {
	if t == nil || t.InProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.InProfileOctetsDiscardedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsDiscardedCount retrieves the value of the leaf InProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsDiscardedCount is set, it can
// safely use t.GetInProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetInProfilePacketsDiscardedCount() bool {
	if t == nil || t.InProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.InProfilePacketsDiscardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetOutProfileOctetsDiscardedCount retrieves the value of the leaf OutProfileOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsDiscardedCount is set, it can
// safely use t.GetOutProfileOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetOutProfileOctetsDiscardedCount() bool {
	if t == nil || t.OutProfileOctetsDiscardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsDiscardedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsDiscardedCount retrieves the value of the leaf OutProfilePacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsDiscardedCount is set, it can
// safely use t.GetOutProfilePacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetOutProfilePacketsDiscardedCount() bool {
	if t == nil || t.OutProfilePacketsDiscardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsDiscardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.InProfileOctetsDiscardedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.InProfilePacketsDiscardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.OutProfileOctetsDiscardedCount == nil {
		var v bool = false
		t.OutProfileOctetsDiscardedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsDiscardedCount == nil {
		var v bool = false
		t.OutProfilePacketsDiscardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ECounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/custom-record/ref-queue/i-counters YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters struct {
	AllOctetsOfferedCount           *bool `path:"all-octets-offered-count" module:"nokia-conf"`
	AllPacketsOfferedCount          *bool `path:"all-packets-offered-count" module:"nokia-conf"`
	HighOctetsDiscardedCount        *bool `path:"high-octets-discarded-count" module:"nokia-conf"`
	HighOctetsOfferedCount          *bool `path:"high-octets-offered-count" module:"nokia-conf"`
	HighPacketsDiscardedCount       *bool `path:"high-packets-discarded-count" module:"nokia-conf"`
	HighPacketsOfferedCount         *bool `path:"high-packets-offered-count" module:"nokia-conf"`
	InProfileOctetsForwardedCount   *bool `path:"in-profile-octets-forwarded-count" module:"nokia-conf"`
	InProfilePacketsForwardedCount  *bool `path:"in-profile-packets-forwarded-count" module:"nokia-conf"`
	LowOctetsDiscardedCount         *bool `path:"low-octets-discarded-count" module:"nokia-conf"`
	LowOctetsOfferedCount           *bool `path:"low-octets-offered-count" module:"nokia-conf"`
	LowPacketsDiscardedCount        *bool `path:"low-packets-discarded-count" module:"nokia-conf"`
	LowPacketsOfferedCount          *bool `path:"low-packets-offered-count" module:"nokia-conf"`
	OutProfileOctetsForwardedCount  *bool `path:"out-profile-octets-forwarded-count" module:"nokia-conf"`
	OutProfilePacketsForwardedCount *bool `path:"out-profile-packets-forwarded-count" module:"nokia-conf"`
	UncolouredOctetsOfferedCount    *bool `path:"uncoloured-octets-offered-count" module:"nokia-conf"`
	UncolouredPacketsOfferedCount   *bool `path:"uncoloured-packets-offered-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) IsYANGGoStruct() {
}

// GetAllOctetsOfferedCount retrieves the value of the leaf AllOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllOctetsOfferedCount is set, it can
// safely use t.GetAllOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetAllOctetsOfferedCount() bool {
	if t == nil || t.AllOctetsOfferedCount == nil {
		return false
	}
	return *t.AllOctetsOfferedCount
}

// GetAllPacketsOfferedCount retrieves the value of the leaf AllPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllPacketsOfferedCount is set, it can
// safely use t.GetAllPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetAllPacketsOfferedCount() bool {
	if t == nil || t.AllPacketsOfferedCount == nil {
		return false
	}
	return *t.AllPacketsOfferedCount
}

// GetHighOctetsDiscardedCount retrieves the value of the leaf HighOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsDiscardedCount is set, it can
// safely use t.GetHighOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetHighOctetsDiscardedCount() bool {
	if t == nil || t.HighOctetsDiscardedCount == nil {
		return false
	}
	return *t.HighOctetsDiscardedCount
}

// GetHighOctetsOfferedCount retrieves the value of the leaf HighOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighOctetsOfferedCount is set, it can
// safely use t.GetHighOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetHighOctetsOfferedCount() bool {
	if t == nil || t.HighOctetsOfferedCount == nil {
		return false
	}
	return *t.HighOctetsOfferedCount
}

// GetHighPacketsDiscardedCount retrieves the value of the leaf HighPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsDiscardedCount is set, it can
// safely use t.GetHighPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetHighPacketsDiscardedCount() bool {
	if t == nil || t.HighPacketsDiscardedCount == nil {
		return false
	}
	return *t.HighPacketsDiscardedCount
}

// GetHighPacketsOfferedCount retrieves the value of the leaf HighPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPacketsOfferedCount is set, it can
// safely use t.GetHighPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetHighPacketsOfferedCount() bool {
	if t == nil || t.HighPacketsOfferedCount == nil {
		return false
	}
	return *t.HighPacketsOfferedCount
}

// GetInProfileOctetsForwardedCount retrieves the value of the leaf InProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfileOctetsForwardedCount is set, it can
// safely use t.GetInProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetInProfileOctetsForwardedCount() bool {
	if t == nil || t.InProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.InProfileOctetsForwardedCount
}

// GetInProfilePacketsForwardedCount retrieves the value of the leaf InProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InProfilePacketsForwardedCount is set, it can
// safely use t.GetInProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetInProfilePacketsForwardedCount() bool {
	if t == nil || t.InProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.InProfilePacketsForwardedCount
}

// GetLowOctetsDiscardedCount retrieves the value of the leaf LowOctetsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsDiscardedCount is set, it can
// safely use t.GetLowOctetsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetLowOctetsDiscardedCount() bool {
	if t == nil || t.LowOctetsDiscardedCount == nil {
		return false
	}
	return *t.LowOctetsDiscardedCount
}

// GetLowOctetsOfferedCount retrieves the value of the leaf LowOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowOctetsOfferedCount is set, it can
// safely use t.GetLowOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetLowOctetsOfferedCount() bool {
	if t == nil || t.LowOctetsOfferedCount == nil {
		return false
	}
	return *t.LowOctetsOfferedCount
}

// GetLowPacketsDiscardedCount retrieves the value of the leaf LowPacketsDiscardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsDiscardedCount is set, it can
// safely use t.GetLowPacketsDiscardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsDiscardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetLowPacketsDiscardedCount() bool {
	if t == nil || t.LowPacketsDiscardedCount == nil {
		return false
	}
	return *t.LowPacketsDiscardedCount
}

// GetLowPacketsOfferedCount retrieves the value of the leaf LowPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPacketsOfferedCount is set, it can
// safely use t.GetLowPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetLowPacketsOfferedCount() bool {
	if t == nil || t.LowPacketsOfferedCount == nil {
		return false
	}
	return *t.LowPacketsOfferedCount
}

// GetOutProfileOctetsForwardedCount retrieves the value of the leaf OutProfileOctetsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfileOctetsForwardedCount is set, it can
// safely use t.GetOutProfileOctetsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfileOctetsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetOutProfileOctetsForwardedCount() bool {
	if t == nil || t.OutProfileOctetsForwardedCount == nil {
		return false
	}
	return *t.OutProfileOctetsForwardedCount
}

// GetOutProfilePacketsForwardedCount retrieves the value of the leaf OutProfilePacketsForwardedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutProfilePacketsForwardedCount is set, it can
// safely use t.GetOutProfilePacketsForwardedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutProfilePacketsForwardedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetOutProfilePacketsForwardedCount() bool {
	if t == nil || t.OutProfilePacketsForwardedCount == nil {
		return false
	}
	return *t.OutProfilePacketsForwardedCount
}

// GetUncolouredOctetsOfferedCount retrieves the value of the leaf UncolouredOctetsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncolouredOctetsOfferedCount is set, it can
// safely use t.GetUncolouredOctetsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncolouredOctetsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetUncolouredOctetsOfferedCount() bool {
	if t == nil || t.UncolouredOctetsOfferedCount == nil {
		return false
	}
	return *t.UncolouredOctetsOfferedCount
}

// GetUncolouredPacketsOfferedCount retrieves the value of the leaf UncolouredPacketsOfferedCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncolouredPacketsOfferedCount is set, it can
// safely use t.GetUncolouredPacketsOfferedCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncolouredPacketsOfferedCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) GetUncolouredPacketsOfferedCount() bool {
	if t == nil || t.UncolouredPacketsOfferedCount == nil {
		return false
	}
	return *t.UncolouredPacketsOfferedCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllOctetsOfferedCount == nil {
		var v bool = false
		t.AllOctetsOfferedCount = &v
	}
	if t.AllPacketsOfferedCount == nil {
		var v bool = false
		t.AllPacketsOfferedCount = &v
	}
	if t.HighOctetsDiscardedCount == nil {
		var v bool = false
		t.HighOctetsDiscardedCount = &v
	}
	if t.HighOctetsOfferedCount == nil {
		var v bool = false
		t.HighOctetsOfferedCount = &v
	}
	if t.HighPacketsDiscardedCount == nil {
		var v bool = false
		t.HighPacketsDiscardedCount = &v
	}
	if t.HighPacketsOfferedCount == nil {
		var v bool = false
		t.HighPacketsOfferedCount = &v
	}
	if t.InProfileOctetsForwardedCount == nil {
		var v bool = false
		t.InProfileOctetsForwardedCount = &v
	}
	if t.InProfilePacketsForwardedCount == nil {
		var v bool = false
		t.InProfilePacketsForwardedCount = &v
	}
	if t.LowOctetsDiscardedCount == nil {
		var v bool = false
		t.LowOctetsDiscardedCount = &v
	}
	if t.LowOctetsOfferedCount == nil {
		var v bool = false
		t.LowOctetsOfferedCount = &v
	}
	if t.LowPacketsDiscardedCount == nil {
		var v bool = false
		t.LowPacketsDiscardedCount = &v
	}
	if t.LowPacketsOfferedCount == nil {
		var v bool = false
		t.LowPacketsOfferedCount = &v
	}
	if t.OutProfileOctetsForwardedCount == nil {
		var v bool = false
		t.OutProfileOctetsForwardedCount = &v
	}
	if t.OutProfilePacketsForwardedCount == nil {
		var v bool = false
		t.OutProfilePacketsForwardedCount = &v
	}
	if t.UncolouredOctetsOfferedCount == nil {
		var v bool = false
		t.UncolouredOctetsOfferedCount = &v
	}
	if t.UncolouredPacketsOfferedCount == nil {
		var v bool = false
		t.UncolouredPacketsOfferedCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_CustomRecord_RefQueue_ICounters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/host-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	InterimUpdate *bool                       `path:"interim-update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return false
	}
	return *t.InterimUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.InterimUpdate == nil {
		var v bool = false
		t.InterimUpdate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_HostAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute struct {
	AccessLoopOptions             *bool                                                                                                           `path:"access-loop-options" module:"nokia-conf"`
	AcctAuthentic                 *bool                                                                                                           `path:"acct-authentic" module:"nokia-conf"`
	AcctDelayTime                 *bool                                                                                                           `path:"acct-delay-time" module:"nokia-conf"`
	AcctTriggeredReason           *bool                                                                                                           `path:"acct-triggered-reason" module:"nokia-conf"`
	AllAuthorizedSessionAddresses *bool                                                                                                           `path:"all-authorized-session-addresses" module:"nokia-conf"`
	Apn                           *bool                                                                                                           `path:"apn" module:"nokia-conf"`
	BearerFteid                   *bool                                                                                                           `path:"bearer-fteid" module:"nokia-conf"`
	BondingActiveConnections      *bool                                                                                                           `path:"bonding-active-connections" module:"nokia-conf"`
	BondingId                     *bool                                                                                                           `path:"bonding-id" module:"nokia-conf"`
	BrgNumActiveSessions          *bool                                                                                                           `path:"brg-num-active-sessions" module:"nokia-conf"`
	CalledStationId               *bool                                                                                                           `path:"called-station-id" module:"nokia-conf"`
	CallingStationId              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId `path:"calling-station-id" module:"nokia-conf" yangPresence:"true"`
	CircuitId                     *bool                                                                                                           `path:"circuit-id" module:"nokia-conf"`
	DelegatedIpv6Prefix           *bool                                                                                                           `path:"delegated-ipv6-prefix" module:"nokia-conf"`
	DetailedAcctAttributes        *bool                                                                                                           `path:"detailed-acct-attributes" module:"nokia-conf"`
	DhcpVendorClassId             *bool                                                                                                           `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	ErrorCode                     *bool                                                                                                           `path:"error-code" module:"nokia-conf"`
	FirewallInfo                  *bool                                                                                                           `path:"firewall-info" module:"nokia-conf"`
	FramedInterfaceId             *bool                                                                                                           `path:"framed-interface-id" module:"nokia-conf"`
	FramedIpAddress               *bool                                                                                                           `path:"framed-ip-address" module:"nokia-conf"`
	FramedIpNetmask               *bool                                                                                                           `path:"framed-ip-netmask" module:"nokia-conf"`
	FramedIpv6Prefix              *bool                                                                                                           `path:"framed-ipv6-prefix" module:"nokia-conf"`
	FramedIpv6Route               *bool                                                                                                           `path:"framed-ipv6-route" module:"nokia-conf"`
	FramedRoute                   *bool                                                                                                           `path:"framed-route" module:"nokia-conf"`
	Imei                          *bool                                                                                                           `path:"imei" module:"nokia-conf"`
	Imsi                          *bool                                                                                                           `path:"imsi" module:"nokia-conf"`
	Ipv6Address                   *bool                                                                                                           `path:"ipv6-address" module:"nokia-conf"`
	LanextBridgeId                *bool                                                                                                           `path:"lanext-bridge-id" module:"nokia-conf"`
	LanextDeviceType              *bool                                                                                                           `path:"lanext-device-type" module:"nokia-conf"`
	LanextRouteDistinguisher      *bool                                                                                                           `path:"lanext-route-distinguisher" module:"nokia-conf"`
	LanextRouteTarget             *bool                                                                                                           `path:"lanext-route-target" module:"nokia-conf"`
	LanextVni                     *bool                                                                                                           `path:"lanext-vni" module:"nokia-conf"`
	MacAddress                    *bool                                                                                                           `path:"mac-address" module:"nokia-conf"`
	Msisdn                        *bool                                                                                                           `path:"msisdn" module:"nokia-conf"`
	NasIdentifier                 *bool                                                                                                           `path:"nas-identifier" module:"nokia-conf"`
	NasPort                       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort          `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId                     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId        `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType      `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
	NatPortRange                  *bool                                                                                                           `path:"nat-port-range" module:"nokia-conf"`
	RemoteId                      *bool                                                                                                           `path:"remote-id" module:"nokia-conf"`
	SlaProfile                    *bool                                                                                                           `path:"sla-profile" module:"nokia-conf"`
	SpiSharingId                  *bool                                                                                                           `path:"spi-sharing-id" module:"nokia-conf"`
	StdAcctAttributes             *bool                                                                                                           `path:"std-acct-attributes" module:"nokia-conf"`
	SteeringProfile               *bool                                                                                                           `path:"steering-profile" module:"nokia-conf"`
	SubProfile                    *bool                                                                                                           `path:"sub-profile" module:"nokia-conf"`
	SubscriberId                  *bool                                                                                                           `path:"subscriber-id" module:"nokia-conf"`
	TunnelClientAttrs             *bool                                                                                                           `path:"tunnel-client-attrs" module:"nokia-conf"`
	TunnelServerAttrs             *bool                                                                                                           `path:"tunnel-server-attrs" module:"nokia-conf"`
	Uli                           *bool                                                                                                           `path:"uli" module:"nokia-conf"`
	UserName                      *bool                                                                                                           `path:"user-name" module:"nokia-conf"`
	V6AggregateStats              *bool                                                                                                           `path:"v6-aggregate-stats" module:"nokia-conf"`
	WifiNumAttachedUes            *bool                                                                                                           `path:"wifi-num-attached-ues" module:"nokia-conf"`
	WifiRssi                      *bool                                                                                                           `path:"wifi-rssi" module:"nokia-conf"`
	WifiSsidVlan                  *bool                                                                                                           `path:"wifi-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress     *bool                                                                                                           `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {
}

// GetOrCreateCallingStationId retrieves the value of the CallingStationId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetOrCreateCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId {
	if t.CallingStationId != nil {
		return t.CallingStationId
	}
	t.CallingStationId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId{}
	return t.CallingStationId
}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetOrCreateNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType{}
	return t.NasPortType
}

// GetCallingStationId returns the value of the CallingStationId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field CallingStationId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId {
	if t != nil && t.CallingStationId != nil {
		return t.CallingStationId
	}
	return nil
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetAccessLoopOptions retrieves the value of the leaf AccessLoopOptions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessLoopOptions is set, it can
// safely use t.GetAccessLoopOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessLoopOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetAccessLoopOptions() bool {
	if t == nil || t.AccessLoopOptions == nil {
		return false
	}
	return *t.AccessLoopOptions
}

// GetAcctAuthentic retrieves the value of the leaf AcctAuthentic from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctAuthentic is set, it can
// safely use t.GetAcctAuthentic() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctAuthentic == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetAcctAuthentic() bool {
	if t == nil || t.AcctAuthentic == nil {
		return false
	}
	return *t.AcctAuthentic
}

// GetAcctDelayTime retrieves the value of the leaf AcctDelayTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctDelayTime is set, it can
// safely use t.GetAcctDelayTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctDelayTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetAcctDelayTime() bool {
	if t == nil || t.AcctDelayTime == nil {
		return false
	}
	return *t.AcctDelayTime
}

// GetAcctTriggeredReason retrieves the value of the leaf AcctTriggeredReason from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctTriggeredReason is set, it can
// safely use t.GetAcctTriggeredReason() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctTriggeredReason == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetAcctTriggeredReason() bool {
	if t == nil || t.AcctTriggeredReason == nil {
		return false
	}
	return *t.AcctTriggeredReason
}

// GetAllAuthorizedSessionAddresses retrieves the value of the leaf AllAuthorizedSessionAddresses from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllAuthorizedSessionAddresses is set, it can
// safely use t.GetAllAuthorizedSessionAddresses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllAuthorizedSessionAddresses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetAllAuthorizedSessionAddresses() bool {
	if t == nil || t.AllAuthorizedSessionAddresses == nil {
		return false
	}
	return *t.AllAuthorizedSessionAddresses
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetApn() bool {
	if t == nil || t.Apn == nil {
		return false
	}
	return *t.Apn
}

// GetBearerFteid retrieves the value of the leaf BearerFteid from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BearerFteid is set, it can
// safely use t.GetBearerFteid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BearerFteid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetBearerFteid() bool {
	if t == nil || t.BearerFteid == nil {
		return false
	}
	return *t.BearerFteid
}

// GetBondingActiveConnections retrieves the value of the leaf BondingActiveConnections from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BondingActiveConnections is set, it can
// safely use t.GetBondingActiveConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BondingActiveConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetBondingActiveConnections() bool {
	if t == nil || t.BondingActiveConnections == nil {
		return false
	}
	return *t.BondingActiveConnections
}

// GetBondingId retrieves the value of the leaf BondingId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BondingId is set, it can
// safely use t.GetBondingId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BondingId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetBondingId() bool {
	if t == nil || t.BondingId == nil {
		return false
	}
	return *t.BondingId
}

// GetBrgNumActiveSessions retrieves the value of the leaf BrgNumActiveSessions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BrgNumActiveSessions is set, it can
// safely use t.GetBrgNumActiveSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BrgNumActiveSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetBrgNumActiveSessions() bool {
	if t == nil || t.BrgNumActiveSessions == nil {
		return false
	}
	return *t.BrgNumActiveSessions
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetDelegatedIpv6Prefix retrieves the value of the leaf DelegatedIpv6Prefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelegatedIpv6Prefix is set, it can
// safely use t.GetDelegatedIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelegatedIpv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetDelegatedIpv6Prefix() bool {
	if t == nil || t.DelegatedIpv6Prefix == nil {
		return false
	}
	return *t.DelegatedIpv6Prefix
}

// GetDetailedAcctAttributes retrieves the value of the leaf DetailedAcctAttributes from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetailedAcctAttributes is set, it can
// safely use t.GetDetailedAcctAttributes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetailedAcctAttributes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetDetailedAcctAttributes() bool {
	if t == nil || t.DetailedAcctAttributes == nil {
		return true
	}
	return *t.DetailedAcctAttributes
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetErrorCode retrieves the value of the leaf ErrorCode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorCode is set, it can
// safely use t.GetErrorCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetErrorCode() bool {
	if t == nil || t.ErrorCode == nil {
		return false
	}
	return *t.ErrorCode
}

// GetFirewallInfo retrieves the value of the leaf FirewallInfo from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirewallInfo is set, it can
// safely use t.GetFirewallInfo() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirewallInfo == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFirewallInfo() bool {
	if t == nil || t.FirewallInfo == nil {
		return false
	}
	return *t.FirewallInfo
}

// GetFramedInterfaceId retrieves the value of the leaf FramedInterfaceId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedInterfaceId is set, it can
// safely use t.GetFramedInterfaceId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedInterfaceId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedInterfaceId() bool {
	if t == nil || t.FramedInterfaceId == nil {
		return false
	}
	return *t.FramedInterfaceId
}

// GetFramedIpAddress retrieves the value of the leaf FramedIpAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddress is set, it can
// safely use t.GetFramedIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedIpAddress() bool {
	if t == nil || t.FramedIpAddress == nil {
		return false
	}
	return *t.FramedIpAddress
}

// GetFramedIpNetmask retrieves the value of the leaf FramedIpNetmask from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpNetmask is set, it can
// safely use t.GetFramedIpNetmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpNetmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedIpNetmask() bool {
	if t == nil || t.FramedIpNetmask == nil {
		return false
	}
	return *t.FramedIpNetmask
}

// GetFramedIpv6Prefix retrieves the value of the leaf FramedIpv6Prefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpv6Prefix is set, it can
// safely use t.GetFramedIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedIpv6Prefix() bool {
	if t == nil || t.FramedIpv6Prefix == nil {
		return false
	}
	return *t.FramedIpv6Prefix
}

// GetFramedIpv6Route retrieves the value of the leaf FramedIpv6Route from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpv6Route is set, it can
// safely use t.GetFramedIpv6Route() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpv6Route == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedIpv6Route() bool {
	if t == nil || t.FramedIpv6Route == nil {
		return false
	}
	return *t.FramedIpv6Route
}

// GetFramedRoute retrieves the value of the leaf FramedRoute from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedRoute is set, it can
// safely use t.GetFramedRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetFramedRoute() bool {
	if t == nil || t.FramedRoute == nil {
		return false
	}
	return *t.FramedRoute
}

// GetImei retrieves the value of the leaf Imei from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Imei is set, it can
// safely use t.GetImei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Imei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetImei() bool {
	if t == nil || t.Imei == nil {
		return false
	}
	return *t.Imei
}

// GetImsi retrieves the value of the leaf Imsi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Imsi is set, it can
// safely use t.GetImsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Imsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetImsi() bool {
	if t == nil || t.Imsi == nil {
		return false
	}
	return *t.Imsi
}

// GetIpv6Address retrieves the value of the leaf Ipv6Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Address is set, it can
// safely use t.GetIpv6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetIpv6Address() bool {
	if t == nil || t.Ipv6Address == nil {
		return false
	}
	return *t.Ipv6Address
}

// GetLanextBridgeId retrieves the value of the leaf LanextBridgeId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LanextBridgeId is set, it can
// safely use t.GetLanextBridgeId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LanextBridgeId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetLanextBridgeId() bool {
	if t == nil || t.LanextBridgeId == nil {
		return false
	}
	return *t.LanextBridgeId
}

// GetLanextDeviceType retrieves the value of the leaf LanextDeviceType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LanextDeviceType is set, it can
// safely use t.GetLanextDeviceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LanextDeviceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetLanextDeviceType() bool {
	if t == nil || t.LanextDeviceType == nil {
		return false
	}
	return *t.LanextDeviceType
}

// GetLanextRouteDistinguisher retrieves the value of the leaf LanextRouteDistinguisher from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LanextRouteDistinguisher is set, it can
// safely use t.GetLanextRouteDistinguisher() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LanextRouteDistinguisher == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetLanextRouteDistinguisher() bool {
	if t == nil || t.LanextRouteDistinguisher == nil {
		return false
	}
	return *t.LanextRouteDistinguisher
}

// GetLanextRouteTarget retrieves the value of the leaf LanextRouteTarget from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LanextRouteTarget is set, it can
// safely use t.GetLanextRouteTarget() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LanextRouteTarget == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetLanextRouteTarget() bool {
	if t == nil || t.LanextRouteTarget == nil {
		return false
	}
	return *t.LanextRouteTarget
}

// GetLanextVni retrieves the value of the leaf LanextVni from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LanextVni is set, it can
// safely use t.GetLanextVni() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LanextVni == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetLanextVni() bool {
	if t == nil || t.LanextVni == nil {
		return false
	}
	return *t.LanextVni
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetMsisdn retrieves the value of the leaf Msisdn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msisdn is set, it can
// safely use t.GetMsisdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msisdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetMsisdn() bool {
	if t == nil || t.Msisdn == nil {
		return false
	}
	return *t.Msisdn
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNatPortRange retrieves the value of the leaf NatPortRange from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NatPortRange is set, it can
// safely use t.GetNatPortRange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NatPortRange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetNatPortRange() bool {
	if t == nil || t.NatPortRange == nil {
		return false
	}
	return *t.NatPortRange
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetSlaProfile() bool {
	if t == nil || t.SlaProfile == nil {
		return false
	}
	return *t.SlaProfile
}

// GetSpiSharingId retrieves the value of the leaf SpiSharingId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpiSharingId is set, it can
// safely use t.GetSpiSharingId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpiSharingId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetSpiSharingId() bool {
	if t == nil || t.SpiSharingId == nil {
		return false
	}
	return *t.SpiSharingId
}

// GetStdAcctAttributes retrieves the value of the leaf StdAcctAttributes from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StdAcctAttributes is set, it can
// safely use t.GetStdAcctAttributes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StdAcctAttributes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetStdAcctAttributes() bool {
	if t == nil || t.StdAcctAttributes == nil {
		return false
	}
	return *t.StdAcctAttributes
}

// GetSteeringProfile retrieves the value of the leaf SteeringProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SteeringProfile is set, it can
// safely use t.GetSteeringProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SteeringProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetSteeringProfile() bool {
	if t == nil || t.SteeringProfile == nil {
		return false
	}
	return *t.SteeringProfile
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetSubProfile() bool {
	if t == nil || t.SubProfile == nil {
		return false
	}
	return *t.SubProfile
}

// GetSubscriberId retrieves the value of the leaf SubscriberId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubscriberId is set, it can
// safely use t.GetSubscriberId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubscriberId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetSubscriberId() bool {
	if t == nil || t.SubscriberId == nil {
		return false
	}
	return *t.SubscriberId
}

// GetTunnelClientAttrs retrieves the value of the leaf TunnelClientAttrs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelClientAttrs is set, it can
// safely use t.GetTunnelClientAttrs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelClientAttrs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetTunnelClientAttrs() bool {
	if t == nil || t.TunnelClientAttrs == nil {
		return false
	}
	return *t.TunnelClientAttrs
}

// GetTunnelServerAttrs retrieves the value of the leaf TunnelServerAttrs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelServerAttrs is set, it can
// safely use t.GetTunnelServerAttrs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelServerAttrs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetTunnelServerAttrs() bool {
	if t == nil || t.TunnelServerAttrs == nil {
		return false
	}
	return *t.TunnelServerAttrs
}

// GetUli retrieves the value of the leaf Uli from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uli is set, it can
// safely use t.GetUli() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uli == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetUli() bool {
	if t == nil || t.Uli == nil {
		return false
	}
	return *t.Uli
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetUserName() bool {
	if t == nil || t.UserName == nil {
		return false
	}
	return *t.UserName
}

// GetV6AggregateStats retrieves the value of the leaf V6AggregateStats from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V6AggregateStats is set, it can
// safely use t.GetV6AggregateStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V6AggregateStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetV6AggregateStats() bool {
	if t == nil || t.V6AggregateStats == nil {
		return false
	}
	return *t.V6AggregateStats
}

// GetWifiNumAttachedUes retrieves the value of the leaf WifiNumAttachedUes from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WifiNumAttachedUes is set, it can
// safely use t.GetWifiNumAttachedUes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WifiNumAttachedUes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetWifiNumAttachedUes() bool {
	if t == nil || t.WifiNumAttachedUes == nil {
		return false
	}
	return *t.WifiNumAttachedUes
}

// GetWifiRssi retrieves the value of the leaf WifiRssi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WifiRssi is set, it can
// safely use t.GetWifiRssi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WifiRssi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetWifiRssi() bool {
	if t == nil || t.WifiRssi == nil {
		return false
	}
	return *t.WifiRssi
}

// GetWifiSsidVlan retrieves the value of the leaf WifiSsidVlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WifiSsidVlan is set, it can
// safely use t.GetWifiSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WifiSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetWifiSsidVlan() bool {
	if t == nil || t.WifiSsidVlan == nil {
		return false
	}
	return *t.WifiSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessLoopOptions == nil {
		var v bool = false
		t.AccessLoopOptions = &v
	}
	if t.AcctAuthentic == nil {
		var v bool = false
		t.AcctAuthentic = &v
	}
	if t.AcctDelayTime == nil {
		var v bool = false
		t.AcctDelayTime = &v
	}
	if t.AcctTriggeredReason == nil {
		var v bool = false
		t.AcctTriggeredReason = &v
	}
	if t.AllAuthorizedSessionAddresses == nil {
		var v bool = false
		t.AllAuthorizedSessionAddresses = &v
	}
	if t.Apn == nil {
		var v bool = false
		t.Apn = &v
	}
	if t.BearerFteid == nil {
		var v bool = false
		t.BearerFteid = &v
	}
	if t.BondingActiveConnections == nil {
		var v bool = false
		t.BondingActiveConnections = &v
	}
	if t.BondingId == nil {
		var v bool = false
		t.BondingId = &v
	}
	if t.BrgNumActiveSessions == nil {
		var v bool = false
		t.BrgNumActiveSessions = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.DelegatedIpv6Prefix == nil {
		var v bool = false
		t.DelegatedIpv6Prefix = &v
	}
	if t.DetailedAcctAttributes == nil {
		var v bool = true
		t.DetailedAcctAttributes = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.ErrorCode == nil {
		var v bool = false
		t.ErrorCode = &v
	}
	if t.FirewallInfo == nil {
		var v bool = false
		t.FirewallInfo = &v
	}
	if t.FramedInterfaceId == nil {
		var v bool = false
		t.FramedInterfaceId = &v
	}
	if t.FramedIpAddress == nil {
		var v bool = false
		t.FramedIpAddress = &v
	}
	if t.FramedIpNetmask == nil {
		var v bool = false
		t.FramedIpNetmask = &v
	}
	if t.FramedIpv6Prefix == nil {
		var v bool = false
		t.FramedIpv6Prefix = &v
	}
	if t.FramedIpv6Route == nil {
		var v bool = false
		t.FramedIpv6Route = &v
	}
	if t.FramedRoute == nil {
		var v bool = false
		t.FramedRoute = &v
	}
	if t.Imei == nil {
		var v bool = false
		t.Imei = &v
	}
	if t.Imsi == nil {
		var v bool = false
		t.Imsi = &v
	}
	if t.Ipv6Address == nil {
		var v bool = false
		t.Ipv6Address = &v
	}
	if t.LanextBridgeId == nil {
		var v bool = false
		t.LanextBridgeId = &v
	}
	if t.LanextDeviceType == nil {
		var v bool = false
		t.LanextDeviceType = &v
	}
	if t.LanextRouteDistinguisher == nil {
		var v bool = false
		t.LanextRouteDistinguisher = &v
	}
	if t.LanextRouteTarget == nil {
		var v bool = false
		t.LanextRouteTarget = &v
	}
	if t.LanextVni == nil {
		var v bool = false
		t.LanextVni = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.Msisdn == nil {
		var v bool = false
		t.Msisdn = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NatPortRange == nil {
		var v bool = false
		t.NatPortRange = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.SlaProfile == nil {
		var v bool = false
		t.SlaProfile = &v
	}
	if t.SpiSharingId == nil {
		var v bool = false
		t.SpiSharingId = &v
	}
	if t.StdAcctAttributes == nil {
		var v bool = false
		t.StdAcctAttributes = &v
	}
	if t.SteeringProfile == nil {
		var v bool = false
		t.SteeringProfile = &v
	}
	if t.SubProfile == nil {
		var v bool = false
		t.SubProfile = &v
	}
	if t.SubscriberId == nil {
		var v bool = false
		t.SubscriberId = &v
	}
	if t.TunnelClientAttrs == nil {
		var v bool = false
		t.TunnelClientAttrs = &v
	}
	if t.TunnelServerAttrs == nil {
		var v bool = false
		t.TunnelServerAttrs = &v
	}
	if t.Uli == nil {
		var v bool = false
		t.Uli = &v
	}
	if t.UserName == nil {
		var v bool = false
		t.UserName = &v
	}
	if t.V6AggregateStats == nil {
		var v bool = false
		t.V6AggregateStats = &v
	}
	if t.WifiNumAttachedUes == nil {
		var v bool = false
		t.WifiNumAttachedUes = &v
	}
	if t.WifiRssi == nil {
		var v bool = false
		t.WifiRssi = &v
	}
	if t.WifiSsidVlan == nil {
		var v bool = false
		t.WifiSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
	t.CallingStationId.PopulateDefaults()
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/include-radius-attribute/calling-station-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId_Type_sap_string
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId_Type_sap_string
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_CallingStationId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/include-radius-attribute/nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/include-radius-attribute/nas-port-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId struct {
	PrefixString *string                                                                                                          `path:"prefix-string" module:"nokia-conf"`
	Suffix       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) IsYANGGoStruct() {
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) GetSuffix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/include-radius-attribute/nas-port-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType struct {
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Union {
	if t == nil || t.Type == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == nil {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_IncludeRadiusAttribute_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/mcs-interval YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval struct {
	Interval NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval_Interval_Union `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) GetInterval() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval_Interval_Union {
	if t == nil || t.Interval == nil {
		return nil
	}
	return t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_McsInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/queue-instance-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	InterimUpdate *bool                       `path:"interim-update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return true
	}
	return *t.InterimUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.InterimUpdate == nil {
		var v bool = true
		t.InterimUpdate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_QueueInstanceAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/session-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting struct {
	AdminState    E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	HostUpdate    *bool                       `path:"host-update" module:"nokia-conf"`
	InterimUpdate *bool                       `path:"interim-update" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetHostUpdate retrieves the value of the leaf HostUpdate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostUpdate is set, it can
// safely use t.GetHostUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) GetHostUpdate() bool {
	if t == nil || t.HostUpdate == nil {
		return false
	}
	return *t.HostUpdate
}

// GetInterimUpdate retrieves the value of the leaf InterimUpdate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterimUpdate is set, it can
// safely use t.GetInterimUpdate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterimUpdate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) GetInterimUpdate() bool {
	if t == nil || t.InterimUpdate == nil {
		return false
	}
	return *t.InterimUpdate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HostUpdate == nil {
		var v bool = false
		t.HostUpdate = &v
	}
	if t.InterimUpdate == nil {
		var v bool = false
		t.InterimUpdate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_SessionAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/triggered-updates YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates struct {
	GtpMobility *bool `path:"gtp-mobility" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) IsYANGGoStruct() {
}

// GetGtpMobility retrieves the value of the leaf GtpMobility from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpMobility is set, it can
// safely use t.GetGtpMobility() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpMobility == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) GetGtpMobility() bool {
	if t == nil || t.GtpMobility == nil {
		return false
	}
	return *t.GtpMobility
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GtpMobility == nil {
		var v bool = false
		t.GtpMobility = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_TriggeredUpdates) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-accounting-policy/update-interval YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval struct {
	Interval *uint32                                                                                            `path:"interval" module:"nokia-conf"`
	Jitter   NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval_Jitter_Union `path:"jitter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) IsYANGGoStruct() {
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetJitter retrieves the value of the leaf Jitter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Jitter is set, it can
// safely use t.GetJitter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Jitter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) GetJitter() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval_Jitter_Union {
	if t == nil || t.Jitter == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval_Jitter_Enum_auto
	}
	return t.Jitter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Jitter == nil {
		t.Jitter = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval_Jitter_Enum_auto
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAccountingPolicy_UpdateInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy struct {
	Description            *string                                                                                            `path:"description" module:"nokia-conf"`
	Fallback               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback               `path:"fallback" module:"nokia-conf"`
	IncludeRadiusAttribute *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute `path:"include-radius-attribute" module:"nokia-conf"`
	Name                   *string                                                                                            `path:"name" module:"nokia-conf"`
	Password               *string                                                                                            `path:"password" module:"nokia-conf"`
	PppUserName            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName            `path:"ppp-user-name" module:"nokia-conf"`
	PppoeAccessMethod      E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppoeAccessMethod     `path:"pppoe-access-method" module:"nokia-conf"`
	RadiusServerPolicy     *string                                                                                            `path:"radius-server-policy" module:"nokia-conf"`
	ReAuthentication       *bool                                                                                              `path:"re-authentication" module:"nokia-conf"`
	SendAcctStopOnFail     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail     `path:"send-acct-stop-on-fail" module:"nokia-conf"`
	UserName               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName               `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) IsYANGGoStruct() {}

// GetOrCreateFallback retrieves the value of the Fallback field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetOrCreateFallback() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback {
	if t.Fallback != nil {
		return t.Fallback
	}
	t.Fallback = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback{}
	return t.Fallback
}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetOrCreatePppUserName retrieves the value of the PppUserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetOrCreatePppUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName {
	if t.PppUserName != nil {
		return t.PppUserName
	}
	t.PppUserName = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName{}
	return t.PppUserName
}

// GetOrCreateSendAcctStopOnFail retrieves the value of the SendAcctStopOnFail field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetOrCreateSendAcctStopOnFail() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail {
	if t.SendAcctStopOnFail != nil {
		return t.SendAcctStopOnFail
	}
	t.SendAcctStopOnFail = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail{}
	return t.SendAcctStopOnFail
}

// GetOrCreateUserName retrieves the value of the UserName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetOrCreateUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName {
	if t.UserName != nil {
		return t.UserName
	}
	t.UserName = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName{}
	return t.UserName
}

// GetFallback returns the value of the Fallback struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy. If the receiver or the field Fallback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetFallback() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback {
	if t != nil && t.Fallback != nil {
		return t.Fallback
	}
	return nil
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetPppUserName returns the value of the PppUserName struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy. If the receiver or the field PppUserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetPppUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName {
	if t != nil && t.PppUserName != nil {
		return t.PppUserName
	}
	return nil
}

// GetSendAcctStopOnFail returns the value of the SendAcctStopOnFail struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy. If the receiver or the field SendAcctStopOnFail is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetSendAcctStopOnFail() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail {
	if t != nil && t.SendAcctStopOnFail != nil {
		return t.SendAcctStopOnFail
	}
	return nil
}

// GetUserName returns the value of the UserName struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy. If the receiver or the field UserName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetUserName() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName {
	if t != nil && t.UserName != nil {
		return t.UserName
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetPppoeAccessMethod retrieves the value of the leaf PppoeAccessMethod from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeAccessMethod is set, it can
// safely use t.GetPppoeAccessMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeAccessMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetPppoeAccessMethod() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppoeAccessMethod {
	if t == nil || t.PppoeAccessMethod == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppoeAccessMethod_padi
	}
	return t.PppoeAccessMethod
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// GetReAuthentication retrieves the value of the leaf ReAuthentication from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReAuthentication is set, it can
// safely use t.GetReAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) GetReAuthentication() bool {
	if t == nil || t.ReAuthentication == nil {
		return false
	}
	return *t.ReAuthentication
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PppoeAccessMethod == 0 {
		t.PppoeAccessMethod = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppoeAccessMethod_padi
	}
	if t.ReAuthentication == nil {
		var v bool = false
		t.ReAuthentication = &v
	}
	t.Fallback.PopulateDefaults()
	t.IncludeRadiusAttribute.PopulateDefaults()
	t.PppUserName.PopulateDefaults()
	t.SendAcctStopOnFail.PopulateDefaults()
	t.UserName.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/fallback YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback struct {
	Action       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action `path:"action" module:"nokia-conf"`
	ForceProbing *bool                                                                                       `path:"force-probing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action{}
	return t.Action
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) GetAction() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetForceProbing retrieves the value of the leaf ForceProbing from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceProbing is set, it can
// safely use t.GetForceProbing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceProbing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) GetForceProbing() bool {
	if t == nil || t.ForceProbing == nil {
		return false
	}
	return *t.ForceProbing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ForceProbing == nil {
		var v bool = false
		t.ForceProbing = &v
	}
	t.Action.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/fallback/action YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action struct {
	Accept YANGEmpty `path:"accept" module:"nokia-conf"`
	UserDb *string   `path:"user-db" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) IsYANGGoStruct() {
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetUserDb retrieves the value of the leaf UserDb from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDb is set, it can
// safely use t.GetUserDb() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDb == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) GetUserDb() string {
	if t == nil || t.UserDb == nil {
		return ""
	}
	return *t.UserDb
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_Fallback_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute struct {
	AccessLoopOptions         *bool                                                                                                               `path:"access-loop-options" module:"nokia-conf"`
	AcctSessionId             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId    `path:"acct-session-id" module:"nokia-conf" yangPresence:"true"`
	Apn                       *bool                                                                                                               `path:"apn" module:"nokia-conf"`
	CalledStationId           *bool                                                                                                               `path:"called-station-id" module:"nokia-conf"`
	CallingStationId          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId `path:"calling-station-id" module:"nokia-conf" yangPresence:"true"`
	CircuitId                 *bool                                                                                                               `path:"circuit-id" module:"nokia-conf"`
	DhcpOptions               *bool                                                                                                               `path:"dhcp-options" module:"nokia-conf"`
	DhcpVendorClassId         *bool                                                                                                               `path:"dhcp-vendor-class-id" module:"nokia-conf"`
	Dhcp6Options              *bool                                                                                                               `path:"dhcp6-options" module:"nokia-conf"`
	GprsNegotiatedQosProfile  *bool                                                                                                               `path:"gprs-negotiated-qos-profile" module:"nokia-conf"`
	Imei                      *bool                                                                                                               `path:"imei" module:"nokia-conf"`
	Imsi                      *bool                                                                                                               `path:"imsi" module:"nokia-conf"`
	MacAddress                *bool                                                                                                               `path:"mac-address" module:"nokia-conf"`
	Msisdn                    *bool                                                                                                               `path:"msisdn" module:"nokia-conf"`
	NasIdentifier             *bool                                                                                                               `path:"nas-identifier" module:"nokia-conf"`
	NasPort                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort          `path:"nas-port" module:"nokia-conf" yangPresence:"true"`
	NasPortId                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId        `path:"nas-port-id" module:"nokia-conf" yangPresence:"true"`
	NasPortType               *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType      `path:"nas-port-type" module:"nokia-conf" yangPresence:"true"`
	PppoeServiceName          *bool                                                                                                               `path:"pppoe-service-name" module:"nokia-conf"`
	RatType                   *bool                                                                                                               `path:"rat-type" module:"nokia-conf"`
	RemoteId                  *bool                                                                                                               `path:"remote-id" module:"nokia-conf"`
	SapSessionIndex           *bool                                                                                                               `path:"sap-session-index" module:"nokia-conf"`
	TunnelServerAttrs         *bool                                                                                                               `path:"tunnel-server-attrs" module:"nokia-conf"`
	Uli                       *bool                                                                                                               `path:"uli" module:"nokia-conf"`
	WifiNumAttachedUes        *bool                                                                                                               `path:"wifi-num-attached-ues" module:"nokia-conf"`
	WifiSsidVlan              *bool                                                                                                               `path:"wifi-ssid-vlan" module:"nokia-conf"`
	XconnectTunnelHomeAddress *bool                                                                                                               `path:"xconnect-tunnel-home-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {
}

// GetOrCreateAcctSessionId retrieves the value of the AcctSessionId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetOrCreateAcctSessionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId {
	if t.AcctSessionId != nil {
		return t.AcctSessionId
	}
	t.AcctSessionId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId{}
	return t.AcctSessionId
}

// GetOrCreateCallingStationId retrieves the value of the CallingStationId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetOrCreateCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId {
	if t.CallingStationId != nil {
		return t.CallingStationId
	}
	t.CallingStationId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId{}
	return t.CallingStationId
}

// GetOrCreateNasPort retrieves the value of the NasPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetOrCreateNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort {
	if t.NasPort != nil {
		return t.NasPort
	}
	t.NasPort = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort{}
	return t.NasPort
}

// GetOrCreateNasPortId retrieves the value of the NasPortId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetOrCreateNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId {
	if t.NasPortId != nil {
		return t.NasPortId
	}
	t.NasPortId = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId{}
	return t.NasPortId
}

// GetOrCreateNasPortType retrieves the value of the NasPortType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetOrCreateNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType {
	if t.NasPortType != nil {
		return t.NasPortType
	}
	t.NasPortType = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType{}
	return t.NasPortType
}

// GetAcctSessionId returns the value of the AcctSessionId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute. If the receiver or the field AcctSessionId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetAcctSessionId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId {
	if t != nil && t.AcctSessionId != nil {
		return t.AcctSessionId
	}
	return nil
}

// GetCallingStationId returns the value of the CallingStationId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute. If the receiver or the field CallingStationId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetCallingStationId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId {
	if t != nil && t.CallingStationId != nil {
		return t.CallingStationId
	}
	return nil
}

// GetNasPort returns the value of the NasPort struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute. If the receiver or the field NasPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetNasPort() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort {
	if t != nil && t.NasPort != nil {
		return t.NasPort
	}
	return nil
}

// GetNasPortId returns the value of the NasPortId struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetNasPortId() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId {
	if t != nil && t.NasPortId != nil {
		return t.NasPortId
	}
	return nil
}

// GetNasPortType returns the value of the NasPortType struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute. If the receiver or the field NasPortType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetNasPortType() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType {
	if t != nil && t.NasPortType != nil {
		return t.NasPortType
	}
	return nil
}

// GetAccessLoopOptions retrieves the value of the leaf AccessLoopOptions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessLoopOptions is set, it can
// safely use t.GetAccessLoopOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessLoopOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetAccessLoopOptions() bool {
	if t == nil || t.AccessLoopOptions == nil {
		return false
	}
	return *t.AccessLoopOptions
}

// GetApn retrieves the value of the leaf Apn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Apn is set, it can
// safely use t.GetApn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Apn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetApn() bool {
	if t == nil || t.Apn == nil {
		return false
	}
	return *t.Apn
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCircuitId retrieves the value of the leaf CircuitId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CircuitId is set, it can
// safely use t.GetCircuitId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CircuitId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetCircuitId() bool {
	if t == nil || t.CircuitId == nil {
		return false
	}
	return *t.CircuitId
}

// GetDhcpOptions retrieves the value of the leaf DhcpOptions from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpOptions is set, it can
// safely use t.GetDhcpOptions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpOptions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetDhcpOptions() bool {
	if t == nil || t.DhcpOptions == nil {
		return false
	}
	return *t.DhcpOptions
}

// GetDhcpVendorClassId retrieves the value of the leaf DhcpVendorClassId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpVendorClassId is set, it can
// safely use t.GetDhcpVendorClassId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpVendorClassId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetDhcpVendorClassId() bool {
	if t == nil || t.DhcpVendorClassId == nil {
		return false
	}
	return *t.DhcpVendorClassId
}

// GetDhcp6Options retrieves the value of the leaf Dhcp6Options from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp6Options is set, it can
// safely use t.GetDhcp6Options() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp6Options == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetDhcp6Options() bool {
	if t == nil || t.Dhcp6Options == nil {
		return false
	}
	return *t.Dhcp6Options
}

// GetGprsNegotiatedQosProfile retrieves the value of the leaf GprsNegotiatedQosProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GprsNegotiatedQosProfile is set, it can
// safely use t.GetGprsNegotiatedQosProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GprsNegotiatedQosProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetGprsNegotiatedQosProfile() bool {
	if t == nil || t.GprsNegotiatedQosProfile == nil {
		return false
	}
	return *t.GprsNegotiatedQosProfile
}

// GetImei retrieves the value of the leaf Imei from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Imei is set, it can
// safely use t.GetImei() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Imei == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetImei() bool {
	if t == nil || t.Imei == nil {
		return false
	}
	return *t.Imei
}

// GetImsi retrieves the value of the leaf Imsi from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Imsi is set, it can
// safely use t.GetImsi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Imsi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetImsi() bool {
	if t == nil || t.Imsi == nil {
		return false
	}
	return *t.Imsi
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetMacAddress() bool {
	if t == nil || t.MacAddress == nil {
		return false
	}
	return *t.MacAddress
}

// GetMsisdn retrieves the value of the leaf Msisdn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Msisdn is set, it can
// safely use t.GetMsisdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Msisdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetMsisdn() bool {
	if t == nil || t.Msisdn == nil {
		return false
	}
	return *t.Msisdn
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetPppoeServiceName retrieves the value of the leaf PppoeServiceName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeServiceName is set, it can
// safely use t.GetPppoeServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetPppoeServiceName() bool {
	if t == nil || t.PppoeServiceName == nil {
		return false
	}
	return *t.PppoeServiceName
}

// GetRatType retrieves the value of the leaf RatType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatType is set, it can
// safely use t.GetRatType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetRatType() bool {
	if t == nil || t.RatType == nil {
		return false
	}
	return *t.RatType
}

// GetRemoteId retrieves the value of the leaf RemoteId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteId is set, it can
// safely use t.GetRemoteId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetRemoteId() bool {
	if t == nil || t.RemoteId == nil {
		return false
	}
	return *t.RemoteId
}

// GetSapSessionIndex retrieves the value of the leaf SapSessionIndex from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SapSessionIndex is set, it can
// safely use t.GetSapSessionIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SapSessionIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetSapSessionIndex() bool {
	if t == nil || t.SapSessionIndex == nil {
		return false
	}
	return *t.SapSessionIndex
}

// GetTunnelServerAttrs retrieves the value of the leaf TunnelServerAttrs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelServerAttrs is set, it can
// safely use t.GetTunnelServerAttrs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelServerAttrs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetTunnelServerAttrs() bool {
	if t == nil || t.TunnelServerAttrs == nil {
		return false
	}
	return *t.TunnelServerAttrs
}

// GetUli retrieves the value of the leaf Uli from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uli is set, it can
// safely use t.GetUli() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uli == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetUli() bool {
	if t == nil || t.Uli == nil {
		return false
	}
	return *t.Uli
}

// GetWifiNumAttachedUes retrieves the value of the leaf WifiNumAttachedUes from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WifiNumAttachedUes is set, it can
// safely use t.GetWifiNumAttachedUes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WifiNumAttachedUes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetWifiNumAttachedUes() bool {
	if t == nil || t.WifiNumAttachedUes == nil {
		return false
	}
	return *t.WifiNumAttachedUes
}

// GetWifiSsidVlan retrieves the value of the leaf WifiSsidVlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WifiSsidVlan is set, it can
// safely use t.GetWifiSsidVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WifiSsidVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetWifiSsidVlan() bool {
	if t == nil || t.WifiSsidVlan == nil {
		return false
	}
	return *t.WifiSsidVlan
}

// GetXconnectTunnelHomeAddress retrieves the value of the leaf XconnectTunnelHomeAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if XconnectTunnelHomeAddress is set, it can
// safely use t.GetXconnectTunnelHomeAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.XconnectTunnelHomeAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) GetXconnectTunnelHomeAddress() bool {
	if t == nil || t.XconnectTunnelHomeAddress == nil {
		return false
	}
	return *t.XconnectTunnelHomeAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessLoopOptions == nil {
		var v bool = false
		t.AccessLoopOptions = &v
	}
	if t.Apn == nil {
		var v bool = false
		t.Apn = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CircuitId == nil {
		var v bool = false
		t.CircuitId = &v
	}
	if t.DhcpOptions == nil {
		var v bool = false
		t.DhcpOptions = &v
	}
	if t.DhcpVendorClassId == nil {
		var v bool = false
		t.DhcpVendorClassId = &v
	}
	if t.Dhcp6Options == nil {
		var v bool = false
		t.Dhcp6Options = &v
	}
	if t.GprsNegotiatedQosProfile == nil {
		var v bool = false
		t.GprsNegotiatedQosProfile = &v
	}
	if t.Imei == nil {
		var v bool = false
		t.Imei = &v
	}
	if t.Imsi == nil {
		var v bool = false
		t.Imsi = &v
	}
	if t.MacAddress == nil {
		var v bool = false
		t.MacAddress = &v
	}
	if t.Msisdn == nil {
		var v bool = false
		t.Msisdn = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.PppoeServiceName == nil {
		var v bool = false
		t.PppoeServiceName = &v
	}
	if t.RatType == nil {
		var v bool = false
		t.RatType = &v
	}
	if t.RemoteId == nil {
		var v bool = false
		t.RemoteId = &v
	}
	if t.SapSessionIndex == nil {
		var v bool = false
		t.SapSessionIndex = &v
	}
	if t.TunnelServerAttrs == nil {
		var v bool = false
		t.TunnelServerAttrs = &v
	}
	if t.Uli == nil {
		var v bool = false
		t.Uli = &v
	}
	if t.WifiNumAttachedUes == nil {
		var v bool = false
		t.WifiNumAttachedUes = &v
	}
	if t.WifiSsidVlan == nil {
		var v bool = false
		t.WifiSsidVlan = &v
	}
	if t.XconnectTunnelHomeAddress == nil {
		var v bool = false
		t.XconnectTunnelHomeAddress = &v
	}
	t.AcctSessionId.PopulateDefaults()
	t.CallingStationId.PopulateDefaults()
	t.NasPort.PopulateDefaults()
	t.NasPortId.PopulateDefaults()
	t.NasPortType.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute/acct-session-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId_Type_host
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId_Type_host
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_AcctSessionId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute/calling-station-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId_Type_sap_string
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId_Type_sap_string
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_CallingStationId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute/nas-port YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort struct {
	BitSpec *string `path:"bit-spec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) IsYANGGoStruct() {
}

// GetBitSpec retrieves the value of the leaf BitSpec from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitSpec is set, it can
// safely use t.GetBitSpec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitSpec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) GetBitSpec() string {
	if t == nil || t.BitSpec == nil {
		return ""
	}
	return *t.BitSpec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute/nas-port-id YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId struct {
	PrefixString *string                                                                                                              `path:"prefix-string" module:"nokia-conf"`
	Suffix       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId_Suffix `path:"suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) IsYANGGoStruct() {
}

// GetPrefixString retrieves the value of the leaf PrefixString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixString is set, it can
// safely use t.GetPrefixString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) GetPrefixString() string {
	if t == nil || t.PrefixString == nil {
		return ""
	}
	return *t.PrefixString
}

// GetSuffix retrieves the value of the leaf Suffix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Suffix is set, it can
// safely use t.GetSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) GetSuffix() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId_Suffix {
	if t == nil || t.Suffix == 0 {
		return 0
	}
	return t.Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/include-radius-attribute/nas-port-type YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType struct {
	Type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType_Type_Union `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) GetType() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType_Type_Union {
	if t == nil || t.Type == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == nil {
		t.Type = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType_Type_Enum_rfc_aligned
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_IncludeRadiusAttribute_NasPortType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/ppp-user-name YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName struct {
	DomainName      *string                                                  `path:"domain-name" module:"nokia-conf"`
	DomainOperation E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation `path:"domain-operation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) IsYANGGoStruct() {
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetDomainOperation retrieves the value of the leaf DomainOperation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainOperation is set, it can
// safely use t.GetDomainOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainOperation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) GetDomainOperation() E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation {
	if t == nil || t.DomainOperation == 0 {
		return 0
	}
	return t.DomainOperation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_PppUserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/send-acct-stop-on-fail YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail struct {
	OnAcceptFailure  *bool `path:"on-accept-failure" module:"nokia-conf"`
	OnReject         *bool `path:"on-reject" module:"nokia-conf"`
	OnRequestFailure *bool `path:"on-request-failure" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) IsYANGGoStruct() {
}

// GetOnAcceptFailure retrieves the value of the leaf OnAcceptFailure from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnAcceptFailure is set, it can
// safely use t.GetOnAcceptFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnAcceptFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) GetOnAcceptFailure() bool {
	if t == nil || t.OnAcceptFailure == nil {
		return false
	}
	return *t.OnAcceptFailure
}

// GetOnReject retrieves the value of the leaf OnReject from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnReject is set, it can
// safely use t.GetOnReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnReject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) GetOnReject() bool {
	if t == nil || t.OnReject == nil {
		return false
	}
	return *t.OnReject
}

// GetOnRequestFailure retrieves the value of the leaf OnRequestFailure from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnRequestFailure is set, it can
// safely use t.GetOnRequestFailure() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnRequestFailure == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) GetOnRequestFailure() bool {
	if t == nil || t.OnRequestFailure == nil {
		return false
	}
	return *t.OnRequestFailure
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OnAcceptFailure == nil {
		var v bool = false
		t.OnAcceptFailure = &v
	}
	if t.OnReject == nil {
		var v bool = false
		t.OnReject = &v
	}
	if t.OnRequestFailure == nil {
		var v bool = false
		t.OnRequestFailure = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_SendAcctStopOnFail) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName represents the /nokia-conf/configure/groups/group/subscriber-mgmt/radius-authentication-policy/user-name YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName struct {
	DomainName      *string                                                                                         `path:"domain-name" module:"nokia-conf"`
	DomainOperation E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation                                        `path:"domain-operation" module:"nokia-conf"`
	Format          E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_Format    `path:"format" module:"nokia-conf"`
	GtpFormat       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_GtpFormat `path:"gtp-format" module:"nokia-conf"`
	MacFormat       *string                                                                                         `path:"mac-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) IsYANGGoStruct() {
}

// GetDomainName retrieves the value of the leaf DomainName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainName is set, it can
// safely use t.GetDomainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) GetDomainName() string {
	if t == nil || t.DomainName == nil {
		return ""
	}
	return *t.DomainName
}

// GetDomainOperation retrieves the value of the leaf DomainOperation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DomainOperation is set, it can
// safely use t.GetDomainOperation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DomainOperation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) GetDomainOperation() E_NokiaTypesSubscriberMgmt_UserNameFormatDomainOperation {
	if t == nil || t.DomainOperation == 0 {
		return 0
	}
	return t.DomainOperation
}

// GetFormat retrieves the value of the leaf Format from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Format is set, it can
// safely use t.GetFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Format == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) GetFormat() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_Format {
	if t == nil || t.Format == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_Format_mac
	}
	return t.Format
}

// GetGtpFormat retrieves the value of the leaf GtpFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpFormat is set, it can
// safely use t.GetGtpFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) GetGtpFormat() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_GtpFormat {
	if t == nil || t.GtpFormat == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_GtpFormat_imsi
	}
	return t.GtpFormat
}

// GetMacFormat retrieves the value of the leaf MacFormat from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacFormat is set, it can
// safely use t.GetMacFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) GetMacFormat() string {
	if t == nil || t.MacFormat == nil {
		return "aa:"
	}
	return *t.MacFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Format == 0 {
		t.Format = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_Format_mac
	}
	if t.GtpFormat == 0 {
		t.GtpFormat = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName_GtpFormat_imsi
	}
	if t.MacFormat == nil {
		var v string = "aa:"
		t.MacFormat = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RadiusAuthenticationPolicy_UserName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/rip-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy struct {
	AuthenticationKey  *string                                                                        `path:"authentication-key" module:"nokia-conf"`
	AuthenticationType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy_AuthenticationType `path:"authentication-type" module:"nokia-conf"`
	Description        *string                                                                        `path:"description" module:"nokia-conf"`
	Name               *string                                                                        `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) IsYANGGoStruct() {}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationType retrieves the value of the leaf AuthenticationType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationType is set, it can
// safely use t.GetAuthenticationType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) GetAuthenticationType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy_AuthenticationType {
	if t == nil || t.AuthenticationType == 0 {
		return 0
	}
	return t.AuthenticationType
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RipPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy struct {
	ForceMcast               E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_ForceMcast   `path:"force-mcast" module:"nokia-conf"`
	MaxAdvertisementInterval *uint32                                                                                  `path:"max-advertisement-interval" module:"nokia-conf"`
	MinAdvertisementInterval *uint32                                                                                  `path:"min-advertisement-interval" module:"nokia-conf"`
	Name                     *string                                                                                  `path:"name" module:"nokia-conf"`
	Options                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options       `path:"options" module:"nokia-conf"`
	PrefixOptions            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions `path:"prefix-options" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) IsYANGGoStruct() {}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options{}
	return t.Options
}

// GetOrCreatePrefixOptions retrieves the value of the PrefixOptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetOrCreatePrefixOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions {
	if t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	t.PrefixOptions = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions{}
	return t.PrefixOptions
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPrefixOptions returns the value of the PrefixOptions struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy. If the receiver or the field PrefixOptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetPrefixOptions() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions {
	if t != nil && t.PrefixOptions != nil {
		return t.PrefixOptions
	}
	return nil
}

// GetForceMcast retrieves the value of the leaf ForceMcast from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceMcast is set, it can
// safely use t.GetForceMcast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceMcast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetForceMcast() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_ForceMcast {
	if t == nil || t.ForceMcast == 0 {
		return 0
	}
	return t.ForceMcast
}

// GetMaxAdvertisementInterval retrieves the value of the leaf MaxAdvertisementInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdvertisementInterval is set, it can
// safely use t.GetMaxAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetMaxAdvertisementInterval() uint32 {
	if t == nil || t.MaxAdvertisementInterval == nil {
		return 1800
	}
	return *t.MaxAdvertisementInterval
}

// GetMinAdvertisementInterval retrieves the value of the leaf MinAdvertisementInterval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinAdvertisementInterval is set, it can
// safely use t.GetMinAdvertisementInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinAdvertisementInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetMinAdvertisementInterval() uint32 {
	if t == nil || t.MinAdvertisementInterval == nil {
		return 900
	}
	return *t.MinAdvertisementInterval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxAdvertisementInterval == nil {
		var v uint32 = 1800
		t.MaxAdvertisementInterval = &v
	}
	if t.MinAdvertisementInterval == nil {
		var v uint32 = 900
		t.MinAdvertisementInterval = &v
	}
	t.Options.PopulateDefaults()
	t.PrefixOptions.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy/options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options struct {
	CurrentHopLimit            *uint32                                                                                                `path:"current-hop-limit" module:"nokia-conf"`
	Dns                        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns                 `path:"dns" module:"nokia-conf"`
	ManagedConfiguration       *bool                                                                                                  `path:"managed-configuration" module:"nokia-conf"`
	Mtu                        NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Mtu_Union            `path:"mtu" module:"nokia-conf"`
	OtherStatefulConfiguration *bool                                                                                                  `path:"other-stateful-configuration" module:"nokia-conf"`
	ReachableTime              *uint32                                                                                                `path:"reachable-time" module:"nokia-conf"`
	RetransmitTimer            *uint32                                                                                                `path:"retransmit-timer" module:"nokia-conf"`
	RouterLifetime             NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_RouterLifetime_Union `path:"router-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) IsYANGGoStruct() {
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetOrCreateDns() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns{}
	return t.Dns
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetDns() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetCurrentHopLimit retrieves the value of the leaf CurrentHopLimit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CurrentHopLimit is set, it can
// safely use t.GetCurrentHopLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CurrentHopLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetCurrentHopLimit() uint32 {
	if t == nil || t.CurrentHopLimit == nil {
		return 64
	}
	return *t.CurrentHopLimit
}

// GetManagedConfiguration retrieves the value of the leaf ManagedConfiguration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagedConfiguration is set, it can
// safely use t.GetManagedConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagedConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetManagedConfiguration() bool {
	if t == nil || t.ManagedConfiguration == nil {
		return false
	}
	return *t.ManagedConfiguration
}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetMtu() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Mtu_Union {
	if t == nil || t.Mtu == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Mtu_Enum_not_included
	}
	return t.Mtu
}

// GetOtherStatefulConfiguration retrieves the value of the leaf OtherStatefulConfiguration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OtherStatefulConfiguration is set, it can
// safely use t.GetOtherStatefulConfiguration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OtherStatefulConfiguration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetOtherStatefulConfiguration() bool {
	if t == nil || t.OtherStatefulConfiguration == nil {
		return false
	}
	return *t.OtherStatefulConfiguration
}

// GetReachableTime retrieves the value of the leaf ReachableTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReachableTime is set, it can
// safely use t.GetReachableTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReachableTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetReachableTime() uint32 {
	if t == nil || t.ReachableTime == nil {
		return 0
	}
	return *t.ReachableTime
}

// GetRetransmitTimer retrieves the value of the leaf RetransmitTimer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetransmitTimer is set, it can
// safely use t.GetRetransmitTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetransmitTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetRetransmitTimer() uint32 {
	if t == nil || t.RetransmitTimer == nil {
		return 0
	}
	return *t.RetransmitTimer
}

// GetRouterLifetime retrieves the value of the leaf RouterLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterLifetime is set, it can
// safely use t.GetRouterLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) GetRouterLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_RouterLifetime_Union {
	if t == nil || t.RouterLifetime == nil {
		return UnionUint32(4500)
	}
	return t.RouterLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CurrentHopLimit == nil {
		var v uint32 = 64
		t.CurrentHopLimit = &v
	}
	if t.ManagedConfiguration == nil {
		var v bool = false
		t.ManagedConfiguration = &v
	}
	if t.Mtu == nil {
		t.Mtu = NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Mtu_Enum_not_included
	}
	if t.OtherStatefulConfiguration == nil {
		var v bool = false
		t.OtherStatefulConfiguration = &v
	}
	if t.ReachableTime == nil {
		var v uint32 = 0
		t.ReachableTime = &v
	}
	if t.RetransmitTimer == nil {
		var v uint32 = 0
		t.RetransmitTimer = &v
	}
	if t.RouterLifetime == nil {
		t.RouterLifetime = UnionUint32(4500)
	}
	t.Dns.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy/options/dns YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns struct {
	IncludeRdnss  *bool                                                                                                     `path:"include-rdnss" module:"nokia-conf"`
	RdnssLifetime NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns_RdnssLifetime_Union `path:"rdnss-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) IsYANGGoStruct() {
}

// GetIncludeRdnss retrieves the value of the leaf IncludeRdnss from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeRdnss is set, it can
// safely use t.GetIncludeRdnss() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeRdnss == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) GetIncludeRdnss() bool {
	if t == nil || t.IncludeRdnss == nil {
		return false
	}
	return *t.IncludeRdnss
}

// GetRdnssLifetime retrieves the value of the leaf RdnssLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RdnssLifetime is set, it can
// safely use t.GetRdnssLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RdnssLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) GetRdnssLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns_RdnssLifetime_Union {
	if t == nil || t.RdnssLifetime == nil {
		return UnionUint32(3600)
	}
	return t.RdnssLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeRdnss == nil {
		var v bool = false
		t.IncludeRdnss = &v
	}
	if t.RdnssLifetime == nil {
		t.RdnssLifetime = UnionUint32(3600)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_Options_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy/prefix-options YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions struct {
	Stateful  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful  `path:"stateful" module:"nokia-conf"`
	Stateless *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless `path:"stateless" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) IsYANGGoStruct() {
}

// GetOrCreateStateful retrieves the value of the Stateful field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) GetOrCreateStateful() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful {
	if t.Stateful != nil {
		return t.Stateful
	}
	t.Stateful = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful{}
	return t.Stateful
}

// GetOrCreateStateless retrieves the value of the Stateless field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) GetOrCreateStateless() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless {
	if t.Stateless != nil {
		return t.Stateless
	}
	t.Stateless = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless{}
	return t.Stateless
}

// GetStateful returns the value of the Stateful struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions. If the receiver or the field Stateful is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) GetStateful() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful {
	if t != nil && t.Stateful != nil {
		return t.Stateful
	}
	return nil
}

// GetStateless returns the value of the Stateless struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions. If the receiver or the field Stateless is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) GetStateless() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless {
	if t != nil && t.Stateless != nil {
		return t.Stateless
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Stateful.PopulateDefaults()
	t.Stateless.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy/prefix-options/stateful YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful struct {
	AutoLifetimes     *bool                                                                                                                    `path:"auto-lifetimes" module:"nokia-conf"`
	OnLink            *bool                                                                                                                    `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) IsYANGGoStruct() {
}

// GetAutoLifetimes retrieves the value of the leaf AutoLifetimes from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoLifetimes is set, it can
// safely use t.GetAutoLifetimes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoLifetimes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) GetAutoLifetimes() bool {
	if t == nil || t.AutoLifetimes == nil {
		return false
	}
	return *t.AutoLifetimes
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) GetValidLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoLifetimes == nil {
		var v bool = false
		t.AutoLifetimes = &v
	}
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateful) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless represents the /nokia-conf/configure/groups/group/subscriber-mgmt/router-advertisement-policy/prefix-options/stateless YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless struct {
	OnLink            *bool                                                                                                                     `path:"on-link" module:"nokia-conf"`
	PreferredLifetime NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless_PreferredLifetime_Union `path:"preferred-lifetime" module:"nokia-conf"`
	ValidLifetime     NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless_ValidLifetime_Union     `path:"valid-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) IsYANGGoStruct() {
}

// GetOnLink retrieves the value of the leaf OnLink from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OnLink is set, it can
// safely use t.GetOnLink() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OnLink == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) GetOnLink() bool {
	if t == nil || t.OnLink == nil {
		return true
	}
	return *t.OnLink
}

// GetPreferredLifetime retrieves the value of the leaf PreferredLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferredLifetime is set, it can
// safely use t.GetPreferredLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferredLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) GetPreferredLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless_PreferredLifetime_Union {
	if t == nil || t.PreferredLifetime == nil {
		return UnionUint32(3600)
	}
	return t.PreferredLifetime
}

// GetValidLifetime retrieves the value of the leaf ValidLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ValidLifetime is set, it can
// safely use t.GetValidLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ValidLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) GetValidLifetime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless_ValidLifetime_Union {
	if t == nil || t.ValidLifetime == nil {
		return UnionUint32(86400)
	}
	return t.ValidLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OnLink == nil {
		var v bool = true
		t.OnLink = &v
	}
	if t.PreferredLifetime == nil {
		t.PreferredLifetime = UnionUint32(3600)
	}
	if t.ValidLifetime == nil {
		t.ValidLifetime = UnionUint32(86400)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_RouterAdvertisementPolicy_PrefixOptions_Stateless) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sap-template YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate struct {
	CpuProtection     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection `path:"cpu-protection" module:"nokia-conf"`
	Description       *string                                                                    `path:"description" module:"nokia-conf"`
	DistCpuProtection *string                                                                    `path:"dist-cpu-protection" module:"nokia-conf"`
	HoldTime          NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_HoldTime_Union `path:"hold-time" module:"nokia-conf"`
	Name              *string                                                                    `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) IsYANGGoStruct() {}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection{}
	return t.CpuProtection
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetCpuProtection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDistCpuProtection retrieves the value of the leaf DistCpuProtection from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DistCpuProtection is set, it can
// safely use t.GetDistCpuProtection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DistCpuProtection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetDistCpuProtection() string {
	if t == nil || t.DistCpuProtection == nil {
		return ""
	}
	return *t.DistCpuProtection
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetHoldTime() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_HoldTime_Union {
	if t == nil || t.HoldTime == nil {
		return UnionUint32(30)
	}
	return t.HoldTime
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		t.HoldTime = UnionUint32(30)
	}
	t.CpuProtection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sap-template/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection struct {
	IpSrcMonitoring YANGEmpty `path:"ip-src-monitoring" module:"nokia-conf"`
	MacMonitoring   YANGEmpty `path:"mac-monitoring" module:"nokia-conf"`
	PolicyId        *uint32   `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) IsYANGGoStruct() {}

// GetIpSrcMonitoring retrieves the value of the leaf IpSrcMonitoring from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpSrcMonitoring is set, it can
// safely use t.GetIpSrcMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpSrcMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) GetIpSrcMonitoring() YANGEmpty {
	if t == nil || t.IpSrcMonitoring == false {
		return false
	}
	return t.IpSrcMonitoring
}

// GetMacMonitoring retrieves the value of the leaf MacMonitoring from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacMonitoring is set, it can
// safely use t.GetMacMonitoring() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacMonitoring == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) GetMacMonitoring() YANGEmpty {
	if t == nil || t.MacMonitoring == false {
		return false
	}
	return t.MacMonitoring
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) GetPolicyId() uint32 {
	if t == nil || t.PolicyId == nil {
		return 0
	}
	return *t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SapTemplate_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy struct {
	Description *string                                                              `path:"description" module:"nokia-conf"`
	Layer_3     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3  `path:"layer-3" module:"nokia-conf"`
	Name        *string                                                              `path:"name" module:"nokia-conf"`
	Periodic    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic `path:"periodic" module:"nokia-conf"`
	Trigger     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger  `path:"trigger" module:"nokia-conf"`
	Vpls        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls     `path:"vpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) IsYANGGoStruct() {}

// GetOrCreateLayer_3 retrieves the value of the Layer_3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetOrCreateLayer_3() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3 {
	if t.Layer_3 != nil {
		return t.Layer_3
	}
	t.Layer_3 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3{}
	return t.Layer_3
}

// GetOrCreatePeriodic retrieves the value of the Periodic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetOrCreatePeriodic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic {
	if t.Periodic != nil {
		return t.Periodic
	}
	t.Periodic = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic{}
	return t.Periodic
}

// GetOrCreateTrigger retrieves the value of the Trigger field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetOrCreateTrigger() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger {
	if t.Trigger != nil {
		return t.Trigger
	}
	t.Trigger = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger{}
	return t.Trigger
}

// GetOrCreateVpls retrieves the value of the Vpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetOrCreateVpls() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls {
	if t.Vpls != nil {
		return t.Vpls
	}
	t.Vpls = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls{}
	return t.Vpls
}

// GetLayer_3 returns the value of the Layer_3 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy. If the receiver or the field Layer_3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetLayer_3() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3 {
	if t != nil && t.Layer_3 != nil {
		return t.Layer_3
	}
	return nil
}

// GetPeriodic returns the value of the Periodic struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy. If the receiver or the field Periodic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetPeriodic() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic {
	if t != nil && t.Periodic != nil {
		return t.Periodic
	}
	return nil
}

// GetTrigger returns the value of the Trigger struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy. If the receiver or the field Trigger is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetTrigger() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger {
	if t != nil && t.Trigger != nil {
		return t.Trigger
	}
	return nil
}

// GetVpls returns the value of the Vpls struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy. If the receiver or the field Vpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetVpls() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls {
	if t != nil && t.Vpls != nil {
		return t.Vpls
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Layer_3.PopulateDefaults()
	t.Periodic.PopulateDefaults()
	t.Trigger.PopulateDefaults()
	t.Vpls.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/layer-3 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3 struct {
	SourceIpOrigin     E_NokiaTypesSubscriberMgmt_HostConnectivityVerifySourceIpOrigin `path:"source-ip-origin" module:"nokia-conf"`
	UnnumberedSourceIp *string                                                         `path:"unnumbered-source-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) IsYANGGoStruct() {}

// GetSourceIpOrigin retrieves the value of the leaf SourceIpOrigin from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIpOrigin is set, it can
// safely use t.GetSourceIpOrigin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIpOrigin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) GetSourceIpOrigin() E_NokiaTypesSubscriberMgmt_HostConnectivityVerifySourceIpOrigin {
	if t == nil || t.SourceIpOrigin == 0 {
		return NokiaTypesSubscriberMgmt_HostConnectivityVerifySourceIpOrigin_interface
	}
	return t.SourceIpOrigin
}

// GetUnnumberedSourceIp retrieves the value of the leaf UnnumberedSourceIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnnumberedSourceIp is set, it can
// safely use t.GetUnnumberedSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnnumberedSourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) GetUnnumberedSourceIp() string {
	if t == nil || t.UnnumberedSourceIp == nil {
		return ""
	}
	return *t.UnnumberedSourceIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SourceIpOrigin == 0 {
		t.SourceIpOrigin = NokiaTypesSubscriberMgmt_HostConnectivityVerifySourceIpOrigin_interface
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Layer_3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/periodic YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic struct {
	Action     E_NokiaTypesSubscriberMgmt_HostConnectivityVerifyAction `path:"action" module:"nokia-conf"`
	AdminState E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	Interval   *uint32                                                 `path:"interval" module:"nokia-conf"`
	RetryCount *uint32                                                 `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                                                 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) GetAction() E_NokiaTypesSubscriberMgmt_HostConnectivityVerifyAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesSubscriberMgmt_HostConnectivityVerifyAction_alarm
	}
	return t.Action
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 2
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 10
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesSubscriberMgmt_HostConnectivityVerifyAction_alarm
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.RetryCount == nil {
		var v uint32 = 2
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 10
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Periodic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger struct {
	HostLimitExceeded *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded `path:"host-limit-exceeded" module:"nokia-conf" yangPresence:"true"`
	Inactivity        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity        `path:"inactivity" module:"nokia-conf" yangPresence:"true"`
	IpConflict        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict        `path:"ip-conflict" module:"nokia-conf" yangPresence:"true"`
	MacLearning       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning       `path:"mac-learning" module:"nokia-conf" yangPresence:"true"`
	Mobility          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility          `path:"mobility" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) IsYANGGoStruct() {}

// GetOrCreateHostLimitExceeded retrieves the value of the HostLimitExceeded field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetOrCreateHostLimitExceeded() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded {
	if t.HostLimitExceeded != nil {
		return t.HostLimitExceeded
	}
	t.HostLimitExceeded = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded{}
	return t.HostLimitExceeded
}

// GetOrCreateInactivity retrieves the value of the Inactivity field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetOrCreateInactivity() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity {
	if t.Inactivity != nil {
		return t.Inactivity
	}
	t.Inactivity = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity{}
	return t.Inactivity
}

// GetOrCreateIpConflict retrieves the value of the IpConflict field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetOrCreateIpConflict() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict {
	if t.IpConflict != nil {
		return t.IpConflict
	}
	t.IpConflict = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict{}
	return t.IpConflict
}

// GetOrCreateMacLearning retrieves the value of the MacLearning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetOrCreateMacLearning() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning {
	if t.MacLearning != nil {
		return t.MacLearning
	}
	t.MacLearning = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning{}
	return t.MacLearning
}

// GetOrCreateMobility retrieves the value of the Mobility field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetOrCreateMobility() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility {
	if t.Mobility != nil {
		return t.Mobility
	}
	t.Mobility = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility{}
	return t.Mobility
}

// GetHostLimitExceeded returns the value of the HostLimitExceeded struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger. If the receiver or the field HostLimitExceeded is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetHostLimitExceeded() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded {
	if t != nil && t.HostLimitExceeded != nil {
		return t.HostLimitExceeded
	}
	return nil
}

// GetInactivity returns the value of the Inactivity struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger. If the receiver or the field Inactivity is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetInactivity() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity {
	if t != nil && t.Inactivity != nil {
		return t.Inactivity
	}
	return nil
}

// GetIpConflict returns the value of the IpConflict struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger. If the receiver or the field IpConflict is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetIpConflict() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict {
	if t != nil && t.IpConflict != nil {
		return t.IpConflict
	}
	return nil
}

// GetMacLearning returns the value of the MacLearning struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger. If the receiver or the field MacLearning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetMacLearning() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning {
	if t != nil && t.MacLearning != nil {
		return t.MacLearning
	}
	return nil
}

// GetMobility returns the value of the Mobility struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger. If the receiver or the field Mobility is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) GetMobility() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility {
	if t != nil && t.Mobility != nil {
		return t.Mobility
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HostLimitExceeded.PopulateDefaults()
	t.Inactivity.PopulateDefaults()
	t.IpConflict.PopulateDefaults()
	t.MacLearning.PopulateDefaults()
	t.Mobility.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger/host-limit-exceeded YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 1
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RetryCount == nil {
		var v uint32 = 1
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_HostLimitExceeded) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger/inactivity YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 2
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 10
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RetryCount == nil {
		var v uint32 = 2
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 10
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Inactivity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger/ip-conflict YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 1
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RetryCount == nil {
		var v uint32 = 1
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_IpConflict) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger/mac-learning YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 2
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 10
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RetryCount == nil {
		var v uint32 = 2
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 10
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_MacLearning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/trigger/mobility YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	RetryCount *uint32                     `path:"retry-count" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetRetryCount retrieves the value of the leaf RetryCount from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryCount is set, it can
// safely use t.GetRetryCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) GetRetryCount() uint32 {
	if t == nil || t.RetryCount == nil {
		return 1
	}
	return *t.RetryCount
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.RetryCount == nil {
		var v uint32 = 1
		t.RetryCount = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Trigger_Mobility) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls represents the /nokia-conf/configure/groups/group/subscriber-mgmt/shcv-policy/vpls YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls struct {
	SourceIp  *string `path:"source-ip" module:"nokia-conf"`
	SourceMac *string `path:"source-mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) IsYANGGoStruct() {}

// GetSourceIp retrieves the value of the leaf SourceIp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceIp is set, it can
// safely use t.GetSourceIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) GetSourceIp() string {
	if t == nil || t.SourceIp == nil {
		return ""
	}
	return *t.SourceIp
}

// GetSourceMac retrieves the value of the leaf SourceMac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceMac is set, it can
// safely use t.GetSourceMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) GetSourceMac() string {
	if t == nil || t.SourceMac == nil {
		return ""
	}
	return *t.SourceMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_ShcvPolicy_Vpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile struct {
	Control                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control                `path:"control" module:"nokia-conf"`
	CreditControlPolicy    *string                                                                            `path:"credit-control-policy" module:"nokia-conf"`
	DefInstanceSharing     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_DefInstanceSharing    `path:"def-instance-sharing" module:"nokia-conf"`
	Description            *string                                                                            `path:"description" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress                 `path:"egress" module:"nokia-conf"`
	HostLimits             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits             `path:"host-limits" module:"nokia-conf"`
	IdleTimeout            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout            `path:"idle-timeout" module:"nokia-conf" yangPresence:"true"`
	Ingress                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress                `path:"ingress" module:"nokia-conf"`
	Name                   *string                                                                            `path:"name" module:"nokia-conf"`
	OneTimeHttpRedirection *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection `path:"one-time-http-redirection" module:"nokia-conf"`
	PfcpMappings           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings           `path:"pfcp-mappings" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits          `path:"session-limits" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) IsYANGGoStruct() {}

// GetOrCreateControl retrieves the value of the Control field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateControl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control {
	if t.Control != nil {
		return t.Control
	}
	t.Control = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control{}
	return t.Control
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress{}
	return t.Egress
}

// GetOrCreateHostLimits retrieves the value of the HostLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateHostLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits {
	if t.HostLimits != nil {
		return t.HostLimits
	}
	t.HostLimits = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits{}
	return t.HostLimits
}

// GetOrCreateIdleTimeout retrieves the value of the IdleTimeout field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateIdleTimeout() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout {
	if t.IdleTimeout != nil {
		return t.IdleTimeout
	}
	t.IdleTimeout = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout{}
	return t.IdleTimeout
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress{}
	return t.Ingress
}

// GetOrCreateOneTimeHttpRedirection retrieves the value of the OneTimeHttpRedirection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateOneTimeHttpRedirection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection {
	if t.OneTimeHttpRedirection != nil {
		return t.OneTimeHttpRedirection
	}
	t.OneTimeHttpRedirection = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection{}
	return t.OneTimeHttpRedirection
}

// GetOrCreatePfcpMappings retrieves the value of the PfcpMappings field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreatePfcpMappings() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings {
	if t.PfcpMappings != nil {
		return t.PfcpMappings
	}
	t.PfcpMappings = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings{}
	return t.PfcpMappings
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOrCreateSessionLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits{}
	return t.SessionLimits
}

// GetControl returns the value of the Control struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field Control is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetControl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control {
	if t != nil && t.Control != nil {
		return t.Control
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetHostLimits returns the value of the HostLimits struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field HostLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetHostLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits {
	if t != nil && t.HostLimits != nil {
		return t.HostLimits
	}
	return nil
}

// GetIdleTimeout returns the value of the IdleTimeout struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field IdleTimeout is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetIdleTimeout() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout {
	if t != nil && t.IdleTimeout != nil {
		return t.IdleTimeout
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetOneTimeHttpRedirection returns the value of the OneTimeHttpRedirection struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field OneTimeHttpRedirection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetOneTimeHttpRedirection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection {
	if t != nil && t.OneTimeHttpRedirection != nil {
		return t.OneTimeHttpRedirection
	}
	return nil
}

// GetPfcpMappings returns the value of the PfcpMappings struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field PfcpMappings is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetPfcpMappings() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings {
	if t != nil && t.PfcpMappings != nil {
		return t.PfcpMappings
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetSessionLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetCreditControlPolicy retrieves the value of the leaf CreditControlPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreditControlPolicy is set, it can
// safely use t.GetCreditControlPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreditControlPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetCreditControlPolicy() string {
	if t == nil || t.CreditControlPolicy == nil {
		return ""
	}
	return *t.CreditControlPolicy
}

// GetDefInstanceSharing retrieves the value of the leaf DefInstanceSharing from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefInstanceSharing is set, it can
// safely use t.GetDefInstanceSharing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefInstanceSharing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetDefInstanceSharing() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_DefInstanceSharing {
	if t == nil || t.DefInstanceSharing == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_DefInstanceSharing_per_sap
	}
	return t.DefInstanceSharing
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefInstanceSharing == 0 {
		t.DefInstanceSharing = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_DefInstanceSharing_per_sap
	}
	t.Control.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.HostLimits.PopulateDefaults()
	t.IdleTimeout.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.OneTimeHttpRedirection.PopulateDefaults()
	t.PfcpMappings.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/control YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control struct {
	Cups  *bool `path:"cups" module:"nokia-conf"`
	Local *bool `path:"local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) IsYANGGoStruct() {}

// GetCups retrieves the value of the leaf Cups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cups is set, it can
// safely use t.GetCups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) GetCups() bool {
	if t == nil || t.Cups == nil {
		return false
	}
	return *t.Cups
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) GetLocal() bool {
	if t == nil || t.Local == nil {
		return true
	}
	return *t.Local
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cups == nil {
		var v bool = false
		t.Cups = &v
	}
	if t.Local == nil {
		var v bool = true
		t.Local = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Control) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress struct {
	BondingSelection *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection `path:"bonding-selection" module:"nokia-conf" yangPresence:"true"`
	IpFilter         *string                                                                             `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter       *string                                                                             `path:"ipv6-filter" module:"nokia-conf"`
	Qos              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos              `path:"qos" module:"nokia-conf"`
	ReportRate       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate       `path:"report-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) IsYANGGoStruct() {}

// GetOrCreateBondingSelection retrieves the value of the BondingSelection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetOrCreateBondingSelection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection {
	if t.BondingSelection != nil {
		return t.BondingSelection
	}
	t.BondingSelection = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection{}
	return t.BondingSelection
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos{}
	return t.Qos
}

// GetOrCreateReportRate retrieves the value of the ReportRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetOrCreateReportRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate {
	if t.ReportRate != nil {
		return t.ReportRate
	}
	t.ReportRate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate{}
	return t.ReportRate
}

// GetBondingSelection returns the value of the BondingSelection struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress. If the receiver or the field BondingSelection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetBondingSelection() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection {
	if t != nil && t.BondingSelection != nil {
		return t.BondingSelection
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetReportRate returns the value of the ReportRate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress. If the receiver or the field ReportRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetReportRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate {
	if t != nil && t.ReportRate != nil {
		return t.ReportRate
	}
	return nil
}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// GetIpv6Filter retrieves the value of the leaf Ipv6Filter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Filter is set, it can
// safely use t.GetIpv6Filter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) GetIpv6Filter() string {
	if t == nil || t.Ipv6Filter == nil {
		return ""
	}
	return *t.Ipv6Filter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BondingSelection.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.ReportRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/bonding-selection YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection struct {
	RateThresholds *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds `path:"rate-thresholds" module:"nokia-conf"`
	Weight         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight         `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) IsYANGGoStruct() {
}

// GetOrCreateRateThresholds retrieves the value of the RateThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) GetOrCreateRateThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds {
	if t.RateThresholds != nil {
		return t.RateThresholds
	}
	t.RateThresholds = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds{}
	return t.RateThresholds
}

// GetOrCreateWeight retrieves the value of the Weight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) GetOrCreateWeight() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight {
	if t.Weight != nil {
		return t.Weight
	}
	t.Weight = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight{}
	return t.Weight
}

// GetRateThresholds returns the value of the RateThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection. If the receiver or the field RateThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) GetRateThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds {
	if t != nil && t.RateThresholds != nil {
		return t.RateThresholds
	}
	return nil
}

// GetWeight returns the value of the Weight struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection. If the receiver or the field Weight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) GetWeight() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight {
	if t != nil && t.Weight != nil {
		return t.Weight
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RateThresholds.PopulateDefaults()
	t.Weight.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/bonding-selection/rate-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) IsYANGGoStruct() {
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 90
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 80
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.High == nil {
		var v uint32 = 90
		t.High = &v
	}
	if t.Low == nil {
		var v uint32 = 80
		t.Low = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_RateThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/bonding-selection/weight YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight struct {
	Change  *uint32 `path:"change" module:"nokia-conf"`
	Initial *uint32 `path:"initial" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) IsYANGGoStruct() {
}

// GetChange retrieves the value of the leaf Change from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Change is set, it can
// safely use t.GetChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Change == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) GetChange() uint32 {
	if t == nil || t.Change == nil {
		return 5
	}
	return *t.Change
}

// GetInitial retrieves the value of the leaf Initial from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Initial is set, it can
// safely use t.GetInitial() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Initial == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) GetInitial() uint32 {
	if t == nil || t.Initial == nil {
		return 100
	}
	return *t.Initial
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Change == nil {
		var v uint32 = 5
		t.Change = &v
	}
	if t.Initial == nil {
		var v uint32 = 100
		t.Initial = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_BondingSelection_Weight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos struct {
	HsAggRate          *int32                                                                                 `path:"hs-agg-rate" module:"nokia-conf"`
	QosMarkingFromSap  *bool                                                                                  `path:"qos-marking-from-sap" module:"nokia-conf"`
	SapEgress          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress       `path:"sap-egress" module:"nokia-conf"`
	SchedulerPolicy    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy `path:"scheduler-policy" module:"nokia-conf"`
	UseIngressL2TpDscp *bool                                                                                  `path:"use-ingress-l2tp-dscp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress{}
	return t.SapEgress
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetSapEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetHsAggRate retrieves the value of the leaf HsAggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAggRate is set, it can
// safely use t.GetHsAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetHsAggRate() int32 {
	if t == nil || t.HsAggRate == nil {
		return 0
	}
	return *t.HsAggRate
}

// GetQosMarkingFromSap retrieves the value of the leaf QosMarkingFromSap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QosMarkingFromSap is set, it can
// safely use t.GetQosMarkingFromSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QosMarkingFromSap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetQosMarkingFromSap() bool {
	if t == nil || t.QosMarkingFromSap == nil {
		return true
	}
	return *t.QosMarkingFromSap
}

// GetUseIngressL2TpDscp retrieves the value of the leaf UseIngressL2TpDscp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseIngressL2TpDscp is set, it can
// safely use t.GetUseIngressL2TpDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseIngressL2TpDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) GetUseIngressL2TpDscp() bool {
	if t == nil || t.UseIngressL2TpDscp == nil {
		return false
	}
	return *t.UseIngressL2TpDscp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QosMarkingFromSap == nil {
		var v bool = true
		t.QosMarkingFromSap = &v
	}
	if t.UseIngressL2TpDscp == nil {
		var v bool = false
		t.UseIngressL2TpDscp = &v
	}
	t.SapEgress.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress struct {
	Overrides          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides           `path:"overrides" module:"nokia-conf"`
	PolicyName         *string                                                                                              `path:"policy-name" module:"nokia-conf"`
	PortParentLocation E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_PortParentLocation `path:"port-parent-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPortParentLocation retrieves the value of the leaf PortParentLocation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortParentLocation is set, it can
// safely use t.GetPortParentLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortParentLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) GetPortParentLocation() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_PortParentLocation {
	if t == nil || t.PortParentLocation == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_PortParentLocation_port
	}
	return t.PortParentLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PortParentLocation == 0 {
		t.PortParentLocation = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_PortParentLocation_port
	}
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct {
	HsQueueStatMode E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsQueueStatMode                                                                                                             `path:"hs-queue-stat-mode" module:"nokia-conf"`
	HsWrrGroup      map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup `path:"hs-wrr-group" module:"nokia-conf"`
	Policer         map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer       `path:"policer" module:"nokia-conf"`
	Queue           map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue           `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewHsWrrGroup creates a new entry in the HsWrrGroup list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) NewHsWrrGroup(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HsWrrGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HsWrrGroup", key)
	}

	t.HsWrrGroup[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup{
		Id: Id,
	}

	return t.HsWrrGroup[key], nil
}

// RenameHsWrrGroup renames an entry in the list HsWrrGroup within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) RenameHsWrrGroup(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union) error {
	if _, ok := t.HsWrrGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in HsWrrGroup", newK)
	}

	e, ok := t.HsWrrGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HsWrrGroup", oldK)
	}
	e.Id = newK

	t.HsWrrGroup[newK] = e
	delete(t.HsWrrGroup, oldK)
	return nil
}

// GetOrCreateHsWrrGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetOrCreateHsWrrGroup(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	key := Id

	if v, ok := t.HsWrrGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHsWrrGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHsWrrGroup got unexpected error: %v", err))
	}
	return v
}

// GetHsWrrGroup retrieves the value with the specified key from
// the HsWrrGroup map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetHsWrrGroup(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.HsWrrGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteHsWrrGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) DeleteHsWrrGroup(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union) {
	key := Id

	delete(t.HsWrrGroup, key)
}

// AppendHsWrrGroup appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct to the
// list HsWrrGroup of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) AppendHsWrrGroup(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HsWrrGroup == nil {
		t.HsWrrGroup = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup)
	}

	if _, ok := t.HsWrrGroup[key]; ok {
		return fmt.Errorf("duplicate key for list HsWrrGroup %v", key)
	}

	t.HsWrrGroup[key] = v
	return nil
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) NewPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer{
		Id: Id,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.Id = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetOrCreatePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer {

	key := Id

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) DeletePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union) {
	key := Id

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) NewQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue{
		Id: Id,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Id = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetOrCreateQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue {

	key := Id

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) DeleteQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union) {
	key := Id

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetHsQueueStatMode retrieves the value of the leaf HsQueueStatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsQueueStatMode is set, it can
// safely use t.GetHsQueueStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsQueueStatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) GetHsQueueStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsQueueStatMode {
	if t == nil || t.HsQueueStatMode == 0 {
		return 0
	}
	return t.HsQueueStatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HsWrrGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/hs-wrr-group YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct {
	HsClassWeight *int32                                                                                                          `path:"hs-class-weight" module:"nokia-conf"`
	Id            NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union   `path:"id" module:"nokia-conf"`
	Rate          NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) IsYANGGoStruct() {
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) GetRate() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_HsWrrGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union `path:"cbs" module:"nokia-conf"`
	Id               NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union  `path:"id" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                      `path:"packet-byte-offset" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate     `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesSubscriberMgmt_SubscriberEgressPolicerStatModeType                                              `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) GetStatMode() E_NokiaTypesSubscriberMgmt_SubscriberEgressPolicerStatModeType {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue struct {
	AvgFrameOverhead *float64                                                                                                           `path:"avg-frame-overhead" module:"nokia-conf"`
	Cbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	HighPrioOnly     NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	HsClassWeight    *int32                                                                                                             `path:"hs-class-weight" module:"nokia-conf"`
	HsWredQueue      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue       `path:"hs-wred-queue" module:"nokia-conf"`
	HsWrrWeight      *int32                                                                                                             `path:"hs-wrr-weight" module:"nokia-conf"`
	Id               NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union           `path:"id" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_StatMode         `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateHsWredQueue retrieves the value of the HsWredQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateHsWredQueue() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	t.HsWredQueue = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue{}
	return t.HsWredQueue
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetHsWredQueue returns the value of the HsWredQueue struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field HsWredQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetHsWredQueue() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue {
	if t != nil && t.HsWredQueue != nil {
		return t.HsWredQueue
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetAvgFrameOverhead retrieves the value of the leaf AvgFrameOverhead from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AvgFrameOverhead is set, it can
// safely use t.GetAvgFrameOverhead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AvgFrameOverhead == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetAvgFrameOverhead() float64 {
	if t == nil || t.AvgFrameOverhead == nil {
		return 0.0
	}
	return *t.AvgFrameOverhead
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return nil
	}
	return t.HighPrioOnly
}

// GetHsClassWeight retrieves the value of the leaf HsClassWeight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsClassWeight is set, it can
// safely use t.GetHsClassWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsClassWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetHsClassWeight() int32 {
	if t == nil || t.HsClassWeight == nil {
		return 0
	}
	return *t.HsClassWeight
}

// GetHsWrrWeight retrieves the value of the leaf HsWrrWeight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsWrrWeight is set, it can
// safely use t.GetHsWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsWrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetHsWrrWeight() int32 {
	if t == nil || t.HsWrrWeight == nil {
		return 0
	}
	return *t.HsWrrWeight
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) GetStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.HsWredQueue.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/queue/hs-wred-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue struct {
	Policy *string `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_HsWredQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/sap-egress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SapEgress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Rate          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                         `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/egress/report-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate struct {
	AggRate           YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Policer           *uint32   `path:"policer" module:"nokia-conf"`
	PppoeActualRate   YANGEmpty `path:"pppoe-actual-rate" module:"nokia-conf"`
	Rfc5515ActualRate YANGEmpty `path:"rfc5515-actual-rate" module:"nokia-conf"`
	Scheduler         *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) IsYANGGoStruct() {
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPppoeActualRate retrieves the value of the leaf PppoeActualRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeActualRate is set, it can
// safely use t.GetPppoeActualRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeActualRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) GetPppoeActualRate() YANGEmpty {
	if t == nil || t.PppoeActualRate == false {
		return false
	}
	return t.PppoeActualRate
}

// GetRfc5515ActualRate retrieves the value of the leaf Rfc5515ActualRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rfc5515ActualRate is set, it can
// safely use t.GetRfc5515ActualRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rfc5515ActualRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) GetRfc5515ActualRate() YANGEmpty {
	if t == nil || t.Rfc5515ActualRate == false {
		return false
	}
	return t.Rfc5515ActualRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Egress_ReportRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/host-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits struct {
	Ipv4         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 `path:"ipv6" module:"nokia-conf"`
	LacOverall   *int32                                                                      `path:"lac-overall" module:"nokia-conf"`
	Overall      *int32                                                                      `path:"overall" module:"nokia-conf"`
	RemoveOldest *bool                                                                       `path:"remove-oldest" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLacOverall retrieves the value of the leaf LacOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacOverall is set, it can
// safely use t.GetLacOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetLacOverall() int32 {
	if t == nil || t.LacOverall == nil {
		return 0
	}
	return *t.LacOverall
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// GetRemoveOldest retrieves the value of the leaf RemoveOldest from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoveOldest is set, it can
// safely use t.GetRemoveOldest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoveOldest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) GetRemoveOldest() bool {
	if t == nil || t.RemoveOldest == nil {
		return false
	}
	return *t.RemoveOldest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RemoveOldest == nil {
		var v bool = false
		t.RemoveOldest = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/host-limits/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 struct {
	Arp     *int32 `path:"arp" module:"nokia-conf"`
	Dhcp    *int32 `path:"dhcp" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
	Ppp     *int32 `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) IsYANGGoStruct() {}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) GetArp() int32 {
	if t == nil || t.Arp == nil {
		return 0
	}
	return *t.Arp
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) GetDhcp() int32 {
	if t == nil || t.Dhcp == nil {
		return 0
	}
	return *t.Dhcp
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) GetPpp() int32 {
	if t == nil || t.Ppp == nil {
		return 0
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/host-limits/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 struct {
	Overall      *int32 `path:"overall" module:"nokia-conf"`
	PdIpoeDhcp   *int32 `path:"pd-ipoe-dhcp" module:"nokia-conf"`
	PdOverall    *int32 `path:"pd-overall" module:"nokia-conf"`
	PdPppDhcp    *int32 `path:"pd-ppp-dhcp" module:"nokia-conf"`
	WanIpoeDhcp  *int32 `path:"wan-ipoe-dhcp" module:"nokia-conf"`
	WanIpoeSlaac *int32 `path:"wan-ipoe-slaac" module:"nokia-conf"`
	WanOverall   *int32 `path:"wan-overall" module:"nokia-conf"`
	WanPppDhcp   *int32 `path:"wan-ppp-dhcp" module:"nokia-conf"`
	WanPppSlaac  *int32 `path:"wan-ppp-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) IsYANGGoStruct() {}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// GetPdIpoeDhcp retrieves the value of the leaf PdIpoeDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdIpoeDhcp is set, it can
// safely use t.GetPdIpoeDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdIpoeDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetPdIpoeDhcp() int32 {
	if t == nil || t.PdIpoeDhcp == nil {
		return 0
	}
	return *t.PdIpoeDhcp
}

// GetPdOverall retrieves the value of the leaf PdOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdOverall is set, it can
// safely use t.GetPdOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetPdOverall() int32 {
	if t == nil || t.PdOverall == nil {
		return 0
	}
	return *t.PdOverall
}

// GetPdPppDhcp retrieves the value of the leaf PdPppDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdPppDhcp is set, it can
// safely use t.GetPdPppDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdPppDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetPdPppDhcp() int32 {
	if t == nil || t.PdPppDhcp == nil {
		return 0
	}
	return *t.PdPppDhcp
}

// GetWanIpoeDhcp retrieves the value of the leaf WanIpoeDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanIpoeDhcp is set, it can
// safely use t.GetWanIpoeDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanIpoeDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetWanIpoeDhcp() int32 {
	if t == nil || t.WanIpoeDhcp == nil {
		return 0
	}
	return *t.WanIpoeDhcp
}

// GetWanIpoeSlaac retrieves the value of the leaf WanIpoeSlaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanIpoeSlaac is set, it can
// safely use t.GetWanIpoeSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanIpoeSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetWanIpoeSlaac() int32 {
	if t == nil || t.WanIpoeSlaac == nil {
		return 0
	}
	return *t.WanIpoeSlaac
}

// GetWanOverall retrieves the value of the leaf WanOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanOverall is set, it can
// safely use t.GetWanOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetWanOverall() int32 {
	if t == nil || t.WanOverall == nil {
		return 0
	}
	return *t.WanOverall
}

// GetWanPppDhcp retrieves the value of the leaf WanPppDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanPppDhcp is set, it can
// safely use t.GetWanPppDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanPppDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetWanPppDhcp() int32 {
	if t == nil || t.WanPppDhcp == nil {
		return 0
	}
	return *t.WanPppDhcp
}

// GetWanPppSlaac retrieves the value of the leaf WanPppSlaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanPppSlaac is set, it can
// safely use t.GetWanPppSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanPppSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) GetWanPppSlaac() int32 {
	if t == nil || t.WanPppSlaac == nil {
		return 0
	}
	return *t.WanPppSlaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_HostLimits_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/idle-timeout YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout struct {
	Category        map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category `path:"category" module:"nokia-conf"`
	CategoryMapName *string                                                                                     `path:"category-map-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) IsYANGGoStruct() {}

// NewCategory creates a new entry in the Category list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) NewCategory(CategoryName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category)
	}

	key := CategoryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Category[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Category", key)
	}

	t.Category[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category{
		CategoryName: &CategoryName,
	}

	return t.Category[key], nil
}

// RenameCategory renames an entry in the list Category within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) RenameCategory(oldK, newK string) error {
	if _, ok := t.Category[newK]; ok {
		return fmt.Errorf("key %v already exists in Category", newK)
	}

	e, ok := t.Category[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Category", oldK)
	}
	e.CategoryName = &newK

	t.Category[newK] = e
	delete(t.Category, oldK)
	return nil
}

// GetOrCreateCategory retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) GetOrCreateCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category {

	key := CategoryName

	if v, ok := t.Category[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCategory(CategoryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCategory got unexpected error: %v", err))
	}
	return v
}

// GetCategory retrieves the value with the specified key from
// the Category map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) GetCategory(CategoryName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category {

	if t == nil {
		return nil
	}

	key := CategoryName

	if lm, ok := t.Category[key]; ok {
		return lm
	}
	return nil
}

// DeleteCategory deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) DeleteCategory(CategoryName string) {
	key := CategoryName

	delete(t.Category, key)
}

// AppendCategory appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category struct to the
// list Category of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) AppendCategory(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) error {
	if v.CategoryName == nil {
		return fmt.Errorf("invalid nil key received for CategoryName")
	}

	key := *v.CategoryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Category == nil {
		t.Category = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category)
	}

	if _, ok := t.Category[key]; ok {
		return fmt.Errorf("duplicate key for list Category %v", key)
	}

	t.Category[key] = v
	return nil
}

// GetCategoryMapName retrieves the value of the leaf CategoryMapName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryMapName is set, it can
// safely use t.GetCategoryMapName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryMapName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) GetCategoryMapName() string {
	if t == nil || t.CategoryMapName == nil {
		return ""
	}
	return *t.CategoryMapName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Category {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/idle-timeout/category YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category struct {
	Action       E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category_Action `path:"action" module:"nokia-conf"`
	CategoryName *string                                                                                  `path:"category-name" module:"nokia-conf"`
	Timeout      *uint32                                                                                  `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) GetAction() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category_Action_terminate
	}
	return t.Action
}

// GetCategoryName retrieves the value of the leaf CategoryName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CategoryName is set, it can
// safely use t.GetCategoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CategoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) GetCategoryName() string {
	if t == nil || t.CategoryName == nil {
		return ""
	}
	return *t.CategoryName
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category_Action_terminate
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CategoryName == nil {
		return nil, fmt.Errorf("nil value for key CategoryName")
	}

	return map[string]interface{}{
		"category-name": *t.CategoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_IdleTimeout_Category) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress struct {
	IpFilter   *string                                                                        `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter *string                                                                        `path:"ipv6-filter" module:"nokia-conf"`
	Qos        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos        `path:"qos" module:"nokia-conf"`
	ReportRate *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate `path:"report-rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos{}
	return t.Qos
}

// GetOrCreateReportRate retrieves the value of the ReportRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetOrCreateReportRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate {
	if t.ReportRate != nil {
		return t.ReportRate
	}
	t.ReportRate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate{}
	return t.ReportRate
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetReportRate returns the value of the ReportRate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress. If the receiver or the field ReportRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetReportRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate {
	if t != nil && t.ReportRate != nil {
		return t.ReportRate
	}
	return nil
}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// GetIpv6Filter retrieves the value of the leaf Ipv6Filter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Filter is set, it can
// safely use t.GetIpv6Filter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Filter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) GetIpv6Filter() string {
	if t == nil || t.Ipv6Filter == nil {
		return ""
	}
	return *t.Ipv6Filter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
	t.ReportRate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos struct {
	SapIngress *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress `path:"sap-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress{}
	return t.SapIngress
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) GetSapIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress struct {
	Overrides   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName  *string                                                                                      `path:"policy-name" module:"nokia-conf"`
	QueuingType E_NokiaTypesQos_IngressQueuingType                                                           `path:"queuing-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetQueuingType retrieves the value of the leaf QueuingType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuingType is set, it can
// safely use t.GetQueuingType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuingType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) GetQueuingType() E_NokiaTypesQos_IngressQueuingType {
	if t == nil || t.QueuingType == 0 {
		return NokiaTypesQos_IngressQueuingType_service
	}
	return t.QueuingType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QueuingType == 0 {
		t.QueuingType = NokiaTypesQos_IngressQueuingType_service
	}
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue     `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) NewPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer{
		Id: Id,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.Id = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) GetOrCreatePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer {

	key := Id

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) GetPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) DeletePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union) {
	key := Id

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) NewQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue{
		Id: Id,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Id = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) GetOrCreateQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue {

	key := Id

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) GetQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) DeleteQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union) {
	key := Id

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer struct {
	Cbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union `path:"cbs" module:"nokia-conf"`
	Id               NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union  `path:"id" module:"nokia-conf"`
	Mbs              NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union `path:"mbs" module:"nokia-conf"`
	PacketByteOffset *int32                                                                                                        `path:"packet-byte-offset" module:"nokia-conf"`
	Rate             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate     `path:"rate" module:"nokia-conf"`
	StatMode         E_NokiaTypesSubscriberMgmt_SubscriberIngressPolicerStatModeType                                               `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetCbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetMbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) GetStatMode() E_NokiaTypesSubscriberMgmt_SubscriberIngressPolicerStatModeType {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress/overrides/policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Policer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue struct {
	Cbs          NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union          `path:"cbs" module:"nokia-conf"`
	HighPrioOnly NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_HighPrioOnly_Union `path:"high-prio-only" module:"nokia-conf"`
	Id           NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union           `path:"id" module:"nokia-conf"`
	Mbs          NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union          `path:"mbs" module:"nokia-conf"`
	Rate         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate              `path:"rate" module:"nokia-conf"`
	StatMode     E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_StatMode         `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetCbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Cbs_Union {
	if t == nil || t.Cbs == nil {
		return nil
	}
	return t.Cbs
}

// GetHighPrioOnly retrieves the value of the leaf HighPrioOnly from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HighPrioOnly is set, it can
// safely use t.GetHighPrioOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HighPrioOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetHighPrioOnly() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_HighPrioOnly_Union {
	if t == nil || t.HighPrioOnly == nil {
		return nil
	}
	return t.HighPrioOnly
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) GetStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/qos/sap-ingress/overrides/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return nil
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_Qos_SapIngress_Overrides_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/ingress/report-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate struct {
	AggRate           YANGEmpty `path:"agg-rate" module:"nokia-conf"`
	Policer           *uint32   `path:"policer" module:"nokia-conf"`
	PppoeActualRate   YANGEmpty `path:"pppoe-actual-rate" module:"nokia-conf"`
	Rfc5515ActualRate YANGEmpty `path:"rfc5515-actual-rate" module:"nokia-conf"`
	Scheduler         *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) IsYANGGoStruct() {
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) GetAggRate() YANGEmpty {
	if t == nil || t.AggRate == false {
		return false
	}
	return t.AggRate
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) GetPolicer() uint32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetPppoeActualRate retrieves the value of the leaf PppoeActualRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PppoeActualRate is set, it can
// safely use t.GetPppoeActualRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PppoeActualRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) GetPppoeActualRate() YANGEmpty {
	if t == nil || t.PppoeActualRate == false {
		return false
	}
	return t.PppoeActualRate
}

// GetRfc5515ActualRate retrieves the value of the leaf Rfc5515ActualRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rfc5515ActualRate is set, it can
// safely use t.GetRfc5515ActualRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rfc5515ActualRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) GetRfc5515ActualRate() YANGEmpty {
	if t == nil || t.Rfc5515ActualRate == false {
		return false
	}
	return t.Rfc5515ActualRate
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_Ingress_ReportRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/one-time-http-redirection YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection struct {
	IpFilter *string `path:"ip-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) IsYANGGoStruct() {
}

// GetIpFilter retrieves the value of the leaf IpFilter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpFilter is set, it can
// safely use t.GetIpFilter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpFilter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) GetIpFilter() string {
	if t == nil || t.IpFilter == nil {
		return ""
	}
	return *t.IpFilter
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_OneTimeHttpRedirection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/pfcp-mappings YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings struct {
	SessionQer *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer `path:"session-qer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) IsYANGGoStruct() {}

// GetOrCreateSessionQer retrieves the value of the SessionQer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) GetOrCreateSessionQer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer {
	if t.SessionQer != nil {
		return t.SessionQer
	}
	t.SessionQer = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer{}
	return t.SessionQer
}

// GetSessionQer returns the value of the SessionQer struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings. If the receiver or the field SessionQer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) GetSessionQer() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer {
	if t != nil && t.SessionQer != nil {
		return t.SessionQer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SessionQer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/pfcp-mappings/session-qer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer struct {
	Downlink *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink `path:"downlink" module:"nokia-conf"`
	Uplink   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink   `path:"uplink" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) IsYANGGoStruct() {
}

// GetOrCreateDownlink retrieves the value of the Downlink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) GetOrCreateDownlink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink {
	if t.Downlink != nil {
		return t.Downlink
	}
	t.Downlink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink{}
	return t.Downlink
}

// GetOrCreateUplink retrieves the value of the Uplink field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) GetOrCreateUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink {
	if t.Uplink != nil {
		return t.Uplink
	}
	t.Uplink = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink{}
	return t.Uplink
}

// GetDownlink returns the value of the Downlink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer. If the receiver or the field Downlink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) GetDownlink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink {
	if t != nil && t.Downlink != nil {
		return t.Downlink
	}
	return nil
}

// GetUplink returns the value of the Uplink struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer. If the receiver or the field Uplink is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) GetUplink() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink {
	if t != nil && t.Uplink != nil {
		return t.Uplink
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Downlink.PopulateDefaults()
	t.Uplink.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/pfcp-mappings/session-qer/downlink YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink struct {
	AggregateRate YANGEmpty `path:"aggregate-rate" module:"nokia-conf"`
	Arbiter       *string   `path:"arbiter" module:"nokia-conf"`
	Policer       *int32    `path:"policer" module:"nokia-conf"`
	Queue         *int32    `path:"queue" module:"nokia-conf"`
	Scheduler     *string   `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) IsYANGGoStruct() {
}

// GetAggregateRate retrieves the value of the leaf AggregateRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggregateRate is set, it can
// safely use t.GetAggregateRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggregateRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) GetAggregateRate() YANGEmpty {
	if t == nil || t.AggregateRate == false {
		return false
	}
	return t.AggregateRate
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Downlink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/pfcp-mappings/session-qer/uplink YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink struct {
	Arbiter   *string `path:"arbiter" module:"nokia-conf"`
	Policer   *int32  `path:"policer" module:"nokia-conf"`
	Queue     *int32  `path:"queue" module:"nokia-conf"`
	Scheduler *string `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) IsYANGGoStruct() {
}

// GetArbiter retrieves the value of the leaf Arbiter from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arbiter is set, it can
// safely use t.GetArbiter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arbiter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) GetArbiter() string {
	if t == nil || t.Arbiter == nil {
		return ""
	}
	return *t.Arbiter
}

// GetPolicer retrieves the value of the leaf Policer from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policer is set, it can
// safely use t.GetPolicer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) GetPolicer() int32 {
	if t == nil || t.Policer == nil {
		return 0
	}
	return *t.Policer
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) GetQueue() int32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// GetScheduler retrieves the value of the leaf Scheduler from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Scheduler is set, it can
// safely use t.GetScheduler() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Scheduler == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) GetScheduler() string {
	if t == nil || t.Scheduler == nil {
		return ""
	}
	return *t.Scheduler
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_PfcpMappings_SessionQer_Uplink) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/session-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits struct {
	Ipoe    *int32                                                                          `path:"ipoe" module:"nokia-conf"`
	L2Tp    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp  `path:"l2tp" module:"nokia-conf"`
	Overall *int32                                                                          `path:"overall" module:"nokia-conf"`
	Pppoe   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe `path:"pppoe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetOrCreateL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp{}
	return t.L2Tp
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetOrCreatePppoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe{}
	return t.Pppoe
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetPppoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetIpoe retrieves the value of the leaf Ipoe from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipoe is set, it can
// safely use t.GetIpoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetIpoe() int32 {
	if t == nil || t.Ipoe == nil {
		return 0
	}
	return *t.Ipoe
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Tp.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/session-limits/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp struct {
	Lns     *int32 `path:"lns" module:"nokia-conf"`
	Lts     *int32 `path:"lts" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) IsYANGGoStruct() {
}

// GetLns retrieves the value of the leaf Lns from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lns is set, it can
// safely use t.GetLns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) GetLns() int32 {
	if t == nil || t.Lns == nil {
		return 0
	}
	return *t.Lns
}

// GetLts retrieves the value of the leaf Lts from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lts is set, it can
// safely use t.GetLts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) GetLts() int32 {
	if t == nil || t.Lts == nil {
		return 0
	}
	return *t.Lts
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sla-profile/session-limits/pppoe YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe struct {
	Lac     *int32 `path:"lac" module:"nokia-conf"`
	Local   *int32 `path:"local" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) IsYANGGoStruct() {
}

// GetLac retrieves the value of the leaf Lac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lac is set, it can
// safely use t.GetLac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) GetLac() int32 {
	if t == nil || t.Lac == nil {
		return 0
	}
	return *t.Lac
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) GetLocal() int32 {
	if t == nil || t.Local == nil {
		return 0
	}
	return *t.Local
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SlaProfile_SessionLimits_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile represents the /nokia-conf/configure/groups/group/subscriber-mgmt/steering-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile struct {
	Access      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access  `path:"access" module:"nokia-conf"`
	Description *string                                                                  `path:"description" module:"nokia-conf"`
	Name        *string                                                                  `path:"name" module:"nokia-conf"`
	Network     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network `path:"network" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access{}
	return t.Access
}

// GetOrCreateNetwork retrieves the value of the Network field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetOrCreateNetwork() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network {
	if t.Network != nil {
		return t.Network
	}
	t.Network = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network{}
	return t.Network
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetAccess() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetNetwork returns the value of the Network struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile. If the receiver or the field Network is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetNetwork() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network {
	if t != nil && t.Network != nil {
		return t.Network
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Access.PopulateDefaults()
	t.Network.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access represents the /nokia-conf/configure/groups/group/subscriber-mgmt/steering-profile/access YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access struct {
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) IsYANGGoStruct() {}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network represents the /nokia-conf/configure/groups/group/subscriber-mgmt/steering-profile/network YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network struct {
	NextHop        *string `path:"next-hop" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) IsYANGGoStruct() {}

// GetNextHop retrieves the value of the leaf NextHop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHop is set, it can
// safely use t.GetNextHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) GetNextHop() string {
	if t == nil || t.NextHop == nil {
		return ""
	}
	return *t.NextHop
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SteeringProfile_Network) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy struct {
	AppProfileMap     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap `path:"app-profile-map" module:"nokia-conf"`
	Description       *string                                                                       `path:"description" module:"nokia-conf"`
	Name              *string                                                                       `path:"name" module:"nokia-conf"`
	Primary           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary       `path:"primary" module:"nokia-conf"`
	Secondary         *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary     `path:"secondary" module:"nokia-conf"`
	SlaProfileMap     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap `path:"sla-profile-map" module:"nokia-conf"`
	StringsFromOption *uint32                                                                       `path:"strings-from-option" module:"nokia-conf"`
	SubProfileMap     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap `path:"sub-profile-map" module:"nokia-conf"`
	Tertiary          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary      `path:"tertiary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) IsYANGGoStruct() {}

// GetOrCreateAppProfileMap retrieves the value of the AppProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreateAppProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap {
	if t.AppProfileMap != nil {
		return t.AppProfileMap
	}
	t.AppProfileMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap{}
	return t.AppProfileMap
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreatePrimary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary{}
	return t.Primary
}

// GetOrCreateSecondary retrieves the value of the Secondary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreateSecondary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary {
	if t.Secondary != nil {
		return t.Secondary
	}
	t.Secondary = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary{}
	return t.Secondary
}

// GetOrCreateSlaProfileMap retrieves the value of the SlaProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreateSlaProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap {
	if t.SlaProfileMap != nil {
		return t.SlaProfileMap
	}
	t.SlaProfileMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap{}
	return t.SlaProfileMap
}

// GetOrCreateSubProfileMap retrieves the value of the SubProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreateSubProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap {
	if t.SubProfileMap != nil {
		return t.SubProfileMap
	}
	t.SubProfileMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap{}
	return t.SubProfileMap
}

// GetOrCreateTertiary retrieves the value of the Tertiary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetOrCreateTertiary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary {
	if t.Tertiary != nil {
		return t.Tertiary
	}
	t.Tertiary = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary{}
	return t.Tertiary
}

// GetAppProfileMap returns the value of the AppProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field AppProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetAppProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap {
	if t != nil && t.AppProfileMap != nil {
		return t.AppProfileMap
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetPrimary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetSecondary returns the value of the Secondary struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field Secondary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetSecondary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary {
	if t != nil && t.Secondary != nil {
		return t.Secondary
	}
	return nil
}

// GetSlaProfileMap returns the value of the SlaProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field SlaProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetSlaProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap {
	if t != nil && t.SlaProfileMap != nil {
		return t.SlaProfileMap
	}
	return nil
}

// GetSubProfileMap returns the value of the SubProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field SubProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetSubProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap {
	if t != nil && t.SubProfileMap != nil {
		return t.SubProfileMap
	}
	return nil
}

// GetTertiary returns the value of the Tertiary struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy. If the receiver or the field Tertiary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetTertiary() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary {
	if t != nil && t.Tertiary != nil {
		return t.Tertiary
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetStringsFromOption retrieves the value of the leaf StringsFromOption from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StringsFromOption is set, it can
// safely use t.GetStringsFromOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StringsFromOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) GetStringsFromOption() uint32 {
	if t == nil || t.StringsFromOption == nil {
		return 0
	}
	return *t.StringsFromOption
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AppProfileMap.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Secondary.PopulateDefaults()
	t.SlaProfileMap.PopulateDefaults()
	t.SubProfileMap.PopulateDefaults()
	t.Tertiary.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/app-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap struct {
	Entry                 map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry `path:"entry" module:"nokia-conf"`
	UseDirectMapAsDefault *bool                                                                                          `path:"use-direct-map-as-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) NewEntry(AppProfileString string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry)
	}

	key := AppProfileString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry{
		AppProfileString: &AppProfileString,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.AppProfileString = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) GetOrCreateEntry(AppProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry {

	key := AppProfileString

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(AppProfileString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) GetEntry(AppProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry {

	if t == nil {
		return nil
	}

	key := AppProfileString

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) DeleteEntry(AppProfileString string) {
	key := AppProfileString

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) error {
	if v.AppProfileString == nil {
		return fmt.Errorf("invalid nil key received for AppProfileString")
	}

	key := *v.AppProfileString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetUseDirectMapAsDefault retrieves the value of the leaf UseDirectMapAsDefault from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDirectMapAsDefault is set, it can
// safely use t.GetUseDirectMapAsDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDirectMapAsDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) GetUseDirectMapAsDefault() bool {
	if t == nil || t.UseDirectMapAsDefault == nil {
		return false
	}
	return *t.UseDirectMapAsDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseDirectMapAsDefault == nil {
		var v bool = false
		t.UseDirectMapAsDefault = &v
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/app-profile-map/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry struct {
	AppProfile       *string `path:"app-profile" module:"nokia-conf"`
	AppProfileString *string `path:"app-profile-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) IsYANGGoStruct() {
}

// GetAppProfile retrieves the value of the leaf AppProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfile is set, it can
// safely use t.GetAppProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) GetAppProfile() string {
	if t == nil || t.AppProfile == nil {
		return ""
	}
	return *t.AppProfile
}

// GetAppProfileString retrieves the value of the leaf AppProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AppProfileString is set, it can
// safely use t.GetAppProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AppProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) GetAppProfileString() string {
	if t == nil || t.AppProfileString == nil {
		return ""
	}
	return *t.AppProfileString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AppProfileString == nil {
		return nil, fmt.Errorf("nil value for key AppProfileString")
	}

	return map[string]interface{}{
		"app-profile-string": *t.AppProfileString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_AppProfileMap_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/primary YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ScriptUrl  *string                     `path:"script-url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetScriptUrl retrieves the value of the leaf ScriptUrl from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptUrl is set, it can
// safely use t.GetScriptUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) GetScriptUrl() string {
	if t == nil || t.ScriptUrl == nil {
		return ""
	}
	return *t.ScriptUrl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/secondary YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ScriptUrl  *string                     `path:"script-url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetScriptUrl retrieves the value of the leaf ScriptUrl from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptUrl is set, it can
// safely use t.GetScriptUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) GetScriptUrl() string {
	if t == nil || t.ScriptUrl == nil {
		return ""
	}
	return *t.ScriptUrl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Secondary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/sla-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap struct {
	Entry                 map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry `path:"entry" module:"nokia-conf"`
	UseDirectMapAsDefault *bool                                                                                          `path:"use-direct-map-as-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) NewEntry(SlaProfileString string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry)
	}

	key := SlaProfileString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry{
		SlaProfileString: &SlaProfileString,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SlaProfileString = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) GetOrCreateEntry(SlaProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry {

	key := SlaProfileString

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SlaProfileString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) GetEntry(SlaProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry {

	if t == nil {
		return nil
	}

	key := SlaProfileString

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) DeleteEntry(SlaProfileString string) {
	key := SlaProfileString

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) error {
	if v.SlaProfileString == nil {
		return fmt.Errorf("invalid nil key received for SlaProfileString")
	}

	key := *v.SlaProfileString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetUseDirectMapAsDefault retrieves the value of the leaf UseDirectMapAsDefault from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDirectMapAsDefault is set, it can
// safely use t.GetUseDirectMapAsDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDirectMapAsDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) GetUseDirectMapAsDefault() bool {
	if t == nil || t.UseDirectMapAsDefault == nil {
		return false
	}
	return *t.UseDirectMapAsDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseDirectMapAsDefault == nil {
		var v bool = false
		t.UseDirectMapAsDefault = &v
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/sla-profile-map/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry struct {
	SlaProfile       *string `path:"sla-profile" module:"nokia-conf"`
	SlaProfileString *string `path:"sla-profile-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) IsYANGGoStruct() {
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSlaProfileString retrieves the value of the leaf SlaProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfileString is set, it can
// safely use t.GetSlaProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) GetSlaProfileString() string {
	if t == nil || t.SlaProfileString == nil {
		return ""
	}
	return *t.SlaProfileString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlaProfileString == nil {
		return nil, fmt.Errorf("nil value for key SlaProfileString")
	}

	return map[string]interface{}{
		"sla-profile-string": *t.SlaProfileString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SlaProfileMap_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/sub-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap struct {
	Entry                 map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry `path:"entry" module:"nokia-conf"`
	UseDirectMapAsDefault *bool                                                                                          `path:"use-direct-map-as-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) NewEntry(SubProfileString string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry)
	}

	key := SubProfileString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry{
		SubProfileString: &SubProfileString,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SubProfileString = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) GetOrCreateEntry(SubProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry {

	key := SubProfileString

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SubProfileString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) GetEntry(SubProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry {

	if t == nil {
		return nil
	}

	key := SubProfileString

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) DeleteEntry(SubProfileString string) {
	key := SubProfileString

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) error {
	if v.SubProfileString == nil {
		return fmt.Errorf("invalid nil key received for SubProfileString")
	}

	key := *v.SubProfileString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetUseDirectMapAsDefault retrieves the value of the leaf UseDirectMapAsDefault from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDirectMapAsDefault is set, it can
// safely use t.GetUseDirectMapAsDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDirectMapAsDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) GetUseDirectMapAsDefault() bool {
	if t == nil || t.UseDirectMapAsDefault == nil {
		return false
	}
	return *t.UseDirectMapAsDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseDirectMapAsDefault == nil {
		var v bool = false
		t.UseDirectMapAsDefault = &v
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/sub-profile-map/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry struct {
	SubProfile       *string `path:"sub-profile" module:"nokia-conf"`
	SubProfileString *string `path:"sub-profile-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) IsYANGGoStruct() {
}

// GetSubProfile retrieves the value of the leaf SubProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfile is set, it can
// safely use t.GetSubProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) GetSubProfile() string {
	if t == nil || t.SubProfile == nil {
		return ""
	}
	return *t.SubProfile
}

// GetSubProfileString retrieves the value of the leaf SubProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfileString is set, it can
// safely use t.GetSubProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) GetSubProfileString() string {
	if t == nil || t.SubProfileString == nil {
		return ""
	}
	return *t.SubProfileString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SubProfileString == nil {
		return nil, fmt.Errorf("nil value for key SubProfileString")
	}

	return map[string]interface{}{
		"sub-profile-string": *t.SubProfileString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_SubProfileMap_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-ident-policy/tertiary YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	ScriptUrl  *string                     `path:"script-url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetScriptUrl retrieves the value of the leaf ScriptUrl from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptUrl is set, it can
// safely use t.GetScriptUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) GetScriptUrl() string {
	if t == nil || t.ScriptUrl == nil {
		return ""
	}
	return *t.ScriptUrl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubIdentPolicy_Tertiary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-mcac-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy struct {
	AdminState  E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	Bandwidth   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	Description *string                                                                  `path:"description" module:"nokia-conf"`
	Name        *string                                                                  `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) GetOrCreateBandwidth() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth{}
	return t.Bandwidth
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) GetBandwidth() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Bandwidth.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-mcac-policy/bandwidth YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth struct {
	Mandatory NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth_Mandatory_Union `path:"mandatory" module:"nokia-conf"`
	Total     NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth_Total_Union     `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) IsYANGGoStruct() {}

// GetMandatory retrieves the value of the leaf Mandatory from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mandatory is set, it can
// safely use t.GetMandatory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mandatory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) GetMandatory() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth_Mandatory_Union {
	if t == nil || t.Mandatory == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Mandatory
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) GetTotal() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth_Total_Union {
	if t == nil || t.Total == nil {
		return NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	return t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mandatory == nil {
		t.Mandatory = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
	if t.Total == nil {
		t.Total = NokiaTypesMcastCac_BandwidthLimit_Enum_unlimited
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubMcacPolicy_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile struct {
	AccountingPolicy       *uint32                                                                      `path:"accounting-policy" module:"nokia-conf"`
	AccuStatsPolicy        *string                                                                      `path:"accu-stats-policy" module:"nokia-conf"`
	Ancp                   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp             `path:"ancp" module:"nokia-conf" yangPresence:"true"`
	CollectStats           *bool                                                                        `path:"collect-stats" module:"nokia-conf"`
	Control                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control          `path:"control" module:"nokia-conf"`
	Description            *string                                                                      `path:"description" module:"nokia-conf"`
	Egress                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress           `path:"egress" module:"nokia-conf"`
	FirewallPolicy         *string                                                                      `path:"firewall-policy" module:"nokia-conf"`
	HostLimits             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits       `path:"host-limits" module:"nokia-conf"`
	HostTrackingPolicy     *string                                                                      `path:"host-tracking-policy" module:"nokia-conf"`
	HsSlaMode              E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HsSlaMode       `path:"hs-sla-mode" module:"nokia-conf"`
	IgmpPolicy             *string                                                                      `path:"igmp-policy" module:"nokia-conf"`
	Ingress                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress          `path:"ingress" module:"nokia-conf"`
	MldPolicy              *string                                                                      `path:"mld-policy" module:"nokia-conf"`
	Name                   *string                                                                      `path:"name" module:"nokia-conf"`
	Nat                    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat              `path:"nat" module:"nokia-conf"`
	PimPolicy              *string                                                                      `path:"pim-policy" module:"nokia-conf"`
	Preference             *uint32                                                                      `path:"preference" module:"nokia-conf"`
	RadiusAccounting       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting `path:"radius-accounting" module:"nokia-conf"`
	SecondaryShaperHashing *bool                                                                        `path:"secondary-shaper-hashing" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits    `path:"session-limits" module:"nokia-conf"`
	SlaProfileMap          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap    `path:"sla-profile-map" module:"nokia-conf"`
	SubMcacPolicy          *string                                                                      `path:"sub-mcac-policy" module:"nokia-conf"`
	UpnpPolicy             *string                                                                      `path:"upnp-policy" module:"nokia-conf"`
	VolumeStatsType        E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_VolumeStatsType `path:"volume-stats-type" module:"nokia-conf"`
	VportHashing           *bool                                                                        `path:"vport-hashing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) IsYANGGoStruct() {}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateAncp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp{}
	return t.Ancp
}

// GetOrCreateControl retrieves the value of the Control field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateControl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control {
	if t.Control != nil {
		return t.Control
	}
	t.Control = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control{}
	return t.Control
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress{}
	return t.Egress
}

// GetOrCreateHostLimits retrieves the value of the HostLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateHostLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits {
	if t.HostLimits != nil {
		return t.HostLimits
	}
	t.HostLimits = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits{}
	return t.HostLimits
}

// GetOrCreateIngress retrieves the value of the Ingress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress {
	if t.Ingress != nil {
		return t.Ingress
	}
	t.Ingress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress{}
	return t.Ingress
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateNat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat{}
	return t.Nat
}

// GetOrCreateRadiusAccounting retrieves the value of the RadiusAccounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateRadiusAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting {
	if t.RadiusAccounting != nil {
		return t.RadiusAccounting
	}
	t.RadiusAccounting = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting{}
	return t.RadiusAccounting
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateSessionLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits{}
	return t.SessionLimits
}

// GetOrCreateSlaProfileMap retrieves the value of the SlaProfileMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetOrCreateSlaProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap {
	if t.SlaProfileMap != nil {
		return t.SlaProfileMap
	}
	t.SlaProfileMap = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap{}
	return t.SlaProfileMap
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetAncp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetControl returns the value of the Control struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field Control is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetControl() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control {
	if t != nil && t.Control != nil {
		return t.Control
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetHostLimits returns the value of the HostLimits struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field HostLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetHostLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits {
	if t != nil && t.HostLimits != nil {
		return t.HostLimits
	}
	return nil
}

// GetIngress returns the value of the Ingress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field Ingress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress {
	if t != nil && t.Ingress != nil {
		return t.Ingress
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetNat() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetRadiusAccounting returns the value of the RadiusAccounting struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field RadiusAccounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetRadiusAccounting() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting {
	if t != nil && t.RadiusAccounting != nil {
		return t.RadiusAccounting
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetSessionLimits() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetSlaProfileMap returns the value of the SlaProfileMap struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile. If the receiver or the field SlaProfileMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetSlaProfileMap() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap {
	if t != nil && t.SlaProfileMap != nil {
		return t.SlaProfileMap
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAccuStatsPolicy retrieves the value of the leaf AccuStatsPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccuStatsPolicy is set, it can
// safely use t.GetAccuStatsPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccuStatsPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetAccuStatsPolicy() string {
	if t == nil || t.AccuStatsPolicy == nil {
		return ""
	}
	return *t.AccuStatsPolicy
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFirewallPolicy retrieves the value of the leaf FirewallPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FirewallPolicy is set, it can
// safely use t.GetFirewallPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FirewallPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetFirewallPolicy() string {
	if t == nil || t.FirewallPolicy == nil {
		return ""
	}
	return *t.FirewallPolicy
}

// GetHostTrackingPolicy retrieves the value of the leaf HostTrackingPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostTrackingPolicy is set, it can
// safely use t.GetHostTrackingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostTrackingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetHostTrackingPolicy() string {
	if t == nil || t.HostTrackingPolicy == nil {
		return ""
	}
	return *t.HostTrackingPolicy
}

// GetHsSlaMode retrieves the value of the leaf HsSlaMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsSlaMode is set, it can
// safely use t.GetHsSlaMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsSlaMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetHsSlaMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HsSlaMode {
	if t == nil || t.HsSlaMode == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HsSlaMode_expanded
	}
	return t.HsSlaMode
}

// GetIgmpPolicy retrieves the value of the leaf IgmpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgmpPolicy is set, it can
// safely use t.GetIgmpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgmpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetIgmpPolicy() string {
	if t == nil || t.IgmpPolicy == nil {
		return ""
	}
	return *t.IgmpPolicy
}

// GetMldPolicy retrieves the value of the leaf MldPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MldPolicy is set, it can
// safely use t.GetMldPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MldPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetMldPolicy() string {
	if t == nil || t.MldPolicy == nil {
		return ""
	}
	return *t.MldPolicy
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPimPolicy retrieves the value of the leaf PimPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PimPolicy is set, it can
// safely use t.GetPimPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PimPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetPimPolicy() string {
	if t == nil || t.PimPolicy == nil {
		return ""
	}
	return *t.PimPolicy
}

// GetPreference retrieves the value of the leaf Preference from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preference is set, it can
// safely use t.GetPreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetPreference() uint32 {
	if t == nil || t.Preference == nil {
		return 5
	}
	return *t.Preference
}

// GetSecondaryShaperHashing retrieves the value of the leaf SecondaryShaperHashing from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryShaperHashing is set, it can
// safely use t.GetSecondaryShaperHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryShaperHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetSecondaryShaperHashing() bool {
	if t == nil || t.SecondaryShaperHashing == nil {
		return false
	}
	return *t.SecondaryShaperHashing
}

// GetSubMcacPolicy retrieves the value of the leaf SubMcacPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubMcacPolicy is set, it can
// safely use t.GetSubMcacPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubMcacPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetSubMcacPolicy() string {
	if t == nil || t.SubMcacPolicy == nil {
		return ""
	}
	return *t.SubMcacPolicy
}

// GetUpnpPolicy retrieves the value of the leaf UpnpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpnpPolicy is set, it can
// safely use t.GetUpnpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpnpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetUpnpPolicy() string {
	if t == nil || t.UpnpPolicy == nil {
		return ""
	}
	return *t.UpnpPolicy
}

// GetVolumeStatsType retrieves the value of the leaf VolumeStatsType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VolumeStatsType is set, it can
// safely use t.GetVolumeStatsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VolumeStatsType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetVolumeStatsType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_VolumeStatsType {
	if t == nil || t.VolumeStatsType == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_VolumeStatsType_l2
	}
	return t.VolumeStatsType
}

// GetVportHashing retrieves the value of the leaf VportHashing from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VportHashing is set, it can
// safely use t.GetVportHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VportHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) GetVportHashing() bool {
	if t == nil || t.VportHashing == nil {
		return false
	}
	return *t.VportHashing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
	if t.HsSlaMode == 0 {
		t.HsSlaMode = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HsSlaMode_expanded
	}
	if t.Preference == nil {
		var v uint32 = 5
		t.Preference = &v
	}
	if t.SecondaryShaperHashing == nil {
		var v bool = false
		t.SecondaryShaperHashing = &v
	}
	if t.VolumeStatsType == 0 {
		t.VolumeStatsType = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_VolumeStatsType_l2
	}
	if t.VportHashing == nil {
		var v bool = false
		t.VportHashing = &v
	}
	t.Ancp.PopulateDefaults()
	t.Control.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.HostLimits.PopulateDefaults()
	t.Ingress.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.RadiusAccounting.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	t.SlaProfileMap.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ancp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp struct {
	AncpPolicy *string `path:"ancp-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) IsYANGGoStruct() {}

// GetAncpPolicy retrieves the value of the leaf AncpPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AncpPolicy is set, it can
// safely use t.GetAncpPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AncpPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) GetAncpPolicy() string {
	if t == nil || t.AncpPolicy == nil {
		return ""
	}
	return *t.AncpPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/control YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control struct {
	Cups  *bool `path:"cups" module:"nokia-conf"`
	Local *bool `path:"local" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) IsYANGGoStruct() {}

// GetCups retrieves the value of the leaf Cups from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cups is set, it can
// safely use t.GetCups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) GetCups() bool {
	if t == nil || t.Cups == nil {
		return false
	}
	return *t.Cups
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) GetLocal() bool {
	if t == nil || t.Local == nil {
		return true
	}
	return *t.Local
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cups == nil {
		var v bool = false
		t.Cups = &v
	}
	if t.Local == nil {
		var v bool = true
		t.Local = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Control) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress struct {
	LagPerLinkHash *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash `path:"lag-per-link-hash" module:"nokia-conf" yangPresence:"true"`
	Qos            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos            `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) IsYANGGoStruct() {}

// GetOrCreateLagPerLinkHash retrieves the value of the LagPerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) GetOrCreateLagPerLinkHash() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash {
	if t.LagPerLinkHash != nil {
		return t.LagPerLinkHash
	}
	t.LagPerLinkHash = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash{}
	return t.LagPerLinkHash
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos{}
	return t.Qos
}

// GetLagPerLinkHash returns the value of the LagPerLinkHash struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress. If the receiver or the field LagPerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) GetLagPerLinkHash() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash {
	if t != nil && t.LagPerLinkHash != nil {
		return t.LagPerLinkHash
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LagPerLinkHash.PopulateDefaults()
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/lag-per-link-hash YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash struct {
	Class  *int32 `path:"class" module:"nokia-conf"`
	Weight *int32 `path:"weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) IsYANGGoStruct() {
}

// GetClass retrieves the value of the leaf Class from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Class is set, it can
// safely use t.GetClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Class == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) GetClass() int32 {
	if t == nil || t.Class == nil {
		return 1
	}
	return *t.Class
}

// GetWeight retrieves the value of the leaf Weight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weight is set, it can
// safely use t.GetWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) GetWeight() int32 {
	if t == nil || t.Weight == nil {
		return 1
	}
	return *t.Weight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Class == nil {
		var v int32 = 1
		t.Class = &v
	}
	if t.Weight == nil {
		var v int32 = 1
		t.Weight = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_LagPerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos struct {
	AggRate              *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate              `path:"agg-rate" module:"nokia-conf"`
	EncapOffset          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset          `path:"encap-offset" module:"nokia-conf" yangPresence:"true"`
	HsAggRate            *int32                                                                                      `path:"hs-agg-rate" module:"nokia-conf"`
	HsLowBurstMaxClass   *uint32                                                                                     `path:"hs-low-burst-max-class" module:"nokia-conf"`
	HsMinResvBw          *int32                                                                                      `path:"hs-min-resv-bw" module:"nokia-conf"`
	Hsmda                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda                `path:"hsmda" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) IsYANGGoStruct() {}

// GetOrCreateAggRate retrieves the value of the AggRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetOrCreateAggRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate {
	if t.AggRate != nil {
		return t.AggRate
	}
	t.AggRate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate{}
	return t.AggRate
}

// GetOrCreateEncapOffset retrieves the value of the EncapOffset field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetOrCreateEncapOffset() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset {
	if t.EncapOffset != nil {
		return t.EncapOffset
	}
	t.EncapOffset = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset{}
	return t.EncapOffset
}

// GetOrCreateHsmda retrieves the value of the Hsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetOrCreateHsmda() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda {
	if t.Hsmda != nil {
		return t.Hsmda
	}
	t.Hsmda = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda{}
	return t.Hsmda
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetAggRate returns the value of the AggRate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos. If the receiver or the field AggRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetAggRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate {
	if t != nil && t.AggRate != nil {
		return t.AggRate
	}
	return nil
}

// GetEncapOffset returns the value of the EncapOffset struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos. If the receiver or the field EncapOffset is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetEncapOffset() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset {
	if t != nil && t.EncapOffset != nil {
		return t.EncapOffset
	}
	return nil
}

// GetHsmda returns the value of the Hsmda struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos. If the receiver or the field Hsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetHsmda() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda {
	if t != nil && t.Hsmda != nil {
		return t.Hsmda
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// GetHsAggRate retrieves the value of the leaf HsAggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsAggRate is set, it can
// safely use t.GetHsAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsAggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetHsAggRate() int32 {
	if t == nil || t.HsAggRate == nil {
		return 0
	}
	return *t.HsAggRate
}

// GetHsLowBurstMaxClass retrieves the value of the leaf HsLowBurstMaxClass from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsLowBurstMaxClass is set, it can
// safely use t.GetHsLowBurstMaxClass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsLowBurstMaxClass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetHsLowBurstMaxClass() uint32 {
	if t == nil || t.HsLowBurstMaxClass == nil {
		return 6
	}
	return *t.HsLowBurstMaxClass
}

// GetHsMinResvBw retrieves the value of the leaf HsMinResvBw from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HsMinResvBw is set, it can
// safely use t.GetHsMinResvBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HsMinResvBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) GetHsMinResvBw() int32 {
	if t == nil || t.HsMinResvBw == nil {
		return 1
	}
	return *t.HsMinResvBw
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HsLowBurstMaxClass == nil {
		var v uint32 = 6
		t.HsLowBurstMaxClass = &v
	}
	if t.HsMinResvBw == nil {
		var v int32 = 1
		t.HsMinResvBw = &v
	}
	t.AggRate.PopulateDefaults()
	t.EncapOffset.PopulateDefaults()
	t.Hsmda.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/agg-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate struct {
	AdaptationRule            E_NokiaTypesQos_AdaptationRule                                                                 `path:"adaptation-rule" module:"nokia-conf"`
	BurstLimit                NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate_BurstLimit_Union `path:"burst-limit" module:"nokia-conf"`
	MinResvBw                 *int32                                                                                         `path:"min-resv-bw" module:"nokia-conf"`
	QueueFrameBasedAccounting *bool                                                                                          `path:"queue-frame-based-accounting" module:"nokia-conf"`
	Rate                      *int32                                                                                         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) IsYANGGoStruct() {
}

// GetAdaptationRule retrieves the value of the leaf AdaptationRule from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdaptationRule is set, it can
// safely use t.GetAdaptationRule() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdaptationRule == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) GetAdaptationRule() E_NokiaTypesQos_AdaptationRule {
	if t == nil || t.AdaptationRule == 0 {
		return NokiaTypesQos_AdaptationRule_closest
	}
	return t.AdaptationRule
}

// GetBurstLimit retrieves the value of the leaf BurstLimit from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BurstLimit is set, it can
// safely use t.GetBurstLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BurstLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) GetBurstLimit() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate_BurstLimit_Union {
	if t == nil || t.BurstLimit == nil {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate_BurstLimit_Enum_auto
	}
	return t.BurstLimit
}

// GetMinResvBw retrieves the value of the leaf MinResvBw from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinResvBw is set, it can
// safely use t.GetMinResvBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinResvBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) GetMinResvBw() int32 {
	if t == nil || t.MinResvBw == nil {
		return 1
	}
	return *t.MinResvBw
}

// GetQueueFrameBasedAccounting retrieves the value of the leaf QueueFrameBasedAccounting from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueFrameBasedAccounting is set, it can
// safely use t.GetQueueFrameBasedAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueFrameBasedAccounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) GetQueueFrameBasedAccounting() bool {
	if t == nil || t.QueueFrameBasedAccounting == nil {
		return false
	}
	return *t.QueueFrameBasedAccounting
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) GetRate() int32 {
	if t == nil || t.Rate == nil {
		return 0
	}
	return *t.Rate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdaptationRule == 0 {
		t.AdaptationRule = NokiaTypesQos_AdaptationRule_closest
	}
	if t.BurstLimit == nil {
		t.BurstLimit = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate_BurstLimit_Enum_auto
	}
	if t.MinResvBw == nil {
		var v int32 = 1
		t.MinResvBw = &v
	}
	if t.QueueFrameBasedAccounting == nil {
		var v bool = false
		t.QueueFrameBasedAccounting = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_AggRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/encap-offset YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset struct {
	Type E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) IsYANGGoStruct() {
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) GetType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_EncapOffset) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/hsmda YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda struct {
	AggRate   *int32                                                                                 `path:"agg-rate" module:"nokia-conf"`
	MinResvBw *int32                                                                                 `path:"min-resv-bw" module:"nokia-conf"`
	SapEgress *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress `path:"sap-egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) IsYANGGoStruct() {
}

// GetOrCreateSapEgress retrieves the value of the SapEgress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) GetOrCreateSapEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress {
	if t.SapEgress != nil {
		return t.SapEgress
	}
	t.SapEgress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress{}
	return t.SapEgress
}

// GetSapEgress returns the value of the SapEgress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda. If the receiver or the field SapEgress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) GetSapEgress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress {
	if t != nil && t.SapEgress != nil {
		return t.SapEgress
	}
	return nil
}

// GetAggRate retrieves the value of the leaf AggRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AggRate is set, it can
// safely use t.GetAggRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AggRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) GetAggRate() int32 {
	if t == nil || t.AggRate == nil {
		return 0
	}
	return *t.AggRate
}

// GetMinResvBw retrieves the value of the leaf MinResvBw from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinResvBw is set, it can
// safely use t.GetMinResvBw() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinResvBw == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) GetMinResvBw() int32 {
	if t == nil || t.MinResvBw == nil {
		return 1
	}
	return *t.MinResvBw
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinResvBw == nil {
		var v int32 = 1
		t.MinResvBw = &v
	}
	t.SapEgress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/hsmda/sap-egress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                          `path:"policy-name" module:"nokia-conf"`
	StatMode   E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) GetStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/hsmda/sap-egress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides struct {
	PacketByteOffset *int32                                                                                                                                                                                                                    `path:"packet-byte-offset" module:"nokia-conf"`
	Queue            map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue `path:"queue" module:"nokia-conf"`
	WrrPolicy        *string                                                                                                                                                                                                                   `path:"wrr-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) IsYANGGoStruct() {
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) NewQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue{
		Id: Id,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Id = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) GetOrCreateQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue {

	key := Id

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) GetQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) DeleteQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union) {
	key := Id

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// GetPacketByteOffset retrieves the value of the leaf PacketByteOffset from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketByteOffset is set, it can
// safely use t.GetPacketByteOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketByteOffset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) GetPacketByteOffset() int32 {
	if t == nil || t.PacketByteOffset == nil {
		return 0
	}
	return *t.PacketByteOffset
}

// GetWrrPolicy retrieves the value of the leaf WrrPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrPolicy is set, it can
// safely use t.GetWrrPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) GetWrrPolicy() string {
	if t == nil || t.WrrPolicy == nil {
		return ""
	}
	return *t.WrrPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/hsmda/sap-egress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue struct {
	Id          NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union   `path:"id" module:"nokia-conf"`
	Mbs         NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Mbs_Union  `path:"mbs" module:"nokia-conf"`
	Rate        NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Rate_Union `path:"rate" module:"nokia-conf"`
	SlopePolicy *string                                                                                                          `path:"slope-policy" module:"nokia-conf"`
	WrrWeight   *int32                                                                                                           `path:"wrr-weight" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) GetMbs() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Mbs_Union {
	if t == nil || t.Mbs == nil {
		return nil
	}
	return t.Mbs
}

// GetRate retrieves the value of the leaf Rate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rate is set, it can
// safely use t.GetRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) GetRate() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue_Rate_Union {
	if t == nil || t.Rate == nil {
		return nil
	}
	return t.Rate
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// GetWrrWeight retrieves the value of the leaf WrrWeight from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WrrWeight is set, it can
// safely use t.GetWrrWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WrrWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) GetWrrWeight() int32 {
	if t == nil || t.WrrWeight == nil {
		return 0
	}
	return *t.WrrWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_Hsmda_SapEgress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                               `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                          `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		Level: Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	Level           NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union           `path:"level" module:"nokia-conf"`
	MbsContribution NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetLevel() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union {
	if t == nil || t.Level == nil {
		return nil
	}
	return t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level": t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                          `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Rate          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                         `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/egress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Egress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/host-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits struct {
	Ipv4       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 `path:"ipv6" module:"nokia-conf"`
	LacOverall *int32                                                                      `path:"lac-overall" module:"nokia-conf"`
	Overall    *int32                                                                      `path:"overall" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetIpv4() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetIpv6() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetLacOverall retrieves the value of the leaf LacOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacOverall is set, it can
// safely use t.GetLacOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetLacOverall() int32 {
	if t == nil || t.LacOverall == nil {
		return 0
	}
	return *t.LacOverall
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/host-limits/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 struct {
	Arp     *int32 `path:"arp" module:"nokia-conf"`
	Dhcp    *int32 `path:"dhcp" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
	Ppp     *int32 `path:"ppp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) IsYANGGoStruct() {}

// GetArp retrieves the value of the leaf Arp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Arp is set, it can
// safely use t.GetArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Arp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) GetArp() int32 {
	if t == nil || t.Arp == nil {
		return 0
	}
	return *t.Arp
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) GetDhcp() int32 {
	if t == nil || t.Dhcp == nil {
		return 0
	}
	return *t.Dhcp
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// GetPpp retrieves the value of the leaf Ppp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ppp is set, it can
// safely use t.GetPpp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ppp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) GetPpp() int32 {
	if t == nil || t.Ppp == nil {
		return 0
	}
	return *t.Ppp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/host-limits/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 struct {
	Overall      *int32 `path:"overall" module:"nokia-conf"`
	PdIpoeDhcp   *int32 `path:"pd-ipoe-dhcp" module:"nokia-conf"`
	PdOverall    *int32 `path:"pd-overall" module:"nokia-conf"`
	PdPppDhcp    *int32 `path:"pd-ppp-dhcp" module:"nokia-conf"`
	WanIpoeDhcp  *int32 `path:"wan-ipoe-dhcp" module:"nokia-conf"`
	WanIpoeSlaac *int32 `path:"wan-ipoe-slaac" module:"nokia-conf"`
	WanOverall   *int32 `path:"wan-overall" module:"nokia-conf"`
	WanPppDhcp   *int32 `path:"wan-ppp-dhcp" module:"nokia-conf"`
	WanPppSlaac  *int32 `path:"wan-ppp-slaac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) IsYANGGoStruct() {}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// GetPdIpoeDhcp retrieves the value of the leaf PdIpoeDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdIpoeDhcp is set, it can
// safely use t.GetPdIpoeDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdIpoeDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetPdIpoeDhcp() int32 {
	if t == nil || t.PdIpoeDhcp == nil {
		return 0
	}
	return *t.PdIpoeDhcp
}

// GetPdOverall retrieves the value of the leaf PdOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdOverall is set, it can
// safely use t.GetPdOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetPdOverall() int32 {
	if t == nil || t.PdOverall == nil {
		return 0
	}
	return *t.PdOverall
}

// GetPdPppDhcp retrieves the value of the leaf PdPppDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PdPppDhcp is set, it can
// safely use t.GetPdPppDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PdPppDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetPdPppDhcp() int32 {
	if t == nil || t.PdPppDhcp == nil {
		return 0
	}
	return *t.PdPppDhcp
}

// GetWanIpoeDhcp retrieves the value of the leaf WanIpoeDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanIpoeDhcp is set, it can
// safely use t.GetWanIpoeDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanIpoeDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetWanIpoeDhcp() int32 {
	if t == nil || t.WanIpoeDhcp == nil {
		return 0
	}
	return *t.WanIpoeDhcp
}

// GetWanIpoeSlaac retrieves the value of the leaf WanIpoeSlaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanIpoeSlaac is set, it can
// safely use t.GetWanIpoeSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanIpoeSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetWanIpoeSlaac() int32 {
	if t == nil || t.WanIpoeSlaac == nil {
		return 0
	}
	return *t.WanIpoeSlaac
}

// GetWanOverall retrieves the value of the leaf WanOverall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanOverall is set, it can
// safely use t.GetWanOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanOverall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetWanOverall() int32 {
	if t == nil || t.WanOverall == nil {
		return 0
	}
	return *t.WanOverall
}

// GetWanPppDhcp retrieves the value of the leaf WanPppDhcp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanPppDhcp is set, it can
// safely use t.GetWanPppDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanPppDhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetWanPppDhcp() int32 {
	if t == nil || t.WanPppDhcp == nil {
		return 0
	}
	return *t.WanPppDhcp
}

// GetWanPppSlaac retrieves the value of the leaf WanPppSlaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WanPppSlaac is set, it can
// safely use t.GetWanPppSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WanPppSlaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) GetWanPppSlaac() int32 {
	if t == nil || t.WanPppSlaac == nil {
		return 0
	}
	return *t.WanPppSlaac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_HostLimits_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress struct {
	Qos *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos `path:"qos" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) IsYANGGoStruct() {}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos{}
	return t.Qos
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) GetQos() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Qos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos struct {
	Hsmda                *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda                `path:"hsmda" module:"nokia-conf"`
	PolicerControlPolicy *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy `path:"policer-control-policy" module:"nokia-conf"`
	SchedulerPolicy      *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy      `path:"scheduler-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) IsYANGGoStruct() {}

// GetOrCreateHsmda retrieves the value of the Hsmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetOrCreateHsmda() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda {
	if t.Hsmda != nil {
		return t.Hsmda
	}
	t.Hsmda = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda{}
	return t.Hsmda
}

// GetOrCreatePolicerControlPolicy retrieves the value of the PolicerControlPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetOrCreatePolicerControlPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy {
	if t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	t.PolicerControlPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy{}
	return t.PolicerControlPolicy
}

// GetOrCreateSchedulerPolicy retrieves the value of the SchedulerPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetOrCreateSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy {
	if t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	t.SchedulerPolicy = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy{}
	return t.SchedulerPolicy
}

// GetHsmda returns the value of the Hsmda struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos. If the receiver or the field Hsmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetHsmda() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda {
	if t != nil && t.Hsmda != nil {
		return t.Hsmda
	}
	return nil
}

// GetPolicerControlPolicy returns the value of the PolicerControlPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos. If the receiver or the field PolicerControlPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetPolicerControlPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy {
	if t != nil && t.PolicerControlPolicy != nil {
		return t.PolicerControlPolicy
	}
	return nil
}

// GetSchedulerPolicy returns the value of the SchedulerPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos. If the receiver or the field SchedulerPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) GetSchedulerPolicy() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy {
	if t != nil && t.SchedulerPolicy != nil {
		return t.SchedulerPolicy
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Hsmda.PopulateDefaults()
	t.PolicerControlPolicy.PopulateDefaults()
	t.SchedulerPolicy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/hsmda YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda struct {
	SapIngress *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress `path:"sap-ingress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) IsYANGGoStruct() {
}

// GetOrCreateSapIngress retrieves the value of the SapIngress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) GetOrCreateSapIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress {
	if t.SapIngress != nil {
		return t.SapIngress
	}
	t.SapIngress = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress{}
	return t.SapIngress
}

// GetSapIngress returns the value of the SapIngress struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda. If the receiver or the field SapIngress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) GetSapIngress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress {
	if t != nil && t.SapIngress != nil {
		return t.SapIngress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SapIngress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/hsmda/sap-ingress YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                            `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/hsmda/sap-ingress/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides struct {
	Policer map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer `path:"policer" module:"nokia-conf"`
	Queue   map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue     `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) IsYANGGoStruct() {
}

// NewPolicer creates a new entry in the Policer list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) NewPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policer", key)
	}

	t.Policer[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer{
		Id: Id,
	}

	return t.Policer[key], nil
}

// RenamePolicer renames an entry in the list Policer within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) RenamePolicer(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union) error {
	if _, ok := t.Policer[newK]; ok {
		return fmt.Errorf("key %v already exists in Policer", newK)
	}

	e, ok := t.Policer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policer", oldK)
	}
	e.Id = newK

	t.Policer[newK] = e
	delete(t.Policer, oldK)
	return nil
}

// GetOrCreatePolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) GetOrCreatePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer {

	key := Id

	if v, ok := t.Policer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicer(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicer got unexpected error: %v", err))
	}
	return v
}

// GetPolicer retrieves the value with the specified key from
// the Policer map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) GetPolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Policer[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) DeletePolicer(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union) {
	key := Id

	delete(t.Policer, key)
}

// AppendPolicer appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer struct to the
// list Policer of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) AppendPolicer(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policer == nil {
		t.Policer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer)
	}

	if _, ok := t.Policer[key]; ok {
		return fmt.Errorf("duplicate key for list Policer %v", key)
	}

	t.Policer[key] = v
	return nil
}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) NewQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue{
		Id: Id,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.Id = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) GetOrCreateQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue {

	key := Id

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) GetQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) DeleteQueue(Id NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union) {
	key := Id

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) AppendQueue(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policer {
		e.PopulateDefaults()
	}
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/hsmda/sap-ingress/overrides/policer YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer struct {
	Id       NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union   `path:"id" module:"nokia-conf"`
	StatMode E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) GetStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Policer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/hsmda/sap-ingress/overrides/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue struct {
	Id       NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union   `path:"id" module:"nokia-conf"`
	StatMode E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_StatMode `path:"stat-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) GetId() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetStatMode retrieves the value of the leaf StatMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StatMode is set, it can
// safely use t.GetStatMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StatMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) GetStatMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue_StatMode {
	if t == nil || t.StatMode == 0 {
		return 0
	}
	return t.StatMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_Hsmda_SapIngress_Overrides_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/policer-control-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                                `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/policer-control-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides struct {
	Root *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root `path:"root" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) IsYANGGoStruct() {
}

// GetOrCreateRoot retrieves the value of the Root field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) GetOrCreateRoot() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t.Root != nil {
		return t.Root
	}
	t.Root = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root{}
	return t.Root
}

// GetRoot returns the value of the Root struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides. If the receiver or the field Root is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) GetRoot() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root {
	if t != nil && t.Root != nil {
		return t.Root
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Root.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/policer-control-policy/overrides/root YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root struct {
	MaxRate               NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union          `path:"max-rate" module:"nokia-conf"`
	PriorityMbsThresholds *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds `path:"priority-mbs-thresholds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) IsYANGGoStruct() {
}

// GetOrCreatePriorityMbsThresholds retrieves the value of the PriorityMbsThresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetOrCreatePriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	t.PriorityMbsThresholds = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds{}
	return t.PriorityMbsThresholds
}

// GetPriorityMbsThresholds returns the value of the PriorityMbsThresholds struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root. If the receiver or the field PriorityMbsThresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetPriorityMbsThresholds() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds {
	if t != nil && t.PriorityMbsThresholds != nil {
		return t.PriorityMbsThresholds
	}
	return nil
}

// GetMaxRate retrieves the value of the leaf MaxRate from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRate is set, it can
// safely use t.GetMaxRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) GetMaxRate() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_MaxRate_Union {
	if t == nil || t.MaxRate == nil {
		return nil
	}
	return t.MaxRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PriorityMbsThresholds.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct {
	MinThreshSeparation NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union                                                                                                                                           `path:"min-thresh-separation" module:"nokia-conf"`
	Priority            map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) IsYANGGoStruct() {
}

// NewPriority creates a new entry in the Priority list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) NewPriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Priority[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Priority", key)
	}

	t.Priority[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority{
		Level: Level,
	}

	return t.Priority[key], nil
}

// RenamePriority renames an entry in the list Priority within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) RenamePriority(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) error {
	if _, ok := t.Priority[newK]; ok {
		return fmt.Errorf("key %v already exists in Priority", newK)
	}

	e, ok := t.Priority[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Priority", oldK)
	}
	e.Level = newK

	t.Priority[newK] = e
	delete(t.Priority, oldK)
	return nil
}

// GetOrCreatePriority retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetOrCreatePriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	key := Level

	if v, ok := t.Priority[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPriority(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePriority got unexpected error: %v", err))
	}
	return v
}

// GetPriority retrieves the value with the specified key from
// the Priority map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetPriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.Priority[key]; ok {
		return lm
	}
	return nil
}

// DeletePriority deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) DeletePriority(Level NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union) {
	key := Level

	delete(t.Priority, key)
}

// AppendPriority appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct to the
// list Priority of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) AppendPriority(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) error {
	key := v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Priority == nil {
		t.Priority = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority)
	}

	if _, ok := t.Priority[key]; ok {
		return fmt.Errorf("duplicate key for list Priority %v", key)
	}

	t.Priority[key] = v
	return nil
}

// GetMinThreshSeparation retrieves the value of the leaf MinThreshSeparation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinThreshSeparation is set, it can
// safely use t.GetMinThreshSeparation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinThreshSeparation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) GetMinThreshSeparation() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_MinThreshSeparation_Union {
	if t == nil || t.MinThreshSeparation == nil {
		return nil
	}
	return t.MinThreshSeparation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Priority {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/policer-control-policy/overrides/root/priority-mbs-thresholds/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct {
	Level           NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union           `path:"level" module:"nokia-conf"`
	MbsContribution NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union `path:"mbs-contribution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetLevel() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_Level_Union {
	if t == nil || t.Level == nil {
		return nil
	}
	return t.Level
}

// GetMbsContribution retrieves the value of the leaf MbsContribution from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MbsContribution is set, it can
// safely use t.GetMbsContribution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MbsContribution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) GetMbsContribution() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority_MbsContribution_Union {
	if t == nil || t.MbsContribution == nil {
		return nil
	}
	return t.MbsContribution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level": t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_PolicerControlPolicy_Overrides_Root_PriorityMbsThresholds_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/scheduler-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy struct {
	Overrides  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides `path:"overrides" module:"nokia-conf"`
	PolicyName *string                                                                                           `path:"policy-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) IsYANGGoStruct() {
}

// GetOrCreateOverrides retrieves the value of the Overrides field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) GetOrCreateOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides {
	if t.Overrides != nil {
		return t.Overrides
	}
	t.Overrides = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides{}
	return t.Overrides
}

// GetOverrides returns the value of the Overrides struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy. If the receiver or the field Overrides is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) GetOverrides() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides {
	if t != nil && t.Overrides != nil {
		return t.Overrides
	}
	return nil
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Overrides.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/scheduler-policy/overrides YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides struct {
	Scheduler map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler `path:"scheduler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) IsYANGGoStruct() {
}

// NewScheduler creates a new entry in the Scheduler list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) NewScheduler(SchedulerName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	key := SchedulerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Scheduler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Scheduler", key)
	}

	t.Scheduler[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler{
		SchedulerName: &SchedulerName,
	}

	return t.Scheduler[key], nil
}

// RenameScheduler renames an entry in the list Scheduler within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) RenameScheduler(oldK, newK string) error {
	if _, ok := t.Scheduler[newK]; ok {
		return fmt.Errorf("key %v already exists in Scheduler", newK)
	}

	e, ok := t.Scheduler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Scheduler", oldK)
	}
	e.SchedulerName = &newK

	t.Scheduler[newK] = e
	delete(t.Scheduler, oldK)
	return nil
}

// GetOrCreateScheduler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) GetOrCreateScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	key := SchedulerName

	if v, ok := t.Scheduler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScheduler(SchedulerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScheduler got unexpected error: %v", err))
	}
	return v
}

// GetScheduler retrieves the value with the specified key from
// the Scheduler map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) GetScheduler(SchedulerName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler {

	if t == nil {
		return nil
	}

	key := SchedulerName

	if lm, ok := t.Scheduler[key]; ok {
		return lm
	}
	return nil
}

// DeleteScheduler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) DeleteScheduler(SchedulerName string) {
	key := SchedulerName

	delete(t.Scheduler, key)
}

// AppendScheduler appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct to the
// list Scheduler of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) AppendScheduler(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) error {
	if v.SchedulerName == nil {
		return fmt.Errorf("invalid nil key received for SchedulerName")
	}

	key := *v.SchedulerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Scheduler == nil {
		t.Scheduler = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler)
	}

	if _, ok := t.Scheduler[key]; ok {
		return fmt.Errorf("duplicate key for list Scheduler %v", key)
	}

	t.Scheduler[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Scheduler {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/scheduler-policy/overrides/scheduler YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct {
	Rate          *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate `path:"rate" module:"nokia-conf"`
	SchedulerName *string                                                                                                          `path:"scheduler-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetRate() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetSchedulerName retrieves the value of the leaf SchedulerName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchedulerName is set, it can
// safely use t.GetSchedulerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchedulerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) GetSchedulerName() string {
	if t == nil || t.SchedulerName == nil {
		return ""
	}
	return *t.SchedulerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SchedulerName == nil {
		return nil, fmt.Errorf("nil value for key SchedulerName")
	}

	return map[string]interface{}{
		"scheduler-name": *t.SchedulerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/ingress/qos/scheduler-policy/overrides/scheduler/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetCir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) GetPir() NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesQos_SchedulerPirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesQos_SchedulerCirRate_Enum_sum
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesQos_SchedulerPirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Ingress_Qos_SchedulerPolicy_Overrides_Scheduler_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/nat YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat struct {
	AccessMode  E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat_AccessMode `path:"access-mode" module:"nokia-conf"`
	AllowBypass *bool                                                                       `path:"allow-bypass" module:"nokia-conf"`
	Policy      *string                                                                     `path:"policy" module:"nokia-conf"`
	PrefixList  *string                                                                     `path:"prefix-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) IsYANGGoStruct() {}

// GetAccessMode retrieves the value of the leaf AccessMode from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessMode is set, it can
// safely use t.GetAccessMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) GetAccessMode() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat_AccessMode {
	if t == nil || t.AccessMode == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat_AccessMode_auto
	}
	return t.AccessMode
}

// GetAllowBypass retrieves the value of the leaf AllowBypass from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowBypass is set, it can
// safely use t.GetAllowBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) GetAllowBypass() bool {
	if t == nil || t.AllowBypass == nil {
		return false
	}
	return *t.AllowBypass
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) GetPolicy() string {
	if t == nil || t.Policy == nil {
		return ""
	}
	return *t.Policy
}

// GetPrefixList retrieves the value of the leaf PrefixList from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixList is set, it can
// safely use t.GetPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) GetPrefixList() string {
	if t == nil || t.PrefixList == nil {
		return ""
	}
	return *t.PrefixList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessMode == 0 {
		t.AccessMode = NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat_AccessMode_auto
	}
	if t.AllowBypass == nil {
		var v bool = false
		t.AllowBypass = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/radius-accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting struct {
	Policy               []string `path:"policy" module:"nokia-conf"`
	SessionOptimizedStop *bool    `path:"session-optimized-stop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) IsYANGGoStruct() {
}

// GetPolicy retrieves the value of the leaf Policy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policy is set, it can
// safely use t.GetPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) GetPolicy() []string {
	if t == nil || t.Policy == nil {
		return nil
	}
	return t.Policy
}

// GetSessionOptimizedStop retrieves the value of the leaf SessionOptimizedStop from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SessionOptimizedStop is set, it can
// safely use t.GetSessionOptimizedStop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SessionOptimizedStop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) GetSessionOptimizedStop() bool {
	if t == nil || t.SessionOptimizedStop == nil {
		return false
	}
	return *t.SessionOptimizedStop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SessionOptimizedStop == nil {
		var v bool = false
		t.SessionOptimizedStop = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_RadiusAccounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/session-limits YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits struct {
	Ipoe    *int32                                                                          `path:"ipoe" module:"nokia-conf"`
	L2Tp    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp  `path:"l2tp" module:"nokia-conf"`
	Overall *int32                                                                          `path:"overall" module:"nokia-conf"`
	Pppoe   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe `path:"pppoe" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetOrCreateL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp{}
	return t.L2Tp
}

// GetOrCreatePppoe retrieves the value of the Pppoe field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetOrCreatePppoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe {
	if t.Pppoe != nil {
		return t.Pppoe
	}
	t.Pppoe = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe{}
	return t.Pppoe
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetL2Tp() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetPppoe returns the value of the Pppoe struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits. If the receiver or the field Pppoe is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetPppoe() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe {
	if t != nil && t.Pppoe != nil {
		return t.Pppoe
	}
	return nil
}

// GetIpoe retrieves the value of the leaf Ipoe from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipoe is set, it can
// safely use t.GetIpoe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipoe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetIpoe() int32 {
	if t == nil || t.Ipoe == nil {
		return 0
	}
	return *t.Ipoe
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.L2Tp.PopulateDefaults()
	t.Pppoe.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/session-limits/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp struct {
	Lns     *int32 `path:"lns" module:"nokia-conf"`
	Lts     *int32 `path:"lts" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) IsYANGGoStruct() {
}

// GetLns retrieves the value of the leaf Lns from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lns is set, it can
// safely use t.GetLns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) GetLns() int32 {
	if t == nil || t.Lns == nil {
		return 0
	}
	return *t.Lns
}

// GetLts retrieves the value of the leaf Lts from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lts is set, it can
// safely use t.GetLts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) GetLts() int32 {
	if t == nil || t.Lts == nil {
		return 0
	}
	return *t.Lts
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/session-limits/pppoe YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe struct {
	Lac     *int32 `path:"lac" module:"nokia-conf"`
	Local   *int32 `path:"local" module:"nokia-conf"`
	Overall *int32 `path:"overall" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) IsYANGGoStruct() {
}

// GetLac retrieves the value of the leaf Lac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lac is set, it can
// safely use t.GetLac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) GetLac() int32 {
	if t == nil || t.Lac == nil {
		return 0
	}
	return *t.Lac
}

// GetLocal retrieves the value of the leaf Local from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Local is set, it can
// safely use t.GetLocal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Local == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) GetLocal() int32 {
	if t == nil || t.Local == nil {
		return 0
	}
	return *t.Local
}

// GetOverall retrieves the value of the leaf Overall from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Overall is set, it can
// safely use t.GetOverall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Overall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) GetOverall() int32 {
	if t == nil || t.Overall == nil {
		return 0
	}
	return *t.Overall
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SessionLimits_Pppoe) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/sla-profile-map YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap struct {
	Entry                 map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry `path:"entry" module:"nokia-conf"`
	UseDirectMapAsDefault *bool                                                                                      `path:"use-direct-map-as-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) NewEntry(SlaProfileString string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry)
	}

	key := SlaProfileString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry{
		SlaProfileString: &SlaProfileString,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) RenameEntry(oldK, newK string) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.SlaProfileString = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) GetOrCreateEntry(SlaProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry {

	key := SlaProfileString

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(SlaProfileString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) GetEntry(SlaProfileString string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry {

	if t == nil {
		return nil
	}

	key := SlaProfileString

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) DeleteEntry(SlaProfileString string) {
	key := SlaProfileString

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) AppendEntry(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) error {
	if v.SlaProfileString == nil {
		return fmt.Errorf("invalid nil key received for SlaProfileString")
	}

	key := *v.SlaProfileString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetUseDirectMapAsDefault retrieves the value of the leaf UseDirectMapAsDefault from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDirectMapAsDefault is set, it can
// safely use t.GetUseDirectMapAsDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDirectMapAsDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) GetUseDirectMapAsDefault() bool {
	if t == nil || t.UseDirectMapAsDefault == nil {
		return false
	}
	return *t.UseDirectMapAsDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UseDirectMapAsDefault == nil {
		var v bool = false
		t.UseDirectMapAsDefault = &v
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry represents the /nokia-conf/configure/groups/group/subscriber-mgmt/sub-profile/sla-profile-map/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry struct {
	SlaProfile       *string `path:"sla-profile" module:"nokia-conf"`
	SlaProfileString *string `path:"sla-profile-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) IsYANGGoStruct() {
}

// GetSlaProfile retrieves the value of the leaf SlaProfile from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfile is set, it can
// safely use t.GetSlaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) GetSlaProfile() string {
	if t == nil || t.SlaProfile == nil {
		return ""
	}
	return *t.SlaProfile
}

// GetSlaProfileString retrieves the value of the leaf SlaProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfileString is set, it can
// safely use t.GetSlaProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) GetSlaProfileString() string {
	if t == nil || t.SlaProfileString == nil {
		return ""
	}
	return *t.SlaProfileString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlaProfileString == nil {
		return nil, fmt.Errorf("nil value for key SlaProfileString")
	}

	return map[string]interface{}{
		"sla-profile-string": *t.SlaProfileString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubProfile_SlaProfileMap_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics represents the /nokia-conf/configure/groups/group/subscriber-mgmt/subscriber-interface-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SubscriberInterfaceStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics represents the /nokia-conf/configure/groups/group/subscriber-mgmt/svlan-statistics YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SvlanStatistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior represents the /nokia-conf/configure/groups/group/subscriber-mgmt/system-behavior YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior struct {
	LegacyDnsNbns *bool `path:"legacy-dns-nbns" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) IsYANGGoStruct() {}

// GetLegacyDnsNbns retrieves the value of the leaf LegacyDnsNbns from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LegacyDnsNbns is set, it can
// safely use t.GetLegacyDnsNbns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LegacyDnsNbns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) GetLegacyDnsNbns() bool {
	if t == nil || t.LegacyDnsNbns == nil {
		return false
	}
	return *t.LegacyDnsNbns
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LegacyDnsNbns == nil {
		var v bool = false
		t.LegacyDnsNbns = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_SystemBehavior) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency represents the /nokia-conf/configure/groups/group/subscriber-mgmt/up-resiliency YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency struct {
	FateSharingGroupTemplate map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate `path:"fate-sharing-group-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) IsYANGGoStruct() {}

// NewFateSharingGroupTemplate creates a new entry in the FateSharingGroupTemplate list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) NewFateSharingGroupTemplate(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FateSharingGroupTemplate == nil {
		t.FateSharingGroupTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FateSharingGroupTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FateSharingGroupTemplate", key)
	}

	t.FateSharingGroupTemplate[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate{
		Name: &Name,
	}

	return t.FateSharingGroupTemplate[key], nil
}

// RenameFateSharingGroupTemplate renames an entry in the list FateSharingGroupTemplate within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) RenameFateSharingGroupTemplate(oldK, newK string) error {
	if _, ok := t.FateSharingGroupTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in FateSharingGroupTemplate", newK)
	}

	e, ok := t.FateSharingGroupTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FateSharingGroupTemplate", oldK)
	}
	e.Name = &newK

	t.FateSharingGroupTemplate[newK] = e
	delete(t.FateSharingGroupTemplate, oldK)
	return nil
}

// GetOrCreateFateSharingGroupTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) GetOrCreateFateSharingGroupTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate {

	key := Name

	if v, ok := t.FateSharingGroupTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFateSharingGroupTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFateSharingGroupTemplate got unexpected error: %v", err))
	}
	return v
}

// GetFateSharingGroupTemplate retrieves the value with the specified key from
// the FateSharingGroupTemplate map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) GetFateSharingGroupTemplate(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.FateSharingGroupTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteFateSharingGroupTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) DeleteFateSharingGroupTemplate(Name string) {
	key := Name

	delete(t.FateSharingGroupTemplate, key)
}

// AppendFateSharingGroupTemplate appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate struct to the
// list FateSharingGroupTemplate of NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) AppendFateSharingGroupTemplate(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FateSharingGroupTemplate == nil {
		t.FateSharingGroupTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate)
	}

	if _, ok := t.FateSharingGroupTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list FateSharingGroupTemplate %v", key)
	}

	t.FateSharingGroupTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.FateSharingGroupTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate represents the /nokia-conf/configure/groups/group/subscriber-mgmt/up-resiliency/fate-sharing-group-template YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate struct {
	Description                  *string                                                                                                   `path:"description" module:"nokia-conf"`
	GratuitousArp                E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_GratuitousArp     `path:"gratuitous-arp" module:"nokia-conf"`
	Name                         *string                                                                                                   `path:"name" module:"nokia-conf"`
	RedundantInterface           *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface `path:"redundant-interface" module:"nokia-conf"`
	UplinkForwardingWhileStandby *bool                                                                                                     `path:"uplink-forwarding-while-standby" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) IsYANGGoStruct() {
}

// GetOrCreateRedundantInterface retrieves the value of the RedundantInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetOrCreateRedundantInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface {
	if t.RedundantInterface != nil {
		return t.RedundantInterface
	}
	t.RedundantInterface = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface{}
	return t.RedundantInterface
}

// GetRedundantInterface returns the value of the RedundantInterface struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate. If the receiver or the field RedundantInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetRedundantInterface() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface {
	if t != nil && t.RedundantInterface != nil {
		return t.RedundantInterface
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetGratuitousArp retrieves the value of the leaf GratuitousArp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GratuitousArp is set, it can
// safely use t.GetGratuitousArp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GratuitousArp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetGratuitousArp() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_GratuitousArp {
	if t == nil || t.GratuitousArp == 0 {
		return NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_GratuitousArp_one_per_sap
	}
	return t.GratuitousArp
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetUplinkForwardingWhileStandby retrieves the value of the leaf UplinkForwardingWhileStandby from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UplinkForwardingWhileStandby is set, it can
// safely use t.GetUplinkForwardingWhileStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UplinkForwardingWhileStandby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) GetUplinkForwardingWhileStandby() bool {
	if t == nil || t.UplinkForwardingWhileStandby == nil {
		return false
	}
	return *t.UplinkForwardingWhileStandby
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GratuitousArp == 0 {
		t.GratuitousArp = NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_GratuitousArp_one_per_sap
	}
	if t.UplinkForwardingWhileStandby == nil {
		var v bool = false
		t.UplinkForwardingWhileStandby = &v
	}
	t.RedundantInterface.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface represents the /nokia-conf/configure/groups/group/subscriber-mgmt/up-resiliency/fate-sharing-group-template/redundant-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface struct {
	Name    *string `path:"name" module:"nokia-conf"`
	Service *string `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_UpResiliency_FateSharingGroupTemplate_RedundantInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw struct {
	BrgProfile map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile `path:"brg-profile" module:"nokia-conf"`
	Lanext     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext                `path:"lanext" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) IsYANGGoStruct() {}

// NewBrgProfile creates a new entry in the BrgProfile list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) NewBrgProfile(BrgProfileName string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BrgProfile == nil {
		t.BrgProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile)
	}

	key := BrgProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BrgProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BrgProfile", key)
	}

	t.BrgProfile[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile{
		BrgProfileName: &BrgProfileName,
	}

	return t.BrgProfile[key], nil
}

// RenameBrgProfile renames an entry in the list BrgProfile within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) RenameBrgProfile(oldK, newK string) error {
	if _, ok := t.BrgProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in BrgProfile", newK)
	}

	e, ok := t.BrgProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BrgProfile", oldK)
	}
	e.BrgProfileName = &newK

	t.BrgProfile[newK] = e
	delete(t.BrgProfile, oldK)
	return nil
}

// GetOrCreateBrgProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) GetOrCreateBrgProfile(BrgProfileName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile {

	key := BrgProfileName

	if v, ok := t.BrgProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBrgProfile(BrgProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBrgProfile got unexpected error: %v", err))
	}
	return v
}

// GetBrgProfile retrieves the value with the specified key from
// the BrgProfile map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) GetBrgProfile(BrgProfileName string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile {

	if t == nil {
		return nil
	}

	key := BrgProfileName

	if lm, ok := t.BrgProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteBrgProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) DeleteBrgProfile(BrgProfileName string) {
	key := BrgProfileName

	delete(t.BrgProfile, key)
}

// AppendBrgProfile appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile struct to the
// list BrgProfile of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) AppendBrgProfile(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) error {
	if v.BrgProfileName == nil {
		return fmt.Errorf("invalid nil key received for BrgProfileName")
	}

	key := *v.BrgProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BrgProfile == nil {
		t.BrgProfile = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile)
	}

	if _, ok := t.BrgProfile[key]; ok {
		return fmt.Errorf("duplicate key for list BrgProfile %v", key)
	}

	t.BrgProfile[key] = v
	return nil
}

// GetOrCreateLanext retrieves the value of the Lanext field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) GetOrCreateLanext() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext {
	if t.Lanext != nil {
		return t.Lanext
	}
	t.Lanext = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext{}
	return t.Lanext
}

// GetLanext returns the value of the Lanext struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw. If the receiver or the field Lanext is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) GetLanext() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext {
	if t != nil && t.Lanext != nil {
		return t.Lanext
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Lanext.PopulateDefaults()
	for _, e := range t.BrgProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile struct {
	BrgProfileName           *string                                                                                                                                                                      `path:"brg-profile-name" module:"nokia-conf"`
	ConnectivityVerification *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification                                                                                    `path:"connectivity-verification" module:"nokia-conf"`
	Description              *string                                                                                                                                                                      `path:"description" module:"nokia-conf"`
	HoldTime                 *uint32                                                                                                                                                                      `path:"hold-time" module:"nokia-conf"`
	HomePool                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool                                                                                                    `path:"home-pool" module:"nokia-conf"`
	InitialHoldTime          *uint32                                                                                                                                                                      `path:"initial-hold-time" module:"nokia-conf"`
	RadiusAuthentication     *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication                                                                                        `path:"radius-authentication" module:"nokia-conf"`
	RadiusProxyServer        map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer `path:"radius-proxy-server" module:"nokia-conf"`
	SlaProfileString         *string                                                                                                                                                                      `path:"sla-profile-string" module:"nokia-conf"`
	SubProfileString         *string                                                                                                                                                                      `path:"sub-profile-string" module:"nokia-conf"`
	UplinkInitialWait        *uint32                                                                                                                                                                      `path:"uplink-initial-wait" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key represents the key for list RadiusProxyServer of element /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key struct {
	RouterInstance string `path:"router-instance"`
	Name           string `path:"name"`
}

// NewRadiusProxyServer creates a new entry in the RadiusProxyServer list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) NewRadiusProxyServer(RouterInstance string, Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusProxyServer == nil {
		t.RadiusProxyServer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer)
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusProxyServer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusProxyServer", key)
	}

	t.RadiusProxyServer[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer{
		RouterInstance: &RouterInstance,
		Name:           &Name,
	}

	return t.RadiusProxyServer[key], nil
}

// RenameRadiusProxyServer renames an entry in the list RadiusProxyServer within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) RenameRadiusProxyServer(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key) error {
	if _, ok := t.RadiusProxyServer[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusProxyServer", newK)
	}

	e, ok := t.RadiusProxyServer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusProxyServer", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.Name = &newK.Name

	t.RadiusProxyServer[newK] = e
	delete(t.RadiusProxyServer, oldK)
	return nil
}

// GetOrCreateRadiusProxyServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetOrCreateRadiusProxyServer(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer {

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if v, ok := t.RadiusProxyServer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusProxyServer(RouterInstance, Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusProxyServer got unexpected error: %v", err))
	}
	return v
}

// GetRadiusProxyServer retrieves the value with the specified key from
// the RadiusProxyServer map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetRadiusProxyServer(RouterInstance string, Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	if lm, ok := t.RadiusProxyServer[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusProxyServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) DeleteRadiusProxyServer(RouterInstance string, Name string) {
	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key{
		RouterInstance: RouterInstance,
		Name:           Name,
	}

	delete(t.RadiusProxyServer, key)
}

// AppendRadiusProxyServer appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer struct to the
// list RadiusProxyServer of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) AppendRadiusProxyServer(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.Name == nil {
		return fmt.Errorf("invalid nil key for Name")
	}

	key := NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key{
		RouterInstance: *v.RouterInstance,
		Name:           *v.Name,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusProxyServer == nil {
		t.RadiusProxyServer = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer_Key]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer)
	}

	if _, ok := t.RadiusProxyServer[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusProxyServer %v", key)
	}

	t.RadiusProxyServer[key] = v
	return nil
}

// GetOrCreateConnectivityVerification retrieves the value of the ConnectivityVerification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetOrCreateConnectivityVerification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification {
	if t.ConnectivityVerification != nil {
		return t.ConnectivityVerification
	}
	t.ConnectivityVerification = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification{}
	return t.ConnectivityVerification
}

// GetOrCreateHomePool retrieves the value of the HomePool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetOrCreateHomePool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool {
	if t.HomePool != nil {
		return t.HomePool
	}
	t.HomePool = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool{}
	return t.HomePool
}

// GetOrCreateRadiusAuthentication retrieves the value of the RadiusAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetOrCreateRadiusAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication {
	if t.RadiusAuthentication != nil {
		return t.RadiusAuthentication
	}
	t.RadiusAuthentication = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication{}
	return t.RadiusAuthentication
}

// GetConnectivityVerification returns the value of the ConnectivityVerification struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the receiver or the field ConnectivityVerification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetConnectivityVerification() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification {
	if t != nil && t.ConnectivityVerification != nil {
		return t.ConnectivityVerification
	}
	return nil
}

// GetHomePool returns the value of the HomePool struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the receiver or the field HomePool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetHomePool() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool {
	if t != nil && t.HomePool != nil {
		return t.HomePool
	}
	return nil
}

// GetRadiusAuthentication returns the value of the RadiusAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile. If the receiver or the field RadiusAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetRadiusAuthentication() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication {
	if t != nil && t.RadiusAuthentication != nil {
		return t.RadiusAuthentication
	}
	return nil
}

// GetBrgProfileName retrieves the value of the leaf BrgProfileName from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BrgProfileName is set, it can
// safely use t.GetBrgProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BrgProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetBrgProfileName() string {
	if t == nil || t.BrgProfileName == nil {
		return ""
	}
	return *t.BrgProfileName
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHoldTime retrieves the value of the leaf HoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTime is set, it can
// safely use t.GetHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetHoldTime() uint32 {
	if t == nil || t.HoldTime == nil {
		return 0
	}
	return *t.HoldTime
}

// GetInitialHoldTime retrieves the value of the leaf InitialHoldTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialHoldTime is set, it can
// safely use t.GetInitialHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetInitialHoldTime() uint32 {
	if t == nil || t.InitialHoldTime == nil {
		return 300
	}
	return *t.InitialHoldTime
}

// GetSlaProfileString retrieves the value of the leaf SlaProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlaProfileString is set, it can
// safely use t.GetSlaProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlaProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetSlaProfileString() string {
	if t == nil || t.SlaProfileString == nil {
		return ""
	}
	return *t.SlaProfileString
}

// GetSubProfileString retrieves the value of the leaf SubProfileString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubProfileString is set, it can
// safely use t.GetSubProfileString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubProfileString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetSubProfileString() string {
	if t == nil || t.SubProfileString == nil {
		return ""
	}
	return *t.SubProfileString
}

// GetUplinkInitialWait retrieves the value of the leaf UplinkInitialWait from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UplinkInitialWait is set, it can
// safely use t.GetUplinkInitialWait() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UplinkInitialWait == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) GetUplinkInitialWait() uint32 {
	if t == nil || t.UplinkInitialWait == nil {
		return 30
	}
	return *t.UplinkInitialWait
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoldTime == nil {
		var v uint32 = 0
		t.HoldTime = &v
	}
	if t.InitialHoldTime == nil {
		var v uint32 = 300
		t.InitialHoldTime = &v
	}
	if t.UplinkInitialWait == nil {
		var v uint32 = 30
		t.UplinkInitialWait = &v
	}
	t.ConnectivityVerification.PopulateDefaults()
	t.HomePool.PopulateDefaults()
	t.RadiusAuthentication.PopulateDefaults()
	for _, e := range t.RadiusProxyServer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.BrgProfileName == nil {
		return nil, fmt.Errorf("nil value for key BrgProfileName")
	}

	return map[string]interface{}{
		"brg-profile-name": *t.BrgProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/connectivity-verification YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Count      *uint32                     `path:"count" module:"nokia-conf"`
	RetryTime  *uint32                     `path:"retry-time" module:"nokia-conf"`
	Timeout    *uint32                     `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 0
	}
	return *t.Count
}

// GetRetryTime retrieves the value of the leaf RetryTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryTime is set, it can
// safely use t.GetRetryTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) GetRetryTime() uint32 {
	if t == nil || t.RetryTime == nil {
		return 0
	}
	return *t.RetryTime
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 0
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_ConnectivityVerification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/home-pool YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool struct {
	LeaseTime         *uint32                                                                                                                                                                           `path:"lease-time" module:"nokia-conf"`
	Option            map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option `path:"option" module:"nokia-conf"`
	StandbyIpLifetime *uint32                                                                                                                                                                           `path:"standby-ip-lifetime" module:"nokia-conf"`
	Subnet            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet                                                                                                  `path:"subnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) IsYANGGoStruct() {}

// NewOption creates a new entry in the Option list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) NewOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option)
	}

	key := Number

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Option[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Option", key)
	}

	t.Option[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option{
		Number: Number,
	}

	return t.Option[key], nil
}

// RenameOption renames an entry in the list Option within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) RenameOption(oldK, newK NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union) error {
	if _, ok := t.Option[newK]; ok {
		return fmt.Errorf("key %v already exists in Option", newK)
	}

	e, ok := t.Option[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Option", oldK)
	}
	e.Number = newK

	t.Option[newK] = e
	delete(t.Option, oldK)
	return nil
}

// GetOrCreateOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetOrCreateOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option {

	key := Number

	if v, ok := t.Option[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOption(Number)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOption got unexpected error: %v", err))
	}
	return v
}

// GetOption retrieves the value with the specified key from
// the Option map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option {

	if t == nil {
		return nil
	}

	key := Number

	if lm, ok := t.Option[key]; ok {
		return lm
	}
	return nil
}

// DeleteOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) DeleteOption(Number NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union) {
	key := Number

	delete(t.Option, key)
}

// AppendOption appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option struct to the
// list Option of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) AppendOption(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) error {
	key := v.Number

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Option == nil {
		t.Option = make(map[NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option)
	}

	if _, ok := t.Option[key]; ok {
		return fmt.Errorf("duplicate key for list Option %v", key)
	}

	t.Option[key] = v
	return nil
}

// GetOrCreateSubnet retrieves the value of the Subnet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetOrCreateSubnet() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet {
	if t.Subnet != nil {
		return t.Subnet
	}
	t.Subnet = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet{}
	return t.Subnet
}

// GetSubnet returns the value of the Subnet struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool. If the receiver or the field Subnet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetSubnet() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet {
	if t != nil && t.Subnet != nil {
		return t.Subnet
	}
	return nil
}

// GetLeaseTime retrieves the value of the leaf LeaseTime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LeaseTime is set, it can
// safely use t.GetLeaseTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LeaseTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetLeaseTime() uint32 {
	if t == nil || t.LeaseTime == nil {
		return 21600
	}
	return *t.LeaseTime
}

// GetStandbyIpLifetime retrieves the value of the leaf StandbyIpLifetime from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyIpLifetime is set, it can
// safely use t.GetStandbyIpLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyIpLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) GetStandbyIpLifetime() uint32 {
	if t == nil || t.StandbyIpLifetime == nil {
		return 21600
	}
	return *t.StandbyIpLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LeaseTime == nil {
		var v uint32 = 21600
		t.LeaseTime = &v
	}
	if t.StandbyIpLifetime == nil {
		var v uint32 = 21600
		t.StandbyIpLifetime = &v
	}
	t.Subnet.PopulateDefaults()
	for _, e := range t.Option {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/home-pool/option YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option struct {
	AsciiString     *string                                                                                           `path:"ascii-string" module:"nokia-conf"`
	Duration        *uint32                                                                                           `path:"duration" module:"nokia-conf"`
	Empty           YANGEmpty                                                                                         `path:"empty" module:"nokia-conf"`
	HexString       *string                                                                                           `path:"hex-string" module:"nokia-conf"`
	Ipv4Address     []string                                                                                          `path:"ipv4-address" module:"nokia-conf"`
	NetbiosNodeType E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_NetbiosNodeType `path:"netbios-node-type" module:"nokia-conf"`
	Number          NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union      `path:"number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) IsYANGGoStruct() {
}

// GetAsciiString retrieves the value of the leaf AsciiString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsciiString is set, it can
// safely use t.GetAsciiString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsciiString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetAsciiString() string {
	if t == nil || t.AsciiString == nil {
		return ""
	}
	return *t.AsciiString
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 0
	}
	return *t.Duration
}

// GetEmpty retrieves the value of the leaf Empty from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Empty is set, it can
// safely use t.GetEmpty() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Empty == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetEmpty() YANGEmpty {
	if t == nil || t.Empty == false {
		return false
	}
	return t.Empty
}

// GetHexString retrieves the value of the leaf HexString from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HexString is set, it can
// safely use t.GetHexString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HexString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetHexString() string {
	if t == nil || t.HexString == nil {
		return ""
	}
	return *t.HexString
}

// GetIpv4Address retrieves the value of the leaf Ipv4Address from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Address is set, it can
// safely use t.GetIpv4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetIpv4Address() []string {
	if t == nil || t.Ipv4Address == nil {
		return nil
	}
	return t.Ipv4Address
}

// GetNetbiosNodeType retrieves the value of the leaf NetbiosNodeType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetbiosNodeType is set, it can
// safely use t.GetNetbiosNodeType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetbiosNodeType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetNetbiosNodeType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_NetbiosNodeType {
	if t == nil || t.NetbiosNodeType == 0 {
		return 0
	}
	return t.NetbiosNodeType
}

// GetNumber retrieves the value of the leaf Number from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Number is set, it can
// safely use t.GetNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) GetNumber() NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option_Number_Union {
	if t == nil || t.Number == nil {
		return nil
	}
	return t.Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number": t.Number,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Option) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/home-pool/subnet YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet struct {
	End    *string `path:"end" module:"nokia-conf"`
	Prefix *string `path:"prefix" module:"nokia-conf"`
	Start  *string `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) GetEnd() string {
	if t == nil || t.End == nil {
		return "192.168.0.254"
	}
	return *t.End
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return "192.168.0.1/24"
	}
	return *t.Prefix
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) GetStart() string {
	if t == nil || t.Start == nil {
		return "192.168.0.2"
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v string = "192.168.0.254"
		t.End = &v
	}
	if t.Prefix == nil {
		var v string = "192.168.0.1/24"
		t.Prefix = &v
	}
	if t.Start == nil {
		var v string = "192.168.0.2"
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_HomePool_Subnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/radius-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication struct {
	Password     *string `path:"password" module:"nokia-conf"`
	ServerPolicy *string `path:"server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) IsYANGGoStruct() {
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetServerPolicy retrieves the value of the leaf ServerPolicy from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerPolicy is set, it can
// safely use t.GetServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) GetServerPolicy() string {
	if t == nil || t.ServerPolicy == nil {
		return ""
	}
	return *t.ServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/brg-profile/radius-proxy-server YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer struct {
	Name           *string `path:"name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"name":            *t.Name,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_BrgProfile_RadiusProxyServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext represents the /nokia-conf/configure/groups/group/subscriber-mgmt/vrgw/lanext YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext struct {
	RouterTargetAsNumber *uint16 `path:"router-target-as-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) IsYANGGoStruct() {}

// GetRouterTargetAsNumber retrieves the value of the leaf RouterTargetAsNumber from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterTargetAsNumber is set, it can
// safely use t.GetRouterTargetAsNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterTargetAsNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) GetRouterTargetAsNumber() uint16 {
	if t == nil || t.RouterTargetAsNumber == nil {
		return 0
	}
	return *t.RouterTargetAsNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_Vrgw_Lanext) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw struct {
	Queries                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries `path:"queries" module:"nokia-conf" yangPresence:"true"`
	VirtualChassisIdentifier *string                                                         `path:"virtual-chassis-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) IsYANGGoStruct() {}

// GetOrCreateQueries retrieves the value of the Queries field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) GetOrCreateQueries() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries {
	if t.Queries != nil {
		return t.Queries
	}
	t.Queries = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries{}
	return t.Queries
}

// GetQueries returns the value of the Queries struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw. If the receiver or the field Queries is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) GetQueries() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries {
	if t != nil && t.Queries != nil {
		return t.Queries
	}
	return nil
}

// GetVirtualChassisIdentifier retrieves the value of the leaf VirtualChassisIdentifier from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VirtualChassisIdentifier is set, it can
// safely use t.GetVirtualChassisIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VirtualChassisIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) GetVirtualChassisIdentifier() string {
	if t == nil || t.VirtualChassisIdentifier == nil {
		return ""
	}
	return *t.VirtualChassisIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Queries.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries struct {
	Tunnel map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel `path:"tunnel" module:"nokia-conf"`
	Ue     map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue     `path:"ue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) IsYANGGoStruct() {}

// NewTunnel creates a new entry in the Tunnel list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) NewTunnel(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel{
		Name: &Name,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.Name = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) GetOrCreateTunnel(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel {

	key := Name

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) GetTunnel(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) DeleteTunnel(Name string) {
	key := Name

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel struct to the
// list Tunnel of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) AppendTunnel(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// NewUe creates a new entry in the Ue list of the
// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) NewUe(Name string) (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ue == nil {
		t.Ue = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ue", key)
	}

	t.Ue[key] = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue{
		Name: &Name,
	}

	return t.Ue[key], nil
}

// RenameUe renames an entry in the list Ue within
// the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) RenameUe(oldK, newK string) error {
	if _, ok := t.Ue[newK]; ok {
		return fmt.Errorf("key %v already exists in Ue", newK)
	}

	e, ok := t.Ue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ue", oldK)
	}
	e.Name = &newK

	t.Ue[newK] = e
	delete(t.Ue, oldK)
	return nil
}

// GetOrCreateUe retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) GetOrCreateUe(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue {

	key := Name

	if v, ok := t.Ue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUe(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUe got unexpected error: %v", err))
	}
	return v
}

// GetUe retrieves the value with the specified key from
// the Ue map field of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) GetUe(Name string) *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Ue[key]; ok {
		return lm
	}
	return nil
}

// DeleteUe deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) DeleteUe(Name string) {
	key := Name

	delete(t.Ue, key)
}

// AppendUe appends the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue struct to the
// list Ue of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) AppendUe(v *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ue == nil {
		t.Ue = make(map[string]*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue)
	}

	if _, ok := t.Ue[key]; ok {
		return fmt.Errorf("duplicate key for list Ue %v", key)
	}

	t.Ue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
	for _, e := range t.Ue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel struct {
	AccessPointMacAddressLearningStatus E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_AccessPointMacAddressLearningStatus `path:"access-point-mac-address-learning-status" module:"nokia-conf"`
	CalculateCounts                     *bool                                                                                                       `path:"calculate-counts" module:"nokia-conf"`
	Encapsulation                       *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation                        `path:"encapsulation" module:"nokia-conf" yangPresence:"true"`
	L2                                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2                                   `path:"l2" module:"nokia-conf"`
	L3                                  *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3                                   `path:"l3" module:"nokia-conf"`
	Name                                *string                                                                                                     `path:"name" module:"nokia-conf"`
	Ues                                 *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues                                  `path:"ues" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) IsYANGGoStruct() {}

// GetOrCreateEncapsulation retrieves the value of the Encapsulation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetOrCreateEncapsulation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation {
	if t.Encapsulation != nil {
		return t.Encapsulation
	}
	t.Encapsulation = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation{}
	return t.Encapsulation
}

// GetOrCreateL2 retrieves the value of the L2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetOrCreateL2() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2 {
	if t.L2 != nil {
		return t.L2
	}
	t.L2 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2{}
	return t.L2
}

// GetOrCreateL3 retrieves the value of the L3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetOrCreateL3() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3 {
	if t.L3 != nil {
		return t.L3
	}
	t.L3 = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3{}
	return t.L3
}

// GetOrCreateUes retrieves the value of the Ues field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetOrCreateUes() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues {
	if t.Ues != nil {
		return t.Ues
	}
	t.Ues = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues{}
	return t.Ues
}

// GetEncapsulation returns the value of the Encapsulation struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel. If the receiver or the field Encapsulation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetEncapsulation() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation {
	if t != nil && t.Encapsulation != nil {
		return t.Encapsulation
	}
	return nil
}

// GetL2 returns the value of the L2 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel. If the receiver or the field L2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetL2() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2 {
	if t != nil && t.L2 != nil {
		return t.L2
	}
	return nil
}

// GetL3 returns the value of the L3 struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel. If the receiver or the field L3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetL3() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3 {
	if t != nil && t.L3 != nil {
		return t.L3
	}
	return nil
}

// GetUes returns the value of the Ues struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel. If the receiver or the field Ues is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetUes() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues {
	if t != nil && t.Ues != nil {
		return t.Ues
	}
	return nil
}

// GetAccessPointMacAddressLearningStatus retrieves the value of the leaf AccessPointMacAddressLearningStatus from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessPointMacAddressLearningStatus is set, it can
// safely use t.GetAccessPointMacAddressLearningStatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessPointMacAddressLearningStatus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetAccessPointMacAddressLearningStatus() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_AccessPointMacAddressLearningStatus {
	if t == nil || t.AccessPointMacAddressLearningStatus == 0 {
		return 0
	}
	return t.AccessPointMacAddressLearningStatus
}

// GetCalculateCounts retrieves the value of the leaf CalculateCounts from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalculateCounts is set, it can
// safely use t.GetCalculateCounts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalculateCounts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetCalculateCounts() bool {
	if t == nil || t.CalculateCounts == nil {
		return false
	}
	return *t.CalculateCounts
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CalculateCounts == nil {
		var v bool = false
		t.CalculateCounts = &v
	}
	t.Encapsulation.PopulateDefaults()
	t.L2.PopulateDefaults()
	t.L3.PopulateDefaults()
	t.Ues.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel/encapsulation YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation struct {
	Gre   *bool `path:"gre" module:"nokia-conf"`
	L2    *bool `path:"l2" module:"nokia-conf"`
	L2Tp  *bool `path:"l2tp" module:"nokia-conf"`
	Vxlan *bool `path:"vxlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) IsYANGGoStruct() {
}

// GetGre retrieves the value of the leaf Gre from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gre is set, it can
// safely use t.GetGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gre == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) GetGre() bool {
	if t == nil || t.Gre == nil {
		return true
	}
	return *t.Gre
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) GetL2() bool {
	if t == nil || t.L2 == nil {
		return true
	}
	return *t.L2
}

// GetL2Tp retrieves the value of the leaf L2Tp from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2Tp is set, it can
// safely use t.GetL2Tp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2Tp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) GetL2Tp() bool {
	if t == nil || t.L2Tp == nil {
		return true
	}
	return *t.L2Tp
}

// GetVxlan retrieves the value of the leaf Vxlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vxlan is set, it can
// safely use t.GetVxlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vxlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) GetVxlan() bool {
	if t == nil || t.Vxlan == nil {
		return true
	}
	return *t.Vxlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Gre == nil {
		var v bool = true
		t.Gre = &v
	}
	if t.L2 == nil {
		var v bool = true
		t.L2 = &v
	}
	if t.L2Tp == nil {
		var v bool = true
		t.L2Tp = &v
	}
	if t.Vxlan == nil {
		var v bool = true
		t.Vxlan = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Encapsulation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel/l2 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2 struct {
	InnerVlan *int32  `path:"inner-vlan" module:"nokia-conf"`
	OuterVlan *int32  `path:"outer-vlan" module:"nokia-conf"`
	Sap       *string `path:"sap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) IsYANGGoStruct() {}

// GetInnerVlan retrieves the value of the leaf InnerVlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InnerVlan is set, it can
// safely use t.GetInnerVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InnerVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) GetInnerVlan() int32 {
	if t == nil || t.InnerVlan == nil {
		return 0
	}
	return *t.InnerVlan
}

// GetOuterVlan retrieves the value of the leaf OuterVlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OuterVlan is set, it can
// safely use t.GetOuterVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OuterVlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) GetOuterVlan() int32 {
	if t == nil || t.OuterVlan == nil {
		return 0
	}
	return *t.OuterVlan
}

// GetSap retrieves the value of the leaf Sap from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sap is set, it can
// safely use t.GetSap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) GetSap() string {
	if t == nil || t.Sap == nil {
		return ""
	}
	return *t.Sap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3 represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel/l3 YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3 struct {
	AddressType    E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3_AddressType `path:"address-type" module:"nokia-conf"`
	LocalAddress   *string                                                                                `path:"local-address" module:"nokia-conf"`
	RemoteAddress  *string                                                                                `path:"remote-address" module:"nokia-conf"`
	RouterInstance *string                                                                                `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) IsYANGGoStruct() {}

// GetAddressType retrieves the value of the leaf AddressType from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressType is set, it can
// safely use t.GetAddressType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) GetAddressType() E_NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3_AddressType {
	if t == nil || t.AddressType == 0 {
		return 0
	}
	return t.AddressType
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_L3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel/ues YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues struct {
	Maximum *uint32                                                                          `path:"maximum" module:"nokia-conf"`
	Minimum *uint32                                                                          `path:"minimum" module:"nokia-conf"`
	State   *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State `path:"state" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) IsYANGGoStruct() {}

// GetOrCreateState retrieves the value of the State field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) GetOrCreateState() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State {
	if t.State != nil {
		return t.State
	}
	t.State = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State{}
	return t.State
}

// GetState returns the value of the State struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues. If the receiver or the field State is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) GetState() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State {
	if t != nil && t.State != nil {
		return t.State
	}
	return nil
}

// GetMaximum retrieves the value of the leaf Maximum from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Maximum is set, it can
// safely use t.GetMaximum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Maximum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) GetMaximum() uint32 {
	if t == nil || t.Maximum == nil {
		return 0
	}
	return *t.Maximum
}

// GetMinimum retrieves the value of the leaf Minimum from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minimum is set, it can
// safely use t.GetMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) GetMinimum() uint32 {
	if t == nil || t.Minimum == nil {
		return 1
	}
	return *t.Minimum
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Minimum == nil {
		var v uint32 = 1
		t.Minimum = &v
	}
	t.State.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/tunnel/ues/state YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State struct {
	CrossConnect *bool `path:"cross-connect" module:"nokia-conf"`
	Dsm          *bool `path:"dsm" module:"nokia-conf"`
	Esm          *bool `path:"esm" module:"nokia-conf"`
	L2           *bool `path:"l2" module:"nokia-conf"`
	Migrant      *bool `path:"migrant" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) IsYANGGoStruct() {
}

// GetCrossConnect retrieves the value of the leaf CrossConnect from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrossConnect is set, it can
// safely use t.GetCrossConnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrossConnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) GetCrossConnect() bool {
	if t == nil || t.CrossConnect == nil {
		return true
	}
	return *t.CrossConnect
}

// GetDsm retrieves the value of the leaf Dsm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsm is set, it can
// safely use t.GetDsm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) GetDsm() bool {
	if t == nil || t.Dsm == nil {
		return true
	}
	return *t.Dsm
}

// GetEsm retrieves the value of the leaf Esm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esm is set, it can
// safely use t.GetEsm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) GetEsm() bool {
	if t == nil || t.Esm == nil {
		return true
	}
	return *t.Esm
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) GetL2() bool {
	if t == nil || t.L2 == nil {
		return true
	}
	return *t.L2
}

// GetMigrant retrieves the value of the leaf Migrant from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Migrant is set, it can
// safely use t.GetMigrant() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Migrant == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) GetMigrant() bool {
	if t == nil || t.Migrant == nil {
		return true
	}
	return *t.Migrant
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrossConnect == nil {
		var v bool = true
		t.CrossConnect = &v
	}
	if t.Dsm == nil {
		var v bool = true
		t.Dsm = &v
	}
	if t.Esm == nil {
		var v bool = true
		t.Esm = &v
	}
	if t.L2 == nil {
		var v bool = true
		t.L2 = &v
	}
	if t.Migrant == nil {
		var v bool = true
		t.Migrant = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Tunnel_Ues_State) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/ue YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue struct {
	Address            *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address         `path:"address" module:"nokia-conf"`
	BridgeDomain       *uint32                                                                            `path:"bridge-domain" module:"nokia-conf"`
	ConnectionState    *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState `path:"connection-state" module:"nokia-conf" yangPresence:"true"`
	MacAddress         *string                                                                            `path:"mac-address" module:"nokia-conf"`
	Name               *string                                                                            `path:"name" module:"nokia-conf"`
	SoftQuotaExhausted *bool                                                                              `path:"soft-quota-exhausted" module:"nokia-conf"`
	Tunnel             *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel          `path:"tunnel" module:"nokia-conf"`
	Vlan               *int32                                                                             `path:"vlan" module:"nokia-conf"`
	WlanGwGroup        *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup     `path:"wlan-gw-group" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) IsYANGGoStruct() {}

// GetOrCreateAddress retrieves the value of the Address field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetOrCreateAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address {
	if t.Address != nil {
		return t.Address
	}
	t.Address = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address{}
	return t.Address
}

// GetOrCreateConnectionState retrieves the value of the ConnectionState field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetOrCreateConnectionState() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState {
	if t.ConnectionState != nil {
		return t.ConnectionState
	}
	t.ConnectionState = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState{}
	return t.ConnectionState
}

// GetOrCreateTunnel retrieves the value of the Tunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetOrCreateTunnel() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel {
	if t.Tunnel != nil {
		return t.Tunnel
	}
	t.Tunnel = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel{}
	return t.Tunnel
}

// GetOrCreateWlanGwGroup retrieves the value of the WlanGwGroup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetOrCreateWlanGwGroup() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup {
	if t.WlanGwGroup != nil {
		return t.WlanGwGroup
	}
	t.WlanGwGroup = &NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup{}
	return t.WlanGwGroup
}

// GetAddress returns the value of the Address struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue. If the receiver or the field Address is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetAddress() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address {
	if t != nil && t.Address != nil {
		return t.Address
	}
	return nil
}

// GetConnectionState returns the value of the ConnectionState struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue. If the receiver or the field ConnectionState is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetConnectionState() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState {
	if t != nil && t.ConnectionState != nil {
		return t.ConnectionState
	}
	return nil
}

// GetTunnel returns the value of the Tunnel struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue. If the receiver or the field Tunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetTunnel() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel {
	if t != nil && t.Tunnel != nil {
		return t.Tunnel
	}
	return nil
}

// GetWlanGwGroup returns the value of the WlanGwGroup struct pointer
// from NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue. If the receiver or the field WlanGwGroup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetWlanGwGroup() *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup {
	if t != nil && t.WlanGwGroup != nil {
		return t.WlanGwGroup
	}
	return nil
}

// GetBridgeDomain retrieves the value of the leaf BridgeDomain from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BridgeDomain is set, it can
// safely use t.GetBridgeDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BridgeDomain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetBridgeDomain() uint32 {
	if t == nil || t.BridgeDomain == nil {
		return 0
	}
	return *t.BridgeDomain
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetSoftQuotaExhausted retrieves the value of the leaf SoftQuotaExhausted from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftQuotaExhausted is set, it can
// safely use t.GetSoftQuotaExhausted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftQuotaExhausted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetSoftQuotaExhausted() bool {
	if t == nil || t.SoftQuotaExhausted == nil {
		return false
	}
	return *t.SoftQuotaExhausted
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) GetVlan() int32 {
	if t == nil || t.Vlan == nil {
		return 0
	}
	return *t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SoftQuotaExhausted == nil {
		var v bool = false
		t.SoftQuotaExhausted = &v
	}
	t.Address.PopulateDefaults()
	t.ConnectionState.PopulateDefaults()
	t.Tunnel.PopulateDefaults()
	t.WlanGwGroup.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/ue/address YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address struct {
	Dhcp6Na *string                          `path:"dhcp6-na" module:"nokia-conf"`
	Ipv4    *string                          `path:"ipv4" module:"nokia-conf"`
	Slaac   *string                          `path:"slaac" module:"nokia-conf"`
	Type    E_NokiaTypesWlangw_UeAddressType `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) IsYANGGoStruct() {}

// GetDhcp6Na retrieves the value of the leaf Dhcp6Na from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp6Na is set, it can
// safely use t.GetDhcp6Na() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp6Na == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) GetDhcp6Na() string {
	if t == nil || t.Dhcp6Na == nil {
		return ""
	}
	return *t.Dhcp6Na
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetSlaac retrieves the value of the leaf Slaac from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Slaac is set, it can
// safely use t.GetSlaac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Slaac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) GetSlaac() string {
	if t == nil || t.Slaac == nil {
		return ""
	}
	return *t.Slaac
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) GetType() E_NokiaTypesWlangw_UeAddressType {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/ue/connection-state YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState struct {
	AlreadySignedIn      *bool `path:"already-signed-in" module:"nokia-conf"`
	AuthorizedOnly       *bool `path:"authorized-only" module:"nokia-conf"`
	CrossConnect         *bool `path:"cross-connect" module:"nokia-conf"`
	DataTriggered        *bool `path:"data-triggered" module:"nokia-conf"`
	DeletePending        *bool `path:"delete-pending" module:"nokia-conf"`
	DhcpTriggered        *bool `path:"dhcp-triggered" module:"nokia-conf"`
	Dsm                  *bool `path:"dsm" module:"nokia-conf"`
	Esm                  *bool `path:"esm" module:"nokia-conf"`
	GtpAuthorized        *bool `path:"gtp-authorized" module:"nokia-conf"`
	IpAssigned           *bool `path:"ip-assigned" module:"nokia-conf"`
	IpAssignedAuthorized *bool `path:"ip-assigned-authorized" module:"nokia-conf"`
	L2                   *bool `path:"l2" module:"nokia-conf"`
	Portal               *bool `path:"portal" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) IsYANGGoStruct() {
}

// GetAlreadySignedIn retrieves the value of the leaf AlreadySignedIn from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlreadySignedIn is set, it can
// safely use t.GetAlreadySignedIn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlreadySignedIn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetAlreadySignedIn() bool {
	if t == nil || t.AlreadySignedIn == nil {
		return true
	}
	return *t.AlreadySignedIn
}

// GetAuthorizedOnly retrieves the value of the leaf AuthorizedOnly from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthorizedOnly is set, it can
// safely use t.GetAuthorizedOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthorizedOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetAuthorizedOnly() bool {
	if t == nil || t.AuthorizedOnly == nil {
		return true
	}
	return *t.AuthorizedOnly
}

// GetCrossConnect retrieves the value of the leaf CrossConnect from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrossConnect is set, it can
// safely use t.GetCrossConnect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrossConnect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetCrossConnect() bool {
	if t == nil || t.CrossConnect == nil {
		return true
	}
	return *t.CrossConnect
}

// GetDataTriggered retrieves the value of the leaf DataTriggered from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DataTriggered is set, it can
// safely use t.GetDataTriggered() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DataTriggered == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetDataTriggered() bool {
	if t == nil || t.DataTriggered == nil {
		return true
	}
	return *t.DataTriggered
}

// GetDeletePending retrieves the value of the leaf DeletePending from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeletePending is set, it can
// safely use t.GetDeletePending() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeletePending == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetDeletePending() bool {
	if t == nil || t.DeletePending == nil {
		return true
	}
	return *t.DeletePending
}

// GetDhcpTriggered retrieves the value of the leaf DhcpTriggered from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpTriggered is set, it can
// safely use t.GetDhcpTriggered() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpTriggered == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetDhcpTriggered() bool {
	if t == nil || t.DhcpTriggered == nil {
		return true
	}
	return *t.DhcpTriggered
}

// GetDsm retrieves the value of the leaf Dsm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsm is set, it can
// safely use t.GetDsm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetDsm() bool {
	if t == nil || t.Dsm == nil {
		return true
	}
	return *t.Dsm
}

// GetEsm retrieves the value of the leaf Esm from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esm is set, it can
// safely use t.GetEsm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetEsm() bool {
	if t == nil || t.Esm == nil {
		return true
	}
	return *t.Esm
}

// GetGtpAuthorized retrieves the value of the leaf GtpAuthorized from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpAuthorized is set, it can
// safely use t.GetGtpAuthorized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpAuthorized == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetGtpAuthorized() bool {
	if t == nil || t.GtpAuthorized == nil {
		return true
	}
	return *t.GtpAuthorized
}

// GetIpAssigned retrieves the value of the leaf IpAssigned from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAssigned is set, it can
// safely use t.GetIpAssigned() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAssigned == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetIpAssigned() bool {
	if t == nil || t.IpAssigned == nil {
		return true
	}
	return *t.IpAssigned
}

// GetIpAssignedAuthorized retrieves the value of the leaf IpAssignedAuthorized from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAssignedAuthorized is set, it can
// safely use t.GetIpAssignedAuthorized() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAssignedAuthorized == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetIpAssignedAuthorized() bool {
	if t == nil || t.IpAssignedAuthorized == nil {
		return true
	}
	return *t.IpAssignedAuthorized
}

// GetL2 retrieves the value of the leaf L2 from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2 is set, it can
// safely use t.GetL2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetL2() bool {
	if t == nil || t.L2 == nil {
		return true
	}
	return *t.L2
}

// GetPortal retrieves the value of the leaf Portal from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Portal is set, it can
// safely use t.GetPortal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Portal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) GetPortal() bool {
	if t == nil || t.Portal == nil {
		return true
	}
	return *t.Portal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlreadySignedIn == nil {
		var v bool = true
		t.AlreadySignedIn = &v
	}
	if t.AuthorizedOnly == nil {
		var v bool = true
		t.AuthorizedOnly = &v
	}
	if t.CrossConnect == nil {
		var v bool = true
		t.CrossConnect = &v
	}
	if t.DataTriggered == nil {
		var v bool = true
		t.DataTriggered = &v
	}
	if t.DeletePending == nil {
		var v bool = true
		t.DeletePending = &v
	}
	if t.DhcpTriggered == nil {
		var v bool = true
		t.DhcpTriggered = &v
	}
	if t.Dsm == nil {
		var v bool = true
		t.Dsm = &v
	}
	if t.Esm == nil {
		var v bool = true
		t.Esm = &v
	}
	if t.GtpAuthorized == nil {
		var v bool = true
		t.GtpAuthorized = &v
	}
	if t.IpAssigned == nil {
		var v bool = true
		t.IpAssigned = &v
	}
	if t.IpAssignedAuthorized == nil {
		var v bool = true
		t.IpAssignedAuthorized = &v
	}
	if t.L2 == nil {
		var v bool = true
		t.L2 = &v
	}
	if t.Portal == nil {
		var v bool = true
		t.Portal = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_ConnectionState) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/ue/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel struct {
	Encapsulation  E_NokiaTypesWlangw_Encapsulation `path:"encapsulation" module:"nokia-conf"`
	LocalAddress   *string                          `path:"local-address" module:"nokia-conf"`
	RemoteAddress  *string                          `path:"remote-address" module:"nokia-conf"`
	RouterInstance *string                          `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) IsYANGGoStruct() {}

// GetEncapsulation retrieves the value of the leaf Encapsulation from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encapsulation is set, it can
// safely use t.GetEncapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) GetEncapsulation() E_NokiaTypesWlangw_Encapsulation {
	if t == nil || t.Encapsulation == 0 {
		return 0
	}
	return t.Encapsulation
}

// GetLocalAddress retrieves the value of the leaf LocalAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalAddress is set, it can
// safely use t.GetLocalAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) GetLocalAddress() string {
	if t == nil || t.LocalAddress == nil {
		return ""
	}
	return *t.LocalAddress
}

// GetRemoteAddress retrieves the value of the leaf RemoteAddress from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteAddress is set, it can
// safely use t.GetRemoteAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) GetRemoteAddress() string {
	if t == nil || t.RemoteAddress == nil {
		return ""
	}
	return *t.RemoteAddress
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup represents the /nokia-conf/configure/groups/group/subscriber-mgmt/wlan-gw/queries/ue/wlan-gw-group YANG schema element.
type NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup struct {
	Id     *uint32 `path:"id" module:"nokia-conf"`
	Member *uint32 `path:"member" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) IsYANGGoStruct() {
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetMember retrieves the value of the leaf Member from the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) GetMember() uint32 {
	if t == nil || t.Member == nil {
		return 0
	}
	return *t.Member
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup.
func (*NokiaConf_Configure_Groups_Group_SubscriberMgmt_WlanGw_Queries_Ue_WlanGwGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System represents the /nokia-conf/configure/groups/group/system YANG schema element.
type NokiaConf_Configure_Groups_Group_System struct {
	AlarmContactInPower        *bool                                                                                                                                         `path:"alarm-contact-in-power" module:"nokia-conf"`
	AlarmContactInput          map[NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union]*NokiaConf_Configure_Groups_Group_System_AlarmContactInput `path:"alarm-contact-input" module:"nokia-conf"`
	Alarms                     *NokiaConf_Configure_Groups_Group_System_Alarms                                                                                               `path:"alarms" module:"nokia-conf" yangPresence:"true"`
	AllowBootLicenseViolations *bool                                                                                                                                         `path:"allow-boot-license-violations" module:"nokia-conf"`
	Bluetooth                  *NokiaConf_Configure_Groups_Group_System_Bluetooth                                                                                            `path:"bluetooth" module:"nokia-conf" yangPresence:"true"`
	BootBadExec                *string                                                                                                                                       `path:"boot-bad-exec" module:"nokia-conf"`
	BootGoodExec               *string                                                                                                                                       `path:"boot-good-exec" module:"nokia-conf"`
	CentralFrequencyClock      *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock                                                                                `path:"central-frequency-clock" module:"nokia-conf" yangPresence:"true"`
	ClliCode                   *string                                                                                                                                       `path:"clli-code" module:"nokia-conf"`
	CongestionManagement       *bool                                                                                                                                         `path:"congestion-management" module:"nokia-conf"`
	Contact                    *string                                                                                                                                       `path:"contact" module:"nokia-conf"`
	Coordinates                *string                                                                                                                                       `path:"coordinates" module:"nokia-conf"`
	CpmHttpRedirect            *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect                                                                                      `path:"cpm-http-redirect" module:"nokia-conf" yangPresence:"true"`
	Cron                       *NokiaConf_Configure_Groups_Group_System_Cron                                                                                                 `path:"cron" module:"nokia-conf" yangPresence:"true"`
	Dhcp6                      *NokiaConf_Configure_Groups_Group_System_Dhcp6                                                                                                `path:"dhcp6" module:"nokia-conf" yangPresence:"true"`
	Dns                        *NokiaConf_Configure_Groups_Group_System_Dns                                                                                                  `path:"dns" module:"nokia-conf" yangPresence:"true"`
	EfmOam                     *NokiaConf_Configure_Groups_Group_System_EfmOam                                                                                               `path:"efm-oam" module:"nokia-conf" yangPresence:"true"`
	EthCfm                     *NokiaConf_Configure_Groups_Group_System_EthCfm                                                                                               `path:"eth-cfm" module:"nokia-conf" yangPresence:"true"`
	FanControl                 *NokiaConf_Configure_Groups_Group_System_FanControl                                                                                           `path:"fan-control" module:"nokia-conf" yangPresence:"true"`
	Fp                         *NokiaConf_Configure_Groups_Group_System_Fp                                                                                                   `path:"fp" module:"nokia-conf" yangPresence:"true"`
	Grpc                       *NokiaConf_Configure_Groups_Group_System_Grpc                                                                                                 `path:"grpc" module:"nokia-conf" yangPresence:"true"`
	GrpcTunnel                 *NokiaConf_Configure_Groups_Group_System_GrpcTunnel                                                                                           `path:"grpc-tunnel" module:"nokia-conf" yangPresence:"true"`
	IcmpVse                    *bool                                                                                                                                         `path:"icmp-vse" module:"nokia-conf"`
	Ip                         *NokiaConf_Configure_Groups_Group_System_Ip                                                                                                   `path:"ip" module:"nokia-conf" yangPresence:"true"`
	L2Tp                       *NokiaConf_Configure_Groups_Group_System_L2Tp                                                                                                 `path:"l2tp" module:"nokia-conf" yangPresence:"true"`
	Lacp                       *NokiaConf_Configure_Groups_Group_System_Lacp                                                                                                 `path:"lacp" module:"nokia-conf" yangPresence:"true"`
	Lldp                       *NokiaConf_Configure_Groups_Group_System_Lldp                                                                                                 `path:"lldp" module:"nokia-conf" yangPresence:"true"`
	LoadBalancing              *NokiaConf_Configure_Groups_Group_System_LoadBalancing                                                                                        `path:"load-balancing" module:"nokia-conf" yangPresence:"true"`
	Location                   *string                                                                                                                                       `path:"location" module:"nokia-conf"`
	LoginControl               *NokiaConf_Configure_Groups_Group_System_LoginControl                                                                                         `path:"login-control" module:"nokia-conf" yangPresence:"true"`
	ManagementInterface        *NokiaConf_Configure_Groups_Group_System_ManagementInterface                                                                                  `path:"management-interface" module:"nokia-conf" yangPresence:"true"`
	Name                       *string                                                                                                                                       `path:"name" module:"nokia-conf"`
	NetworkElementDiscovery    *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery                                                                              `path:"network-element-discovery" module:"nokia-conf" yangPresence:"true"`
	OspfDynamicHostnames       *bool                                                                                                                                         `path:"ospf-dynamic-hostnames" module:"nokia-conf"`
	Persistence                *NokiaConf_Configure_Groups_Group_System_Persistence                                                                                          `path:"persistence" module:"nokia-conf" yangPresence:"true"`
	PowerManagement            map[NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union]*NokiaConf_Configure_Groups_Group_System_PowerManagement          `path:"power-management" module:"nokia-conf"`
	Ptp                        *NokiaConf_Configure_Groups_Group_System_Ptp                                                                                                  `path:"ptp" module:"nokia-conf" yangPresence:"true"`
	Resource                   *NokiaConf_Configure_Groups_Group_System_Resource                                                                                             `path:"resource" module:"nokia-conf"`
	ScriptControl              *NokiaConf_Configure_Groups_Group_System_ScriptControl                                                                                        `path:"script-control" module:"nokia-conf" yangPresence:"true"`
	Security                   *NokiaConf_Configure_Groups_Group_System_Security                                                                                             `path:"security" module:"nokia-conf" yangPresence:"true"`
	SelectiveFib               *bool                                                                                                                                         `path:"selective-fib" module:"nokia-conf"`
	SoftwareRepository         map[string]*NokiaConf_Configure_Groups_Group_System_SoftwareRepository                                                                        `path:"software-repository" module:"nokia-conf"`
	SwitchFabric               *NokiaConf_Configure_Groups_Group_System_SwitchFabric                                                                                         `path:"switch-fabric" module:"nokia-conf" yangPresence:"true"`
	Telemetry                  *NokiaConf_Configure_Groups_Group_System_Telemetry                                                                                            `path:"telemetry" module:"nokia-conf" yangPresence:"true"`
	Thresholds                 *NokiaConf_Configure_Groups_Group_System_Thresholds                                                                                           `path:"thresholds" module:"nokia-conf"`
	Time                       *NokiaConf_Configure_Groups_Group_System_Time                                                                                                 `path:"time" module:"nokia-conf" yangPresence:"true"`
	TransmissionProfile        map[string]*NokiaConf_Configure_Groups_Group_System_TransmissionProfile                                                                       `path:"transmission-profile" module:"nokia-conf"`
	Usb                        map[NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union]*NokiaConf_Configure_Groups_Group_System_Usb                                  `path:"usb" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System) IsYANGGoStruct() {}

// NewAlarmContactInput creates a new entry in the AlarmContactInput list of the
// NokiaConf_Configure_Groups_Group_System struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System) NewAlarmContactInput(InputPinNumber NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union) (*NokiaConf_Configure_Groups_Group_System_AlarmContactInput, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlarmContactInput == nil {
		t.AlarmContactInput = make(map[NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union]*NokiaConf_Configure_Groups_Group_System_AlarmContactInput)
	}

	key := InputPinNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AlarmContactInput[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AlarmContactInput", key)
	}

	t.AlarmContactInput[key] = &NokiaConf_Configure_Groups_Group_System_AlarmContactInput{
		InputPinNumber: InputPinNumber,
	}

	return t.AlarmContactInput[key], nil
}

// RenameAlarmContactInput renames an entry in the list AlarmContactInput within
// the NokiaConf_Configure_Groups_Group_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System) RenameAlarmContactInput(oldK, newK NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union) error {
	if _, ok := t.AlarmContactInput[newK]; ok {
		return fmt.Errorf("key %v already exists in AlarmContactInput", newK)
	}

	e, ok := t.AlarmContactInput[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AlarmContactInput", oldK)
	}
	e.InputPinNumber = newK

	t.AlarmContactInput[newK] = e
	delete(t.AlarmContactInput, oldK)
	return nil
}

// GetOrCreateAlarmContactInput retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateAlarmContactInput(InputPinNumber NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union) *NokiaConf_Configure_Groups_Group_System_AlarmContactInput {

	key := InputPinNumber

	if v, ok := t.AlarmContactInput[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarmContactInput(InputPinNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarmContactInput got unexpected error: %v", err))
	}
	return v
}

// GetAlarmContactInput retrieves the value with the specified key from
// the AlarmContactInput map field of NokiaConf_Configure_Groups_Group_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetAlarmContactInput(InputPinNumber NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union) *NokiaConf_Configure_Groups_Group_System_AlarmContactInput {

	if t == nil {
		return nil
	}

	key := InputPinNumber

	if lm, ok := t.AlarmContactInput[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarmContactInput deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System) DeleteAlarmContactInput(InputPinNumber NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union) {
	key := InputPinNumber

	delete(t.AlarmContactInput, key)
}

// AppendAlarmContactInput appends the supplied NokiaConf_Configure_Groups_Group_System_AlarmContactInput struct to the
// list AlarmContactInput of NokiaConf_Configure_Groups_Group_System. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_AlarmContactInput already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System) AppendAlarmContactInput(v *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) error {
	key := v.InputPinNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlarmContactInput == nil {
		t.AlarmContactInput = make(map[NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union]*NokiaConf_Configure_Groups_Group_System_AlarmContactInput)
	}

	if _, ok := t.AlarmContactInput[key]; ok {
		return fmt.Errorf("duplicate key for list AlarmContactInput %v", key)
	}

	t.AlarmContactInput[key] = v
	return nil
}

// NewPowerManagement creates a new entry in the PowerManagement list of the
// NokiaConf_Configure_Groups_Group_System struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System) NewPowerManagement(PowerZone NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union) (*NokiaConf_Configure_Groups_Group_System_PowerManagement, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerManagement == nil {
		t.PowerManagement = make(map[NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union]*NokiaConf_Configure_Groups_Group_System_PowerManagement)
	}

	key := PowerZone

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PowerManagement[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PowerManagement", key)
	}

	t.PowerManagement[key] = &NokiaConf_Configure_Groups_Group_System_PowerManagement{
		PowerZone: PowerZone,
	}

	return t.PowerManagement[key], nil
}

// RenamePowerManagement renames an entry in the list PowerManagement within
// the NokiaConf_Configure_Groups_Group_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System) RenamePowerManagement(oldK, newK NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union) error {
	if _, ok := t.PowerManagement[newK]; ok {
		return fmt.Errorf("key %v already exists in PowerManagement", newK)
	}

	e, ok := t.PowerManagement[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PowerManagement", oldK)
	}
	e.PowerZone = newK

	t.PowerManagement[newK] = e
	delete(t.PowerManagement, oldK)
	return nil
}

// GetOrCreatePowerManagement retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreatePowerManagement(PowerZone NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union) *NokiaConf_Configure_Groups_Group_System_PowerManagement {

	key := PowerZone

	if v, ok := t.PowerManagement[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPowerManagement(PowerZone)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePowerManagement got unexpected error: %v", err))
	}
	return v
}

// GetPowerManagement retrieves the value with the specified key from
// the PowerManagement map field of NokiaConf_Configure_Groups_Group_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetPowerManagement(PowerZone NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union) *NokiaConf_Configure_Groups_Group_System_PowerManagement {

	if t == nil {
		return nil
	}

	key := PowerZone

	if lm, ok := t.PowerManagement[key]; ok {
		return lm
	}
	return nil
}

// DeletePowerManagement deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System) DeletePowerManagement(PowerZone NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union) {
	key := PowerZone

	delete(t.PowerManagement, key)
}

// AppendPowerManagement appends the supplied NokiaConf_Configure_Groups_Group_System_PowerManagement struct to the
// list PowerManagement of NokiaConf_Configure_Groups_Group_System. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_PowerManagement already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System) AppendPowerManagement(v *NokiaConf_Configure_Groups_Group_System_PowerManagement) error {
	key := v.PowerZone

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PowerManagement == nil {
		t.PowerManagement = make(map[NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union]*NokiaConf_Configure_Groups_Group_System_PowerManagement)
	}

	if _, ok := t.PowerManagement[key]; ok {
		return fmt.Errorf("duplicate key for list PowerManagement %v", key)
	}

	t.PowerManagement[key] = v
	return nil
}

// NewSoftwareRepository creates a new entry in the SoftwareRepository list of the
// NokiaConf_Configure_Groups_Group_System struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System) NewSoftwareRepository(RepositoryName string) (*NokiaConf_Configure_Groups_Group_System_SoftwareRepository, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SoftwareRepository == nil {
		t.SoftwareRepository = make(map[string]*NokiaConf_Configure_Groups_Group_System_SoftwareRepository)
	}

	key := RepositoryName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SoftwareRepository[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SoftwareRepository", key)
	}

	t.SoftwareRepository[key] = &NokiaConf_Configure_Groups_Group_System_SoftwareRepository{
		RepositoryName: &RepositoryName,
	}

	return t.SoftwareRepository[key], nil
}

// RenameSoftwareRepository renames an entry in the list SoftwareRepository within
// the NokiaConf_Configure_Groups_Group_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System) RenameSoftwareRepository(oldK, newK string) error {
	if _, ok := t.SoftwareRepository[newK]; ok {
		return fmt.Errorf("key %v already exists in SoftwareRepository", newK)
	}

	e, ok := t.SoftwareRepository[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SoftwareRepository", oldK)
	}
	e.RepositoryName = &newK

	t.SoftwareRepository[newK] = e
	delete(t.SoftwareRepository, oldK)
	return nil
}

// GetOrCreateSoftwareRepository retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateSoftwareRepository(RepositoryName string) *NokiaConf_Configure_Groups_Group_System_SoftwareRepository {

	key := RepositoryName

	if v, ok := t.SoftwareRepository[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSoftwareRepository(RepositoryName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSoftwareRepository got unexpected error: %v", err))
	}
	return v
}

// GetSoftwareRepository retrieves the value with the specified key from
// the SoftwareRepository map field of NokiaConf_Configure_Groups_Group_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetSoftwareRepository(RepositoryName string) *NokiaConf_Configure_Groups_Group_System_SoftwareRepository {

	if t == nil {
		return nil
	}

	key := RepositoryName

	if lm, ok := t.SoftwareRepository[key]; ok {
		return lm
	}
	return nil
}

// DeleteSoftwareRepository deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System) DeleteSoftwareRepository(RepositoryName string) {
	key := RepositoryName

	delete(t.SoftwareRepository, key)
}

// AppendSoftwareRepository appends the supplied NokiaConf_Configure_Groups_Group_System_SoftwareRepository struct to the
// list SoftwareRepository of NokiaConf_Configure_Groups_Group_System. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_SoftwareRepository already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System) AppendSoftwareRepository(v *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) error {
	if v.RepositoryName == nil {
		return fmt.Errorf("invalid nil key received for RepositoryName")
	}

	key := *v.RepositoryName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SoftwareRepository == nil {
		t.SoftwareRepository = make(map[string]*NokiaConf_Configure_Groups_Group_System_SoftwareRepository)
	}

	if _, ok := t.SoftwareRepository[key]; ok {
		return fmt.Errorf("duplicate key for list SoftwareRepository %v", key)
	}

	t.SoftwareRepository[key] = v
	return nil
}

// NewTransmissionProfile creates a new entry in the TransmissionProfile list of the
// NokiaConf_Configure_Groups_Group_System struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System) NewTransmissionProfile(Name string) (*NokiaConf_Configure_Groups_Group_System_TransmissionProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransmissionProfile == nil {
		t.TransmissionProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_TransmissionProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TransmissionProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TransmissionProfile", key)
	}

	t.TransmissionProfile[key] = &NokiaConf_Configure_Groups_Group_System_TransmissionProfile{
		Name: &Name,
	}

	return t.TransmissionProfile[key], nil
}

// RenameTransmissionProfile renames an entry in the list TransmissionProfile within
// the NokiaConf_Configure_Groups_Group_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System) RenameTransmissionProfile(oldK, newK string) error {
	if _, ok := t.TransmissionProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TransmissionProfile", newK)
	}

	e, ok := t.TransmissionProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TransmissionProfile", oldK)
	}
	e.Name = &newK

	t.TransmissionProfile[newK] = e
	delete(t.TransmissionProfile, oldK)
	return nil
}

// GetOrCreateTransmissionProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateTransmissionProfile(Name string) *NokiaConf_Configure_Groups_Group_System_TransmissionProfile {

	key := Name

	if v, ok := t.TransmissionProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTransmissionProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTransmissionProfile got unexpected error: %v", err))
	}
	return v
}

// GetTransmissionProfile retrieves the value with the specified key from
// the TransmissionProfile map field of NokiaConf_Configure_Groups_Group_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetTransmissionProfile(Name string) *NokiaConf_Configure_Groups_Group_System_TransmissionProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TransmissionProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTransmissionProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System) DeleteTransmissionProfile(Name string) {
	key := Name

	delete(t.TransmissionProfile, key)
}

// AppendTransmissionProfile appends the supplied NokiaConf_Configure_Groups_Group_System_TransmissionProfile struct to the
// list TransmissionProfile of NokiaConf_Configure_Groups_Group_System. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_TransmissionProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System) AppendTransmissionProfile(v *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TransmissionProfile == nil {
		t.TransmissionProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_TransmissionProfile)
	}

	if _, ok := t.TransmissionProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TransmissionProfile %v", key)
	}

	t.TransmissionProfile[key] = v
	return nil
}

// NewUsb creates a new entry in the Usb list of the
// NokiaConf_Configure_Groups_Group_System struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System) NewUsb(UsbCflash NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union) (*NokiaConf_Configure_Groups_Group_System_Usb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Usb == nil {
		t.Usb = make(map[NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union]*NokiaConf_Configure_Groups_Group_System_Usb)
	}

	key := UsbCflash

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Usb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Usb", key)
	}

	t.Usb[key] = &NokiaConf_Configure_Groups_Group_System_Usb{
		UsbCflash: UsbCflash,
	}

	return t.Usb[key], nil
}

// RenameUsb renames an entry in the list Usb within
// the NokiaConf_Configure_Groups_Group_System struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System) RenameUsb(oldK, newK NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union) error {
	if _, ok := t.Usb[newK]; ok {
		return fmt.Errorf("key %v already exists in Usb", newK)
	}

	e, ok := t.Usb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Usb", oldK)
	}
	e.UsbCflash = newK

	t.Usb[newK] = e
	delete(t.Usb, oldK)
	return nil
}

// GetOrCreateUsb retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateUsb(UsbCflash NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union) *NokiaConf_Configure_Groups_Group_System_Usb {

	key := UsbCflash

	if v, ok := t.Usb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUsb(UsbCflash)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUsb got unexpected error: %v", err))
	}
	return v
}

// GetUsb retrieves the value with the specified key from
// the Usb map field of NokiaConf_Configure_Groups_Group_System. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetUsb(UsbCflash NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union) *NokiaConf_Configure_Groups_Group_System_Usb {

	if t == nil {
		return nil
	}

	key := UsbCflash

	if lm, ok := t.Usb[key]; ok {
		return lm
	}
	return nil
}

// DeleteUsb deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System) DeleteUsb(UsbCflash NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union) {
	key := UsbCflash

	delete(t.Usb, key)
}

// AppendUsb appends the supplied NokiaConf_Configure_Groups_Group_System_Usb struct to the
// list Usb of NokiaConf_Configure_Groups_Group_System. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Usb already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System) AppendUsb(v *NokiaConf_Configure_Groups_Group_System_Usb) error {
	key := v.UsbCflash

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Usb == nil {
		t.Usb = make(map[NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union]*NokiaConf_Configure_Groups_Group_System_Usb)
	}

	if _, ok := t.Usb[key]; ok {
		return fmt.Errorf("duplicate key for list Usb %v", key)
	}

	t.Usb[key] = v
	return nil
}

// GetOrCreateAlarms retrieves the value of the Alarms field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateAlarms() *NokiaConf_Configure_Groups_Group_System_Alarms {
	if t.Alarms != nil {
		return t.Alarms
	}
	t.Alarms = &NokiaConf_Configure_Groups_Group_System_Alarms{}
	return t.Alarms
}

// GetOrCreateBluetooth retrieves the value of the Bluetooth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateBluetooth() *NokiaConf_Configure_Groups_Group_System_Bluetooth {
	if t.Bluetooth != nil {
		return t.Bluetooth
	}
	t.Bluetooth = &NokiaConf_Configure_Groups_Group_System_Bluetooth{}
	return t.Bluetooth
}

// GetOrCreateCentralFrequencyClock retrieves the value of the CentralFrequencyClock field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateCentralFrequencyClock() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock {
	if t.CentralFrequencyClock != nil {
		return t.CentralFrequencyClock
	}
	t.CentralFrequencyClock = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock{}
	return t.CentralFrequencyClock
}

// GetOrCreateCpmHttpRedirect retrieves the value of the CpmHttpRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateCpmHttpRedirect() *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect {
	if t.CpmHttpRedirect != nil {
		return t.CpmHttpRedirect
	}
	t.CpmHttpRedirect = &NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect{}
	return t.CpmHttpRedirect
}

// GetOrCreateCron retrieves the value of the Cron field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateCron() *NokiaConf_Configure_Groups_Group_System_Cron {
	if t.Cron != nil {
		return t.Cron
	}
	t.Cron = &NokiaConf_Configure_Groups_Group_System_Cron{}
	return t.Cron
}

// GetOrCreateDhcp6 retrieves the value of the Dhcp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateDhcp6() *NokiaConf_Configure_Groups_Group_System_Dhcp6 {
	if t.Dhcp6 != nil {
		return t.Dhcp6
	}
	t.Dhcp6 = &NokiaConf_Configure_Groups_Group_System_Dhcp6{}
	return t.Dhcp6
}

// GetOrCreateDns retrieves the value of the Dns field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateDns() *NokiaConf_Configure_Groups_Group_System_Dns {
	if t.Dns != nil {
		return t.Dns
	}
	t.Dns = &NokiaConf_Configure_Groups_Group_System_Dns{}
	return t.Dns
}

// GetOrCreateEfmOam retrieves the value of the EfmOam field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateEfmOam() *NokiaConf_Configure_Groups_Group_System_EfmOam {
	if t.EfmOam != nil {
		return t.EfmOam
	}
	t.EfmOam = &NokiaConf_Configure_Groups_Group_System_EfmOam{}
	return t.EfmOam
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_System_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_System_EthCfm{}
	return t.EthCfm
}

// GetOrCreateFanControl retrieves the value of the FanControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateFanControl() *NokiaConf_Configure_Groups_Group_System_FanControl {
	if t.FanControl != nil {
		return t.FanControl
	}
	t.FanControl = &NokiaConf_Configure_Groups_Group_System_FanControl{}
	return t.FanControl
}

// GetOrCreateFp retrieves the value of the Fp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateFp() *NokiaConf_Configure_Groups_Group_System_Fp {
	if t.Fp != nil {
		return t.Fp
	}
	t.Fp = &NokiaConf_Configure_Groups_Group_System_Fp{}
	return t.Fp
}

// GetOrCreateGrpc retrieves the value of the Grpc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateGrpc() *NokiaConf_Configure_Groups_Group_System_Grpc {
	if t.Grpc != nil {
		return t.Grpc
	}
	t.Grpc = &NokiaConf_Configure_Groups_Group_System_Grpc{}
	return t.Grpc
}

// GetOrCreateGrpcTunnel retrieves the value of the GrpcTunnel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateGrpcTunnel() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel {
	if t.GrpcTunnel != nil {
		return t.GrpcTunnel
	}
	t.GrpcTunnel = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel{}
	return t.GrpcTunnel
}

// GetOrCreateIp retrieves the value of the Ip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateIp() *NokiaConf_Configure_Groups_Group_System_Ip {
	if t.Ip != nil {
		return t.Ip
	}
	t.Ip = &NokiaConf_Configure_Groups_Group_System_Ip{}
	return t.Ip
}

// GetOrCreateL2Tp retrieves the value of the L2Tp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateL2Tp() *NokiaConf_Configure_Groups_Group_System_L2Tp {
	if t.L2Tp != nil {
		return t.L2Tp
	}
	t.L2Tp = &NokiaConf_Configure_Groups_Group_System_L2Tp{}
	return t.L2Tp
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateLacp() *NokiaConf_Configure_Groups_Group_System_Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &NokiaConf_Configure_Groups_Group_System_Lacp{}
	return t.Lacp
}

// GetOrCreateLldp retrieves the value of the Lldp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateLldp() *NokiaConf_Configure_Groups_Group_System_Lldp {
	if t.Lldp != nil {
		return t.Lldp
	}
	t.Lldp = &NokiaConf_Configure_Groups_Group_System_Lldp{}
	return t.Lldp
}

// GetOrCreateLoadBalancing retrieves the value of the LoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateLoadBalancing() *NokiaConf_Configure_Groups_Group_System_LoadBalancing {
	if t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	t.LoadBalancing = &NokiaConf_Configure_Groups_Group_System_LoadBalancing{}
	return t.LoadBalancing
}

// GetOrCreateLoginControl retrieves the value of the LoginControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateLoginControl() *NokiaConf_Configure_Groups_Group_System_LoginControl {
	if t.LoginControl != nil {
		return t.LoginControl
	}
	t.LoginControl = &NokiaConf_Configure_Groups_Group_System_LoginControl{}
	return t.LoginControl
}

// GetOrCreateManagementInterface retrieves the value of the ManagementInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateManagementInterface() *NokiaConf_Configure_Groups_Group_System_ManagementInterface {
	if t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	t.ManagementInterface = &NokiaConf_Configure_Groups_Group_System_ManagementInterface{}
	return t.ManagementInterface
}

// GetOrCreateNetworkElementDiscovery retrieves the value of the NetworkElementDiscovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateNetworkElementDiscovery() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery {
	if t.NetworkElementDiscovery != nil {
		return t.NetworkElementDiscovery
	}
	t.NetworkElementDiscovery = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery{}
	return t.NetworkElementDiscovery
}

// GetOrCreatePersistence retrieves the value of the Persistence field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreatePersistence() *NokiaConf_Configure_Groups_Group_System_Persistence {
	if t.Persistence != nil {
		return t.Persistence
	}
	t.Persistence = &NokiaConf_Configure_Groups_Group_System_Persistence{}
	return t.Persistence
}

// GetOrCreatePtp retrieves the value of the Ptp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreatePtp() *NokiaConf_Configure_Groups_Group_System_Ptp {
	if t.Ptp != nil {
		return t.Ptp
	}
	t.Ptp = &NokiaConf_Configure_Groups_Group_System_Ptp{}
	return t.Ptp
}

// GetOrCreateResource retrieves the value of the Resource field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateResource() *NokiaConf_Configure_Groups_Group_System_Resource {
	if t.Resource != nil {
		return t.Resource
	}
	t.Resource = &NokiaConf_Configure_Groups_Group_System_Resource{}
	return t.Resource
}

// GetOrCreateScriptControl retrieves the value of the ScriptControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateScriptControl() *NokiaConf_Configure_Groups_Group_System_ScriptControl {
	if t.ScriptControl != nil {
		return t.ScriptControl
	}
	t.ScriptControl = &NokiaConf_Configure_Groups_Group_System_ScriptControl{}
	return t.ScriptControl
}

// GetOrCreateSecurity retrieves the value of the Security field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateSecurity() *NokiaConf_Configure_Groups_Group_System_Security {
	if t.Security != nil {
		return t.Security
	}
	t.Security = &NokiaConf_Configure_Groups_Group_System_Security{}
	return t.Security
}

// GetOrCreateSwitchFabric retrieves the value of the SwitchFabric field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateSwitchFabric() *NokiaConf_Configure_Groups_Group_System_SwitchFabric {
	if t.SwitchFabric != nil {
		return t.SwitchFabric
	}
	t.SwitchFabric = &NokiaConf_Configure_Groups_Group_System_SwitchFabric{}
	return t.SwitchFabric
}

// GetOrCreateTelemetry retrieves the value of the Telemetry field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateTelemetry() *NokiaConf_Configure_Groups_Group_System_Telemetry {
	if t.Telemetry != nil {
		return t.Telemetry
	}
	t.Telemetry = &NokiaConf_Configure_Groups_Group_System_Telemetry{}
	return t.Telemetry
}

// GetOrCreateThresholds retrieves the value of the Thresholds field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateThresholds() *NokiaConf_Configure_Groups_Group_System_Thresholds {
	if t.Thresholds != nil {
		return t.Thresholds
	}
	t.Thresholds = &NokiaConf_Configure_Groups_Group_System_Thresholds{}
	return t.Thresholds
}

// GetOrCreateTime retrieves the value of the Time field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System) GetOrCreateTime() *NokiaConf_Configure_Groups_Group_System_Time {
	if t.Time != nil {
		return t.Time
	}
	t.Time = &NokiaConf_Configure_Groups_Group_System_Time{}
	return t.Time
}

// GetAlarms returns the value of the Alarms struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Alarms is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetAlarms() *NokiaConf_Configure_Groups_Group_System_Alarms {
	if t != nil && t.Alarms != nil {
		return t.Alarms
	}
	return nil
}

// GetBluetooth returns the value of the Bluetooth struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Bluetooth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetBluetooth() *NokiaConf_Configure_Groups_Group_System_Bluetooth {
	if t != nil && t.Bluetooth != nil {
		return t.Bluetooth
	}
	return nil
}

// GetCentralFrequencyClock returns the value of the CentralFrequencyClock struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field CentralFrequencyClock is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetCentralFrequencyClock() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock {
	if t != nil && t.CentralFrequencyClock != nil {
		return t.CentralFrequencyClock
	}
	return nil
}

// GetCpmHttpRedirect returns the value of the CpmHttpRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field CpmHttpRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetCpmHttpRedirect() *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect {
	if t != nil && t.CpmHttpRedirect != nil {
		return t.CpmHttpRedirect
	}
	return nil
}

// GetCron returns the value of the Cron struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Cron is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetCron() *NokiaConf_Configure_Groups_Group_System_Cron {
	if t != nil && t.Cron != nil {
		return t.Cron
	}
	return nil
}

// GetDhcp6 returns the value of the Dhcp6 struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Dhcp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetDhcp6() *NokiaConf_Configure_Groups_Group_System_Dhcp6 {
	if t != nil && t.Dhcp6 != nil {
		return t.Dhcp6
	}
	return nil
}

// GetDns returns the value of the Dns struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Dns is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetDns() *NokiaConf_Configure_Groups_Group_System_Dns {
	if t != nil && t.Dns != nil {
		return t.Dns
	}
	return nil
}

// GetEfmOam returns the value of the EfmOam struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field EfmOam is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetEfmOam() *NokiaConf_Configure_Groups_Group_System_EfmOam {
	if t != nil && t.EfmOam != nil {
		return t.EfmOam
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetEthCfm() *NokiaConf_Configure_Groups_Group_System_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetFanControl returns the value of the FanControl struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field FanControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetFanControl() *NokiaConf_Configure_Groups_Group_System_FanControl {
	if t != nil && t.FanControl != nil {
		return t.FanControl
	}
	return nil
}

// GetFp returns the value of the Fp struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Fp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetFp() *NokiaConf_Configure_Groups_Group_System_Fp {
	if t != nil && t.Fp != nil {
		return t.Fp
	}
	return nil
}

// GetGrpc returns the value of the Grpc struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Grpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetGrpc() *NokiaConf_Configure_Groups_Group_System_Grpc {
	if t != nil && t.Grpc != nil {
		return t.Grpc
	}
	return nil
}

// GetGrpcTunnel returns the value of the GrpcTunnel struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field GrpcTunnel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetGrpcTunnel() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel {
	if t != nil && t.GrpcTunnel != nil {
		return t.GrpcTunnel
	}
	return nil
}

// GetIp returns the value of the Ip struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Ip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetIp() *NokiaConf_Configure_Groups_Group_System_Ip {
	if t != nil && t.Ip != nil {
		return t.Ip
	}
	return nil
}

// GetL2Tp returns the value of the L2Tp struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field L2Tp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetL2Tp() *NokiaConf_Configure_Groups_Group_System_L2Tp {
	if t != nil && t.L2Tp != nil {
		return t.L2Tp
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetLacp() *NokiaConf_Configure_Groups_Group_System_Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetLldp returns the value of the Lldp struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Lldp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetLldp() *NokiaConf_Configure_Groups_Group_System_Lldp {
	if t != nil && t.Lldp != nil {
		return t.Lldp
	}
	return nil
}

// GetLoadBalancing returns the value of the LoadBalancing struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field LoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetLoadBalancing() *NokiaConf_Configure_Groups_Group_System_LoadBalancing {
	if t != nil && t.LoadBalancing != nil {
		return t.LoadBalancing
	}
	return nil
}

// GetLoginControl returns the value of the LoginControl struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field LoginControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetLoginControl() *NokiaConf_Configure_Groups_Group_System_LoginControl {
	if t != nil && t.LoginControl != nil {
		return t.LoginControl
	}
	return nil
}

// GetManagementInterface returns the value of the ManagementInterface struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field ManagementInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetManagementInterface() *NokiaConf_Configure_Groups_Group_System_ManagementInterface {
	if t != nil && t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	return nil
}

// GetNetworkElementDiscovery returns the value of the NetworkElementDiscovery struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field NetworkElementDiscovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetNetworkElementDiscovery() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery {
	if t != nil && t.NetworkElementDiscovery != nil {
		return t.NetworkElementDiscovery
	}
	return nil
}

// GetPersistence returns the value of the Persistence struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Persistence is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetPersistence() *NokiaConf_Configure_Groups_Group_System_Persistence {
	if t != nil && t.Persistence != nil {
		return t.Persistence
	}
	return nil
}

// GetPtp returns the value of the Ptp struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Ptp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetPtp() *NokiaConf_Configure_Groups_Group_System_Ptp {
	if t != nil && t.Ptp != nil {
		return t.Ptp
	}
	return nil
}

// GetResource returns the value of the Resource struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Resource is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetResource() *NokiaConf_Configure_Groups_Group_System_Resource {
	if t != nil && t.Resource != nil {
		return t.Resource
	}
	return nil
}

// GetScriptControl returns the value of the ScriptControl struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field ScriptControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetScriptControl() *NokiaConf_Configure_Groups_Group_System_ScriptControl {
	if t != nil && t.ScriptControl != nil {
		return t.ScriptControl
	}
	return nil
}

// GetSecurity returns the value of the Security struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Security is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetSecurity() *NokiaConf_Configure_Groups_Group_System_Security {
	if t != nil && t.Security != nil {
		return t.Security
	}
	return nil
}

// GetSwitchFabric returns the value of the SwitchFabric struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field SwitchFabric is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetSwitchFabric() *NokiaConf_Configure_Groups_Group_System_SwitchFabric {
	if t != nil && t.SwitchFabric != nil {
		return t.SwitchFabric
	}
	return nil
}

// GetTelemetry returns the value of the Telemetry struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Telemetry is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetTelemetry() *NokiaConf_Configure_Groups_Group_System_Telemetry {
	if t != nil && t.Telemetry != nil {
		return t.Telemetry
	}
	return nil
}

// GetThresholds returns the value of the Thresholds struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Thresholds is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetThresholds() *NokiaConf_Configure_Groups_Group_System_Thresholds {
	if t != nil && t.Thresholds != nil {
		return t.Thresholds
	}
	return nil
}

// GetTime returns the value of the Time struct pointer
// from NokiaConf_Configure_Groups_Group_System. If the receiver or the field Time is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System) GetTime() *NokiaConf_Configure_Groups_Group_System_Time {
	if t != nil && t.Time != nil {
		return t.Time
	}
	return nil
}

// GetAlarmContactInPower retrieves the value of the leaf AlarmContactInPower from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlarmContactInPower is set, it can
// safely use t.GetAlarmContactInPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlarmContactInPower == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetAlarmContactInPower() bool {
	if t == nil || t.AlarmContactInPower == nil {
		return false
	}
	return *t.AlarmContactInPower
}

// GetAllowBootLicenseViolations retrieves the value of the leaf AllowBootLicenseViolations from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowBootLicenseViolations is set, it can
// safely use t.GetAllowBootLicenseViolations() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowBootLicenseViolations == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetAllowBootLicenseViolations() bool {
	if t == nil || t.AllowBootLicenseViolations == nil {
		return true
	}
	return *t.AllowBootLicenseViolations
}

// GetBootBadExec retrieves the value of the leaf BootBadExec from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootBadExec is set, it can
// safely use t.GetBootBadExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootBadExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetBootBadExec() string {
	if t == nil || t.BootBadExec == nil {
		return ""
	}
	return *t.BootBadExec
}

// GetBootGoodExec retrieves the value of the leaf BootGoodExec from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BootGoodExec is set, it can
// safely use t.GetBootGoodExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BootGoodExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetBootGoodExec() string {
	if t == nil || t.BootGoodExec == nil {
		return ""
	}
	return *t.BootGoodExec
}

// GetClliCode retrieves the value of the leaf ClliCode from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClliCode is set, it can
// safely use t.GetClliCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClliCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetClliCode() string {
	if t == nil || t.ClliCode == nil {
		return ""
	}
	return *t.ClliCode
}

// GetCongestionManagement retrieves the value of the leaf CongestionManagement from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CongestionManagement is set, it can
// safely use t.GetCongestionManagement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CongestionManagement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetCongestionManagement() bool {
	if t == nil || t.CongestionManagement == nil {
		return false
	}
	return *t.CongestionManagement
}

// GetContact retrieves the value of the leaf Contact from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Contact is set, it can
// safely use t.GetContact() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Contact == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetContact() string {
	if t == nil || t.Contact == nil {
		return ""
	}
	return *t.Contact
}

// GetCoordinates retrieves the value of the leaf Coordinates from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Coordinates is set, it can
// safely use t.GetCoordinates() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Coordinates == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetCoordinates() string {
	if t == nil || t.Coordinates == nil {
		return ""
	}
	return *t.Coordinates
}

// GetIcmpVse retrieves the value of the leaf IcmpVse from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IcmpVse is set, it can
// safely use t.GetIcmpVse() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IcmpVse == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetIcmpVse() bool {
	if t == nil || t.IcmpVse == nil {
		return false
	}
	return *t.IcmpVse
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOspfDynamicHostnames retrieves the value of the leaf OspfDynamicHostnames from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OspfDynamicHostnames is set, it can
// safely use t.GetOspfDynamicHostnames() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OspfDynamicHostnames == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetOspfDynamicHostnames() bool {
	if t == nil || t.OspfDynamicHostnames == nil {
		return false
	}
	return *t.OspfDynamicHostnames
}

// GetSelectiveFib retrieves the value of the leaf SelectiveFib from the NokiaConf_Configure_Groups_Group_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SelectiveFib is set, it can
// safely use t.GetSelectiveFib() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SelectiveFib == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System) GetSelectiveFib() bool {
	if t == nil || t.SelectiveFib == nil {
		return false
	}
	return *t.SelectiveFib
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlarmContactInPower == nil {
		var v bool = false
		t.AlarmContactInPower = &v
	}
	if t.AllowBootLicenseViolations == nil {
		var v bool = true
		t.AllowBootLicenseViolations = &v
	}
	if t.CongestionManagement == nil {
		var v bool = false
		t.CongestionManagement = &v
	}
	if t.IcmpVse == nil {
		var v bool = false
		t.IcmpVse = &v
	}
	if t.OspfDynamicHostnames == nil {
		var v bool = false
		t.OspfDynamicHostnames = &v
	}
	if t.SelectiveFib == nil {
		var v bool = false
		t.SelectiveFib = &v
	}
	t.Alarms.PopulateDefaults()
	t.Bluetooth.PopulateDefaults()
	t.CentralFrequencyClock.PopulateDefaults()
	t.CpmHttpRedirect.PopulateDefaults()
	t.Cron.PopulateDefaults()
	t.Dhcp6.PopulateDefaults()
	t.Dns.PopulateDefaults()
	t.EfmOam.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.FanControl.PopulateDefaults()
	t.Fp.PopulateDefaults()
	t.Grpc.PopulateDefaults()
	t.GrpcTunnel.PopulateDefaults()
	t.Ip.PopulateDefaults()
	t.L2Tp.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.Lldp.PopulateDefaults()
	t.LoadBalancing.PopulateDefaults()
	t.LoginControl.PopulateDefaults()
	t.ManagementInterface.PopulateDefaults()
	t.NetworkElementDiscovery.PopulateDefaults()
	t.Persistence.PopulateDefaults()
	t.Ptp.PopulateDefaults()
	t.Resource.PopulateDefaults()
	t.ScriptControl.PopulateDefaults()
	t.Security.PopulateDefaults()
	t.SwitchFabric.PopulateDefaults()
	t.Telemetry.PopulateDefaults()
	t.Thresholds.PopulateDefaults()
	t.Time.PopulateDefaults()
	for _, e := range t.AlarmContactInput {
		e.PopulateDefaults()
	}
	for _, e := range t.PowerManagement {
		e.PopulateDefaults()
	}
	for _, e := range t.SoftwareRepository {
		e.PopulateDefaults()
	}
	for _, e := range t.TransmissionProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Usb {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System.
func (*NokiaConf_Configure_Groups_Group_System) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_AlarmContactInput represents the /nokia-conf/configure/groups/group/system/alarm-contact-input YANG schema element.
type NokiaConf_Configure_Groups_Group_System_AlarmContactInput struct {
	AdminState     E_NokiaTypesSros_AdminState                                                    `path:"admin-state" module:"nokia-conf"`
	ClearMessage   *string                                                                        `path:"clear-message" module:"nokia-conf"`
	Description    *string                                                                        `path:"description" module:"nokia-conf"`
	InputPinNumber NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union `path:"input-pin-number" module:"nokia-conf"`
	NormalState    E_NokiaConf_Configure_Groups_Group_System_AlarmContactInput_NormalState        `path:"normal-state" module:"nokia-conf"`
	TriggerMessage *string                                                                        `path:"trigger-message" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_AlarmContactInput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_AlarmContactInput) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetClearMessage retrieves the value of the leaf ClearMessage from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearMessage is set, it can
// safely use t.GetClearMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetClearMessage() string {
	if t == nil || t.ClearMessage == nil {
		return "Alarm Input Cleared"
	}
	return *t.ClearMessage
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInputPinNumber retrieves the value of the leaf InputPinNumber from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InputPinNumber is set, it can
// safely use t.GetInputPinNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InputPinNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetInputPinNumber() NokiaConf_Configure_Groups_Group_System_AlarmContactInput_InputPinNumber_Union {
	if t == nil || t.InputPinNumber == nil {
		return nil
	}
	return t.InputPinNumber
}

// GetNormalState retrieves the value of the leaf NormalState from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NormalState is set, it can
// safely use t.GetNormalState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NormalState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetNormalState() E_NokiaConf_Configure_Groups_Group_System_AlarmContactInput_NormalState {
	if t == nil || t.NormalState == 0 {
		return NokiaConf_Configure_Groups_Group_System_AlarmContactInput_NormalState_open
	}
	return t.NormalState
}

// GetTriggerMessage retrieves the value of the leaf TriggerMessage from the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TriggerMessage is set, it can
// safely use t.GetTriggerMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TriggerMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) GetTriggerMessage() string {
	if t == nil || t.TriggerMessage == nil {
		return "Alarm Input Triggered"
	}
	return *t.TriggerMessage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_AlarmContactInput
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ClearMessage == nil {
		var v string = "Alarm Input Cleared"
		t.ClearMessage = &v
	}
	if t.NormalState == 0 {
		t.NormalState = NokiaConf_Configure_Groups_Group_System_AlarmContactInput_NormalState_open
	}
	if t.TriggerMessage == nil {
		var v string = "Alarm Input Triggered"
		t.TriggerMessage = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_AlarmContactInput struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"input-pin-number": t.InputPinNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_AlarmContactInput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_AlarmContactInput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_AlarmContactInput.
func (*NokiaConf_Configure_Groups_Group_System_AlarmContactInput) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Alarms represents the /nokia-conf/configure/groups/group/system/alarms YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Alarms struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxCleared *uint32                     `path:"max-cleared" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Alarms implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Alarms) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMaxCleared retrieves the value of the leaf MaxCleared from the NokiaConf_Configure_Groups_Group_System_Alarms
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxCleared is set, it can
// safely use t.GetMaxCleared() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxCleared == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) GetMaxCleared() uint32 {
	if t == nil || t.MaxCleared == nil {
		return 500
	}
	return *t.MaxCleared
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Alarms
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MaxCleared == nil {
		var v uint32 = 500
		t.MaxCleared = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Alarms"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Alarms) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Alarms.
func (*NokiaConf_Configure_Groups_Group_System_Alarms) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Bluetooth represents the /nokia-conf/configure/groups/group/system/bluetooth YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Bluetooth struct {
	AdminState         E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	AdvertisingTimeout *uint32                                                              `path:"advertising-timeout" module:"nokia-conf"`
	Device             map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device `path:"device" module:"nokia-conf"`
	Module             map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module `path:"module" module:"nokia-conf"`
	PairingButton      *bool                                                                `path:"pairing-button" module:"nokia-conf"`
	Passkey            *string                                                              `path:"passkey" module:"nokia-conf"`
	Power              E_NokiaConf_Configure_Groups_Group_System_Bluetooth_Power            `path:"power" module:"nokia-conf"`
	PowerMode          E_NokiaConf_Configure_Groups_Group_System_Bluetooth_PowerMode        `path:"power-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Bluetooth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth) IsYANGGoStruct() {}

// NewDevice creates a new entry in the Device list of the
// NokiaConf_Configure_Groups_Group_System_Bluetooth struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) NewDevice(MacAddress string) (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Device == nil {
		t.Device = make(map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device)
	}

	key := MacAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Device[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Device", key)
	}

	t.Device[key] = &NokiaConf_Configure_Groups_Group_System_Bluetooth_Device{
		MacAddress: &MacAddress,
	}

	return t.Device[key], nil
}

// RenameDevice renames an entry in the list Device within
// the NokiaConf_Configure_Groups_Group_System_Bluetooth struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) RenameDevice(oldK, newK string) error {
	if _, ok := t.Device[newK]; ok {
		return fmt.Errorf("key %v already exists in Device", newK)
	}

	e, ok := t.Device[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Device", oldK)
	}
	e.MacAddress = &newK

	t.Device[newK] = e
	delete(t.Device, oldK)
	return nil
}

// GetOrCreateDevice retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Bluetooth. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetOrCreateDevice(MacAddress string) *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device {

	key := MacAddress

	if v, ok := t.Device[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDevice(MacAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDevice got unexpected error: %v", err))
	}
	return v
}

// GetDevice retrieves the value with the specified key from
// the Device map field of NokiaConf_Configure_Groups_Group_System_Bluetooth. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetDevice(MacAddress string) *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device {

	if t == nil {
		return nil
	}

	key := MacAddress

	if lm, ok := t.Device[key]; ok {
		return lm
	}
	return nil
}

// DeleteDevice deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Bluetooth. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) DeleteDevice(MacAddress string) {
	key := MacAddress

	delete(t.Device, key)
}

// AppendDevice appends the supplied NokiaConf_Configure_Groups_Group_System_Bluetooth_Device struct to the
// list Device of NokiaConf_Configure_Groups_Group_System_Bluetooth. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Bluetooth_Device already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) AppendDevice(v *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) error {
	if v.MacAddress == nil {
		return fmt.Errorf("invalid nil key received for MacAddress")
	}

	key := *v.MacAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Device == nil {
		t.Device = make(map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device)
	}

	if _, ok := t.Device[key]; ok {
		return fmt.Errorf("duplicate key for list Device %v", key)
	}

	t.Device[key] = v
	return nil
}

// NewModule creates a new entry in the Module list of the
// NokiaConf_Configure_Groups_Group_System_Bluetooth struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) NewModule(CpmSlot string) (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Module == nil {
		t.Module = make(map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module)
	}

	key := CpmSlot

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Module[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Module", key)
	}

	t.Module[key] = &NokiaConf_Configure_Groups_Group_System_Bluetooth_Module{
		CpmSlot: &CpmSlot,
	}

	return t.Module[key], nil
}

// RenameModule renames an entry in the list Module within
// the NokiaConf_Configure_Groups_Group_System_Bluetooth struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) RenameModule(oldK, newK string) error {
	if _, ok := t.Module[newK]; ok {
		return fmt.Errorf("key %v already exists in Module", newK)
	}

	e, ok := t.Module[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Module", oldK)
	}
	e.CpmSlot = &newK

	t.Module[newK] = e
	delete(t.Module, oldK)
	return nil
}

// GetOrCreateModule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Bluetooth. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetOrCreateModule(CpmSlot string) *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module {

	key := CpmSlot

	if v, ok := t.Module[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewModule(CpmSlot)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateModule got unexpected error: %v", err))
	}
	return v
}

// GetModule retrieves the value with the specified key from
// the Module map field of NokiaConf_Configure_Groups_Group_System_Bluetooth. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetModule(CpmSlot string) *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module {

	if t == nil {
		return nil
	}

	key := CpmSlot

	if lm, ok := t.Module[key]; ok {
		return lm
	}
	return nil
}

// DeleteModule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Bluetooth. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) DeleteModule(CpmSlot string) {
	key := CpmSlot

	delete(t.Module, key)
}

// AppendModule appends the supplied NokiaConf_Configure_Groups_Group_System_Bluetooth_Module struct to the
// list Module of NokiaConf_Configure_Groups_Group_System_Bluetooth. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Bluetooth_Module already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) AppendModule(v *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) error {
	if v.CpmSlot == nil {
		return fmt.Errorf("invalid nil key received for CpmSlot")
	}

	key := *v.CpmSlot

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Module == nil {
		t.Module = make(map[string]*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module)
	}

	if _, ok := t.Module[key]; ok {
		return fmt.Errorf("duplicate key for list Module %v", key)
	}

	t.Module[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAdvertisingTimeout retrieves the value of the leaf AdvertisingTimeout from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvertisingTimeout is set, it can
// safely use t.GetAdvertisingTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvertisingTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetAdvertisingTimeout() uint32 {
	if t == nil || t.AdvertisingTimeout == nil {
		return 0
	}
	return *t.AdvertisingTimeout
}

// GetPairingButton retrieves the value of the leaf PairingButton from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PairingButton is set, it can
// safely use t.GetPairingButton() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PairingButton == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetPairingButton() bool {
	if t == nil || t.PairingButton == nil {
		return false
	}
	return *t.PairingButton
}

// GetPasskey retrieves the value of the leaf Passkey from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Passkey is set, it can
// safely use t.GetPasskey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Passkey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetPasskey() string {
	if t == nil || t.Passkey == nil {
		return "123456"
	}
	return *t.Passkey
}

// GetPower retrieves the value of the leaf Power from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Power is set, it can
// safely use t.GetPower() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Power == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetPower() E_NokiaConf_Configure_Groups_Group_System_Bluetooth_Power {
	if t == nil || t.Power == 0 {
		return 0
	}
	return t.Power
}

// GetPowerMode retrieves the value of the leaf PowerMode from the NokiaConf_Configure_Groups_Group_System_Bluetooth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerMode is set, it can
// safely use t.GetPowerMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) GetPowerMode() E_NokiaConf_Configure_Groups_Group_System_Bluetooth_PowerMode {
	if t == nil || t.PowerMode == 0 {
		return NokiaConf_Configure_Groups_Group_System_Bluetooth_PowerMode_automatic
	}
	return t.PowerMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Bluetooth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PairingButton == nil {
		var v bool = false
		t.PairingButton = &v
	}
	if t.Passkey == nil {
		var v string = "123456"
		t.Passkey = &v
	}
	if t.PowerMode == 0 {
		t.PowerMode = NokiaConf_Configure_Groups_Group_System_Bluetooth_PowerMode_automatic
	}
	for _, e := range t.Device {
		e.PopulateDefaults()
	}
	for _, e := range t.Module {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Bluetooth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Bluetooth.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Bluetooth_Device represents the /nokia-conf/configure/groups/group/system/bluetooth/device YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Bluetooth_Device struct {
	Description *string `path:"description" module:"nokia-conf"`
	MacAddress  *string `path:"mac-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Bluetooth_Device implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Bluetooth_Device
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Groups_Group_System_Bluetooth_Device
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Bluetooth_Device
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Bluetooth_Device struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MacAddress == nil {
		return nil, fmt.Errorf("nil value for key MacAddress")
	}

	return map[string]interface{}{
		"mac-address": *t.MacAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Bluetooth_Device"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Bluetooth_Device.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Device) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Bluetooth_Module represents the /nokia-conf/configure/groups/group/system/bluetooth/module YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Bluetooth_Module struct {
	CpmSlot               *string `path:"cpm-slot" module:"nokia-conf"`
	ProvisionedIdentifier *string `path:"provisioned-identifier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Bluetooth_Module implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) IsYANGGoStruct() {}

// GetCpmSlot retrieves the value of the leaf CpmSlot from the NokiaConf_Configure_Groups_Group_System_Bluetooth_Module
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CpmSlot is set, it can
// safely use t.GetCpmSlot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CpmSlot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) GetCpmSlot() string {
	if t == nil || t.CpmSlot == nil {
		return ""
	}
	return *t.CpmSlot
}

// GetProvisionedIdentifier retrieves the value of the leaf ProvisionedIdentifier from the NokiaConf_Configure_Groups_Group_System_Bluetooth_Module
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProvisionedIdentifier is set, it can
// safely use t.GetProvisionedIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProvisionedIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) GetProvisionedIdentifier() string {
	if t == nil || t.ProvisionedIdentifier == nil {
		return ""
	}
	return *t.ProvisionedIdentifier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Bluetooth_Module
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Bluetooth_Module struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CpmSlot == nil {
		return nil, fmt.Errorf("nil value for key CpmSlot")
	}

	return map[string]interface{}{
		"cpm-slot": *t.CpmSlot,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Bluetooth_Module"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Bluetooth_Module.
func (*NokiaConf_Configure_Groups_Group_System_Bluetooth_Module) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock represents the /nokia-conf/configure/groups/group/system/central-frequency-clock YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock struct {
	Bits          *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits     `path:"bits" module:"nokia-conf"`
	Gnss          *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss     `path:"gnss" module:"nokia-conf"`
	Ptp           *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp      `path:"ptp" module:"nokia-conf"`
	QlMinimum     E_NokiaTypesSystem_RefSsmQualityLevelOverride                           `path:"ql-minimum" module:"nokia-conf"`
	QlSelection   *bool                                                                   `path:"ql-selection" module:"nokia-conf"`
	RefOrder      *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder `path:"ref-order" module:"nokia-conf"`
	Ref1          *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1     `path:"ref1" module:"nokia-conf"`
	Ref2          *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2     `path:"ref2" module:"nokia-conf"`
	Revert        *bool                                                                   `path:"revert" module:"nokia-conf"`
	Synce         *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce    `path:"synce" module:"nokia-conf"`
	WaitToRestore *uint32                                                                 `path:"wait-to-restore" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) IsYANGGoStruct() {}

// GetOrCreateBits retrieves the value of the Bits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateBits() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits {
	if t.Bits != nil {
		return t.Bits
	}
	t.Bits = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits{}
	return t.Bits
}

// GetOrCreateGnss retrieves the value of the Gnss field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateGnss() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss {
	if t.Gnss != nil {
		return t.Gnss
	}
	t.Gnss = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss{}
	return t.Gnss
}

// GetOrCreatePtp retrieves the value of the Ptp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreatePtp() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp {
	if t.Ptp != nil {
		return t.Ptp
	}
	t.Ptp = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp{}
	return t.Ptp
}

// GetOrCreateRefOrder retrieves the value of the RefOrder field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateRefOrder() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder {
	if t.RefOrder != nil {
		return t.RefOrder
	}
	t.RefOrder = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder{}
	return t.RefOrder
}

// GetOrCreateRef1 retrieves the value of the Ref1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateRef1() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1 {
	if t.Ref1 != nil {
		return t.Ref1
	}
	t.Ref1 = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1{}
	return t.Ref1
}

// GetOrCreateRef2 retrieves the value of the Ref2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateRef2() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2 {
	if t.Ref2 != nil {
		return t.Ref2
	}
	t.Ref2 = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2{}
	return t.Ref2
}

// GetOrCreateSynce retrieves the value of the Synce field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetOrCreateSynce() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce {
	if t.Synce != nil {
		return t.Synce
	}
	t.Synce = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce{}
	return t.Synce
}

// GetBits returns the value of the Bits struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Bits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetBits() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits {
	if t != nil && t.Bits != nil {
		return t.Bits
	}
	return nil
}

// GetGnss returns the value of the Gnss struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Gnss is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetGnss() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss {
	if t != nil && t.Gnss != nil {
		return t.Gnss
	}
	return nil
}

// GetPtp returns the value of the Ptp struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Ptp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetPtp() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp {
	if t != nil && t.Ptp != nil {
		return t.Ptp
	}
	return nil
}

// GetRefOrder returns the value of the RefOrder struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field RefOrder is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetRefOrder() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder {
	if t != nil && t.RefOrder != nil {
		return t.RefOrder
	}
	return nil
}

// GetRef1 returns the value of the Ref1 struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Ref1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetRef1() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1 {
	if t != nil && t.Ref1 != nil {
		return t.Ref1
	}
	return nil
}

// GetRef2 returns the value of the Ref2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Ref2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetRef2() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2 {
	if t != nil && t.Ref2 != nil {
		return t.Ref2
	}
	return nil
}

// GetSynce returns the value of the Synce struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock. If the receiver or the field Synce is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetSynce() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce {
	if t != nil && t.Synce != nil {
		return t.Synce
	}
	return nil
}

// GetQlMinimum retrieves the value of the leaf QlMinimum from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlMinimum is set, it can
// safely use t.GetQlMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlMinimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetQlMinimum() E_NokiaTypesSystem_RefSsmQualityLevelOverride {
	if t == nil || t.QlMinimum == 0 {
		return NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	return t.QlMinimum
}

// GetQlSelection retrieves the value of the leaf QlSelection from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlSelection is set, it can
// safely use t.GetQlSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetQlSelection() bool {
	if t == nil || t.QlSelection == nil {
		return false
	}
	return *t.QlSelection
}

// GetRevert retrieves the value of the leaf Revert from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Revert is set, it can
// safely use t.GetRevert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Revert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetRevert() bool {
	if t == nil || t.Revert == nil {
		return false
	}
	return *t.Revert
}

// GetWaitToRestore retrieves the value of the leaf WaitToRestore from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaitToRestore is set, it can
// safely use t.GetWaitToRestore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaitToRestore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) GetWaitToRestore() uint32 {
	if t == nil || t.WaitToRestore == nil {
		return 0
	}
	return *t.WaitToRestore
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QlMinimum == 0 {
		t.QlMinimum = NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	if t.QlSelection == nil {
		var v bool = false
		t.QlSelection = &v
	}
	if t.Revert == nil {
		var v bool = false
		t.Revert = &v
	}
	t.Bits.PopulateDefaults()
	t.Gnss.PopulateDefaults()
	t.Ptp.PopulateDefaults()
	t.RefOrder.PopulateDefaults()
	t.Ref1.PopulateDefaults()
	t.Ref2.PopulateDefaults()
	t.Synce.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/bits YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits struct {
	Input         *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input  `path:"input" module:"nokia-conf"`
	InterfaceType E_NokiaTypesSystem_BitsIfType                                              `path:"interface-type" module:"nokia-conf"`
	Output        *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output `path:"output" module:"nokia-conf"`
	QlOverride    E_NokiaTypesSystem_SsmQualityLevelOverride                                 `path:"ql-override" module:"nokia-conf"`
	SsmBit        *uint32                                                                    `path:"ssm-bit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) IsYANGGoStruct() {}

// GetOrCreateInput retrieves the value of the Input field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetOrCreateInput() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input {
	if t.Input != nil {
		return t.Input
	}
	t.Input = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input{}
	return t.Input
}

// GetOrCreateOutput retrieves the value of the Output field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetOrCreateOutput() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output {
	if t.Output != nil {
		return t.Output
	}
	t.Output = &NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output{}
	return t.Output
}

// GetInput returns the value of the Input struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits. If the receiver or the field Input is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetInput() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input {
	if t != nil && t.Input != nil {
		return t.Input
	}
	return nil
}

// GetOutput returns the value of the Output struct pointer
// from NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits. If the receiver or the field Output is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetOutput() *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output {
	if t != nil && t.Output != nil {
		return t.Output
	}
	return nil
}

// GetInterfaceType retrieves the value of the leaf InterfaceType from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceType is set, it can
// safely use t.GetInterfaceType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetInterfaceType() E_NokiaTypesSystem_BitsIfType {
	if t == nil || t.InterfaceType == 0 {
		return NokiaTypesSystem_BitsIfType_ds1_esf
	}
	return t.InterfaceType
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetQlOverride() E_NokiaTypesSystem_SsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// GetSsmBit retrieves the value of the leaf SsmBit from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SsmBit is set, it can
// safely use t.GetSsmBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SsmBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) GetSsmBit() uint32 {
	if t == nil || t.SsmBit == nil {
		return 8
	}
	return *t.SsmBit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceType == 0 {
		t.InterfaceType = NokiaTypesSystem_BitsIfType_ds1_esf
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
	if t.SsmBit == nil {
		var v uint32 = 8
		t.SsmBit = &v
	}
	t.Input.PopulateDefaults()
	t.Output.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/bits/input YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Input) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/bits/output YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output struct {
	AdminState E_NokiaTypesSros_AdminState                                                            `path:"admin-state" module:"nokia-conf"`
	LineLength E_NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output_LineLength `path:"line-length" module:"nokia-conf"`
	QlMinimum  E_NokiaTypesSystem_RefSsmQualityLevelOverride                                          `path:"ql-minimum" module:"nokia-conf"`
	Source     E_NokiaTypesSystem_BitsOutSource                                                       `path:"source" module:"nokia-conf"`
	Squelch    *bool                                                                                  `path:"squelch" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return 0
	}
	return t.AdminState
}

// GetLineLength retrieves the value of the leaf LineLength from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LineLength is set, it can
// safely use t.GetLineLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LineLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) GetLineLength() E_NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output_LineLength {
	if t == nil || t.LineLength == 0 {
		return 0
	}
	return t.LineLength
}

// GetQlMinimum retrieves the value of the leaf QlMinimum from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlMinimum is set, it can
// safely use t.GetQlMinimum() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlMinimum == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) GetQlMinimum() E_NokiaTypesSystem_RefSsmQualityLevelOverride {
	if t == nil || t.QlMinimum == 0 {
		return NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	return t.QlMinimum
}

// GetSource retrieves the value of the leaf Source from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Source is set, it can
// safely use t.GetSource() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Source == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) GetSource() E_NokiaTypesSystem_BitsOutSource {
	if t == nil || t.Source == 0 {
		return NokiaTypesSystem_BitsOutSource_line_ref
	}
	return t.Source
}

// GetSquelch retrieves the value of the leaf Squelch from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Squelch is set, it can
// safely use t.GetSquelch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Squelch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) GetSquelch() bool {
	if t == nil || t.Squelch == nil {
		return false
	}
	return *t.Squelch
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.QlMinimum == 0 {
		t.QlMinimum = NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	if t.Source == 0 {
		t.Source = NokiaTypesSystem_BitsOutSource_line_ref
	}
	if t.Squelch == nil {
		var v bool = false
		t.Squelch = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Bits_Output) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/gnss YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss struct {
	AdminState E_NokiaTypesSros_AdminState                `path:"admin-state" module:"nokia-conf"`
	QlOverride E_NokiaTypesSystem_SsmQualityLevelOverride `path:"ql-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) GetQlOverride() E_NokiaTypesSystem_SsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Gnss) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/ptp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp struct {
	AdminState E_NokiaTypesSros_AdminState                `path:"admin-state" module:"nokia-conf"`
	QlOverride E_NokiaTypesSystem_SsmQualityLevelOverride `path:"ql-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) GetQlOverride() E_NokiaTypesSystem_SsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_SsmQualityLevelOverride_unused
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ptp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1 represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/ref1 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1 struct {
	AdminState E_NokiaTypesSros_AdminState                   `path:"admin-state" module:"nokia-conf"`
	QlOverride E_NokiaTypesSystem_RefSsmQualityLevelOverride `path:"ql-override" module:"nokia-conf"`
	SourcePort *string                                       `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) GetQlOverride() E_NokiaTypesSystem_RefSsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) GetSourcePort() string {
	if t == nil || t.SourcePort == nil {
		return ""
	}
	return *t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2 represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/ref2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2 struct {
	AdminState E_NokiaTypesSros_AdminState                   `path:"admin-state" module:"nokia-conf"`
	QlOverride E_NokiaTypesSystem_RefSsmQualityLevelOverride `path:"ql-override" module:"nokia-conf"`
	SourcePort *string                                       `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) GetQlOverride() E_NokiaTypesSystem_RefSsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) GetSourcePort() string {
	if t == nil || t.SourcePort == nil {
		return ""
	}
	return *t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Ref2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/ref-order YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder struct {
	Fifth  E_NokiaTypesSystem_SetsRefSource `path:"fifth" module:"nokia-conf"`
	First  E_NokiaTypesSystem_SetsRefSource `path:"first" module:"nokia-conf"`
	Fourth E_NokiaTypesSystem_SetsRefSource `path:"fourth" module:"nokia-conf"`
	Second E_NokiaTypesSystem_SetsRefSource `path:"second" module:"nokia-conf"`
	Third  E_NokiaTypesSystem_SetsRefSource `path:"third" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) IsYANGGoStruct() {}

// GetFifth retrieves the value of the leaf Fifth from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fifth is set, it can
// safely use t.GetFifth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fifth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) GetFifth() E_NokiaTypesSystem_SetsRefSource {
	if t == nil || t.Fifth == 0 {
		return 0
	}
	return t.Fifth
}

// GetFirst retrieves the value of the leaf First from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if First is set, it can
// safely use t.GetFirst() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.First == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) GetFirst() E_NokiaTypesSystem_SetsRefSource {
	if t == nil || t.First == 0 {
		return 0
	}
	return t.First
}

// GetFourth retrieves the value of the leaf Fourth from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fourth is set, it can
// safely use t.GetFourth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fourth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) GetFourth() E_NokiaTypesSystem_SetsRefSource {
	if t == nil || t.Fourth == 0 {
		return 0
	}
	return t.Fourth
}

// GetSecond retrieves the value of the leaf Second from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Second is set, it can
// safely use t.GetSecond() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Second == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) GetSecond() E_NokiaTypesSystem_SetsRefSource {
	if t == nil || t.Second == 0 {
		return 0
	}
	return t.Second
}

// GetThird retrieves the value of the leaf Third from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Third is set, it can
// safely use t.GetThird() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Third == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) GetThird() E_NokiaTypesSystem_SetsRefSource {
	if t == nil || t.Third == 0 {
		return 0
	}
	return t.Third
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_RefOrder) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce represents the /nokia-conf/configure/groups/group/system/central-frequency-clock/synce YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce struct {
	AdminState E_NokiaTypesSros_AdminState                   `path:"admin-state" module:"nokia-conf"`
	QlOverride E_NokiaTypesSystem_RefSsmQualityLevelOverride `path:"ql-override" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetQlOverride retrieves the value of the leaf QlOverride from the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QlOverride is set, it can
// safely use t.GetQlOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QlOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) GetQlOverride() E_NokiaTypesSystem_RefSsmQualityLevelOverride {
	if t == nil || t.QlOverride == 0 {
		return NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
	return t.QlOverride
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.QlOverride == 0 {
		t.QlOverride = NokiaTypesSystem_RefSsmQualityLevelOverride_unused
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce.
func (*NokiaConf_Configure_Groups_Group_System_CentralFrequencyClock_Synce) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect represents the /nokia-conf/configure/groups/group/system/cpm-http-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect struct {
	OptimizedMode *bool `path:"optimized-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) IsYANGGoStruct() {}

// GetOptimizedMode retrieves the value of the leaf OptimizedMode from the NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptimizedMode is set, it can
// safely use t.GetOptimizedMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptimizedMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) GetOptimizedMode() bool {
	if t == nil || t.OptimizedMode == nil {
		return true
	}
	return *t.OptimizedMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.OptimizedMode == nil {
		var v bool = true
		t.OptimizedMode = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect.
func (*NokiaConf_Configure_Groups_Group_System_CpmHttpRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Cron represents the /nokia-conf/configure/groups/group/system/cron YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Cron struct {
	Schedule map[NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key]*NokiaConf_Configure_Groups_Group_System_Cron_Schedule `path:"schedule" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Cron implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Cron) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key represents the key for list Schedule of element /nokia-conf/configure/groups/group/system/cron.
type NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key struct {
	ScheduleName string `path:"schedule-name"`
	Owner        string `path:"owner"`
}

// NewSchedule creates a new entry in the Schedule list of the
// NokiaConf_Configure_Groups_Group_System_Cron struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) NewSchedule(ScheduleName string, Owner string) (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Schedule == nil {
		t.Schedule = make(map[NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key]*NokiaConf_Configure_Groups_Group_System_Cron_Schedule)
	}

	key := NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key{
		ScheduleName: ScheduleName,
		Owner:        Owner,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Schedule[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Schedule", key)
	}

	t.Schedule[key] = &NokiaConf_Configure_Groups_Group_System_Cron_Schedule{
		ScheduleName: &ScheduleName,
		Owner:        &Owner,
	}

	return t.Schedule[key], nil
}

// RenameSchedule renames an entry in the list Schedule within
// the NokiaConf_Configure_Groups_Group_System_Cron struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) RenameSchedule(oldK, newK NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key) error {
	if _, ok := t.Schedule[newK]; ok {
		return fmt.Errorf("key %v already exists in Schedule", newK)
	}

	e, ok := t.Schedule[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Schedule", oldK)
	}
	e.ScheduleName = &newK.ScheduleName
	e.Owner = &newK.Owner

	t.Schedule[newK] = e
	delete(t.Schedule, oldK)
	return nil
}

// GetOrCreateSchedule retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Cron. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) GetOrCreateSchedule(ScheduleName string, Owner string) *NokiaConf_Configure_Groups_Group_System_Cron_Schedule {

	key := NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key{
		ScheduleName: ScheduleName,
		Owner:        Owner,
	}

	if v, ok := t.Schedule[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSchedule(ScheduleName, Owner)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSchedule got unexpected error: %v", err))
	}
	return v
}

// GetSchedule retrieves the value with the specified key from
// the Schedule map field of NokiaConf_Configure_Groups_Group_System_Cron. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) GetSchedule(ScheduleName string, Owner string) *NokiaConf_Configure_Groups_Group_System_Cron_Schedule {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key{
		ScheduleName: ScheduleName,
		Owner:        Owner,
	}

	if lm, ok := t.Schedule[key]; ok {
		return lm
	}
	return nil
}

// DeleteSchedule deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Cron. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) DeleteSchedule(ScheduleName string, Owner string) {
	key := NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key{
		ScheduleName: ScheduleName,
		Owner:        Owner,
	}

	delete(t.Schedule, key)
}

// AppendSchedule appends the supplied NokiaConf_Configure_Groups_Group_System_Cron_Schedule struct to the
// list Schedule of NokiaConf_Configure_Groups_Group_System_Cron. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Cron_Schedule already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) AppendSchedule(v *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) error {
	if v.ScheduleName == nil {
		return fmt.Errorf("invalid nil key for ScheduleName")
	}

	if v.Owner == nil {
		return fmt.Errorf("invalid nil key for Owner")
	}

	key := NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key{
		ScheduleName: *v.ScheduleName,
		Owner:        *v.Owner,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Schedule == nil {
		t.Schedule = make(map[NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Key]*NokiaConf_Configure_Groups_Group_System_Cron_Schedule)
	}

	if _, ok := t.Schedule[key]; ok {
		return fmt.Errorf("duplicate key for list Schedule %v", key)
	}

	t.Schedule[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Cron
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Schedule {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Cron"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Cron) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Cron.
func (*NokiaConf_Configure_Groups_Group_System_Cron) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Cron_Schedule represents the /nokia-conf/configure/groups/group/system/cron/schedule YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Cron_Schedule struct {
	AdminState   E_NokiaTypesSros_AdminState                                           `path:"admin-state" module:"nokia-conf"`
	Count        *uint32                                                               `path:"count" module:"nokia-conf"`
	DayOfMonth   []int32                                                               `path:"day-of-month" module:"nokia-conf"`
	Description  *string                                                               `path:"description" module:"nokia-conf"`
	EndTime      *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime        `path:"end-time" module:"nokia-conf"`
	Hour         []uint32                                                              `path:"hour" module:"nokia-conf"`
	Interval     *uint32                                                               `path:"interval" module:"nokia-conf"`
	Minute       []uint32                                                              `path:"minute" module:"nokia-conf"`
	Month        []NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Month_Union   `path:"month" module:"nokia-conf"`
	Owner        *string                                                               `path:"owner" module:"nokia-conf"`
	ScheduleName *string                                                               `path:"schedule-name" module:"nokia-conf"`
	ScriptPolicy *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy   `path:"script-policy" module:"nokia-conf"`
	Type         E_NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Type          `path:"type" module:"nokia-conf"`
	Weekday      []NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Weekday_Union `path:"weekday" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Cron_Schedule implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule) IsYANGGoStruct() {}

// GetOrCreateEndTime retrieves the value of the EndTime field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetOrCreateEndTime() *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime {
	if t.EndTime != nil {
		return t.EndTime
	}
	t.EndTime = &NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime{}
	return t.EndTime
}

// GetOrCreateScriptPolicy retrieves the value of the ScriptPolicy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetOrCreateScriptPolicy() *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy {
	if t.ScriptPolicy != nil {
		return t.ScriptPolicy
	}
	t.ScriptPolicy = &NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy{}
	return t.ScriptPolicy
}

// GetEndTime returns the value of the EndTime struct pointer
// from NokiaConf_Configure_Groups_Group_System_Cron_Schedule. If the receiver or the field EndTime is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetEndTime() *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime {
	if t != nil && t.EndTime != nil {
		return t.EndTime
	}
	return nil
}

// GetScriptPolicy returns the value of the ScriptPolicy struct pointer
// from NokiaConf_Configure_Groups_Group_System_Cron_Schedule. If the receiver or the field ScriptPolicy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetScriptPolicy() *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy {
	if t != nil && t.ScriptPolicy != nil {
		return t.ScriptPolicy
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 0
	}
	return *t.Count
}

// GetDayOfMonth retrieves the value of the leaf DayOfMonth from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DayOfMonth is set, it can
// safely use t.GetDayOfMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DayOfMonth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetDayOfMonth() []int32 {
	if t == nil || t.DayOfMonth == nil {
		return nil
	}
	return t.DayOfMonth
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetHour retrieves the value of the leaf Hour from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hour is set, it can
// safely use t.GetHour() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hour == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetHour() []uint32 {
	if t == nil || t.Hour == nil {
		return nil
	}
	return t.Hour
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetMinute retrieves the value of the leaf Minute from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minute is set, it can
// safely use t.GetMinute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetMinute() []uint32 {
	if t == nil || t.Minute == nil {
		return nil
	}
	return t.Minute
}

// GetMonth retrieves the value of the leaf Month from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Month is set, it can
// safely use t.GetMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Month == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetMonth() []NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Month_Union {
	if t == nil || t.Month == nil {
		return nil
	}
	return t.Month
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// GetScheduleName retrieves the value of the leaf ScheduleName from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScheduleName is set, it can
// safely use t.GetScheduleName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScheduleName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetScheduleName() string {
	if t == nil || t.ScheduleName == nil {
		return ""
	}
	return *t.ScheduleName
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetType() E_NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Type_periodic
	}
	return t.Type
}

// GetWeekday retrieves the value of the leaf Weekday from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Weekday is set, it can
// safely use t.GetWeekday() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Weekday == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) GetWeekday() []NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Weekday_Union {
	if t == nil || t.Weekday == nil {
		return nil
	}
	return t.Weekday
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Cron_Schedule
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_System_Cron_Schedule_Type_periodic
	}
	t.EndTime.PopulateDefaults()
	t.ScriptPolicy.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Cron_Schedule struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	if t.ScheduleName == nil {
		return nil, fmt.Errorf("nil value for key ScheduleName")
	}

	return map[string]interface{}{
		"owner":         *t.Owner,
		"schedule-name": *t.ScheduleName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Cron_Schedule"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Cron_Schedule.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime represents the /nokia-conf/configure/groups/group/system/cron/schedule/end-time YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime struct {
	DateAndTime *string                                                             `path:"date-and-time" module:"nokia-conf"`
	Day         E_NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime_Day `path:"day" module:"nokia-conf"`
	Time        *string                                                             `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) IsYANGGoStruct() {}

// GetDateAndTime retrieves the value of the leaf DateAndTime from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DateAndTime is set, it can
// safely use t.GetDateAndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DateAndTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) GetDateAndTime() string {
	if t == nil || t.DateAndTime == nil {
		return ""
	}
	return *t.DateAndTime
}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) GetDay() E_NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime_Day {
	if t == nil || t.Day == 0 {
		return 0
	}
	return t.Day
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) GetTime() string {
	if t == nil || t.Time == nil {
		return ""
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule_EndTime) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy represents the /nokia-conf/configure/groups/group/system/cron/schedule/script-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy struct {
	Name  *string `path:"name" module:"nokia-conf"`
	Owner *string `path:"owner" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy.
func (*NokiaConf_Configure_Groups_Group_System_Cron_Schedule_ScriptPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Dhcp6 represents the /nokia-conf/configure/groups/group/system/dhcp6 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Dhcp6 struct {
	AdvNoaddrsGlobal []E_NokiaConf_Configure_Groups_Group_System_Dhcp6_AdvNoaddrsGlobal `path:"adv-noaddrs-global" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Dhcp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Dhcp6) IsYANGGoStruct() {}

// GetAdvNoaddrsGlobal retrieves the value of the leaf AdvNoaddrsGlobal from the NokiaConf_Configure_Groups_Group_System_Dhcp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdvNoaddrsGlobal is set, it can
// safely use t.GetAdvNoaddrsGlobal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdvNoaddrsGlobal == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Dhcp6) GetAdvNoaddrsGlobal() []E_NokiaConf_Configure_Groups_Group_System_Dhcp6_AdvNoaddrsGlobal {
	if t == nil || t.AdvNoaddrsGlobal == nil {
		return nil
	}
	return t.AdvNoaddrsGlobal
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Dhcp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Dhcp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dhcp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Dhcp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dhcp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Dhcp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Dhcp6.
func (*NokiaConf_Configure_Groups_Group_System_Dhcp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Dns represents the /nokia-conf/configure/groups/group/system/dns YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Dns struct {
	AddressPref E_NokiaConf_Configure_Groups_Group_System_Dns_AddressPref `path:"address-pref" module:"nokia-conf"`
	Dnssec      *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec       `path:"dnssec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Dns implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Dns) IsYANGGoStruct() {}

// GetOrCreateDnssec retrieves the value of the Dnssec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) GetOrCreateDnssec() *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec {
	if t.Dnssec != nil {
		return t.Dnssec
	}
	t.Dnssec = &NokiaConf_Configure_Groups_Group_System_Dns_Dnssec{}
	return t.Dnssec
}

// GetDnssec returns the value of the Dnssec struct pointer
// from NokiaConf_Configure_Groups_Group_System_Dns. If the receiver or the field Dnssec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) GetDnssec() *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec {
	if t != nil && t.Dnssec != nil {
		return t.Dnssec
	}
	return nil
}

// GetAddressPref retrieves the value of the leaf AddressPref from the NokiaConf_Configure_Groups_Group_System_Dns
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AddressPref is set, it can
// safely use t.GetAddressPref() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AddressPref == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) GetAddressPref() E_NokiaConf_Configure_Groups_Group_System_Dns_AddressPref {
	if t == nil || t.AddressPref == 0 {
		return 0
	}
	return t.AddressPref
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Dns
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dnssec.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Dns"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Dns) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Dns.
func (*NokiaConf_Configure_Groups_Group_System_Dns) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Dns_Dnssec represents the /nokia-conf/configure/groups/group/system/dns/dnssec YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Dns_Dnssec struct {
	AdValidation E_NokiaConf_Configure_Groups_Group_System_Dns_Dnssec_AdValidation `path:"ad-validation" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Dns_Dnssec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) IsYANGGoStruct() {}

// GetAdValidation retrieves the value of the leaf AdValidation from the NokiaConf_Configure_Groups_Group_System_Dns_Dnssec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdValidation is set, it can
// safely use t.GetAdValidation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdValidation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) GetAdValidation() E_NokiaConf_Configure_Groups_Group_System_Dns_Dnssec_AdValidation {
	if t == nil || t.AdValidation == 0 {
		return 0
	}
	return t.AdValidation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Dns_Dnssec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Dns_Dnssec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Dns_Dnssec.
func (*NokiaConf_Configure_Groups_Group_System_Dns_Dnssec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EfmOam represents the /nokia-conf/configure/groups/group/system/efm-oam YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EfmOam struct {
	DyingGaspTxOnReset *bool `path:"dying-gasp-tx-on-reset" module:"nokia-conf"`
	GraceTx            *bool `path:"grace-tx" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EfmOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EfmOam) IsYANGGoStruct() {}

// GetDyingGaspTxOnReset retrieves the value of the leaf DyingGaspTxOnReset from the NokiaConf_Configure_Groups_Group_System_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DyingGaspTxOnReset is set, it can
// safely use t.GetDyingGaspTxOnReset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DyingGaspTxOnReset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) GetDyingGaspTxOnReset() bool {
	if t == nil || t.DyingGaspTxOnReset == nil {
		return false
	}
	return *t.DyingGaspTxOnReset
}

// GetGraceTx retrieves the value of the leaf GraceTx from the NokiaConf_Configure_Groups_Group_System_EfmOam
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GraceTx is set, it can
// safely use t.GetGraceTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GraceTx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) GetGraceTx() bool {
	if t == nil || t.GraceTx == nil {
		return false
	}
	return *t.GraceTx
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EfmOam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DyingGaspTxOnReset == nil {
		var v bool = false
		t.DyingGaspTxOnReset = &v
	}
	if t.GraceTx == nil {
		var v bool = false
		t.GraceTx = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EfmOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EfmOam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EfmOam.
func (*NokiaConf_Configure_Groups_Group_System_EfmOam) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm represents the /nokia-conf/configure/groups/group/system/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm struct {
	Grace      *bool                                                      `path:"grace" module:"nokia-conf"`
	MdAutoId   *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId   `path:"md-auto-id" module:"nokia-conf"`
	Redundancy *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy `path:"redundancy" module:"nokia-conf" yangPresence:"true"`
	SenderId   *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId   `path:"sender-id" module:"nokia-conf"`
	Slm        *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm        `path:"slm" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm) IsYANGGoStruct() {}

// GetOrCreateMdAutoId retrieves the value of the MdAutoId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetOrCreateMdAutoId() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId {
	if t.MdAutoId != nil {
		return t.MdAutoId
	}
	t.MdAutoId = &NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId{}
	return t.MdAutoId
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetOrCreateRedundancy() *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy{}
	return t.Redundancy
}

// GetOrCreateSenderId retrieves the value of the SenderId field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetOrCreateSenderId() *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId {
	if t.SenderId != nil {
		return t.SenderId
	}
	t.SenderId = &NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId{}
	return t.SenderId
}

// GetOrCreateSlm retrieves the value of the Slm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetOrCreateSlm() *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm {
	if t.Slm != nil {
		return t.Slm
	}
	t.Slm = &NokiaConf_Configure_Groups_Group_System_EthCfm_Slm{}
	return t.Slm
}

// GetMdAutoId returns the value of the MdAutoId struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm. If the receiver or the field MdAutoId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetMdAutoId() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId {
	if t != nil && t.MdAutoId != nil {
		return t.MdAutoId
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetRedundancy() *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSenderId returns the value of the SenderId struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm. If the receiver or the field SenderId is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetSenderId() *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId {
	if t != nil && t.SenderId != nil {
		return t.SenderId
	}
	return nil
}

// GetSlm returns the value of the Slm struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm. If the receiver or the field Slm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetSlm() *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm {
	if t != nil && t.Slm != nil {
		return t.Slm
	}
	return nil
}

// GetGrace retrieves the value of the leaf Grace from the NokiaConf_Configure_Groups_Group_System_EthCfm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grace is set, it can
// safely use t.GetGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) GetGrace() bool {
	if t == nil || t.Grace == nil {
		return true
	}
	return *t.Grace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Grace == nil {
		var v bool = true
		t.Grace = &v
	}
	t.MdAutoId.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.SenderId.PopulateDefaults()
	t.Slm.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId represents the /nokia-conf/configure/groups/group/system/eth-cfm/md-auto-id YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId struct {
	MaIndexRange *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange `path:"ma-index-range" module:"nokia-conf" yangPresence:"true"`
	MdIndexRange *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange `path:"md-index-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) IsYANGGoStruct() {}

// GetOrCreateMaIndexRange retrieves the value of the MaIndexRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) GetOrCreateMaIndexRange() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange {
	if t.MaIndexRange != nil {
		return t.MaIndexRange
	}
	t.MaIndexRange = &NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange{}
	return t.MaIndexRange
}

// GetOrCreateMdIndexRange retrieves the value of the MdIndexRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) GetOrCreateMdIndexRange() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange {
	if t.MdIndexRange != nil {
		return t.MdIndexRange
	}
	t.MdIndexRange = &NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange{}
	return t.MdIndexRange
}

// GetMaIndexRange returns the value of the MaIndexRange struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId. If the receiver or the field MaIndexRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) GetMaIndexRange() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange {
	if t != nil && t.MaIndexRange != nil {
		return t.MaIndexRange
	}
	return nil
}

// GetMdIndexRange returns the value of the MdIndexRange struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId. If the receiver or the field MdIndexRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) GetMdIndexRange() *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange {
	if t != nil && t.MdIndexRange != nil {
		return t.MdIndexRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MaIndexRange.PopulateDefaults()
	t.MdIndexRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange represents the /nokia-conf/configure/groups/group/system/eth-cfm/md-auto-id/ma-index-range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MaIndexRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange represents the /nokia-conf/configure/groups/group/system/eth-cfm/md-auto-id/md-index-range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_MdAutoId_MdIndexRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy represents the /nokia-conf/configure/groups/group/system/eth-cfm/redundancy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy struct {
	McLag *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag `path:"mc-lag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) IsYANGGoStruct() {}

// GetOrCreateMcLag retrieves the value of the McLag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) GetOrCreateMcLag() *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag {
	if t.McLag != nil {
		return t.McLag
	}
	t.McLag = &NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag{}
	return t.McLag
}

// GetMcLag returns the value of the McLag struct pointer
// from NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy. If the receiver or the field McLag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) GetMcLag() *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag {
	if t != nil && t.McLag != nil {
		return t.McLag
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.McLag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag represents the /nokia-conf/configure/groups/group/system/eth-cfm/redundancy/mc-lag YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag struct {
	PropagateHoldTime NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag_PropagateHoldTime_Union `path:"propagate-hold-time" module:"nokia-conf"`
	StandbyMep        *bool                                                                                   `path:"standby-mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) IsYANGGoStruct() {}

// GetPropagateHoldTime retrieves the value of the leaf PropagateHoldTime from the NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagateHoldTime is set, it can
// safely use t.GetPropagateHoldTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagateHoldTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) GetPropagateHoldTime() NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag_PropagateHoldTime_Union {
	if t == nil || t.PropagateHoldTime == nil {
		return UnionInt32(1)
	}
	return t.PropagateHoldTime
}

// GetStandbyMep retrieves the value of the leaf StandbyMep from the NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbyMep is set, it can
// safely use t.GetStandbyMep() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbyMep == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) GetStandbyMep() bool {
	if t == nil || t.StandbyMep == nil {
		return false
	}
	return *t.StandbyMep
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PropagateHoldTime == nil {
		t.PropagateHoldTime = UnionInt32(1)
	}
	if t.StandbyMep == nil {
		var v bool = false
		t.StandbyMep = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Redundancy_McLag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId represents the /nokia-conf/configure/groups/group/system/eth-cfm/sender-id YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId struct {
	LocalName *string                             `path:"local-name" module:"nokia-conf"`
	Type      E_NokiaTypesEthCfm_ChassisIdSubtype `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) IsYANGGoStruct() {}

// GetLocalName retrieves the value of the leaf LocalName from the NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalName is set, it can
// safely use t.GetLocalName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) GetLocalName() string {
	if t == nil || t.LocalName == nil {
		return ""
	}
	return *t.LocalName
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) GetType() E_NokiaTypesEthCfm_ChassisIdSubtype {
	if t == nil || t.Type == 0 {
		return NokiaTypesEthCfm_ChassisIdSubtype_system
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesEthCfm_ChassisIdSubtype_system
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_SenderId) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_EthCfm_Slm represents the /nokia-conf/configure/groups/group/system/eth-cfm/slm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_EthCfm_Slm struct {
	InactivityTimer *uint32 `path:"inactivity-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_EthCfm_Slm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) IsYANGGoStruct() {}

// GetInactivityTimer retrieves the value of the leaf InactivityTimer from the NokiaConf_Configure_Groups_Group_System_EthCfm_Slm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimer is set, it can
// safely use t.GetInactivityTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) GetInactivityTimer() uint32 {
	if t == nil || t.InactivityTimer == nil {
		return 100
	}
	return *t.InactivityTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_EthCfm_Slm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InactivityTimer == nil {
		var v uint32 = 100
		t.InactivityTimer = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_EthCfm_Slm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_EthCfm_Slm.
func (*NokiaConf_Configure_Groups_Group_System_EthCfm_Slm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_FanControl represents the /nokia-conf/configure/groups/group/system/fan-control YANG schema element.
type NokiaConf_Configure_Groups_Group_System_FanControl struct {
	IncreaseMinSpeed *bool `path:"increase-min-speed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_FanControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_FanControl) IsYANGGoStruct() {}

// GetIncreaseMinSpeed retrieves the value of the leaf IncreaseMinSpeed from the NokiaConf_Configure_Groups_Group_System_FanControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncreaseMinSpeed is set, it can
// safely use t.GetIncreaseMinSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncreaseMinSpeed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_FanControl) GetIncreaseMinSpeed() bool {
	if t == nil || t.IncreaseMinSpeed == nil {
		return false
	}
	return *t.IncreaseMinSpeed
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_FanControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_FanControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncreaseMinSpeed == nil {
		var v bool = false
		t.IncreaseMinSpeed = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_FanControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_FanControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_FanControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_FanControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_FanControl.
func (*NokiaConf_Configure_Groups_Group_System_FanControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp represents the /nokia-conf/configure/groups/group/system/fp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp struct {
	CamAllocation      *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation      `path:"cam-allocation" module:"nokia-conf" yangPresence:"true"`
	Options            *NokiaConf_Configure_Groups_Group_System_Fp_Options            `path:"options" module:"nokia-conf" yangPresence:"true"`
	ResourceAllocation *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation `path:"resource-allocation" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp) IsYANGGoStruct() {}

// GetOrCreateCamAllocation retrieves the value of the CamAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetOrCreateCamAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation {
	if t.CamAllocation != nil {
		return t.CamAllocation
	}
	t.CamAllocation = &NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation{}
	return t.CamAllocation
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_System_Fp_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_System_Fp_Options{}
	return t.Options
}

// GetOrCreateResourceAllocation retrieves the value of the ResourceAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetOrCreateResourceAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation {
	if t.ResourceAllocation != nil {
		return t.ResourceAllocation
	}
	t.ResourceAllocation = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation{}
	return t.ResourceAllocation
}

// GetCamAllocation returns the value of the CamAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp. If the receiver or the field CamAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetCamAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation {
	if t != nil && t.CamAllocation != nil {
		return t.CamAllocation
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetOptions() *NokiaConf_Configure_Groups_Group_System_Fp_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetResourceAllocation returns the value of the ResourceAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp. If the receiver or the field ResourceAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) GetResourceAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation {
	if t != nil && t.ResourceAllocation != nil {
		return t.ResourceAllocation
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CamAllocation.PopulateDefaults()
	t.Options.PopulateDefaults()
	t.ResourceAllocation.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp.
func (*NokiaConf_Configure_Groups_Group_System_Fp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation represents the /nokia-conf/configure/groups/group/system/fp/cam-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation struct {
	V6Multicast *uint32 `path:"v6-multicast" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) IsYANGGoStruct() {}

// GetV6Multicast retrieves the value of the leaf V6Multicast from the NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if V6Multicast is set, it can
// safely use t.GetV6Multicast() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.V6Multicast == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) GetV6Multicast() uint32 {
	if t == nil || t.V6Multicast == nil {
		return 0
	}
	return *t.V6Multicast
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.V6Multicast == nil {
		var v uint32 = 0
		t.V6Multicast = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation.
func (*NokiaConf_Configure_Groups_Group_System_Fp_CamAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options represents the /nokia-conf/configure/groups/group/system/fp/options YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options struct {
	Ethernet      *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet      `path:"ethernet" module:"nokia-conf"`
	IpFilter      *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter      `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter    *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter    `path:"ipv6-filter" module:"nokia-conf"`
	LpmAllocation *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation `path:"lpm-allocation" module:"nokia-conf"`
	MacFilter     *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter     `path:"mac-filter" module:"nokia-conf"`
	Mpls          *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls          `path:"mpls" module:"nokia-conf"`
	Qos           *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos           `path:"qos" module:"nokia-conf"`
	Router        *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router        `path:"router" module:"nokia-conf"`
	Service       *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service       `path:"service" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options) IsYANGGoStruct() {}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateEthernet() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet{}
	return t.Ethernet
}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateIpFilter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetOrCreateLpmAllocation retrieves the value of the LpmAllocation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateLpmAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation {
	if t.LpmAllocation != nil {
		return t.LpmAllocation
	}
	t.LpmAllocation = &NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation{}
	return t.LpmAllocation
}

// GetOrCreateMacFilter retrieves the value of the MacFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateMacFilter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter {
	if t.MacFilter != nil {
		return t.MacFilter
	}
	t.MacFilter = &NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter{}
	return t.MacFilter
}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateMpls() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls{}
	return t.Mpls
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateQos() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos{}
	return t.Qos
}

// GetOrCreateRouter retrieves the value of the Router field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateRouter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router {
	if t.Router != nil {
		return t.Router
	}
	t.Router = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Router{}
	return t.Router
}

// GetOrCreateService retrieves the value of the Service field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetOrCreateService() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service {
	if t.Service != nil {
		return t.Service
	}
	t.Service = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Service{}
	return t.Service
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetEthernet() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetIpFilter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// GetLpmAllocation returns the value of the LpmAllocation struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field LpmAllocation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetLpmAllocation() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation {
	if t != nil && t.LpmAllocation != nil {
		return t.LpmAllocation
	}
	return nil
}

// GetMacFilter returns the value of the MacFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field MacFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetMacFilter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter {
	if t != nil && t.MacFilter != nil {
		return t.MacFilter
	}
	return nil
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetMpls() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetQos() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetRouter returns the value of the Router struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Router is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetRouter() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router {
	if t != nil && t.Router != nil {
		return t.Router
	}
	return nil
}

// GetService returns the value of the Service struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options. If the receiver or the field Service is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) GetService() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service {
	if t != nil && t.Service != nil {
		return t.Service
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ethernet.PopulateDefaults()
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
	t.LpmAllocation.PopulateDefaults()
	t.MacFilter.PopulateDefaults()
	t.Mpls.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.Router.PopulateDefaults()
	t.Service.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet represents the /nokia-conf/configure/groups/group/system/fp/options/ethernet YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet struct {
	Dot1XHostAuthentication *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication `path:"dot1x-host-authentication" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) IsYANGGoStruct() {}

// GetOrCreateDot1XHostAuthentication retrieves the value of the Dot1XHostAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) GetOrCreateDot1XHostAuthentication() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication {
	if t.Dot1XHostAuthentication != nil {
		return t.Dot1XHostAuthentication
	}
	t.Dot1XHostAuthentication = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication{}
	return t.Dot1XHostAuthentication
}

// GetDot1XHostAuthentication returns the value of the Dot1XHostAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet. If the receiver or the field Dot1XHostAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) GetDot1XHostAuthentication() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication {
	if t != nil && t.Dot1XHostAuthentication != nil {
		return t.Dot1XHostAuthentication
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dot1XHostAuthentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication represents the /nokia-conf/configure/groups/group/system/fp/options/ethernet/dot1x-host-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ethernet_Dot1XHostAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter represents the /nokia-conf/configure/groups/group/system/fp/options/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter struct {
	PbrRedirect     *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect     `path:"pbr-redirect" module:"nokia-conf"`
	StatsCollection *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection `path:"stats-collection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) IsYANGGoStruct() {}

// GetOrCreatePbrRedirect retrieves the value of the PbrRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) GetOrCreatePbrRedirect() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect {
	if t.PbrRedirect != nil {
		return t.PbrRedirect
	}
	t.PbrRedirect = &NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect{}
	return t.PbrRedirect
}

// GetOrCreateStatsCollection retrieves the value of the StatsCollection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) GetOrCreateStatsCollection() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection {
	if t.StatsCollection != nil {
		return t.StatsCollection
	}
	t.StatsCollection = &NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection{}
	return t.StatsCollection
}

// GetPbrRedirect returns the value of the PbrRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter. If the receiver or the field PbrRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) GetPbrRedirect() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect {
	if t != nil && t.PbrRedirect != nil {
		return t.PbrRedirect
	}
	return nil
}

// GetStatsCollection returns the value of the StatsCollection struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter. If the receiver or the field StatsCollection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) GetStatsCollection() *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection {
	if t != nil && t.StatsCollection != nil {
		return t.StatsCollection
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PbrRedirect.PopulateDefaults()
	t.StatsCollection.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect represents the /nokia-conf/configure/groups/group/system/fp/options/ip-filter/pbr-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_PbrRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection represents the /nokia-conf/configure/groups/group/system/fp/options/ip-filter/stats-collection YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_IpFilter_StatsCollection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter struct {
	DstIpLsb        *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb        `path:"dst-ip-lsb" module:"nokia-conf"`
	DstPort         *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort         `path:"dst-port" module:"nokia-conf"`
	Egress          *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress          `path:"egress" module:"nokia-conf"`
	NextHeader      *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader      `path:"next-header" module:"nokia-conf"`
	PbrRedirect     *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect     `path:"pbr-redirect" module:"nokia-conf"`
	SrcPort         *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort         `path:"src-port" module:"nokia-conf"`
	StatsCollection *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection `path:"stats-collection" module:"nokia-conf"`
	TcpFlags        *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) IsYANGGoStruct() {}

// GetOrCreateDstIpLsb retrieves the value of the DstIpLsb field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateDstIpLsb() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb {
	if t.DstIpLsb != nil {
		return t.DstIpLsb
	}
	t.DstIpLsb = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb{}
	return t.DstIpLsb
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort{}
	return t.DstPort
}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateEgress() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress{}
	return t.Egress
}

// GetOrCreateNextHeader retrieves the value of the NextHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateNextHeader() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader {
	if t.NextHeader != nil {
		return t.NextHeader
	}
	t.NextHeader = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader{}
	return t.NextHeader
}

// GetOrCreatePbrRedirect retrieves the value of the PbrRedirect field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreatePbrRedirect() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect {
	if t.PbrRedirect != nil {
		return t.PbrRedirect
	}
	t.PbrRedirect = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect{}
	return t.PbrRedirect
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort{}
	return t.SrcPort
}

// GetOrCreateStatsCollection retrieves the value of the StatsCollection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateStatsCollection() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection {
	if t.StatsCollection != nil {
		return t.StatsCollection
	}
	t.StatsCollection = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection{}
	return t.StatsCollection
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags{}
	return t.TcpFlags
}

// GetDstIpLsb returns the value of the DstIpLsb struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field DstIpLsb is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetDstIpLsb() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb {
	if t != nil && t.DstIpLsb != nil {
		return t.DstIpLsb
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetDstPort() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetEgress() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// GetNextHeader returns the value of the NextHeader struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field NextHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetNextHeader() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader {
	if t != nil && t.NextHeader != nil {
		return t.NextHeader
	}
	return nil
}

// GetPbrRedirect returns the value of the PbrRedirect struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field PbrRedirect is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetPbrRedirect() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect {
	if t != nil && t.PbrRedirect != nil {
		return t.PbrRedirect
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetSrcPort() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetStatsCollection returns the value of the StatsCollection struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field StatsCollection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetStatsCollection() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection {
	if t != nil && t.StatsCollection != nil {
		return t.StatsCollection
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) GetTcpFlags() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIpLsb.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Egress.PopulateDefaults()
	t.NextHeader.PopulateDefaults()
	t.PbrRedirect.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.StatsCollection.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/dst-ip-lsb YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstIpLsb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/egress YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/next-header YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_NextHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/pbr-redirect YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_PbrRedirect) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/stats-collection YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_StatsCollection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags represents the /nokia-conf/configure/groups/group/system/fp/options/ipv6-filter/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Ipv6Filter_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation represents the /nokia-conf/configure/groups/group/system/fp/options/lpm-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation struct {
	ScaleOption_1 *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 `path:"scale-option-1" module:"nokia-conf"`
	ScaleOption_2 *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 `path:"scale-option-2" module:"nokia-conf"`
	ScaleOption_3 *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 `path:"scale-option-3" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) IsYANGGoStruct() {}

// GetOrCreateScaleOption_1 retrieves the value of the ScaleOption_1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetOrCreateScaleOption_1() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 {
	if t.ScaleOption_1 != nil {
		return t.ScaleOption_1
	}
	t.ScaleOption_1 = &NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1{}
	return t.ScaleOption_1
}

// GetOrCreateScaleOption_2 retrieves the value of the ScaleOption_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetOrCreateScaleOption_2() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 {
	if t.ScaleOption_2 != nil {
		return t.ScaleOption_2
	}
	t.ScaleOption_2 = &NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2{}
	return t.ScaleOption_2
}

// GetOrCreateScaleOption_3 retrieves the value of the ScaleOption_3 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetOrCreateScaleOption_3() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 {
	if t.ScaleOption_3 != nil {
		return t.ScaleOption_3
	}
	t.ScaleOption_3 = &NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3{}
	return t.ScaleOption_3
}

// GetScaleOption_1 returns the value of the ScaleOption_1 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation. If the receiver or the field ScaleOption_1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetScaleOption_1() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 {
	if t != nil && t.ScaleOption_1 != nil {
		return t.ScaleOption_1
	}
	return nil
}

// GetScaleOption_2 returns the value of the ScaleOption_2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation. If the receiver or the field ScaleOption_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetScaleOption_2() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 {
	if t != nil && t.ScaleOption_2 != nil {
		return t.ScaleOption_2
	}
	return nil
}

// GetScaleOption_3 returns the value of the ScaleOption_3 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation. If the receiver or the field ScaleOption_3 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) GetScaleOption_3() *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 {
	if t != nil && t.ScaleOption_3 != nil {
		return t.ScaleOption_3
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ScaleOption_1.PopulateDefaults()
	t.ScaleOption_2.PopulateDefaults()
	t.ScaleOption_3.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 represents the /nokia-conf/configure/groups/group/system/fp/options/lpm-allocation/scale-option-1 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 represents the /nokia-conf/configure/groups/group/system/fp/options/lpm-allocation/scale-option-2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 represents the /nokia-conf/configure/groups/group/system/fp/options/lpm-allocation/scale-option-3 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_LpmAllocation_ScaleOption_3) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter represents the /nokia-conf/configure/groups/group/system/fp/options/mac-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter struct {
	OuterVlanPriority *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority `path:"outer-vlan-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) IsYANGGoStruct() {}

// GetOrCreateOuterVlanPriority retrieves the value of the OuterVlanPriority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) GetOrCreateOuterVlanPriority() *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority {
	if t.OuterVlanPriority != nil {
		return t.OuterVlanPriority
	}
	t.OuterVlanPriority = &NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority{}
	return t.OuterVlanPriority
}

// GetOuterVlanPriority returns the value of the OuterVlanPriority struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter. If the receiver or the field OuterVlanPriority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) GetOuterVlanPriority() *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority {
	if t != nil && t.OuterVlanPriority != nil {
		return t.OuterVlanPriority
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.OuterVlanPriority.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority represents the /nokia-conf/configure/groups/group/system/fp/options/mac-filter/outer-vlan-priority YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_MacFilter_OuterVlanPriority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls represents the /nokia-conf/configure/groups/group/system/fp/options/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls struct {
	EntropyLabel   *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel   `path:"entropy-label" module:"nokia-conf"`
	FastSwitchover *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover `path:"fast-switchover" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) IsYANGGoStruct() {}

// GetOrCreateEntropyLabel retrieves the value of the EntropyLabel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) GetOrCreateEntropyLabel() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel {
	if t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	t.EntropyLabel = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel{}
	return t.EntropyLabel
}

// GetOrCreateFastSwitchover retrieves the value of the FastSwitchover field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) GetOrCreateFastSwitchover() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover {
	if t.FastSwitchover != nil {
		return t.FastSwitchover
	}
	t.FastSwitchover = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover{}
	return t.FastSwitchover
}

// GetEntropyLabel returns the value of the EntropyLabel struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls. If the receiver or the field EntropyLabel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) GetEntropyLabel() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel {
	if t != nil && t.EntropyLabel != nil {
		return t.EntropyLabel
	}
	return nil
}

// GetFastSwitchover returns the value of the FastSwitchover struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls. If the receiver or the field FastSwitchover is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) GetFastSwitchover() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover {
	if t != nil && t.FastSwitchover != nil {
		return t.FastSwitchover
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EntropyLabel.PopulateDefaults()
	t.FastSwitchover.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel represents the /nokia-conf/configure/groups/group/system/fp/options/mpls/entropy-label YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_EntropyLabel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover represents the /nokia-conf/configure/groups/group/system/fp/options/mpls/fast-switchover YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Mpls_FastSwitchover) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos represents the /nokia-conf/configure/groups/group/system/fp/options/qos YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos struct {
	BumPolicers                *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers                `path:"bum-policers" module:"nokia-conf"`
	DscpTransparency           *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency           `path:"dscp-transparency" module:"nokia-conf"`
	Fc_4Profile                *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile                `path:"fc-4-profile" module:"nokia-conf"`
	Ipv6ClassificationCriteria *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria `path:"ipv6-classification-criteria" module:"nokia-conf"`
	MacClassificationCriteria  *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria  `path:"mac-classification-criteria" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) IsYANGGoStruct() {}

// GetOrCreateBumPolicers retrieves the value of the BumPolicers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetOrCreateBumPolicers() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers {
	if t.BumPolicers != nil {
		return t.BumPolicers
	}
	t.BumPolicers = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers{}
	return t.BumPolicers
}

// GetOrCreateDscpTransparency retrieves the value of the DscpTransparency field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetOrCreateDscpTransparency() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency {
	if t.DscpTransparency != nil {
		return t.DscpTransparency
	}
	t.DscpTransparency = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency{}
	return t.DscpTransparency
}

// GetOrCreateFc_4Profile retrieves the value of the Fc_4Profile field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetOrCreateFc_4Profile() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile {
	if t.Fc_4Profile != nil {
		return t.Fc_4Profile
	}
	t.Fc_4Profile = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile{}
	return t.Fc_4Profile
}

// GetOrCreateIpv6ClassificationCriteria retrieves the value of the Ipv6ClassificationCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetOrCreateIpv6ClassificationCriteria() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria {
	if t.Ipv6ClassificationCriteria != nil {
		return t.Ipv6ClassificationCriteria
	}
	t.Ipv6ClassificationCriteria = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria{}
	return t.Ipv6ClassificationCriteria
}

// GetOrCreateMacClassificationCriteria retrieves the value of the MacClassificationCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetOrCreateMacClassificationCriteria() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria {
	if t.MacClassificationCriteria != nil {
		return t.MacClassificationCriteria
	}
	t.MacClassificationCriteria = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria{}
	return t.MacClassificationCriteria
}

// GetBumPolicers returns the value of the BumPolicers struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos. If the receiver or the field BumPolicers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetBumPolicers() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers {
	if t != nil && t.BumPolicers != nil {
		return t.BumPolicers
	}
	return nil
}

// GetDscpTransparency returns the value of the DscpTransparency struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos. If the receiver or the field DscpTransparency is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetDscpTransparency() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency {
	if t != nil && t.DscpTransparency != nil {
		return t.DscpTransparency
	}
	return nil
}

// GetFc_4Profile returns the value of the Fc_4Profile struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos. If the receiver or the field Fc_4Profile is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetFc_4Profile() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile {
	if t != nil && t.Fc_4Profile != nil {
		return t.Fc_4Profile
	}
	return nil
}

// GetIpv6ClassificationCriteria returns the value of the Ipv6ClassificationCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos. If the receiver or the field Ipv6ClassificationCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetIpv6ClassificationCriteria() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria {
	if t != nil && t.Ipv6ClassificationCriteria != nil {
		return t.Ipv6ClassificationCriteria
	}
	return nil
}

// GetMacClassificationCriteria returns the value of the MacClassificationCriteria struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos. If the receiver or the field MacClassificationCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) GetMacClassificationCriteria() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria {
	if t != nil && t.MacClassificationCriteria != nil {
		return t.MacClassificationCriteria
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BumPolicers.PopulateDefaults()
	t.DscpTransparency.PopulateDefaults()
	t.Fc_4Profile.PopulateDefaults()
	t.Ipv6ClassificationCriteria.PopulateDefaults()
	t.MacClassificationCriteria.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers represents the /nokia-conf/configure/groups/group/system/fp/options/qos/bum-policers YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_BumPolicers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency represents the /nokia-conf/configure/groups/group/system/fp/options/qos/dscp-transparency YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_DscpTransparency) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile represents the /nokia-conf/configure/groups/group/system/fp/options/qos/fc-4-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Fc_4Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria represents the /nokia-conf/configure/groups/group/system/fp/options/qos/ipv6-classification-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_Ipv6ClassificationCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria represents the /nokia-conf/configure/groups/group/system/fp/options/qos/mac-classification-criteria YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Qos_MacClassificationCriteria) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Router represents the /nokia-conf/configure/groups/group/system/fp/options/router YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Router struct {
	Ecmp *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp `path:"ecmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) IsYANGGoStruct() {}

// GetOrCreateEcmp retrieves the value of the Ecmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) GetOrCreateEcmp() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp {
	if t.Ecmp != nil {
		return t.Ecmp
	}
	t.Ecmp = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp{}
	return t.Ecmp
}

// GetEcmp returns the value of the Ecmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Router. If the receiver or the field Ecmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) GetEcmp() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp {
	if t != nil && t.Ecmp != nil {
		return t.Ecmp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ecmp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Router.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp represents the /nokia-conf/configure/groups/group/system/fp/options/router/ecmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Router_Ecmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Service represents the /nokia-conf/configure/groups/group/system/fp/options/service YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Service struct {
	RingAps      *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps      `path:"ring-aps" module:"nokia-conf"`
	VplsEvpnMpls *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls `path:"vpls-evpn-mpls" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Service implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) IsYANGGoStruct() {}

// GetOrCreateRingAps retrieves the value of the RingAps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) GetOrCreateRingAps() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps {
	if t.RingAps != nil {
		return t.RingAps
	}
	t.RingAps = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps{}
	return t.RingAps
}

// GetOrCreateVplsEvpnMpls retrieves the value of the VplsEvpnMpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) GetOrCreateVplsEvpnMpls() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls {
	if t.VplsEvpnMpls != nil {
		return t.VplsEvpnMpls
	}
	t.VplsEvpnMpls = &NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls{}
	return t.VplsEvpnMpls
}

// GetRingAps returns the value of the RingAps struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Service. If the receiver or the field RingAps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) GetRingAps() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps {
	if t != nil && t.RingAps != nil {
		return t.RingAps
	}
	return nil
}

// GetVplsEvpnMpls returns the value of the VplsEvpnMpls struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_Options_Service. If the receiver or the field VplsEvpnMpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) GetVplsEvpnMpls() *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls {
	if t != nil && t.VplsEvpnMpls != nil {
		return t.VplsEvpnMpls
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Service
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RingAps.PopulateDefaults()
	t.VplsEvpnMpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Service"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Service.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps represents the /nokia-conf/configure/groups/group/system/fp/options/service/ring-aps YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_RingAps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls represents the /nokia-conf/configure/groups/group/system/fp/options/service/vpls-evpn-mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls.
func (*NokiaConf_Configure_Groups_Group_System_Fp_Options_Service_VplsEvpnMpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation struct {
	Fec      *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec                                                                                      `path:"fec" module:"nokia-conf"`
	Filter   *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter                                                                                   `path:"filter" module:"nokia-conf"`
	G8032Sap *uint32                                                                                                                                                 `path:"g8032-sap" module:"nokia-conf"`
	Lpm      *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm                                                                                      `path:"lpm" module:"nokia-conf"`
	Pool     map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool `path:"pool" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) IsYANGGoStruct() {}

// NewPool creates a new entry in the Pool list of the
// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) NewPool(PoolId NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union) (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool)
	}

	key := PoolId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Pool[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Pool", key)
	}

	t.Pool[key] = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool{
		PoolId: PoolId,
	}

	return t.Pool[key], nil
}

// RenamePool renames an entry in the list Pool within
// the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) RenamePool(oldK, newK NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union) error {
	if _, ok := t.Pool[newK]; ok {
		return fmt.Errorf("key %v already exists in Pool", newK)
	}

	e, ok := t.Pool[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Pool", oldK)
	}
	e.PoolId = newK

	t.Pool[newK] = e
	delete(t.Pool, oldK)
	return nil
}

// GetOrCreatePool retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetOrCreatePool(PoolId NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union) *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool {

	key := PoolId

	if v, ok := t.Pool[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPool(PoolId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePool got unexpected error: %v", err))
	}
	return v
}

// GetPool retrieves the value with the specified key from
// the Pool map field of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetPool(PoolId NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union) *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool {

	if t == nil {
		return nil
	}

	key := PoolId

	if lm, ok := t.Pool[key]; ok {
		return lm
	}
	return nil
}

// DeletePool deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) DeletePool(PoolId NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union) {
	key := PoolId

	delete(t.Pool, key)
}

// AppendPool appends the supplied NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool struct to the
// list Pool of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) AppendPool(v *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) error {
	key := v.PoolId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Pool == nil {
		t.Pool = make(map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool)
	}

	if _, ok := t.Pool[key]; ok {
		return fmt.Errorf("duplicate key for list Pool %v", key)
	}

	t.Pool[key] = v
	return nil
}

// GetOrCreateFec retrieves the value of the Fec field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetOrCreateFec() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec {
	if t.Fec != nil {
		return t.Fec
	}
	t.Fec = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec{}
	return t.Fec
}

// GetOrCreateFilter retrieves the value of the Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetOrCreateFilter() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter {
	if t.Filter != nil {
		return t.Filter
	}
	t.Filter = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter{}
	return t.Filter
}

// GetOrCreateLpm retrieves the value of the Lpm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetOrCreateLpm() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm {
	if t.Lpm != nil {
		return t.Lpm
	}
	t.Lpm = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm{}
	return t.Lpm
}

// GetFec returns the value of the Fec struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the receiver or the field Fec is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetFec() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec {
	if t != nil && t.Fec != nil {
		return t.Fec
	}
	return nil
}

// GetFilter returns the value of the Filter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the receiver or the field Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetFilter() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter {
	if t != nil && t.Filter != nil {
		return t.Filter
	}
	return nil
}

// GetLpm returns the value of the Lpm struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation. If the receiver or the field Lpm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetLpm() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm {
	if t != nil && t.Lpm != nil {
		return t.Lpm
	}
	return nil
}

// GetG8032Sap retrieves the value of the leaf G8032Sap from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if G8032Sap is set, it can
// safely use t.GetG8032Sap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.G8032Sap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) GetG8032Sap() uint32 {
	if t == nil || t.G8032Sap == nil {
		return 0
	}
	return *t.G8032Sap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Fec.PopulateDefaults()
	t.Filter.PopulateDefaults()
	t.Lpm.PopulateDefaults()
	for _, e := range t.Pool {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/fec YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec struct {
	SystemWide *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide `path:"system-wide" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) IsYANGGoStruct() {}

// GetOrCreateSystemWide retrieves the value of the SystemWide field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) GetOrCreateSystemWide() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide {
	if t.SystemWide != nil {
		return t.SystemWide
	}
	t.SystemWide = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide{}
	return t.SystemWide
}

// GetSystemWide returns the value of the SystemWide struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec. If the receiver or the field SystemWide is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) GetSystemWide() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide {
	if t != nil && t.SystemWide != nil {
		return t.SystemWide
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SystemWide.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/fec/system-wide YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide struct {
	Paired   *uint32 `path:"paired" module:"nokia-conf"`
	Unpaired *uint32 `path:"unpaired" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) IsYANGGoStruct() {
}

// GetPaired retrieves the value of the leaf Paired from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Paired is set, it can
// safely use t.GetPaired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Paired == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) GetPaired() uint32 {
	if t == nil || t.Paired == nil {
		return 0
	}
	return *t.Paired
}

// GetUnpaired retrieves the value of the leaf Unpaired from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Unpaired is set, it can
// safely use t.GetUnpaired() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Unpaired == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) GetUnpaired() uint32 {
	if t == nil || t.Unpaired == nil {
		return 0
	}
	return *t.Unpaired
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Fec_SystemWide) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter struct {
	Ipv6Number *uint32 `path:"ipv6-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) IsYANGGoStruct() {}

// GetIpv6Number retrieves the value of the leaf Ipv6Number from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Number is set, it can
// safely use t.GetIpv6Number() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Number == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) GetIpv6Number() uint32 {
	if t == nil || t.Ipv6Number == nil {
		return 0
	}
	return *t.Ipv6Number
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/lpm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm struct {
	ScaleOption map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption `path:"scale-option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) IsYANGGoStruct() {}

// NewScaleOption creates a new entry in the ScaleOption list of the
// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) NewScaleOption(Option NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union) (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScaleOption == nil {
		t.ScaleOption = make(map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption)
	}

	key := Option

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ScaleOption[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ScaleOption", key)
	}

	t.ScaleOption[key] = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption{
		Option: Option,
	}

	return t.ScaleOption[key], nil
}

// RenameScaleOption renames an entry in the list ScaleOption within
// the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) RenameScaleOption(oldK, newK NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union) error {
	if _, ok := t.ScaleOption[newK]; ok {
		return fmt.Errorf("key %v already exists in ScaleOption", newK)
	}

	e, ok := t.ScaleOption[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ScaleOption", oldK)
	}
	e.Option = newK

	t.ScaleOption[newK] = e
	delete(t.ScaleOption, oldK)
	return nil
}

// GetOrCreateScaleOption retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) GetOrCreateScaleOption(Option NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union) *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption {

	key := Option

	if v, ok := t.ScaleOption[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScaleOption(Option)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScaleOption got unexpected error: %v", err))
	}
	return v
}

// GetScaleOption retrieves the value with the specified key from
// the ScaleOption map field of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) GetScaleOption(Option NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union) *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption {

	if t == nil {
		return nil
	}

	key := Option

	if lm, ok := t.ScaleOption[key]; ok {
		return lm
	}
	return nil
}

// DeleteScaleOption deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) DeleteScaleOption(Option NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union) {
	key := Option

	delete(t.ScaleOption, key)
}

// AppendScaleOption appends the supplied NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption struct to the
// list ScaleOption of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) AppendScaleOption(v *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) error {
	key := v.Option

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScaleOption == nil {
		t.ScaleOption = make(map[NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union]*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption)
	}

	if _, ok := t.ScaleOption[key]; ok {
		return fmt.Errorf("duplicate key for list ScaleOption %v", key)
	}

	t.ScaleOption[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ScaleOption {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/lpm/scale-option YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption struct {
	AdminState E_NokiaTypesSros_AdminState                                                                `path:"admin-state" module:"nokia-conf"`
	Option     NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union `path:"option" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetOption retrieves the value of the leaf Option from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Option is set, it can
// safely use t.GetOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Option == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) GetOption() NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption_Option_Union {
	if t == nil || t.Option == nil {
		return nil
	}
	return t.Option
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"option": t.Option,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Lpm_ScaleOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/pool YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool struct {
	LagBundle *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle   `path:"lag-bundle" module:"nokia-conf"`
	PoolId    NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union `path:"pool-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) IsYANGGoStruct() {}

// GetOrCreateLagBundle retrieves the value of the LagBundle field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) GetOrCreateLagBundle() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle {
	if t.LagBundle != nil {
		return t.LagBundle
	}
	t.LagBundle = &NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle{}
	return t.LagBundle
}

// GetLagBundle returns the value of the LagBundle struct pointer
// from NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool. If the receiver or the field LagBundle is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) GetLagBundle() *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle {
	if t != nil && t.LagBundle != nil {
		return t.LagBundle
	}
	return nil
}

// GetPoolId retrieves the value of the leaf PoolId from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PoolId is set, it can
// safely use t.GetPoolId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PoolId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) GetPoolId() NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_PoolId_Union {
	if t == nil || t.PoolId == nil {
		return nil
	}
	return t.PoolId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LagBundle.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"pool-id": t.PoolId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle represents the /nokia-conf/configure/groups/group/system/fp/resource-allocation/pool/lag-bundle YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle struct {
	ReservedMemberCount *uint32 `path:"reserved-member-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) IsYANGGoStruct() {
}

// GetReservedMemberCount retrieves the value of the leaf ReservedMemberCount from the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReservedMemberCount is set, it can
// safely use t.GetReservedMemberCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReservedMemberCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) GetReservedMemberCount() uint32 {
	if t == nil || t.ReservedMemberCount == nil {
		return 64
	}
	return *t.ReservedMemberCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReservedMemberCount == nil {
		var v uint32 = 64
		t.ReservedMemberCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle.
func (*NokiaConf_Configure_Groups_Group_System_Fp_ResourceAllocation_Pool_LagBundle) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc represents the /nokia-conf/configure/groups/group/system/grpc YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc struct {
	AdminState              E_NokiaTypesSros_AdminState                                `path:"admin-state" module:"nokia-conf"`
	AllowUnsecureConnection YANGEmpty                                                  `path:"allow-unsecure-connection" module:"nokia-conf"`
	Gnmi                    *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi         `path:"gnmi" module:"nokia-conf"`
	Gnoi                    *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi         `path:"gnoi" module:"nokia-conf"`
	MaxMsgSize              *uint32                                                    `path:"max-msg-size" module:"nokia-conf"`
	MdCli                   *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli        `path:"md-cli" module:"nokia-conf"`
	RibApi                  *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi       `path:"rib-api" module:"nokia-conf"`
	TcpKeepalive            *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive `path:"tcp-keepalive" module:"nokia-conf"`
	TlsServerProfile        *string                                                    `path:"tls-server-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc) IsYANGGoStruct() {}

// GetOrCreateGnmi retrieves the value of the Gnmi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetOrCreateGnmi() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi {
	if t.Gnmi != nil {
		return t.Gnmi
	}
	t.Gnmi = &NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi{}
	return t.Gnmi
}

// GetOrCreateGnoi retrieves the value of the Gnoi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetOrCreateGnoi() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi {
	if t.Gnoi != nil {
		return t.Gnoi
	}
	t.Gnoi = &NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi{}
	return t.Gnoi
}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetOrCreateMdCli() *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_Groups_Group_System_Grpc_MdCli{}
	return t.MdCli
}

// GetOrCreateRibApi retrieves the value of the RibApi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetOrCreateRibApi() *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi {
	if t.RibApi != nil {
		return t.RibApi
	}
	t.RibApi = &NokiaConf_Configure_Groups_Group_System_Grpc_RibApi{}
	return t.RibApi
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetOrCreateTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetGnmi returns the value of the Gnmi struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc. If the receiver or the field Gnmi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetGnmi() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi {
	if t != nil && t.Gnmi != nil {
		return t.Gnmi
	}
	return nil
}

// GetGnoi returns the value of the Gnoi struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc. If the receiver or the field Gnoi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetGnoi() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi {
	if t != nil && t.Gnoi != nil {
		return t.Gnoi
	}
	return nil
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetMdCli() *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetRibApi returns the value of the RibApi struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc. If the receiver or the field RibApi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetRibApi() *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi {
	if t != nil && t.RibApi != nil {
		return t.RibApi
	}
	return nil
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_Groups_Group_System_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetMaxMsgSize retrieves the value of the leaf MaxMsgSize from the NokiaConf_Configure_Groups_Group_System_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMsgSize is set, it can
// safely use t.GetMaxMsgSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMsgSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetMaxMsgSize() uint32 {
	if t == nil || t.MaxMsgSize == nil {
		return 512
	}
	return *t.MaxMsgSize
}

// GetTlsServerProfile retrieves the value of the leaf TlsServerProfile from the NokiaConf_Configure_Groups_Group_System_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsServerProfile is set, it can
// safely use t.GetTlsServerProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsServerProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) GetTlsServerProfile() string {
	if t == nil || t.TlsServerProfile == nil {
		return ""
	}
	return *t.TlsServerProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxMsgSize == nil {
		var v uint32 = 512
		t.MaxMsgSize = &v
	}
	t.Gnmi.PopulateDefaults()
	t.Gnoi.PopulateDefaults()
	t.MdCli.PopulateDefaults()
	t.RibApi.PopulateDefaults()
	t.TcpKeepalive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc.
func (*NokiaConf_Configure_Groups_Group_System_Grpc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel represents the /nokia-conf/configure/groups/group/system/grpc-tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel struct {
	DestinationGroup map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup `path:"destination-group" module:"nokia-conf"`
	Tunnel           map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel           `path:"tunnel" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// NokiaConf_Configure_Groups_Group_System_GrpcTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) NewDestinationGroup(Name string) (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup{
		Name: &Name,
	}

	return t.DestinationGroup[key], nil
}

// RenameDestinationGroup renames an entry in the list DestinationGroup within
// the NokiaConf_Configure_Groups_Group_System_GrpcTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) RenameDestinationGroup(oldK, newK string) error {
	if _, ok := t.DestinationGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationGroup", newK)
	}

	e, ok := t.DestinationGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationGroup", oldK)
	}
	e.Name = &newK

	t.DestinationGroup[newK] = e
	delete(t.DestinationGroup, oldK)
	return nil
}

// GetOrCreateDestinationGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) GetOrCreateDestinationGroup(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup {

	key := Name

	if v, ok := t.DestinationGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationGroup got unexpected error: %v", err))
	}
	return v
}

// GetDestinationGroup retrieves the value with the specified key from
// the DestinationGroup map field of NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) GetDestinationGroup(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DestinationGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) DeleteDestinationGroup(Name string) {
	key := Name

	delete(t.DestinationGroup, key)
}

// AppendDestinationGroup appends the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup struct to the
// list DestinationGroup of NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) AppendDestinationGroup(v *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup)
	}

	if _, ok := t.DestinationGroup[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationGroup %v", key)
	}

	t.DestinationGroup[key] = v
	return nil
}

// NewTunnel creates a new entry in the Tunnel list of the
// NokiaConf_Configure_Groups_Group_System_GrpcTunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) NewTunnel(Name string) (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tunnel[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tunnel", key)
	}

	t.Tunnel[key] = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel{
		Name: &Name,
	}

	return t.Tunnel[key], nil
}

// RenameTunnel renames an entry in the list Tunnel within
// the NokiaConf_Configure_Groups_Group_System_GrpcTunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) RenameTunnel(oldK, newK string) error {
	if _, ok := t.Tunnel[newK]; ok {
		return fmt.Errorf("key %v already exists in Tunnel", newK)
	}

	e, ok := t.Tunnel[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tunnel", oldK)
	}
	e.Name = &newK

	t.Tunnel[newK] = e
	delete(t.Tunnel, oldK)
	return nil
}

// GetOrCreateTunnel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) GetOrCreateTunnel(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel {

	key := Name

	if v, ok := t.Tunnel[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnel(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnel got unexpected error: %v", err))
	}
	return v
}

// GetTunnel retrieves the value with the specified key from
// the Tunnel map field of NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) GetTunnel(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Tunnel[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) DeleteTunnel(Name string) {
	key := Name

	delete(t.Tunnel, key)
}

// AppendTunnel appends the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel struct to the
// list Tunnel of NokiaConf_Configure_Groups_Group_System_GrpcTunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) AppendTunnel(v *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tunnel == nil {
		t.Tunnel = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel)
	}

	if _, ok := t.Tunnel[key]; ok {
		return fmt.Errorf("duplicate key for list Tunnel %v", key)
	}

	t.Tunnel[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.DestinationGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.Tunnel {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/destination-group YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup struct {
	AllowUnsecureConnection YANGEmpty                                                                                                                                                                `path:"allow-unsecure-connection" module:"nokia-conf"`
	Description             *string                                                                                                                                                                  `path:"description" module:"nokia-conf"`
	Destination             map[NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination `path:"destination" module:"nokia-conf"`
	Name                    *string                                                                                                                                                                  `path:"name" module:"nokia-conf"`
	TcpKeepalive            *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive                                                                                        `path:"tcp-keepalive" module:"nokia-conf"`
	TlsClientProfile        *string                                                                                                                                                                  `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key represents the key for list Destination of element /nokia-conf/configure/groups/group/system/grpc-tunnel/destination-group.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key struct {
	Address string                                                                                     `path:"address"`
	Port    NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union `path:"port"`
}

// NewDestination creates a new entry in the Destination list of the
// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) NewDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union) (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination)
	}

	key := NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination{
		Address: &Address,
		Port:    Port,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) RenameDestination(oldK, newK NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.Address = &newK.Address
	e.Port = newK.Port

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetOrCreateDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination {

	key := NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) DeleteDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Destination, key)
}

// AppendDestination appends the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination struct to the
// list Destination of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) AppendDestination(v *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	key := NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key{
		Address: *v.Address,
		Port:    v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetOrCreateTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TcpKeepalive.PopulateDefaults()
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/destination-group/destination YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination struct {
	Address              *string                                                                                    `path:"address" module:"nokia-conf"`
	LocalSourceAddress   *string                                                                                    `path:"local-source-address" module:"nokia-conf"`
	OriginatedQosMarking E_NokiaTypesQos_DscpName                                                                   `path:"originated-qos-marking" module:"nokia-conf"`
	Port                 NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union `path:"port" module:"nokia-conf"`
	RouterInstance       *string                                                                                    `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetLocalSourceAddress retrieves the value of the leaf LocalSourceAddress from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSourceAddress is set, it can
// safely use t.GetLocalSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) GetLocalSourceAddress() string {
	if t == nil || t.LocalSourceAddress == nil {
		return ""
	}
	return *t.LocalSourceAddress
}

// GetOriginatedQosMarking retrieves the value of the leaf OriginatedQosMarking from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatedQosMarking is set, it can
// safely use t.GetOriginatedQosMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatedQosMarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) GetOriginatedQosMarking() E_NokiaTypesQos_DscpName {
	if t == nil || t.OriginatedQosMarking == 0 {
		return 0
	}
	return t.OriginatedQosMarking
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) GetPort() NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/destination-group/tcp-keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IdleTime   *uint32                     `path:"idle-time" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Retries    *uint32                     `path:"retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIdleTime retrieves the value of the leaf IdleTime from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTime is set, it can
// safely use t.GetIdleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) GetIdleTime() uint32 {
	if t == nil || t.IdleTime == nil {
		return 600
	}
	return *t.IdleTime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 15
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IdleTime == nil {
		var v uint32 = 600
		t.IdleTime = &v
	}
	if t.Interval == nil {
		var v uint32 = 15
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_DestinationGroup_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/tunnel YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel struct {
	AdminState       E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	Description      *string                                                                       `path:"description" module:"nokia-conf"`
	DestinationGroup *string                                                                       `path:"destination-group" module:"nokia-conf"`
	Handler          map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler `path:"handler" module:"nokia-conf"`
	Name             *string                                                                       `path:"name" module:"nokia-conf"`
	TargetName       *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName         `path:"target-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) IsYANGGoStruct() {}

// NewHandler creates a new entry in the Handler list of the
// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) NewHandler(Name string) (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Handler == nil {
		t.Handler = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Handler[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Handler", key)
	}

	t.Handler[key] = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler{
		Name: &Name,
	}

	return t.Handler[key], nil
}

// RenameHandler renames an entry in the list Handler within
// the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) RenameHandler(oldK, newK string) error {
	if _, ok := t.Handler[newK]; ok {
		return fmt.Errorf("key %v already exists in Handler", newK)
	}

	e, ok := t.Handler[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Handler", oldK)
	}
	e.Name = &newK

	t.Handler[newK] = e
	delete(t.Handler, oldK)
	return nil
}

// GetOrCreateHandler retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetOrCreateHandler(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler {

	key := Name

	if v, ok := t.Handler[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHandler(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHandler got unexpected error: %v", err))
	}
	return v
}

// GetHandler retrieves the value with the specified key from
// the Handler map field of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetHandler(Name string) *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Handler[key]; ok {
		return lm
	}
	return nil
}

// DeleteHandler deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) DeleteHandler(Name string) {
	key := Name

	delete(t.Handler, key)
}

// AppendHandler appends the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler struct to the
// list Handler of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) AppendHandler(v *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Handler == nil {
		t.Handler = make(map[string]*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler)
	}

	if _, ok := t.Handler[key]; ok {
		return fmt.Errorf("duplicate key for list Handler %v", key)
	}

	t.Handler[key] = v
	return nil
}

// GetOrCreateTargetName retrieves the value of the TargetName field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetOrCreateTargetName() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName {
	if t.TargetName != nil {
		return t.TargetName
	}
	t.TargetName = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName{}
	return t.TargetName
}

// GetTargetName returns the value of the TargetName struct pointer
// from NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel. If the receiver or the field TargetName is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetTargetName() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName {
	if t != nil && t.TargetName != nil {
		return t.TargetName
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationGroup retrieves the value of the leaf DestinationGroup from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationGroup is set, it can
// safely use t.GetDestinationGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetDestinationGroup() string {
	if t == nil || t.DestinationGroup == nil {
		return ""
	}
	return *t.DestinationGroup
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TargetName.PopulateDefaults()
	for _, e := range t.Handler {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/tunnel/handler YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler struct {
	AdminState E_NokiaTypesSros_AdminState                                                   `path:"admin-state" module:"nokia-conf"`
	Name       *string                                                                       `path:"name" module:"nokia-conf"`
	Port       *int32                                                                        `path:"port" module:"nokia-conf"`
	TargetType *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType `path:"target-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) IsYANGGoStruct() {}

// GetOrCreateTargetType retrieves the value of the TargetType field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) GetOrCreateTargetType() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType {
	if t.TargetType != nil {
		return t.TargetType
	}
	t.TargetType = &NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType{}
	return t.TargetType
}

// GetTargetType returns the value of the TargetType struct pointer
// from NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler. If the receiver or the field TargetType is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) GetTargetType() *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType {
	if t != nil && t.TargetType != nil {
		return t.TargetType
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.TargetType.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/tunnel/handler/target-type YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType struct {
	CustomType *string   `path:"custom-type" module:"nokia-conf"`
	GrpcServer YANGEmpty `path:"grpc-server" module:"nokia-conf"`
	SshServer  YANGEmpty `path:"ssh-server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) IsYANGGoStruct() {
}

// GetCustomType retrieves the value of the leaf CustomType from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomType is set, it can
// safely use t.GetCustomType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) GetCustomType() string {
	if t == nil || t.CustomType == nil {
		return ""
	}
	return *t.CustomType
}

// GetGrpcServer retrieves the value of the leaf GrpcServer from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GrpcServer is set, it can
// safely use t.GetGrpcServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GrpcServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) GetGrpcServer() YANGEmpty {
	if t == nil || t.GrpcServer == false {
		return false
	}
	return t.GrpcServer
}

// GetSshServer retrieves the value of the leaf SshServer from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshServer is set, it can
// safely use t.GetSshServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) GetSshServer() YANGEmpty {
	if t == nil || t.SshServer == false {
		return false
	}
	return t.SshServer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_Handler_TargetType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName represents the /nokia-conf/configure/groups/group/system/grpc-tunnel/tunnel/target-name YANG schema element.
type NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName struct {
	CustomString *string   `path:"custom-string" module:"nokia-conf"`
	NodeName     YANGEmpty `path:"node-name" module:"nokia-conf"`
	UserAgent    YANGEmpty `path:"user-agent" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) IsYANGGoStruct() {}

// GetCustomString retrieves the value of the leaf CustomString from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CustomString is set, it can
// safely use t.GetCustomString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CustomString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) GetCustomString() string {
	if t == nil || t.CustomString == nil {
		return ""
	}
	return *t.CustomString
}

// GetNodeName retrieves the value of the leaf NodeName from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NodeName is set, it can
// safely use t.GetNodeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NodeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) GetNodeName() YANGEmpty {
	if t == nil || t.NodeName == false {
		return false
	}
	return t.NodeName
}

// GetUserAgent retrieves the value of the leaf UserAgent from the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserAgent is set, it can
// safely use t.GetUserAgent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserAgent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) GetUserAgent() YANGEmpty {
	if t == nil || t.UserAgent == false {
		return false
	}
	return t.UserAgent
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName.
func (*NokiaConf_Configure_Groups_Group_System_GrpcTunnel_Tunnel_TargetName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi represents the /nokia-conf/configure/groups/group/system/grpc/gnmi YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi struct {
	AdminState     E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AutoConfigSave *bool                       `path:"auto-config-save" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnmi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi represents the /nokia-conf/configure/groups/group/system/grpc/gnoi YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi struct {
	CertMgmt *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt `path:"cert-mgmt" module:"nokia-conf"`
	File     *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File     `path:"file" module:"nokia-conf"`
	System   *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System   `path:"system" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) IsYANGGoStruct() {}

// GetOrCreateCertMgmt retrieves the value of the CertMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetOrCreateCertMgmt() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt {
	if t.CertMgmt != nil {
		return t.CertMgmt
	}
	t.CertMgmt = &NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt{}
	return t.CertMgmt
}

// GetOrCreateFile retrieves the value of the File field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetOrCreateFile() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File {
	if t.File != nil {
		return t.File
	}
	t.File = &NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File{}
	return t.File
}

// GetOrCreateSystem retrieves the value of the System field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetOrCreateSystem() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System {
	if t.System != nil {
		return t.System
	}
	t.System = &NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System{}
	return t.System
}

// GetCertMgmt returns the value of the CertMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi. If the receiver or the field CertMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetCertMgmt() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt {
	if t != nil && t.CertMgmt != nil {
		return t.CertMgmt
	}
	return nil
}

// GetFile returns the value of the File struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi. If the receiver or the field File is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetFile() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File {
	if t != nil && t.File != nil {
		return t.File
	}
	return nil
}

// GetSystem returns the value of the System struct pointer
// from NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi. If the receiver or the field System is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) GetSystem() *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System {
	if t != nil && t.System != nil {
		return t.System
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CertMgmt.PopulateDefaults()
	t.File.PopulateDefaults()
	t.System.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt represents the /nokia-conf/configure/groups/group/system/grpc/gnoi/cert-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_CertMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File represents the /nokia-conf/configure/groups/group/system/grpc/gnoi/file YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_File) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System represents the /nokia-conf/configure/groups/group/system/grpc/gnoi/system YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_Gnoi_System) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_MdCli represents the /nokia-conf/configure/groups/group/system/grpc/md-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_MdCli struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_MdCli.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_RibApi represents the /nokia-conf/configure/groups/group/system/grpc/rib-api YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_RibApi struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	PurgeTimeout *uint32                     `path:"purge-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_RibApi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPurgeTimeout retrieves the value of the leaf PurgeTimeout from the NokiaConf_Configure_Groups_Group_System_Grpc_RibApi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PurgeTimeout is set, it can
// safely use t.GetPurgeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PurgeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) GetPurgeTimeout() uint32 {
	if t == nil || t.PurgeTimeout == nil {
		return 0
	}
	return *t.PurgeTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_RibApi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_RibApi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_RibApi.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_RibApi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive represents the /nokia-conf/configure/groups/group/system/grpc/tcp-keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IdleTime   *uint32                     `path:"idle-time" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Retries    *uint32                     `path:"retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIdleTime retrieves the value of the leaf IdleTime from the NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTime is set, it can
// safely use t.GetIdleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) GetIdleTime() uint32 {
	if t == nil || t.IdleTime == nil {
		return 600
	}
	return *t.IdleTime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 15
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IdleTime == nil {
		var v uint32 = 600
		t.IdleTime = &v
	}
	if t.Interval == nil {
		var v uint32 = 15
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive.
func (*NokiaConf_Configure_Groups_Group_System_Grpc_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ip represents the /nokia-conf/configure/groups/group/system/ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ip struct {
	AllowCpuFragmentation     *bool                                               `path:"allow-cpu-fragmentation" module:"nokia-conf"`
	AllowIcmpRedirect         *bool                                               `path:"allow-icmp-redirect" module:"nokia-conf"`
	AllowQinqNetworkInterface *bool                                               `path:"allow-qinq-network-interface" module:"nokia-conf"`
	EnforceUniqueIfIndex      *bool                                               `path:"enforce-unique-if-index" module:"nokia-conf"`
	Forward_6In4              *bool                                               `path:"forward-6in4" module:"nokia-conf"`
	ForwardIpOverGre          *bool                                               `path:"forward-ip-over-gre" module:"nokia-conf"`
	Ipv6Eh                    E_NokiaConf_Configure_Groups_Group_System_Ip_Ipv6Eh `path:"ipv6-eh" module:"nokia-conf"`
	Mpls                      *NokiaConf_Configure_Groups_Group_System_Ip_Mpls    `path:"mpls" module:"nokia-conf"`
	MplsTunnelMode            E_NokiaTypesSros_MplsTunnelMode                     `path:"mpls-tunnel-mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ip) IsYANGGoStruct() {}

// GetOrCreateMpls retrieves the value of the Mpls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetOrCreateMpls() *NokiaConf_Configure_Groups_Group_System_Ip_Mpls {
	if t.Mpls != nil {
		return t.Mpls
	}
	t.Mpls = &NokiaConf_Configure_Groups_Group_System_Ip_Mpls{}
	return t.Mpls
}

// GetMpls returns the value of the Mpls struct pointer
// from NokiaConf_Configure_Groups_Group_System_Ip. If the receiver or the field Mpls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetMpls() *NokiaConf_Configure_Groups_Group_System_Ip_Mpls {
	if t != nil && t.Mpls != nil {
		return t.Mpls
	}
	return nil
}

// GetAllowCpuFragmentation retrieves the value of the leaf AllowCpuFragmentation from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowCpuFragmentation is set, it can
// safely use t.GetAllowCpuFragmentation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowCpuFragmentation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetAllowCpuFragmentation() bool {
	if t == nil || t.AllowCpuFragmentation == nil {
		return false
	}
	return *t.AllowCpuFragmentation
}

// GetAllowIcmpRedirect retrieves the value of the leaf AllowIcmpRedirect from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIcmpRedirect is set, it can
// safely use t.GetAllowIcmpRedirect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIcmpRedirect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetAllowIcmpRedirect() bool {
	if t == nil || t.AllowIcmpRedirect == nil {
		return false
	}
	return *t.AllowIcmpRedirect
}

// GetAllowQinqNetworkInterface retrieves the value of the leaf AllowQinqNetworkInterface from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowQinqNetworkInterface is set, it can
// safely use t.GetAllowQinqNetworkInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowQinqNetworkInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetAllowQinqNetworkInterface() bool {
	if t == nil || t.AllowQinqNetworkInterface == nil {
		return false
	}
	return *t.AllowQinqNetworkInterface
}

// GetEnforceUniqueIfIndex retrieves the value of the leaf EnforceUniqueIfIndex from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EnforceUniqueIfIndex is set, it can
// safely use t.GetEnforceUniqueIfIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EnforceUniqueIfIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetEnforceUniqueIfIndex() bool {
	if t == nil || t.EnforceUniqueIfIndex == nil {
		return false
	}
	return *t.EnforceUniqueIfIndex
}

// GetForward_6In4 retrieves the value of the leaf Forward_6In4 from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Forward_6In4 is set, it can
// safely use t.GetForward_6In4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Forward_6In4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetForward_6In4() bool {
	if t == nil || t.Forward_6In4 == nil {
		return false
	}
	return *t.Forward_6In4
}

// GetForwardIpOverGre retrieves the value of the leaf ForwardIpOverGre from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForwardIpOverGre is set, it can
// safely use t.GetForwardIpOverGre() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForwardIpOverGre == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetForwardIpOverGre() bool {
	if t == nil || t.ForwardIpOverGre == nil {
		return false
	}
	return *t.ForwardIpOverGre
}

// GetIpv6Eh retrieves the value of the leaf Ipv6Eh from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Eh is set, it can
// safely use t.GetIpv6Eh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Eh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetIpv6Eh() E_NokiaConf_Configure_Groups_Group_System_Ip_Ipv6Eh {
	if t == nil || t.Ipv6Eh == 0 {
		return NokiaConf_Configure_Groups_Group_System_Ip_Ipv6Eh_max
	}
	return t.Ipv6Eh
}

// GetMplsTunnelMode retrieves the value of the leaf MplsTunnelMode from the NokiaConf_Configure_Groups_Group_System_Ip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MplsTunnelMode is set, it can
// safely use t.GetMplsTunnelMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MplsTunnelMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) GetMplsTunnelMode() E_NokiaTypesSros_MplsTunnelMode {
	if t == nil || t.MplsTunnelMode == 0 {
		return NokiaTypesSros_MplsTunnelMode_uniform
	}
	return t.MplsTunnelMode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowCpuFragmentation == nil {
		var v bool = false
		t.AllowCpuFragmentation = &v
	}
	if t.AllowIcmpRedirect == nil {
		var v bool = false
		t.AllowIcmpRedirect = &v
	}
	if t.AllowQinqNetworkInterface == nil {
		var v bool = false
		t.AllowQinqNetworkInterface = &v
	}
	if t.EnforceUniqueIfIndex == nil {
		var v bool = false
		t.EnforceUniqueIfIndex = &v
	}
	if t.Forward_6In4 == nil {
		var v bool = false
		t.Forward_6In4 = &v
	}
	if t.ForwardIpOverGre == nil {
		var v bool = false
		t.ForwardIpOverGre = &v
	}
	if t.Ipv6Eh == 0 {
		t.Ipv6Eh = NokiaConf_Configure_Groups_Group_System_Ip_Ipv6Eh_max
	}
	if t.MplsTunnelMode == 0 {
		t.MplsTunnelMode = NokiaTypesSros_MplsTunnelMode_uniform
	}
	t.Mpls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ip.
func (*NokiaConf_Configure_Groups_Group_System_Ip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ip_Mpls represents the /nokia-conf/configure/groups/group/system/ip/mpls YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ip_Mpls struct {
	LabelStackStatisticsCount *uint32 `path:"label-stack-statistics-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ip_Mpls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ip_Mpls) IsYANGGoStruct() {}

// GetLabelStackStatisticsCount retrieves the value of the leaf LabelStackStatisticsCount from the NokiaConf_Configure_Groups_Group_System_Ip_Mpls
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LabelStackStatisticsCount is set, it can
// safely use t.GetLabelStackStatisticsCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LabelStackStatisticsCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ip_Mpls) GetLabelStackStatisticsCount() uint32 {
	if t == nil || t.LabelStackStatisticsCount == nil {
		return 1
	}
	return *t.LabelStackStatisticsCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ip_Mpls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ip_Mpls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LabelStackStatisticsCount == nil {
		var v uint32 = 1
		t.LabelStackStatisticsCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ip_Mpls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ip_Mpls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ip_Mpls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ip_Mpls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ip_Mpls.
func (*NokiaConf_Configure_Groups_Group_System_Ip_Mpls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_L2Tp represents the /nokia-conf/configure/groups/group/system/l2tp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_L2Tp struct {
	NonMultiChassisTunnelIdRange *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange `path:"non-multi-chassis-tunnel-id-range" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_L2Tp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_L2Tp) IsYANGGoStruct() {}

// GetOrCreateNonMultiChassisTunnelIdRange retrieves the value of the NonMultiChassisTunnelIdRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) GetOrCreateNonMultiChassisTunnelIdRange() *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange {
	if t.NonMultiChassisTunnelIdRange != nil {
		return t.NonMultiChassisTunnelIdRange
	}
	t.NonMultiChassisTunnelIdRange = &NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange{}
	return t.NonMultiChassisTunnelIdRange
}

// GetNonMultiChassisTunnelIdRange returns the value of the NonMultiChassisTunnelIdRange struct pointer
// from NokiaConf_Configure_Groups_Group_System_L2Tp. If the receiver or the field NonMultiChassisTunnelIdRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) GetNonMultiChassisTunnelIdRange() *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange {
	if t != nil && t.NonMultiChassisTunnelIdRange != nil {
		return t.NonMultiChassisTunnelIdRange
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_L2Tp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonMultiChassisTunnelIdRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_L2Tp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_L2Tp.
func (*NokiaConf_Configure_Groups_Group_System_L2Tp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange represents the /nokia-conf/configure/groups/group/system/l2tp/non-multi-chassis-tunnel-id-range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) IsYANGGoStruct() {}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 16383
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 1
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.End == nil {
		var v uint32 = 16383
		t.End = &v
	}
	if t.Start == nil {
		var v uint32 = 1
		t.Start = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange.
func (*NokiaConf_Configure_Groups_Group_System_L2Tp_NonMultiChassisTunnelIdRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Lacp represents the /nokia-conf/configure/groups/group/system/lacp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Lacp struct {
	SystemPriority *uint32 `path:"system-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Lacp) IsYANGGoStruct() {}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the NokiaConf_Configure_Groups_Group_System_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lacp) GetSystemPriority() uint32 {
	if t == nil || t.SystemPriority == nil {
		return 32768
	}
	return *t.SystemPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SystemPriority == nil {
		var v uint32 = 32768
		t.SystemPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Lacp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Lacp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Lacp.
func (*NokiaConf_Configure_Groups_Group_System_Lacp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Lldp represents the /nokia-conf/configure/groups/group/system/lldp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Lldp struct {
	AdminState           E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MessageFastTx        *int32                      `path:"message-fast-tx" module:"nokia-conf"`
	MessageFastTxInit    *int32                      `path:"message-fast-tx-init" module:"nokia-conf"`
	NotificationInterval *int32                      `path:"notification-interval" module:"nokia-conf"`
	ReinitDelay          *int32                      `path:"reinit-delay" module:"nokia-conf"`
	TxCreditMax          *int32                      `path:"tx-credit-max" module:"nokia-conf"`
	TxHoldMultiplier     *int32                      `path:"tx-hold-multiplier" module:"nokia-conf"`
	TxInterval           *int32                      `path:"tx-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Lldp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Lldp) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMessageFastTx retrieves the value of the leaf MessageFastTx from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageFastTx is set, it can
// safely use t.GetMessageFastTx() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageFastTx == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetMessageFastTx() int32 {
	if t == nil || t.MessageFastTx == nil {
		return 1
	}
	return *t.MessageFastTx
}

// GetMessageFastTxInit retrieves the value of the leaf MessageFastTxInit from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageFastTxInit is set, it can
// safely use t.GetMessageFastTxInit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageFastTxInit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetMessageFastTxInit() int32 {
	if t == nil || t.MessageFastTxInit == nil {
		return 4
	}
	return *t.MessageFastTxInit
}

// GetNotificationInterval retrieves the value of the leaf NotificationInterval from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NotificationInterval is set, it can
// safely use t.GetNotificationInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NotificationInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetNotificationInterval() int32 {
	if t == nil || t.NotificationInterval == nil {
		return 5
	}
	return *t.NotificationInterval
}

// GetReinitDelay retrieves the value of the leaf ReinitDelay from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReinitDelay is set, it can
// safely use t.GetReinitDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReinitDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetReinitDelay() int32 {
	if t == nil || t.ReinitDelay == nil {
		return 2
	}
	return *t.ReinitDelay
}

// GetTxCreditMax retrieves the value of the leaf TxCreditMax from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxCreditMax is set, it can
// safely use t.GetTxCreditMax() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxCreditMax == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetTxCreditMax() int32 {
	if t == nil || t.TxCreditMax == nil {
		return 5
	}
	return *t.TxCreditMax
}

// GetTxHoldMultiplier retrieves the value of the leaf TxHoldMultiplier from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxHoldMultiplier is set, it can
// safely use t.GetTxHoldMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxHoldMultiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetTxHoldMultiplier() int32 {
	if t == nil || t.TxHoldMultiplier == nil {
		return 4
	}
	return *t.TxHoldMultiplier
}

// GetTxInterval retrieves the value of the leaf TxInterval from the NokiaConf_Configure_Groups_Group_System_Lldp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxInterval is set, it can
// safely use t.GetTxInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) GetTxInterval() int32 {
	if t == nil || t.TxInterval == nil {
		return 30
	}
	return *t.TxInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Lldp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.MessageFastTx == nil {
		var v int32 = 1
		t.MessageFastTx = &v
	}
	if t.MessageFastTxInit == nil {
		var v int32 = 4
		t.MessageFastTxInit = &v
	}
	if t.NotificationInterval == nil {
		var v int32 = 5
		t.NotificationInterval = &v
	}
	if t.ReinitDelay == nil {
		var v int32 = 2
		t.ReinitDelay = &v
	}
	if t.TxCreditMax == nil {
		var v int32 = 5
		t.TxCreditMax = &v
	}
	if t.TxHoldMultiplier == nil {
		var v int32 = 4
		t.TxHoldMultiplier = &v
	}
	if t.TxInterval == nil {
		var v int32 = 30
		t.TxInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Lldp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Lldp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Lldp.
func (*NokiaConf_Configure_Groups_Group_System_Lldp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoadBalancing represents the /nokia-conf/configure/groups/group/system/load-balancing YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoadBalancing struct {
	HashPolynomial        *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial    `path:"hash-polynomial" module:"nokia-conf"`
	L2TpLoadBalancing     *bool                                                                    `path:"l2tp-load-balancing" module:"nokia-conf"`
	L4LoadBalancing       *bool                                                                    `path:"l4-load-balancing" module:"nokia-conf"`
	LsrLoadBalancing      E_NokiaConf_Configure_Groups_Group_System_LoadBalancing_LsrLoadBalancing `path:"lsr-load-balancing" module:"nokia-conf"`
	McEnhLoadBalancing    *bool                                                                    `path:"mc-enh-load-balancing" module:"nokia-conf"`
	ServiceIdLagHashing   *bool                                                                    `path:"service-id-lag-hashing" module:"nokia-conf"`
	SystemIpLoadBalancing *bool                                                                    `path:"system-ip-load-balancing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoadBalancing) IsYANGGoStruct() {}

// GetOrCreateHashPolynomial retrieves the value of the HashPolynomial field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetOrCreateHashPolynomial() *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial {
	if t.HashPolynomial != nil {
		return t.HashPolynomial
	}
	t.HashPolynomial = &NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial{}
	return t.HashPolynomial
}

// GetHashPolynomial returns the value of the HashPolynomial struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoadBalancing. If the receiver or the field HashPolynomial is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetHashPolynomial() *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial {
	if t != nil && t.HashPolynomial != nil {
		return t.HashPolynomial
	}
	return nil
}

// GetL2TpLoadBalancing retrieves the value of the leaf L2TpLoadBalancing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2TpLoadBalancing is set, it can
// safely use t.GetL2TpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2TpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetL2TpLoadBalancing() bool {
	if t == nil || t.L2TpLoadBalancing == nil {
		return false
	}
	return *t.L2TpLoadBalancing
}

// GetL4LoadBalancing retrieves the value of the leaf L4LoadBalancing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L4LoadBalancing is set, it can
// safely use t.GetL4LoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L4LoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetL4LoadBalancing() bool {
	if t == nil || t.L4LoadBalancing == nil {
		return false
	}
	return *t.L4LoadBalancing
}

// GetLsrLoadBalancing retrieves the value of the leaf LsrLoadBalancing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LsrLoadBalancing is set, it can
// safely use t.GetLsrLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LsrLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetLsrLoadBalancing() E_NokiaConf_Configure_Groups_Group_System_LoadBalancing_LsrLoadBalancing {
	if t == nil || t.LsrLoadBalancing == 0 {
		return 0
	}
	return t.LsrLoadBalancing
}

// GetMcEnhLoadBalancing retrieves the value of the leaf McEnhLoadBalancing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if McEnhLoadBalancing is set, it can
// safely use t.GetMcEnhLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.McEnhLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetMcEnhLoadBalancing() bool {
	if t == nil || t.McEnhLoadBalancing == nil {
		return false
	}
	return *t.McEnhLoadBalancing
}

// GetServiceIdLagHashing retrieves the value of the leaf ServiceIdLagHashing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceIdLagHashing is set, it can
// safely use t.GetServiceIdLagHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceIdLagHashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetServiceIdLagHashing() bool {
	if t == nil || t.ServiceIdLagHashing == nil {
		return false
	}
	return *t.ServiceIdLagHashing
}

// GetSystemIpLoadBalancing retrieves the value of the leaf SystemIpLoadBalancing from the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemIpLoadBalancing is set, it can
// safely use t.GetSystemIpLoadBalancing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemIpLoadBalancing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) GetSystemIpLoadBalancing() bool {
	if t == nil || t.SystemIpLoadBalancing == nil {
		return false
	}
	return *t.SystemIpLoadBalancing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.L2TpLoadBalancing == nil {
		var v bool = false
		t.L2TpLoadBalancing = &v
	}
	if t.McEnhLoadBalancing == nil {
		var v bool = false
		t.McEnhLoadBalancing = &v
	}
	if t.ServiceIdLagHashing == nil {
		var v bool = false
		t.ServiceIdLagHashing = &v
	}
	t.HashPolynomial.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoadBalancing.
func (*NokiaConf_Configure_Groups_Group_System_LoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial represents the /nokia-conf/configure/groups/group/system/load-balancing/hash-polynomial YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial struct {
	Ecmp E_NokiaTypesSystem_HashPolynomialType `path:"ecmp" module:"nokia-conf"`
	Lag  E_NokiaTypesSystem_HashPolynomialType `path:"lag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) IsYANGGoStruct() {}

// GetEcmp retrieves the value of the leaf Ecmp from the NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ecmp is set, it can
// safely use t.GetEcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ecmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) GetEcmp() E_NokiaTypesSystem_HashPolynomialType {
	if t == nil || t.Ecmp == 0 {
		return NokiaTypesSystem_HashPolynomialType_poly1
	}
	return t.Ecmp
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) GetLag() E_NokiaTypesSystem_HashPolynomialType {
	if t == nil || t.Lag == 0 {
		return NokiaTypesSystem_HashPolynomialType_poly2
	}
	return t.Lag
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ecmp == 0 {
		t.Ecmp = NokiaTypesSystem_HashPolynomialType_poly1
	}
	if t.Lag == 0 {
		t.Lag = NokiaTypesSystem_HashPolynomialType_poly2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial.
func (*NokiaConf_Configure_Groups_Group_System_LoadBalancing_HashPolynomial) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl represents the /nokia-conf/configure/groups/group/system/login-control YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl struct {
	ExponentialBackoff *bool                                                                  `path:"exponential-backoff" module:"nokia-conf"`
	Ftp                *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp              `path:"ftp" module:"nokia-conf"`
	IdleTimeout        NokiaConf_Configure_Groups_Group_System_LoginControl_IdleTimeout_Union `path:"idle-timeout" module:"nokia-conf"`
	LoginBanner        *bool                                                                  `path:"login-banner" module:"nokia-conf"`
	LoginScripts       *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts     `path:"login-scripts" module:"nokia-conf"`
	Motd               *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd             `path:"motd" module:"nokia-conf"`
	PreLoginMessage    *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage  `path:"pre-login-message" module:"nokia-conf"`
	Ssh                *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh              `path:"ssh" module:"nokia-conf"`
	Telnet             *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet           `path:"telnet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl) IsYANGGoStruct() {}

// GetOrCreateFtp retrieves the value of the Ftp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreateFtp() *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp {
	if t.Ftp != nil {
		return t.Ftp
	}
	t.Ftp = &NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp{}
	return t.Ftp
}

// GetOrCreateLoginScripts retrieves the value of the LoginScripts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreateLoginScripts() *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts {
	if t.LoginScripts != nil {
		return t.LoginScripts
	}
	t.LoginScripts = &NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts{}
	return t.LoginScripts
}

// GetOrCreateMotd retrieves the value of the Motd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreateMotd() *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd {
	if t.Motd != nil {
		return t.Motd
	}
	t.Motd = &NokiaConf_Configure_Groups_Group_System_LoginControl_Motd{}
	return t.Motd
}

// GetOrCreatePreLoginMessage retrieves the value of the PreLoginMessage field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreatePreLoginMessage() *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage {
	if t.PreLoginMessage != nil {
		return t.PreLoginMessage
	}
	t.PreLoginMessage = &NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage{}
	return t.PreLoginMessage
}

// GetOrCreateSsh retrieves the value of the Ssh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreateSsh() *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh {
	if t.Ssh != nil {
		return t.Ssh
	}
	t.Ssh = &NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh{}
	return t.Ssh
}

// GetOrCreateTelnet retrieves the value of the Telnet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetOrCreateTelnet() *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet {
	if t.Telnet != nil {
		return t.Telnet
	}
	t.Telnet = &NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet{}
	return t.Telnet
}

// GetFtp returns the value of the Ftp struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field Ftp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetFtp() *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp {
	if t != nil && t.Ftp != nil {
		return t.Ftp
	}
	return nil
}

// GetLoginScripts returns the value of the LoginScripts struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field LoginScripts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetLoginScripts() *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts {
	if t != nil && t.LoginScripts != nil {
		return t.LoginScripts
	}
	return nil
}

// GetMotd returns the value of the Motd struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field Motd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetMotd() *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd {
	if t != nil && t.Motd != nil {
		return t.Motd
	}
	return nil
}

// GetPreLoginMessage returns the value of the PreLoginMessage struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field PreLoginMessage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetPreLoginMessage() *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage {
	if t != nil && t.PreLoginMessage != nil {
		return t.PreLoginMessage
	}
	return nil
}

// GetSsh returns the value of the Ssh struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field Ssh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetSsh() *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh {
	if t != nil && t.Ssh != nil {
		return t.Ssh
	}
	return nil
}

// GetTelnet returns the value of the Telnet struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl. If the receiver or the field Telnet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetTelnet() *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet {
	if t != nil && t.Telnet != nil {
		return t.Telnet
	}
	return nil
}

// GetExponentialBackoff retrieves the value of the leaf ExponentialBackoff from the NokiaConf_Configure_Groups_Group_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExponentialBackoff is set, it can
// safely use t.GetExponentialBackoff() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExponentialBackoff == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetExponentialBackoff() bool {
	if t == nil || t.ExponentialBackoff == nil {
		return false
	}
	return *t.ExponentialBackoff
}

// GetIdleTimeout retrieves the value of the leaf IdleTimeout from the NokiaConf_Configure_Groups_Group_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTimeout is set, it can
// safely use t.GetIdleTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetIdleTimeout() NokiaConf_Configure_Groups_Group_System_LoginControl_IdleTimeout_Union {
	if t == nil || t.IdleTimeout == nil {
		return UnionInt64(30)
	}
	return t.IdleTimeout
}

// GetLoginBanner retrieves the value of the leaf LoginBanner from the NokiaConf_Configure_Groups_Group_System_LoginControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginBanner is set, it can
// safely use t.GetLoginBanner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginBanner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) GetLoginBanner() bool {
	if t == nil || t.LoginBanner == nil {
		return false
	}
	return *t.LoginBanner
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExponentialBackoff == nil {
		var v bool = false
		t.ExponentialBackoff = &v
	}
	if t.IdleTimeout == nil {
		t.IdleTimeout = UnionInt64(30)
	}
	if t.LoginBanner == nil {
		var v bool = false
		t.LoginBanner = &v
	}
	t.Ftp.PopulateDefaults()
	t.LoginScripts.PopulateDefaults()
	t.Motd.PopulateDefaults()
	t.PreLoginMessage.PopulateDefaults()
	t.Ssh.PopulateDefaults()
	t.Telnet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp represents the /nokia-conf/configure/groups/group/system/login-control/ftp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp struct {
	InboundMaxSessions *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) IsYANGGoStruct() {}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 3
	}
	return *t.InboundMaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InboundMaxSessions == nil {
		var v uint32 = 3
		t.InboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Ftp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts represents the /nokia-conf/configure/groups/group/system/login-control/login-scripts YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts struct {
	GlobalScript  *string                                                                          `path:"global-script" module:"nokia-conf"`
	PerUserScript *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript `path:"per-user-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) IsYANGGoStruct() {}

// GetOrCreatePerUserScript retrieves the value of the PerUserScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) GetOrCreatePerUserScript() *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript {
	if t.PerUserScript != nil {
		return t.PerUserScript
	}
	t.PerUserScript = &NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript{}
	return t.PerUserScript
}

// GetPerUserScript returns the value of the PerUserScript struct pointer
// from NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts. If the receiver or the field PerUserScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) GetPerUserScript() *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript {
	if t != nil && t.PerUserScript != nil {
		return t.PerUserScript
	}
	return nil
}

// GetGlobalScript retrieves the value of the leaf GlobalScript from the NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GlobalScript is set, it can
// safely use t.GetGlobalScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GlobalScript == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) GetGlobalScript() string {
	if t == nil || t.GlobalScript == nil {
		return ""
	}
	return *t.GlobalScript
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PerUserScript.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript represents the /nokia-conf/configure/groups/group/system/login-control/login-scripts/per-user-script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript struct {
	FileName      *string `path:"file-name" module:"nokia-conf"`
	UserDirectory *string `path:"user-directory" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) IsYANGGoStruct() {
}

// GetFileName retrieves the value of the leaf FileName from the NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FileName is set, it can
// safely use t.GetFileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) GetFileName() string {
	if t == nil || t.FileName == nil {
		return ""
	}
	return *t.FileName
}

// GetUserDirectory retrieves the value of the leaf UserDirectory from the NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserDirectory is set, it can
// safely use t.GetUserDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) GetUserDirectory() string {
	if t == nil || t.UserDirectory == nil {
		return ""
	}
	return *t.UserDirectory
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_LoginScripts_PerUserScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_Motd represents the /nokia-conf/configure/groups/group/system/login-control/motd YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_Motd struct {
	Text *string `path:"text" module:"nokia-conf"`
	Url  *string `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_Motd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) IsYANGGoStruct() {}

// GetText retrieves the value of the leaf Text from the NokiaConf_Configure_Groups_Group_System_LoginControl_Motd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Text is set, it can
// safely use t.GetText() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Text == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) GetText() string {
	if t == nil || t.Text == nil {
		return ""
	}
	return *t.Text
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_System_LoginControl_Motd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_Motd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_Motd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_Motd.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Motd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage represents the /nokia-conf/configure/groups/group/system/login-control/pre-login-message YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage struct {
	Message *string `path:"message" module:"nokia-conf"`
	Name    *bool   `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) IsYANGGoStruct() {}

// GetMessage retrieves the value of the leaf Message from the NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Message is set, it can
// safely use t.GetMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Message == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) GetMessage() string {
	if t == nil || t.Message == nil {
		return ""
	}
	return *t.Message
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) GetName() bool {
	if t == nil || t.Name == nil {
		return false
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v bool = false
		t.Name = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_PreLoginMessage) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh represents the /nokia-conf/configure/groups/group/system/login-control/ssh YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh struct {
	GracefulShutdown    *bool   `path:"graceful-shutdown" module:"nokia-conf"`
	InboundMaxSessions  *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
	OutboundMaxSessions *uint32 `path:"outbound-max-sessions" module:"nokia-conf"`
	TtlSecurity         *uint32 `path:"ttl-security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) IsYANGGoStruct() {}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return true
	}
	return *t.GracefulShutdown
}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 5
	}
	return *t.InboundMaxSessions
}

// GetOutboundMaxSessions retrieves the value of the leaf OutboundMaxSessions from the NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutboundMaxSessions is set, it can
// safely use t.GetOutboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) GetOutboundMaxSessions() uint32 {
	if t == nil || t.OutboundMaxSessions == nil {
		return 5
	}
	return *t.OutboundMaxSessions
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GracefulShutdown == nil {
		var v bool = true
		t.GracefulShutdown = &v
	}
	if t.InboundMaxSessions == nil {
		var v uint32 = 5
		t.InboundMaxSessions = &v
	}
	if t.OutboundMaxSessions == nil {
		var v uint32 = 5
		t.OutboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Ssh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet represents the /nokia-conf/configure/groups/group/system/login-control/telnet YANG schema element.
type NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet struct {
	GracefulShutdown    *bool   `path:"graceful-shutdown" module:"nokia-conf"`
	InboundMaxSessions  *uint32 `path:"inbound-max-sessions" module:"nokia-conf"`
	OutboundMaxSessions *uint32 `path:"outbound-max-sessions" module:"nokia-conf"`
	TtlSecurity         *uint32 `path:"ttl-security" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) IsYANGGoStruct() {}

// GetGracefulShutdown retrieves the value of the leaf GracefulShutdown from the NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GracefulShutdown is set, it can
// safely use t.GetGracefulShutdown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GracefulShutdown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) GetGracefulShutdown() bool {
	if t == nil || t.GracefulShutdown == nil {
		return false
	}
	return *t.GracefulShutdown
}

// GetInboundMaxSessions retrieves the value of the leaf InboundMaxSessions from the NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InboundMaxSessions is set, it can
// safely use t.GetInboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) GetInboundMaxSessions() uint32 {
	if t == nil || t.InboundMaxSessions == nil {
		return 5
	}
	return *t.InboundMaxSessions
}

// GetOutboundMaxSessions retrieves the value of the leaf OutboundMaxSessions from the NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OutboundMaxSessions is set, it can
// safely use t.GetOutboundMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OutboundMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) GetOutboundMaxSessions() uint32 {
	if t == nil || t.OutboundMaxSessions == nil {
		return 5
	}
	return *t.OutboundMaxSessions
}

// GetTtlSecurity retrieves the value of the leaf TtlSecurity from the NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TtlSecurity is set, it can
// safely use t.GetTtlSecurity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TtlSecurity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) GetTtlSecurity() uint32 {
	if t == nil || t.TtlSecurity == nil {
		return 0
	}
	return *t.TtlSecurity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GracefulShutdown == nil {
		var v bool = false
		t.GracefulShutdown = &v
	}
	if t.InboundMaxSessions == nil {
		var v uint32 = 5
		t.InboundMaxSessions = &v
	}
	if t.OutboundMaxSessions == nil {
		var v uint32 = 5
		t.OutboundMaxSessions = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet.
func (*NokiaConf_Configure_Groups_Group_System_LoginControl_Telnet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface represents the /nokia-conf/configure/groups/group/system/management-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface struct {
	Cli               *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli                `path:"cli" module:"nokia-conf" yangPresence:"true"`
	CommitHistory     *uint32                                                                         `path:"commit-history" module:"nokia-conf"`
	ConfigurationMode E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationMode `path:"configuration-mode" module:"nokia-conf"`
	ConfigurationSave *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave  `path:"configuration-save" module:"nokia-conf" yangPresence:"true"`
	Netconf           *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf            `path:"netconf" module:"nokia-conf" yangPresence:"true"`
	Operations        *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations         `path:"operations" module:"nokia-conf" yangPresence:"true"`
	RemoteManagement  *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement   `path:"remote-management" module:"nokia-conf" yangPresence:"true"`
	SchemaPath        *string                                                                         `path:"schema-path" module:"nokia-conf"`
	Snmp              *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp               `path:"snmp" module:"nokia-conf" yangPresence:"true"`
	YangModules       *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules        `path:"yang-modules" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface) IsYANGGoStruct() {}

// GetOrCreateCli retrieves the value of the Cli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli {
	if t.Cli != nil {
		return t.Cli
	}
	t.Cli = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli{}
	return t.Cli
}

// GetOrCreateConfigurationSave retrieves the value of the ConfigurationSave field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateConfigurationSave() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave {
	if t.ConfigurationSave != nil {
		return t.ConfigurationSave
	}
	t.ConfigurationSave = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave{}
	return t.ConfigurationSave
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateNetconf() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf{}
	return t.Netconf
}

// GetOrCreateOperations retrieves the value of the Operations field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateOperations() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations {
	if t.Operations != nil {
		return t.Operations
	}
	t.Operations = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations{}
	return t.Operations
}

// GetOrCreateRemoteManagement retrieves the value of the RemoteManagement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateRemoteManagement() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement {
	if t.RemoteManagement != nil {
		return t.RemoteManagement
	}
	t.RemoteManagement = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement{}
	return t.RemoteManagement
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateSnmp() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp{}
	return t.Snmp
}

// GetOrCreateYangModules retrieves the value of the YangModules field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOrCreateYangModules() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules {
	if t.YangModules != nil {
		return t.YangModules
	}
	t.YangModules = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules{}
	return t.YangModules
}

// GetCli returns the value of the Cli struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field Cli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli {
	if t != nil && t.Cli != nil {
		return t.Cli
	}
	return nil
}

// GetConfigurationSave returns the value of the ConfigurationSave struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field ConfigurationSave is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetConfigurationSave() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave {
	if t != nil && t.ConfigurationSave != nil {
		return t.ConfigurationSave
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetNetconf() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetOperations returns the value of the Operations struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field Operations is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetOperations() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations {
	if t != nil && t.Operations != nil {
		return t.Operations
	}
	return nil
}

// GetRemoteManagement returns the value of the RemoteManagement struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field RemoteManagement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetRemoteManagement() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement {
	if t != nil && t.RemoteManagement != nil {
		return t.RemoteManagement
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetSnmp() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetYangModules returns the value of the YangModules struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface. If the receiver or the field YangModules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetYangModules() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules {
	if t != nil && t.YangModules != nil {
		return t.YangModules
	}
	return nil
}

// GetCommitHistory retrieves the value of the leaf CommitHistory from the NokiaConf_Configure_Groups_Group_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommitHistory is set, it can
// safely use t.GetCommitHistory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommitHistory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetCommitHistory() uint32 {
	if t == nil || t.CommitHistory == nil {
		return 50
	}
	return *t.CommitHistory
}

// GetConfigurationMode retrieves the value of the leaf ConfigurationMode from the NokiaConf_Configure_Groups_Group_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfigurationMode is set, it can
// safely use t.GetConfigurationMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfigurationMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetConfigurationMode() E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationMode {
	if t == nil || t.ConfigurationMode == 0 {
		return NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationMode_classic
	}
	return t.ConfigurationMode
}

// GetSchemaPath retrieves the value of the leaf SchemaPath from the NokiaConf_Configure_Groups_Group_System_ManagementInterface
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SchemaPath is set, it can
// safely use t.GetSchemaPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SchemaPath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) GetSchemaPath() string {
	if t == nil || t.SchemaPath == nil {
		return ""
	}
	return *t.SchemaPath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CommitHistory == nil {
		var v uint32 = 50
		t.CommitHistory = &v
	}
	if t.ConfigurationMode == 0 {
		t.ConfigurationMode = NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationMode_classic
	}
	t.Cli.PopulateDefaults()
	t.ConfigurationSave.PopulateDefaults()
	t.Netconf.PopulateDefaults()
	t.Operations.PopulateDefaults()
	t.RemoteManagement.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.YangModules.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli represents the /nokia-conf/configure/groups/group/system/management-interface/cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli struct {
	ClassicCli *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli `path:"classic-cli" module:"nokia-conf"`
	CliEngine  []E_NokiaTypesSystem_CliEngineType                                          `path:"cli-engine" module:"nokia-conf"`
	MdCli      *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli      `path:"md-cli" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) IsYANGGoStruct() {}

// GetOrCreateClassicCli retrieves the value of the ClassicCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) GetOrCreateClassicCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli {
	if t.ClassicCli != nil {
		return t.ClassicCli
	}
	t.ClassicCli = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli{}
	return t.ClassicCli
}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) GetOrCreateMdCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli{}
	return t.MdCli
}

// GetClassicCli returns the value of the ClassicCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli. If the receiver or the field ClassicCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) GetClassicCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli {
	if t != nil && t.ClassicCli != nil {
		return t.ClassicCli
	}
	return nil
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) GetMdCli() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetCliEngine retrieves the value of the leaf CliEngine from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliEngine is set, it can
// safely use t.GetCliEngine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliEngine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) GetCliEngine() []E_NokiaTypesSystem_CliEngineType {
	if t == nil || t.CliEngine == nil {
		return []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	return t.CliEngine
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CliEngine == nil {
		t.CliEngine = []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	t.ClassicCli.PopulateDefaults()
	t.MdCli.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli represents the /nokia-conf/configure/groups/group/system/management-interface/cli/classic-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli struct {
	AllowImmediate *bool                                                                                `path:"allow-immediate" module:"nokia-conf"`
	Rollback       *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback `path:"rollback" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) IsYANGGoStruct() {}

// GetOrCreateRollback retrieves the value of the Rollback field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) GetOrCreateRollback() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback {
	if t.Rollback != nil {
		return t.Rollback
	}
	t.Rollback = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback{}
	return t.Rollback
}

// GetRollback returns the value of the Rollback struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli. If the receiver or the field Rollback is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) GetRollback() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback {
	if t != nil && t.Rollback != nil {
		return t.Rollback
	}
	return nil
}

// GetAllowImmediate retrieves the value of the leaf AllowImmediate from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowImmediate is set, it can
// safely use t.GetAllowImmediate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowImmediate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) GetAllowImmediate() bool {
	if t == nil || t.AllowImmediate == nil {
		return true
	}
	return *t.AllowImmediate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowImmediate == nil {
		var v bool = true
		t.AllowImmediate = &v
	}
	t.Rollback.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback represents the /nokia-conf/configure/groups/group/system/management-interface/cli/classic-cli/rollback YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback struct {
	LocalCheckpoints  *uint32                                                                                     `path:"local-checkpoints" module:"nokia-conf"`
	Location          *string                                                                                     `path:"location" module:"nokia-conf"`
	RemoteCheckpoints *uint32                                                                                     `path:"remote-checkpoints" module:"nokia-conf"`
	Rescue            *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue `path:"rescue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) IsYANGGoStruct() {
}

// GetOrCreateRescue retrieves the value of the Rescue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) GetOrCreateRescue() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue {
	if t.Rescue != nil {
		return t.Rescue
	}
	t.Rescue = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue{}
	return t.Rescue
}

// GetRescue returns the value of the Rescue struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback. If the receiver or the field Rescue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) GetRescue() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue {
	if t != nil && t.Rescue != nil {
		return t.Rescue
	}
	return nil
}

// GetLocalCheckpoints retrieves the value of the leaf LocalCheckpoints from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalCheckpoints is set, it can
// safely use t.GetLocalCheckpoints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalCheckpoints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) GetLocalCheckpoints() uint32 {
	if t == nil || t.LocalCheckpoints == nil {
		return 10
	}
	return *t.LocalCheckpoints
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetRemoteCheckpoints retrieves the value of the leaf RemoteCheckpoints from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteCheckpoints is set, it can
// safely use t.GetRemoteCheckpoints() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteCheckpoints == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) GetRemoteCheckpoints() uint32 {
	if t == nil || t.RemoteCheckpoints == nil {
		return 10
	}
	return *t.RemoteCheckpoints
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LocalCheckpoints == nil {
		var v uint32 = 10
		t.LocalCheckpoints = &v
	}
	if t.RemoteCheckpoints == nil {
		var v uint32 = 10
		t.RemoteCheckpoints = &v
	}
	t.Rescue.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue represents the /nokia-conf/configure/groups/group/system/management-interface/cli/classic-cli/rollback/rescue YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue struct {
	Location *string `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) IsYANGGoStruct() {
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_ClassicCli_Rollback_Rescue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli struct {
	AutoConfigSave              *bool                                                                              `path:"auto-config-save" module:"nokia-conf"`
	CommandAccountingDuringLoad *bool                                                                              `path:"command-accounting-during-load" module:"nokia-conf"`
	Environment                 *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment `path:"environment" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) IsYANGGoStruct() {}

// GetOrCreateEnvironment retrieves the value of the Environment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) GetOrCreateEnvironment() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment {
	if t.Environment != nil {
		return t.Environment
	}
	t.Environment = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment{}
	return t.Environment
}

// GetEnvironment returns the value of the Environment struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli. If the receiver or the field Environment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) GetEnvironment() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment {
	if t != nil && t.Environment != nil {
		return t.Environment
	}
	return nil
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// GetCommandAccountingDuringLoad retrieves the value of the leaf CommandAccountingDuringLoad from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommandAccountingDuringLoad is set, it can
// safely use t.GetCommandAccountingDuringLoad() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommandAccountingDuringLoad == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) GetCommandAccountingDuringLoad() bool {
	if t == nil || t.CommandAccountingDuringLoad == nil {
		return true
	}
	return *t.CommandAccountingDuringLoad
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
	if t.CommandAccountingDuringLoad == nil {
		var v bool = true
		t.CommandAccountingDuringLoad = &v
	}
	t.Environment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment struct {
	CommandAlias         *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias         `path:"command-alias" module:"nokia-conf"`
	CommandCompletion    *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion    `path:"command-completion" module:"nokia-conf"`
	Console              *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console              `path:"console" module:"nokia-conf"`
	InfoOutput           *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput           `path:"info-output" module:"nokia-conf"`
	MessageSeverityLevel *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel `path:"message-severity-level" module:"nokia-conf"`
	More                 *bool                                                                                                   `path:"more" module:"nokia-conf"`
	ProgressIndicator    *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator    `path:"progress-indicator" module:"nokia-conf"`
	Prompt               *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt               `path:"prompt" module:"nokia-conf"`
	Python               *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python               `path:"python" module:"nokia-conf"`
	TimeDisplay          E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay         `path:"time-display" module:"nokia-conf"`
	TimeFormat           E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat          `path:"time-format" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) IsYANGGoStruct() {
}

// GetOrCreateCommandAlias retrieves the value of the CommandAlias field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateCommandAlias() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias {
	if t.CommandAlias != nil {
		return t.CommandAlias
	}
	t.CommandAlias = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias{}
	return t.CommandAlias
}

// GetOrCreateCommandCompletion retrieves the value of the CommandCompletion field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateCommandCompletion() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion {
	if t.CommandCompletion != nil {
		return t.CommandCompletion
	}
	t.CommandCompletion = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion{}
	return t.CommandCompletion
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateConsole() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console{}
	return t.Console
}

// GetOrCreateInfoOutput retrieves the value of the InfoOutput field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateInfoOutput() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput {
	if t.InfoOutput != nil {
		return t.InfoOutput
	}
	t.InfoOutput = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput{}
	return t.InfoOutput
}

// GetOrCreateMessageSeverityLevel retrieves the value of the MessageSeverityLevel field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateMessageSeverityLevel() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel {
	if t.MessageSeverityLevel != nil {
		return t.MessageSeverityLevel
	}
	t.MessageSeverityLevel = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel{}
	return t.MessageSeverityLevel
}

// GetOrCreateProgressIndicator retrieves the value of the ProgressIndicator field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreateProgressIndicator() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator {
	if t.ProgressIndicator != nil {
		return t.ProgressIndicator
	}
	t.ProgressIndicator = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator{}
	return t.ProgressIndicator
}

// GetOrCreatePrompt retrieves the value of the Prompt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreatePrompt() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt {
	if t.Prompt != nil {
		return t.Prompt
	}
	t.Prompt = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt{}
	return t.Prompt
}

// GetOrCreatePython retrieves the value of the Python field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetOrCreatePython() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python {
	if t.Python != nil {
		return t.Python
	}
	t.Python = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python{}
	return t.Python
}

// GetCommandAlias returns the value of the CommandAlias struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field CommandAlias is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetCommandAlias() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias {
	if t != nil && t.CommandAlias != nil {
		return t.CommandAlias
	}
	return nil
}

// GetCommandCompletion returns the value of the CommandCompletion struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field CommandCompletion is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetCommandCompletion() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion {
	if t != nil && t.CommandCompletion != nil {
		return t.CommandCompletion
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetConsole() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetInfoOutput returns the value of the InfoOutput struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field InfoOutput is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetInfoOutput() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput {
	if t != nil && t.InfoOutput != nil {
		return t.InfoOutput
	}
	return nil
}

// GetMessageSeverityLevel returns the value of the MessageSeverityLevel struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field MessageSeverityLevel is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetMessageSeverityLevel() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel {
	if t != nil && t.MessageSeverityLevel != nil {
		return t.MessageSeverityLevel
	}
	return nil
}

// GetProgressIndicator returns the value of the ProgressIndicator struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field ProgressIndicator is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetProgressIndicator() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator {
	if t != nil && t.ProgressIndicator != nil {
		return t.ProgressIndicator
	}
	return nil
}

// GetPrompt returns the value of the Prompt struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Prompt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetPrompt() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt {
	if t != nil && t.Prompt != nil {
		return t.Prompt
	}
	return nil
}

// GetPython returns the value of the Python struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment. If the receiver or the field Python is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetPython() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python {
	if t != nil && t.Python != nil {
		return t.Python
	}
	return nil
}

// GetMore retrieves the value of the leaf More from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if More is set, it can
// safely use t.GetMore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.More == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetMore() bool {
	if t == nil || t.More == nil {
		return true
	}
	return *t.More
}

// GetTimeDisplay retrieves the value of the leaf TimeDisplay from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeDisplay is set, it can
// safely use t.GetTimeDisplay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeDisplay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetTimeDisplay() E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay {
	if t == nil || t.TimeDisplay == 0 {
		return NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay_local
	}
	return t.TimeDisplay
}

// GetTimeFormat retrieves the value of the leaf TimeFormat from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimeFormat is set, it can
// safely use t.GetTimeFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimeFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) GetTimeFormat() E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat {
	if t == nil || t.TimeFormat == 0 {
		return NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat_rfc_3339
	}
	return t.TimeFormat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.More == nil {
		var v bool = true
		t.More = &v
	}
	if t.TimeDisplay == 0 {
		t.TimeDisplay = NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeDisplay_local
	}
	if t.TimeFormat == 0 {
		t.TimeFormat = NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_TimeFormat_rfc_3339
	}
	t.CommandAlias.PopulateDefaults()
	t.CommandCompletion.PopulateDefaults()
	t.Console.PopulateDefaults()
	t.InfoOutput.PopulateDefaults()
	t.MessageSeverityLevel.PopulateDefaults()
	t.ProgressIndicator.PopulateDefaults()
	t.Prompt.PopulateDefaults()
	t.Python.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/command-alias YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct {
	Alias map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias `path:"alias" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) IsYANGGoStruct() {
}

// NewAlias creates a new entry in the Alias list of the
// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) NewAlias(AliasName string) (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alias == nil {
		t.Alias = make(map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias)
	}

	key := AliasName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alias[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alias", key)
	}

	t.Alias[key] = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias{
		AliasName: &AliasName,
	}

	return t.Alias[key], nil
}

// RenameAlias renames an entry in the list Alias within
// the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) RenameAlias(oldK, newK string) error {
	if _, ok := t.Alias[newK]; ok {
		return fmt.Errorf("key %v already exists in Alias", newK)
	}

	e, ok := t.Alias[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alias", oldK)
	}
	e.AliasName = &newK

	t.Alias[newK] = e
	delete(t.Alias, oldK)
	return nil
}

// GetOrCreateAlias retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) GetOrCreateAlias(AliasName string) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias {

	key := AliasName

	if v, ok := t.Alias[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlias(AliasName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlias got unexpected error: %v", err))
	}
	return v
}

// GetAlias retrieves the value with the specified key from
// the Alias map field of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) GetAlias(AliasName string) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias {

	if t == nil {
		return nil
	}

	key := AliasName

	if lm, ok := t.Alias[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlias deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) DeleteAlias(AliasName string) {
	key := AliasName

	delete(t.Alias, key)
}

// AppendAlias appends the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct to the
// list Alias of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) AppendAlias(v *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) error {
	if v.AliasName == nil {
		return fmt.Errorf("invalid nil key received for AliasName")
	}

	key := *v.AliasName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alias == nil {
		t.Alias = make(map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias)
	}

	if _, ok := t.Alias[key]; ok {
		return fmt.Errorf("duplicate key for list Alias %v", key)
	}

	t.Alias[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Alias {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/command-alias/alias YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct {
	AdminState   E_NokiaTypesSros_AdminState                                                                                                                                                                                                                     `path:"admin-state" module:"nokia-conf"`
	AliasName    *string                                                                                                                                                                                                                                         `path:"alias-name" module:"nokia-conf"`
	CliCommand   *string                                                                                                                                                                                                                                         `path:"cli-command" module:"nokia-conf"`
	Description  *string                                                                                                                                                                                                                                         `path:"description" module:"nokia-conf"`
	MountPoint   map[NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint `path:"mount-point" module:"nokia-conf"`
	PythonScript *string                                                                                                                                                                                                                                         `path:"python-script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) IsYANGGoStruct() {
}

// NewMountPoint creates a new entry in the MountPoint list of the
// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) NewMountPoint(Path NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint)
	}

	key := Path

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MountPoint[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MountPoint", key)
	}

	t.MountPoint[key] = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint{
		Path: Path,
	}

	return t.MountPoint[key], nil
}

// RenameMountPoint renames an entry in the list MountPoint within
// the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) RenameMountPoint(oldK, newK NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) error {
	if _, ok := t.MountPoint[newK]; ok {
		return fmt.Errorf("key %v already exists in MountPoint", newK)
	}

	e, ok := t.MountPoint[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MountPoint", oldK)
	}
	e.Path = newK

	t.MountPoint[newK] = e
	delete(t.MountPoint, oldK)
	return nil
}

// GetOrCreateMountPoint retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetOrCreateMountPoint(Path NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint {

	key := Path

	if v, ok := t.MountPoint[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMountPoint(Path)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMountPoint got unexpected error: %v", err))
	}
	return v
}

// GetMountPoint retrieves the value with the specified key from
// the MountPoint map field of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetMountPoint(Path NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint {

	if t == nil {
		return nil
	}

	key := Path

	if lm, ok := t.MountPoint[key]; ok {
		return lm
	}
	return nil
}

// DeleteMountPoint deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) DeleteMountPoint(Path NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union) {
	key := Path

	delete(t.MountPoint, key)
}

// AppendMountPoint appends the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct to the
// list MountPoint of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) AppendMountPoint(v *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) error {
	key := v.Path

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MountPoint == nil {
		t.MountPoint = make(map[NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint)
	}

	if _, ok := t.MountPoint[key]; ok {
		return fmt.Errorf("duplicate key for list MountPoint %v", key)
	}

	t.MountPoint[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAliasName retrieves the value of the leaf AliasName from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AliasName is set, it can
// safely use t.GetAliasName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AliasName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetAliasName() string {
	if t == nil || t.AliasName == nil {
		return ""
	}
	return *t.AliasName
}

// GetCliCommand retrieves the value of the leaf CliCommand from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliCommand is set, it can
// safely use t.GetCliCommand() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliCommand == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetCliCommand() string {
	if t == nil || t.CliCommand == nil {
		return ""
	}
	return *t.CliCommand
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPythonScript retrieves the value of the leaf PythonScript from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonScript is set, it can
// safely use t.GetPythonScript() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonScript == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) GetPythonScript() string {
	if t == nil || t.PythonScript == nil {
		return ""
	}
	return *t.PythonScript
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.MountPoint {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AliasName == nil {
		return nil, fmt.Errorf("nil value for key AliasName")
	}

	return map[string]interface{}{
		"alias-name": *t.AliasName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/command-alias/alias/mount-point YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct {
	Path NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) IsYANGGoStruct() {
}

// GetPath retrieves the value of the leaf Path from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Path is set, it can
// safely use t.GetPath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Path == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) GetPath() NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint_Path_Union {
	if t == nil || t.Path == nil {
		return nil
	}
	return t.Path
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"path": t.Path,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandAlias_Alias_MountPoint) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/command-completion YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion struct {
	Enter *bool `path:"enter" module:"nokia-conf"`
	Space *bool `path:"space" module:"nokia-conf"`
	Tab   *bool `path:"tab" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) IsYANGGoStruct() {
}

// GetEnter retrieves the value of the leaf Enter from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Enter is set, it can
// safely use t.GetEnter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Enter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetEnter() bool {
	if t == nil || t.Enter == nil {
		return true
	}
	return *t.Enter
}

// GetSpace retrieves the value of the leaf Space from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Space is set, it can
// safely use t.GetSpace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Space == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetSpace() bool {
	if t == nil || t.Space == nil {
		return true
	}
	return *t.Space
}

// GetTab retrieves the value of the leaf Tab from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tab is set, it can
// safely use t.GetTab() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tab == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) GetTab() bool {
	if t == nil || t.Tab == nil {
		return true
	}
	return *t.Tab
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Enter == nil {
		var v bool = true
		t.Enter = &v
	}
	if t.Space == nil {
		var v bool = true
		t.Space = &v
	}
	if t.Tab == nil {
		var v bool = true
		t.Tab = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_CommandCompletion) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/console YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console struct {
	Length *uint32 `path:"length" module:"nokia-conf"`
	Width  *uint32 `path:"width" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) IsYANGGoStruct() {
}

// GetLength retrieves the value of the leaf Length from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Length is set, it can
// safely use t.GetLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Length == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) GetLength() uint32 {
	if t == nil || t.Length == nil {
		return 24
	}
	return *t.Length
}

// GetWidth retrieves the value of the leaf Width from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Width is set, it can
// safely use t.GetWidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Width == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) GetWidth() uint32 {
	if t == nil || t.Width == nil {
		return 80
	}
	return *t.Width
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Length == nil {
		var v uint32 = 24
		t.Length = &v
	}
	if t.Width == nil {
		var v uint32 = 80
		t.Width = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/info-output YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput struct {
	AlwaysDisplay *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay `path:"always-display" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) IsYANGGoStruct() {
}

// GetOrCreateAlwaysDisplay retrieves the value of the AlwaysDisplay field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) GetOrCreateAlwaysDisplay() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay {
	if t.AlwaysDisplay != nil {
		return t.AlwaysDisplay
	}
	t.AlwaysDisplay = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay{}
	return t.AlwaysDisplay
}

// GetAlwaysDisplay returns the value of the AlwaysDisplay struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput. If the receiver or the field AlwaysDisplay is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) GetAlwaysDisplay() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay {
	if t != nil && t.AlwaysDisplay != nil {
		return t.AlwaysDisplay
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AlwaysDisplay.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/info-output/always-display YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay struct {
	AdminState *bool `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) GetAdminState() bool {
	if t == nil || t.AdminState == nil {
		return false
	}
	return *t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == nil {
		var v bool = false
		t.AdminState = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_InfoOutput_AlwaysDisplay) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/message-severity-level YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel struct {
	Cli E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli `path:"cli" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) IsYANGGoStruct() {
}

// GetCli retrieves the value of the leaf Cli from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cli is set, it can
// safely use t.GetCli() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cli == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) GetCli() E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli {
	if t == nil || t.Cli == 0 {
		return NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli_info
	}
	return t.Cli
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cli == 0 {
		t.Cli = NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel_Cli_info
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_MessageSeverityLevel) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/progress-indicator YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	Delay      *uint32                                                                                                    `path:"delay" module:"nokia-conf"`
	Type       E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDelay retrieves the value of the leaf Delay from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetDelay() uint32 {
	if t == nil || t.Delay == nil {
		return 1000
	}
	return *t.Delay
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) GetType() E_NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type_dots
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Delay == nil {
		var v uint32 = 1000
		t.Delay = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator_Type_dots
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_ProgressIndicator) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/prompt YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt struct {
	Context                     *bool `path:"context" module:"nokia-conf"`
	Newline                     *bool `path:"newline" module:"nokia-conf"`
	Timestamp                   *bool `path:"timestamp" module:"nokia-conf"`
	UncommittedChangesIndicator *bool `path:"uncommitted-changes-indicator" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) IsYANGGoStruct() {
}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetContext() bool {
	if t == nil || t.Context == nil {
		return true
	}
	return *t.Context
}

// GetNewline retrieves the value of the leaf Newline from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Newline is set, it can
// safely use t.GetNewline() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Newline == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetNewline() bool {
	if t == nil || t.Newline == nil {
		return true
	}
	return *t.Newline
}

// GetTimestamp retrieves the value of the leaf Timestamp from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timestamp is set, it can
// safely use t.GetTimestamp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timestamp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetTimestamp() bool {
	if t == nil || t.Timestamp == nil {
		return false
	}
	return *t.Timestamp
}

// GetUncommittedChangesIndicator retrieves the value of the leaf UncommittedChangesIndicator from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UncommittedChangesIndicator is set, it can
// safely use t.GetUncommittedChangesIndicator() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UncommittedChangesIndicator == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) GetUncommittedChangesIndicator() bool {
	if t == nil || t.UncommittedChangesIndicator == nil {
		return true
	}
	return *t.UncommittedChangesIndicator
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Context == nil {
		var v bool = true
		t.Context = &v
	}
	if t.Newline == nil {
		var v bool = true
		t.Newline = &v
	}
	if t.Timestamp == nil {
		var v bool = false
		t.Timestamp = &v
	}
	if t.UncommittedChangesIndicator == nil {
		var v bool = true
		t.UncommittedChangesIndicator = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Prompt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python represents the /nokia-conf/configure/groups/group/system/management-interface/cli/md-cli/environment/python YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python struct {
	MemoryReservation      *uint32 `path:"memory-reservation" module:"nokia-conf"`
	MinimumAvailableMemory *uint32 `path:"minimum-available-memory" module:"nokia-conf"`
	Timeout                *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) IsYANGGoStruct() {
}

// GetMemoryReservation retrieves the value of the leaf MemoryReservation from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MemoryReservation is set, it can
// safely use t.GetMemoryReservation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MemoryReservation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) GetMemoryReservation() uint32 {
	if t == nil || t.MemoryReservation == nil {
		return 0
	}
	return *t.MemoryReservation
}

// GetMinimumAvailableMemory retrieves the value of the leaf MinimumAvailableMemory from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAvailableMemory is set, it can
// safely use t.GetMinimumAvailableMemory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAvailableMemory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) GetMinimumAvailableMemory() uint32 {
	if t == nil || t.MinimumAvailableMemory == nil {
		return 0
	}
	return *t.MinimumAvailableMemory
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 3600
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Timeout == nil {
		var v uint32 = 3600
		t.Timeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Cli_MdCli_Environment_Python) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave represents the /nokia-conf/configure/groups/group/system/management-interface/configuration-save YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave struct {
	ConfigurationBackups *uint32 `path:"configuration-backups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) IsYANGGoStruct() {
}

// GetConfigurationBackups retrieves the value of the leaf ConfigurationBackups from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConfigurationBackups is set, it can
// safely use t.GetConfigurationBackups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConfigurationBackups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) GetConfigurationBackups() uint32 {
	if t == nil || t.ConfigurationBackups == nil {
		return 5
	}
	return *t.ConfigurationBackups
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ConfigurationBackups == nil {
		var v uint32 = 5
		t.ConfigurationBackups = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_ConfigurationSave) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf represents the /nokia-conf/configure/groups/group/system/management-interface/netconf YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf struct {
	AdminState     E_NokiaTypesSros_AdminState                                                       `path:"admin-state" module:"nokia-conf"`
	AutoConfigSave *bool                                                                             `path:"auto-config-save" module:"nokia-conf"`
	Capabilities   *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities `path:"capabilities" module:"nokia-conf"`
	Port           *uint32                                                                           `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) IsYANGGoStruct() {}

// GetOrCreateCapabilities retrieves the value of the Capabilities field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) GetOrCreateCapabilities() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities {
	if t.Capabilities != nil {
		return t.Capabilities
	}
	t.Capabilities = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities{}
	return t.Capabilities
}

// GetCapabilities returns the value of the Capabilities struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf. If the receiver or the field Capabilities is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) GetCapabilities() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities {
	if t != nil && t.Capabilities != nil {
		return t.Capabilities
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAutoConfigSave retrieves the value of the leaf AutoConfigSave from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoConfigSave is set, it can
// safely use t.GetAutoConfigSave() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoConfigSave == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) GetAutoConfigSave() bool {
	if t == nil || t.AutoConfigSave == nil {
		return false
	}
	return *t.AutoConfigSave
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 830
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AutoConfigSave == nil {
		var v bool = false
		t.AutoConfigSave = &v
	}
	if t.Port == nil {
		var v uint32 = 830
		t.Port = &v
	}
	t.Capabilities.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities represents the /nokia-conf/configure/groups/group/system/management-interface/netconf/capabilities YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities struct {
	Candidate       *bool `path:"candidate" module:"nokia-conf"`
	WritableRunning *bool `path:"writable-running" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) IsYANGGoStruct() {
}

// GetCandidate retrieves the value of the leaf Candidate from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Candidate is set, it can
// safely use t.GetCandidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Candidate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) GetCandidate() bool {
	if t == nil || t.Candidate == nil {
		return true
	}
	return *t.Candidate
}

// GetWritableRunning retrieves the value of the leaf WritableRunning from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WritableRunning is set, it can
// safely use t.GetWritableRunning() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WritableRunning == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) GetWritableRunning() bool {
	if t == nil || t.WritableRunning == nil {
		return false
	}
	return *t.WritableRunning
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Candidate == nil {
		var v bool = true
		t.Candidate = &v
	}
	if t.WritableRunning == nil {
		var v bool = false
		t.WritableRunning = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Netconf_Capabilities) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations represents the /nokia-conf/configure/groups/group/system/management-interface/operations YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations struct {
	GlobalTimeouts *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts `path:"global-timeouts" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) IsYANGGoStruct() {}

// GetOrCreateGlobalTimeouts retrieves the value of the GlobalTimeouts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) GetOrCreateGlobalTimeouts() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts {
	if t.GlobalTimeouts != nil {
		return t.GlobalTimeouts
	}
	t.GlobalTimeouts = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts{}
	return t.GlobalTimeouts
}

// GetGlobalTimeouts returns the value of the GlobalTimeouts struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations. If the receiver or the field GlobalTimeouts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) GetGlobalTimeouts() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts {
	if t != nil && t.GlobalTimeouts != nil {
		return t.GlobalTimeouts
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.GlobalTimeouts.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts represents the /nokia-conf/configure/groups/group/system/management-interface/operations/global-timeouts YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts struct {
	AsynchronousExecution NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousExecution_Union `path:"asynchronous-execution" module:"nokia-conf"`
	AsynchronousRetention NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousRetention_Union `path:"asynchronous-retention" module:"nokia-conf"`
	SynchronousExecution  NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_SynchronousExecution_Union  `path:"synchronous-execution" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) IsYANGGoStruct() {
}

// GetAsynchronousExecution retrieves the value of the leaf AsynchronousExecution from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsynchronousExecution is set, it can
// safely use t.GetAsynchronousExecution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsynchronousExecution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) GetAsynchronousExecution() NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousExecution_Union {
	if t == nil || t.AsynchronousExecution == nil {
		return UnionUint32(3600)
	}
	return t.AsynchronousExecution
}

// GetAsynchronousRetention retrieves the value of the leaf AsynchronousRetention from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AsynchronousRetention is set, it can
// safely use t.GetAsynchronousRetention() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AsynchronousRetention == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) GetAsynchronousRetention() NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_AsynchronousRetention_Union {
	if t == nil || t.AsynchronousRetention == nil {
		return UnionUint32(86400)
	}
	return t.AsynchronousRetention
}

// GetSynchronousExecution retrieves the value of the leaf SynchronousExecution from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SynchronousExecution is set, it can
// safely use t.GetSynchronousExecution() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SynchronousExecution == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) GetSynchronousExecution() NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts_SynchronousExecution_Union {
	if t == nil || t.SynchronousExecution == nil {
		return NokiaTypesOperation_OperationTimeout_Enum_never
	}
	return t.SynchronousExecution
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AsynchronousExecution == nil {
		t.AsynchronousExecution = UnionUint32(3600)
	}
	if t.AsynchronousRetention == nil {
		t.AsynchronousRetention = UnionUint32(86400)
	}
	if t.SynchronousExecution == nil {
		t.SynchronousExecution = NokiaTypesOperation_OperationTimeout_Enum_never
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Operations_GlobalTimeouts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement represents the /nokia-conf/configure/groups/group/system/management-interface/remote-management YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                      `path:"admin-state" module:"nokia-conf"`
	AllowUnsecureConnection YANGEmpty                                                                                        `path:"allow-unsecure-connection" module:"nokia-conf"`
	ClientTlsProfile        *string                                                                                          `path:"client-tls-profile" module:"nokia-conf"`
	ConnectionTimeout       *uint32                                                                                          `path:"connection-timeout" module:"nokia-conf"`
	DeviceLabel             *string                                                                                          `path:"device-label" module:"nokia-conf"`
	DeviceName              *string                                                                                          `path:"device-name" module:"nokia-conf"`
	HelloInterval           *uint32                                                                                          `path:"hello-interval" module:"nokia-conf"`
	Manager                 map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager `path:"manager" module:"nokia-conf"`
	RouterInstance          *string                                                                                          `path:"router-instance" module:"nokia-conf"`
	SourceAddress           *string                                                                                          `path:"source-address" module:"nokia-conf"`
	SourcePort              NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_SourcePort_Union    `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) IsYANGGoStruct() {
}

// NewManager creates a new entry in the Manager list of the
// NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) NewManager(ManagerName string) (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Manager == nil {
		t.Manager = make(map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager)
	}

	key := ManagerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Manager[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Manager", key)
	}

	t.Manager[key] = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager{
		ManagerName: &ManagerName,
	}

	return t.Manager[key], nil
}

// RenameManager renames an entry in the list Manager within
// the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) RenameManager(oldK, newK string) error {
	if _, ok := t.Manager[newK]; ok {
		return fmt.Errorf("key %v already exists in Manager", newK)
	}

	e, ok := t.Manager[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Manager", oldK)
	}
	e.ManagerName = &newK

	t.Manager[newK] = e
	delete(t.Manager, oldK)
	return nil
}

// GetOrCreateManager retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetOrCreateManager(ManagerName string) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager {

	key := ManagerName

	if v, ok := t.Manager[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewManager(ManagerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateManager got unexpected error: %v", err))
	}
	return v
}

// GetManager retrieves the value with the specified key from
// the Manager map field of NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetManager(ManagerName string) *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager {

	if t == nil {
		return nil
	}

	key := ManagerName

	if lm, ok := t.Manager[key]; ok {
		return lm
	}
	return nil
}

// DeleteManager deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) DeleteManager(ManagerName string) {
	key := ManagerName

	delete(t.Manager, key)
}

// AppendManager appends the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager struct to the
// list Manager of NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) AppendManager(v *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) error {
	if v.ManagerName == nil {
		return fmt.Errorf("invalid nil key received for ManagerName")
	}

	key := *v.ManagerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Manager == nil {
		t.Manager = make(map[string]*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager)
	}

	if _, ok := t.Manager[key]; ok {
		return fmt.Errorf("duplicate key for list Manager %v", key)
	}

	t.Manager[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetConnectionTimeout retrieves the value of the leaf ConnectionTimeout from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeout is set, it can
// safely use t.GetConnectionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetConnectionTimeout() uint32 {
	if t == nil || t.ConnectionTimeout == nil {
		return 60
	}
	return *t.ConnectionTimeout
}

// GetDeviceLabel retrieves the value of the leaf DeviceLabel from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceLabel is set, it can
// safely use t.GetDeviceLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetDeviceLabel() string {
	if t == nil || t.DeviceLabel == nil {
		return ""
	}
	return *t.DeviceLabel
}

// GetDeviceName retrieves the value of the leaf DeviceName from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceName is set, it can
// safely use t.GetDeviceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetDeviceName() string {
	if t == nil || t.DeviceName == nil {
		return ""
	}
	return *t.DeviceName
}

// GetHelloInterval retrieves the value of the leaf HelloInterval from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HelloInterval is set, it can
// safely use t.GetHelloInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HelloInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetHelloInterval() uint32 {
	if t == nil || t.HelloInterval == nil {
		return 600
	}
	return *t.HelloInterval
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "management"
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) GetSourcePort() NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return NokiaTypesSystem_RemoteMgmtRegistrationPort_Enum_grpc_default
	}
	return t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ConnectionTimeout == nil {
		var v uint32 = 60
		t.ConnectionTimeout = &v
	}
	if t.HelloInterval == nil {
		var v uint32 = 600
		t.HelloInterval = &v
	}
	if t.RouterInstance == nil {
		var v string = "management"
		t.RouterInstance = &v
	}
	if t.SourcePort == nil {
		t.SourcePort = NokiaTypesSystem_RemoteMgmtRegistrationPort_Enum_grpc_default
	}
	for _, e := range t.Manager {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager represents the /nokia-conf/configure/groups/group/system/management-interface/remote-management/manager YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                           `path:"admin-state" module:"nokia-conf"`
	AllowUnsecureConnection YANGEmpty                                                                                             `path:"allow-unsecure-connection" module:"nokia-conf"`
	ClientTlsProfile        *string                                                                                               `path:"client-tls-profile" module:"nokia-conf"`
	ConnectionTimeout       *uint32                                                                                               `path:"connection-timeout" module:"nokia-conf"`
	Description             *string                                                                                               `path:"description" module:"nokia-conf"`
	DeviceLabel             *string                                                                                               `path:"device-label" module:"nokia-conf"`
	DeviceName              *string                                                                                               `path:"device-name" module:"nokia-conf"`
	ManagerAddress          *string                                                                                               `path:"manager-address" module:"nokia-conf"`
	ManagerName             *string                                                                                               `path:"manager-name" module:"nokia-conf"`
	ManagerPort             *int32                                                                                                `path:"manager-port" module:"nokia-conf"`
	RouterInstance          *string                                                                                               `path:"router-instance" module:"nokia-conf"`
	SourceAddress           *string                                                                                               `path:"source-address" module:"nokia-conf"`
	SourcePort              NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager_SourcePort_Union `path:"source-port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetConnectionTimeout retrieves the value of the leaf ConnectionTimeout from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ConnectionTimeout is set, it can
// safely use t.GetConnectionTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ConnectionTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetConnectionTimeout() uint32 {
	if t == nil || t.ConnectionTimeout == nil {
		return 0
	}
	return *t.ConnectionTimeout
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDeviceLabel retrieves the value of the leaf DeviceLabel from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceLabel is set, it can
// safely use t.GetDeviceLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetDeviceLabel() string {
	if t == nil || t.DeviceLabel == nil {
		return ""
	}
	return *t.DeviceLabel
}

// GetDeviceName retrieves the value of the leaf DeviceName from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeviceName is set, it can
// safely use t.GetDeviceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeviceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetDeviceName() string {
	if t == nil || t.DeviceName == nil {
		return ""
	}
	return *t.DeviceName
}

// GetManagerAddress retrieves the value of the leaf ManagerAddress from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerAddress is set, it can
// safely use t.GetManagerAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetManagerAddress() string {
	if t == nil || t.ManagerAddress == nil {
		return ""
	}
	return *t.ManagerAddress
}

// GetManagerName retrieves the value of the leaf ManagerName from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerName is set, it can
// safely use t.GetManagerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetManagerName() string {
	if t == nil || t.ManagerName == nil {
		return ""
	}
	return *t.ManagerName
}

// GetManagerPort retrieves the value of the leaf ManagerPort from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ManagerPort is set, it can
// safely use t.GetManagerPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ManagerPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetManagerPort() int32 {
	if t == nil || t.ManagerPort == nil {
		return 57400
	}
	return *t.ManagerPort
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetSourcePort retrieves the value of the leaf SourcePort from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourcePort is set, it can
// safely use t.GetSourcePort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourcePort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) GetSourcePort() NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager_SourcePort_Union {
	if t == nil || t.SourcePort == nil {
		return nil
	}
	return t.SourcePort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ManagerPort == nil {
		var v int32 = 57400
		t.ManagerPort = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ManagerName == nil {
		return nil, fmt.Errorf("nil value for key ManagerName")
	}

	return map[string]interface{}{
		"manager-name": *t.ManagerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_RemoteManagement_Manager) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp represents the /nokia-conf/configure/groups/group/system/management-interface/snmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp struct {
	AdminState  E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	EngineId    *string                                                                     `path:"engine-id" module:"nokia-conf"`
	GeneralPort *int32                                                                      `path:"general-port" module:"nokia-conf"`
	PacketSize  *int32                                                                      `path:"packet-size" module:"nokia-conf"`
	Streaming   *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming `path:"streaming" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) IsYANGGoStruct() {}

// GetOrCreateStreaming retrieves the value of the Streaming field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetOrCreateStreaming() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming {
	if t.Streaming != nil {
		return t.Streaming
	}
	t.Streaming = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming{}
	return t.Streaming
}

// GetStreaming returns the value of the Streaming struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp. If the receiver or the field Streaming is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetStreaming() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming {
	if t != nil && t.Streaming != nil {
		return t.Streaming
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetEngineId retrieves the value of the leaf EngineId from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EngineId is set, it can
// safely use t.GetEngineId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EngineId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetEngineId() string {
	if t == nil || t.EngineId == nil {
		return ""
	}
	return *t.EngineId
}

// GetGeneralPort retrieves the value of the leaf GeneralPort from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GeneralPort is set, it can
// safely use t.GetGeneralPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GeneralPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetGeneralPort() int32 {
	if t == nil || t.GeneralPort == nil {
		return 161
	}
	return *t.GeneralPort
}

// GetPacketSize retrieves the value of the leaf PacketSize from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PacketSize is set, it can
// safely use t.GetPacketSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PacketSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) GetPacketSize() int32 {
	if t == nil || t.PacketSize == nil {
		return 1500
	}
	return *t.PacketSize
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.GeneralPort == nil {
		var v int32 = 161
		t.GeneralPort = &v
	}
	if t.PacketSize == nil {
		var v int32 = 1500
		t.PacketSize = &v
	}
	t.Streaming.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming represents the /nokia-conf/configure/groups/group/system/management-interface/snmp/streaming YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_Snmp_Streaming) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules represents the /nokia-conf/configure/groups/group/system/management-interface/yang-modules YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules struct {
	BaseR13Modules       *bool                                                                         `path:"base-r13-modules" module:"nokia-conf"`
	Nmda                 *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda `path:"nmda" module:"nokia-conf"`
	NokiaCombinedModules *bool                                                                         `path:"nokia-combined-modules" module:"nokia-conf"`
	NokiaModules         *bool                                                                         `path:"nokia-modules" module:"nokia-conf"`
	NokiaSubmodules      *bool                                                                         `path:"nokia-submodules" module:"nokia-conf"`
	OpenconfigModules    *bool                                                                         `path:"openconfig-modules" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) IsYANGGoStruct() {}

// GetOrCreateNmda retrieves the value of the Nmda field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetOrCreateNmda() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda {
	if t.Nmda != nil {
		return t.Nmda
	}
	t.Nmda = &NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda{}
	return t.Nmda
}

// GetNmda returns the value of the Nmda struct pointer
// from NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules. If the receiver or the field Nmda is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetNmda() *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda {
	if t != nil && t.Nmda != nil {
		return t.Nmda
	}
	return nil
}

// GetBaseR13Modules retrieves the value of the leaf BaseR13Modules from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseR13Modules is set, it can
// safely use t.GetBaseR13Modules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseR13Modules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetBaseR13Modules() bool {
	if t == nil || t.BaseR13Modules == nil {
		return false
	}
	return *t.BaseR13Modules
}

// GetNokiaCombinedModules retrieves the value of the leaf NokiaCombinedModules from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaCombinedModules is set, it can
// safely use t.GetNokiaCombinedModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaCombinedModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetNokiaCombinedModules() bool {
	if t == nil || t.NokiaCombinedModules == nil {
		return false
	}
	return *t.NokiaCombinedModules
}

// GetNokiaModules retrieves the value of the leaf NokiaModules from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaModules is set, it can
// safely use t.GetNokiaModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetNokiaModules() bool {
	if t == nil || t.NokiaModules == nil {
		return false
	}
	return *t.NokiaModules
}

// GetNokiaSubmodules retrieves the value of the leaf NokiaSubmodules from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NokiaSubmodules is set, it can
// safely use t.GetNokiaSubmodules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NokiaSubmodules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetNokiaSubmodules() bool {
	if t == nil || t.NokiaSubmodules == nil {
		return false
	}
	return *t.NokiaSubmodules
}

// GetOpenconfigModules retrieves the value of the leaf OpenconfigModules from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OpenconfigModules is set, it can
// safely use t.GetOpenconfigModules() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OpenconfigModules == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) GetOpenconfigModules() bool {
	if t == nil || t.OpenconfigModules == nil {
		return false
	}
	return *t.OpenconfigModules
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BaseR13Modules == nil {
		var v bool = false
		t.BaseR13Modules = &v
	}
	if t.OpenconfigModules == nil {
		var v bool = false
		t.OpenconfigModules = &v
	}
	t.Nmda.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda represents the /nokia-conf/configure/groups/group/system/management-interface/yang-modules/nmda YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda struct {
	NmdaSupport *bool `path:"nmda-support" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) IsYANGGoStruct() {
}

// GetNmdaSupport retrieves the value of the leaf NmdaSupport from the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NmdaSupport is set, it can
// safely use t.GetNmdaSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NmdaSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) GetNmdaSupport() bool {
	if t == nil || t.NmdaSupport == nil {
		return false
	}
	return *t.NmdaSupport
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.NmdaSupport == nil {
		var v bool = false
		t.NmdaSupport = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda.
func (*NokiaConf_Configure_Groups_Group_System_ManagementInterface_YangModules_Nmda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery represents the /nokia-conf/configure/groups/group/system/network-element-discovery YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery struct {
	GenerateTraps *bool                                                                               `path:"generate-traps" module:"nokia-conf"`
	Profile       map[string]*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) NewProfile(Name string) (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile{
		Name: &Name,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.Name = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) GetOrCreateProfile(Name string) *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile {

	key := Name

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) GetProfile(Name string) *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) DeleteProfile(Name string) {
	key := Name

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile struct to the
// list Profile of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) AppendProfile(v *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// GetGenerateTraps retrieves the value of the leaf GenerateTraps from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GenerateTraps is set, it can
// safely use t.GetGenerateTraps() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GenerateTraps == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) GetGenerateTraps() bool {
	if t == nil || t.GenerateTraps == nil {
		return false
	}
	return *t.GenerateTraps
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GenerateTraps == nil {
		var v bool = false
		t.GenerateTraps = &v
	}
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile represents the /nokia-conf/configure/groups/group/system/network-element-discovery/profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile struct {
	Name         *string                                                                       `path:"name" module:"nokia-conf"`
	Neid         *string                                                                       `path:"neid" module:"nokia-conf"`
	Neip         *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip `path:"neip" module:"nokia-conf" yangPresence:"true"`
	PlatformType *string                                                                       `path:"platform-type" module:"nokia-conf"`
	SystemMac    *string                                                                       `path:"system-mac" module:"nokia-conf"`
	VendorId     *string                                                                       `path:"vendor-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) IsYANGGoStruct() {}

// GetOrCreateNeip retrieves the value of the Neip field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetOrCreateNeip() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip {
	if t.Neip != nil {
		return t.Neip
	}
	t.Neip = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip{}
	return t.Neip
}

// GetNeip returns the value of the Neip struct pointer
// from NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile. If the receiver or the field Neip is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetNeip() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip {
	if t != nil && t.Neip != nil {
		return t.Neip
	}
	return nil
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetNeid retrieves the value of the leaf Neid from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Neid is set, it can
// safely use t.GetNeid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Neid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetNeid() string {
	if t == nil || t.Neid == nil {
		return ""
	}
	return *t.Neid
}

// GetPlatformType retrieves the value of the leaf PlatformType from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PlatformType is set, it can
// safely use t.GetPlatformType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PlatformType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetPlatformType() string {
	if t == nil || t.PlatformType == nil {
		return ""
	}
	return *t.PlatformType
}

// GetSystemMac retrieves the value of the leaf SystemMac from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemMac is set, it can
// safely use t.GetSystemMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetSystemMac() string {
	if t == nil || t.SystemMac == nil {
		return ""
	}
	return *t.SystemMac
}

// GetVendorId retrieves the value of the leaf VendorId from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorId is set, it can
// safely use t.GetVendorId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) GetVendorId() string {
	if t == nil || t.VendorId == nil {
		return "Nokia"
	}
	return *t.VendorId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorId == nil {
		var v string = "Nokia"
		t.VendorId = &v
	}
	t.Neip.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip represents the /nokia-conf/configure/groups/group/system/network-element-discovery/profile/neip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip struct {
	AutoGenerate *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate `path:"auto-generate" module:"nokia-conf"`
	Ipv4         *string                                                                                    `path:"ipv4" module:"nokia-conf"`
	Ipv6         *string                                                                                    `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) IsYANGGoStruct() {
}

// GetOrCreateAutoGenerate retrieves the value of the AutoGenerate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) GetOrCreateAutoGenerate() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate {
	if t.AutoGenerate != nil {
		return t.AutoGenerate
	}
	t.AutoGenerate = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate{}
	return t.AutoGenerate
}

// GetAutoGenerate returns the value of the AutoGenerate struct pointer
// from NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip. If the receiver or the field AutoGenerate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) GetAutoGenerate() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate {
	if t != nil && t.AutoGenerate != nil {
		return t.AutoGenerate
	}
	return nil
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.AutoGenerate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate represents the /nokia-conf/configure/groups/group/system/network-element-discovery/profile/neip/auto-generate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate struct {
	Ipv4 *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 `path:"ipv4" module:"nokia-conf" yangPresence:"true"`
	Ipv6 *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 `path:"ipv6" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) IsYANGGoStruct() {
}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetOrCreateIpv4() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetOrCreateIpv6() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetIpv4() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) GetIpv6() *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 represents the /nokia-conf/configure/groups/group/system/network-element-discovery/profile/neip/auto-generate/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 struct {
	VendorIdValue *uint32 `path:"vendor-id-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) IsYANGGoStruct() {
}

// GetVendorIdValue retrieves the value of the leaf VendorIdValue from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorIdValue is set, it can
// safely use t.GetVendorIdValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorIdValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) GetVendorIdValue() uint32 {
	if t == nil || t.VendorIdValue == nil {
		return 140
	}
	return *t.VendorIdValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorIdValue == nil {
		var v uint32 = 140
		t.VendorIdValue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 represents the /nokia-conf/configure/groups/group/system/network-element-discovery/profile/neip/auto-generate/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 struct {
	VendorIdValue *uint32 `path:"vendor-id-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) IsYANGGoStruct() {
}

// GetVendorIdValue retrieves the value of the leaf VendorIdValue from the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VendorIdValue is set, it can
// safely use t.GetVendorIdValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VendorIdValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) GetVendorIdValue() uint32 {
	if t == nil || t.VendorIdValue == nil {
		return 140
	}
	return *t.VendorIdValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.VendorIdValue == nil {
		var v uint32 = 140
		t.VendorIdValue = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6.
func (*NokiaConf_Configure_Groups_Group_System_NetworkElementDiscovery_Profile_Neip_AutoGenerate_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence represents the /nokia-conf/configure/groups/group/system/persistence YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence struct {
	Ancp                 *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp                 `path:"ancp" module:"nokia-conf" yangPresence:"true"`
	ApplicationAssurance *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance `path:"application-assurance" module:"nokia-conf" yangPresence:"true"`
	DhcpServer           *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer           `path:"dhcp-server" module:"nokia-conf" yangPresence:"true"`
	NatPortForwarding    *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding    `path:"nat-port-forwarding" module:"nokia-conf" yangPresence:"true"`
	Options              *NokiaConf_Configure_Groups_Group_System_Persistence_Options              `path:"options" module:"nokia-conf" yangPresence:"true"`
	PythonPolicyCache    *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache    `path:"python-policy-cache" module:"nokia-conf" yangPresence:"true"`
	SubscriberMgmt       *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt       `path:"subscriber-mgmt" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence) IsYANGGoStruct() {}

// GetOrCreateAncp retrieves the value of the Ancp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateAncp() *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp {
	if t.Ancp != nil {
		return t.Ancp
	}
	t.Ancp = &NokiaConf_Configure_Groups_Group_System_Persistence_Ancp{}
	return t.Ancp
}

// GetOrCreateApplicationAssurance retrieves the value of the ApplicationAssurance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateApplicationAssurance() *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance {
	if t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	t.ApplicationAssurance = &NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance{}
	return t.ApplicationAssurance
}

// GetOrCreateDhcpServer retrieves the value of the DhcpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateDhcpServer() *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer {
	if t.DhcpServer != nil {
		return t.DhcpServer
	}
	t.DhcpServer = &NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer{}
	return t.DhcpServer
}

// GetOrCreateNatPortForwarding retrieves the value of the NatPortForwarding field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateNatPortForwarding() *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding {
	if t.NatPortForwarding != nil {
		return t.NatPortForwarding
	}
	t.NatPortForwarding = &NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding{}
	return t.NatPortForwarding
}

// GetOrCreateOptions retrieves the value of the Options field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateOptions() *NokiaConf_Configure_Groups_Group_System_Persistence_Options {
	if t.Options != nil {
		return t.Options
	}
	t.Options = &NokiaConf_Configure_Groups_Group_System_Persistence_Options{}
	return t.Options
}

// GetOrCreatePythonPolicyCache retrieves the value of the PythonPolicyCache field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreatePythonPolicyCache() *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache {
	if t.PythonPolicyCache != nil {
		return t.PythonPolicyCache
	}
	t.PythonPolicyCache = &NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache{}
	return t.PythonPolicyCache
}

// GetOrCreateSubscriberMgmt retrieves the value of the SubscriberMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOrCreateSubscriberMgmt() *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt {
	if t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	t.SubscriberMgmt = &NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt{}
	return t.SubscriberMgmt
}

// GetAncp returns the value of the Ancp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field Ancp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetAncp() *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp {
	if t != nil && t.Ancp != nil {
		return t.Ancp
	}
	return nil
}

// GetApplicationAssurance returns the value of the ApplicationAssurance struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field ApplicationAssurance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetApplicationAssurance() *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance {
	if t != nil && t.ApplicationAssurance != nil {
		return t.ApplicationAssurance
	}
	return nil
}

// GetDhcpServer returns the value of the DhcpServer struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field DhcpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetDhcpServer() *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer {
	if t != nil && t.DhcpServer != nil {
		return t.DhcpServer
	}
	return nil
}

// GetNatPortForwarding returns the value of the NatPortForwarding struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field NatPortForwarding is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetNatPortForwarding() *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding {
	if t != nil && t.NatPortForwarding != nil {
		return t.NatPortForwarding
	}
	return nil
}

// GetOptions returns the value of the Options struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field Options is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetOptions() *NokiaConf_Configure_Groups_Group_System_Persistence_Options {
	if t != nil && t.Options != nil {
		return t.Options
	}
	return nil
}

// GetPythonPolicyCache returns the value of the PythonPolicyCache struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field PythonPolicyCache is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetPythonPolicyCache() *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache {
	if t != nil && t.PythonPolicyCache != nil {
		return t.PythonPolicyCache
	}
	return nil
}

// GetSubscriberMgmt returns the value of the SubscriberMgmt struct pointer
// from NokiaConf_Configure_Groups_Group_System_Persistence. If the receiver or the field SubscriberMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) GetSubscriberMgmt() *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt {
	if t != nil && t.SubscriberMgmt != nil {
		return t.SubscriberMgmt
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ancp.PopulateDefaults()
	t.ApplicationAssurance.PopulateDefaults()
	t.DhcpServer.PopulateDefaults()
	t.NatPortForwarding.PopulateDefaults()
	t.Options.PopulateDefaults()
	t.PythonPolicyCache.PopulateDefaults()
	t.SubscriberMgmt.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence.
func (*NokiaConf_Configure_Groups_Group_System_Persistence) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_Ancp represents the /nokia-conf/configure/groups/group/system/persistence/ancp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_Ancp struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_Ancp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_Ancp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_Ancp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_Ancp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_Ancp.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_Ancp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance represents the /nokia-conf/configure/groups/group/system/persistence/application-assurance YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_ApplicationAssurance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer represents the /nokia-conf/configure/groups/group/system/persistence/dhcp-server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_DhcpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding represents the /nokia-conf/configure/groups/group/system/persistence/nat-port-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_NatPortForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_Options represents the /nokia-conf/configure/groups/group/system/persistence/options YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_Options struct {
	DhcpLeasetimeThreshold *uint32 `path:"dhcp-leasetime-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_Options implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_Options) IsYANGGoStruct() {}

// GetDhcpLeasetimeThreshold retrieves the value of the leaf DhcpLeasetimeThreshold from the NokiaConf_Configure_Groups_Group_System_Persistence_Options
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhcpLeasetimeThreshold is set, it can
// safely use t.GetDhcpLeasetimeThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhcpLeasetimeThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Options) GetDhcpLeasetimeThreshold() uint32 {
	if t == nil || t.DhcpLeasetimeThreshold == nil {
		return 0
	}
	return *t.DhcpLeasetimeThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_Options
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Options) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Options) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_Options"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Options) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_Options) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_Options.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_Options) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache represents the /nokia-conf/configure/groups/group/system/persistence/python-policy-cache YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_PythonPolicyCache) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt represents the /nokia-conf/configure/groups/group/system/persistence/subscriber-mgmt YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt struct {
	Description *string                       `path:"description" module:"nokia-conf"`
	Location    E_NokiaTypesSystem_CpmFlashId `path:"location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) GetLocation() E_NokiaTypesSystem_CpmFlashId {
	if t == nil || t.Location == 0 {
		return 0
	}
	return t.Location
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt.
func (*NokiaConf_Configure_Groups_Group_System_Persistence_SubscriberMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_PowerManagement represents the /nokia-conf/configure/groups/group/system/power-management YANG schema element.
type NokiaConf_Configure_Groups_Group_System_PowerManagement struct {
	Mode             E_NokiaConf_Configure_Groups_Group_System_PowerManagement_Mode          `path:"mode" module:"nokia-conf"`
	PowerSafetyAlert *uint32                                                                 `path:"power-safety-alert" module:"nokia-conf"`
	PowerSafetyLevel *uint32                                                                 `path:"power-safety-level" module:"nokia-conf"`
	PowerZone        NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union `path:"power-zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_PowerManagement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_PowerManagement) IsYANGGoStruct() {}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) GetMode() E_NokiaConf_Configure_Groups_Group_System_PowerManagement_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Groups_Group_System_PowerManagement_Mode_basic
	}
	return t.Mode
}

// GetPowerSafetyAlert retrieves the value of the leaf PowerSafetyAlert from the NokiaConf_Configure_Groups_Group_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSafetyAlert is set, it can
// safely use t.GetPowerSafetyAlert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSafetyAlert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) GetPowerSafetyAlert() uint32 {
	if t == nil || t.PowerSafetyAlert == nil {
		return 0
	}
	return *t.PowerSafetyAlert
}

// GetPowerSafetyLevel retrieves the value of the leaf PowerSafetyLevel from the NokiaConf_Configure_Groups_Group_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerSafetyLevel is set, it can
// safely use t.GetPowerSafetyLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerSafetyLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) GetPowerSafetyLevel() uint32 {
	if t == nil || t.PowerSafetyLevel == nil {
		return 100
	}
	return *t.PowerSafetyLevel
}

// GetPowerZone retrieves the value of the leaf PowerZone from the NokiaConf_Configure_Groups_Group_System_PowerManagement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PowerZone is set, it can
// safely use t.GetPowerZone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PowerZone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) GetPowerZone() NokiaConf_Configure_Groups_Group_System_PowerManagement_PowerZone_Union {
	if t == nil || t.PowerZone == nil {
		return nil
	}
	return t.PowerZone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_PowerManagement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Groups_Group_System_PowerManagement_Mode_basic
	}
	if t.PowerSafetyAlert == nil {
		var v uint32 = 0
		t.PowerSafetyAlert = &v
	}
	if t.PowerSafetyLevel == nil {
		var v uint32 = 100
		t.PowerSafetyLevel = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_PowerManagement struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"power-zone": t.PowerZone,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_PowerManagement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_PowerManagement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_PowerManagement.
func (*NokiaConf_Configure_Groups_Group_System_PowerManagement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp represents the /nokia-conf/configure/groups/group/system/ptp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp struct {
	AdminState             E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	AlternateProfile       map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile `path:"alternate-profile" module:"nokia-conf"`
	AnnounceReceiptTimeout *uint32                                                                  `path:"announce-receipt-timeout" module:"nokia-conf"`
	ClockType              E_NokiaTypesPtp_ClockType                                                `path:"clock-type" module:"nokia-conf"`
	Domain                 *uint32                                                                  `path:"domain" module:"nokia-conf"`
	LocalPriority          *uint32                                                                  `path:"local-priority" module:"nokia-conf"`
	LogAnnounceInterval    *int32                                                                   `path:"log-announce-interval" module:"nokia-conf"`
	NetworkType            E_NokiaConf_Configure_Groups_Group_System_Ptp_NetworkType                `path:"network-type" module:"nokia-conf"`
	Port                   map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Port             `path:"port" module:"nokia-conf"`
	Priority1              *uint32                                                                  `path:"priority1" module:"nokia-conf"`
	Priority2              *uint32                                                                  `path:"priority2" module:"nokia-conf"`
	Profile                E_NokiaTypesPtp_Profile                                                  `path:"profile" module:"nokia-conf"`
	Ptsf                   *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf                        `path:"ptsf" module:"nokia-conf"`
	Router                 map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router           `path:"router" module:"nokia-conf"`
	TxWhileSyncUncertain   *bool                                                                    `path:"tx-while-sync-uncertain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp) IsYANGGoStruct() {}

// NewAlternateProfile creates a new entry in the AlternateProfile list of the
// NokiaConf_Configure_Groups_Group_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) NewAlternateProfile(Name string) (*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlternateProfile == nil {
		t.AlternateProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AlternateProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AlternateProfile", key)
	}

	t.AlternateProfile[key] = &NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile{
		Name: &Name,
	}

	return t.AlternateProfile[key], nil
}

// RenameAlternateProfile renames an entry in the list AlternateProfile within
// the NokiaConf_Configure_Groups_Group_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) RenameAlternateProfile(oldK, newK string) error {
	if _, ok := t.AlternateProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in AlternateProfile", newK)
	}

	e, ok := t.AlternateProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AlternateProfile", oldK)
	}
	e.Name = &newK

	t.AlternateProfile[newK] = e
	delete(t.AlternateProfile, oldK)
	return nil
}

// GetOrCreateAlternateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetOrCreateAlternateProfile(Name string) *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile {

	key := Name

	if v, ok := t.AlternateProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlternateProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlternateProfile got unexpected error: %v", err))
	}
	return v
}

// GetAlternateProfile retrieves the value with the specified key from
// the AlternateProfile map field of NokiaConf_Configure_Groups_Group_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetAlternateProfile(Name string) *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AlternateProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlternateProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) DeleteAlternateProfile(Name string) {
	key := Name

	delete(t.AlternateProfile, key)
}

// AppendAlternateProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile struct to the
// list AlternateProfile of NokiaConf_Configure_Groups_Group_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) AppendAlternateProfile(v *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AlternateProfile == nil {
		t.AlternateProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile)
	}

	if _, ok := t.AlternateProfile[key]; ok {
		return fmt.Errorf("duplicate key for list AlternateProfile %v", key)
	}

	t.AlternateProfile[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Groups_Group_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) NewPort(PortId string) (*NokiaConf_Configure_Groups_Group_System_Ptp_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Groups_Group_System_Ptp_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Groups_Group_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetOrCreatePort(PortId string) *NokiaConf_Configure_Groups_Group_System_Ptp_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Groups_Group_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetPort(PortId string) *NokiaConf_Configure_Groups_Group_System_Ptp_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Port struct to the
// list Port of NokiaConf_Configure_Groups_Group_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) AppendPort(v *NokiaConf_Configure_Groups_Group_System_Ptp_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// NewRouter creates a new entry in the Router list of the
// NokiaConf_Configure_Groups_Group_System_Ptp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) NewRouter(RouterInstance string) (*NokiaConf_Configure_Groups_Group_System_Ptp_Router, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router)
	}

	key := RouterInstance

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Router[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Router", key)
	}

	t.Router[key] = &NokiaConf_Configure_Groups_Group_System_Ptp_Router{
		RouterInstance: &RouterInstance,
	}

	return t.Router[key], nil
}

// RenameRouter renames an entry in the list Router within
// the NokiaConf_Configure_Groups_Group_System_Ptp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) RenameRouter(oldK, newK string) error {
	if _, ok := t.Router[newK]; ok {
		return fmt.Errorf("key %v already exists in Router", newK)
	}

	e, ok := t.Router[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Router", oldK)
	}
	e.RouterInstance = &newK

	t.Router[newK] = e
	delete(t.Router, oldK)
	return nil
}

// GetOrCreateRouter retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetOrCreateRouter(RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Ptp_Router {

	key := RouterInstance

	if v, ok := t.Router[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouter(RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouter got unexpected error: %v", err))
	}
	return v
}

// GetRouter retrieves the value with the specified key from
// the Router map field of NokiaConf_Configure_Groups_Group_System_Ptp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetRouter(RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Ptp_Router {

	if t == nil {
		return nil
	}

	key := RouterInstance

	if lm, ok := t.Router[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouter deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) DeleteRouter(RouterInstance string) {
	key := RouterInstance

	delete(t.Router, key)
}

// AppendRouter appends the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Router struct to the
// list Router of NokiaConf_Configure_Groups_Group_System_Ptp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Router already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) AppendRouter(v *NokiaConf_Configure_Groups_Group_System_Ptp_Router) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key received for RouterInstance")
	}

	key := *v.RouterInstance

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Router == nil {
		t.Router = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router)
	}

	if _, ok := t.Router[key]; ok {
		return fmt.Errorf("duplicate key for list Router %v", key)
	}

	t.Router[key] = v
	return nil
}

// GetOrCreatePtsf retrieves the value of the Ptsf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetOrCreatePtsf() *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf {
	if t.Ptsf != nil {
		return t.Ptsf
	}
	t.Ptsf = &NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf{}
	return t.Ptsf
}

// GetPtsf returns the value of the Ptsf struct pointer
// from NokiaConf_Configure_Groups_Group_System_Ptp. If the receiver or the field Ptsf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetPtsf() *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf {
	if t != nil && t.Ptsf != nil {
		return t.Ptsf
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAnnounceReceiptTimeout retrieves the value of the leaf AnnounceReceiptTimeout from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AnnounceReceiptTimeout is set, it can
// safely use t.GetAnnounceReceiptTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AnnounceReceiptTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetAnnounceReceiptTimeout() uint32 {
	if t == nil || t.AnnounceReceiptTimeout == nil {
		return 3
	}
	return *t.AnnounceReceiptTimeout
}

// GetClockType retrieves the value of the leaf ClockType from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClockType is set, it can
// safely use t.GetClockType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClockType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetClockType() E_NokiaTypesPtp_ClockType {
	if t == nil || t.ClockType == 0 {
		return 0
	}
	return t.ClockType
}

// GetDomain retrieves the value of the leaf Domain from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Domain is set, it can
// safely use t.GetDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Domain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetDomain() uint32 {
	if t == nil || t.Domain == nil {
		return 0
	}
	return *t.Domain
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogAnnounceInterval retrieves the value of the leaf LogAnnounceInterval from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAnnounceInterval is set, it can
// safely use t.GetLogAnnounceInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAnnounceInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetLogAnnounceInterval() int32 {
	if t == nil || t.LogAnnounceInterval == nil {
		return 0
	}
	return *t.LogAnnounceInterval
}

// GetNetworkType retrieves the value of the leaf NetworkType from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NetworkType is set, it can
// safely use t.GetNetworkType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NetworkType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetNetworkType() E_NokiaConf_Configure_Groups_Group_System_Ptp_NetworkType {
	if t == nil || t.NetworkType == 0 {
		return NokiaConf_Configure_Groups_Group_System_Ptp_NetworkType_sdh
	}
	return t.NetworkType
}

// GetPriority1 retrieves the value of the leaf Priority1 from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority1 is set, it can
// safely use t.GetPriority1() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority1 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetPriority1() uint32 {
	if t == nil || t.Priority1 == nil {
		return 128
	}
	return *t.Priority1
}

// GetPriority2 retrieves the value of the leaf Priority2 from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority2 is set, it can
// safely use t.GetPriority2() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority2 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetPriority2() uint32 {
	if t == nil || t.Priority2 == nil {
		return 128
	}
	return *t.Priority2
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetProfile() E_NokiaTypesPtp_Profile {
	if t == nil || t.Profile == 0 {
		return 0
	}
	return t.Profile
}

// GetTxWhileSyncUncertain retrieves the value of the leaf TxWhileSyncUncertain from the NokiaConf_Configure_Groups_Group_System_Ptp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxWhileSyncUncertain is set, it can
// safely use t.GetTxWhileSyncUncertain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxWhileSyncUncertain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) GetTxWhileSyncUncertain() bool {
	if t == nil || t.TxWhileSyncUncertain == nil {
		return true
	}
	return *t.TxWhileSyncUncertain
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AnnounceReceiptTimeout == nil {
		var v uint32 = 3
		t.AnnounceReceiptTimeout = &v
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
	if t.NetworkType == 0 {
		t.NetworkType = NokiaConf_Configure_Groups_Group_System_Ptp_NetworkType_sdh
	}
	if t.Priority1 == nil {
		var v uint32 = 128
		t.Priority1 = &v
	}
	if t.Priority2 == nil {
		var v uint32 = 128
		t.Priority2 = &v
	}
	if t.TxWhileSyncUncertain == nil {
		var v bool = true
		t.TxWhileSyncUncertain = &v
	}
	t.Ptsf.PopulateDefaults()
	for _, e := range t.AlternateProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
	for _, e := range t.Router {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp.
func (*NokiaConf_Configure_Groups_Group_System_Ptp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile represents the /nokia-conf/configure/groups/group/system/ptp/alternate-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile struct {
	AdminState          E_NokiaTypesSros_AdminState                                            `path:"admin-state" module:"nokia-conf"`
	Domain              *uint32                                                                `path:"domain" module:"nokia-conf"`
	LogAnnounceInterval *int32                                                                 `path:"log-announce-interval" module:"nokia-conf"`
	Name                *string                                                                `path:"name" module:"nokia-conf"`
	Profile             E_NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDomain retrieves the value of the leaf Domain from the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Domain is set, it can
// safely use t.GetDomain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Domain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) GetDomain() uint32 {
	if t == nil || t.Domain == nil {
		return 24
	}
	return *t.Domain
}

// GetLogAnnounceInterval retrieves the value of the leaf LogAnnounceInterval from the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogAnnounceInterval is set, it can
// safely use t.GetLogAnnounceInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogAnnounceInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) GetLogAnnounceInterval() int32 {
	if t == nil || t.LogAnnounceInterval == nil {
		return -3
	}
	return *t.LogAnnounceInterval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) GetProfile() E_NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile_Profile {
	if t == nil || t.Profile == 0 {
		return NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile_Profile_g8275dot1_2014
	}
	return t.Profile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Domain == nil {
		var v uint32 = 24
		t.Domain = &v
	}
	if t.LogAnnounceInterval == nil {
		var v int32 = -3
		t.LogAnnounceInterval = &v
	}
	if t.Profile == 0 {
		t.Profile = NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile_Profile_g8275dot1_2014
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_AlternateProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_Port represents the /nokia-conf/configure/groups/group/system/ptp/port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_Port struct {
	Address          *string                     `path:"address" module:"nokia-conf"`
	AdminState       E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	AlternateProfile *string                     `path:"alternate-profile" module:"nokia-conf"`
	LocalPriority    *uint32                     `path:"local-priority" module:"nokia-conf"`
	LogDelayInterval *int32                      `path:"log-delay-interval" module:"nokia-conf"`
	LogSyncInterval  *int32                      `path:"log-sync-interval" module:"nokia-conf"`
	MasterOnly       *bool                       `path:"master-only" module:"nokia-conf"`
	PortId           *string                     `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Port) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetAddress() string {
	if t == nil || t.Address == nil {
		return "01:1B:19:00:00:00"
	}
	return *t.Address
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlternateProfile retrieves the value of the leaf AlternateProfile from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlternateProfile is set, it can
// safely use t.GetAlternateProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlternateProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetAlternateProfile() string {
	if t == nil || t.AlternateProfile == nil {
		return ""
	}
	return *t.AlternateProfile
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogDelayInterval retrieves the value of the leaf LogDelayInterval from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogDelayInterval is set, it can
// safely use t.GetLogDelayInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogDelayInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetLogDelayInterval() int32 {
	if t == nil || t.LogDelayInterval == nil {
		return 0
	}
	return *t.LogDelayInterval
}

// GetLogSyncInterval retrieves the value of the leaf LogSyncInterval from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogSyncInterval is set, it can
// safely use t.GetLogSyncInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogSyncInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetLogSyncInterval() int32 {
	if t == nil || t.LogSyncInterval == nil {
		return 0
	}
	return *t.LogSyncInterval
}

// GetMasterOnly retrieves the value of the leaf MasterOnly from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MasterOnly is set, it can
// safely use t.GetMasterOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MasterOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetMasterOnly() bool {
	if t == nil || t.MasterOnly == nil {
		return false
	}
	return *t.MasterOnly
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Address == nil {
		var v string = "01:1B:19:00:00:00"
		t.Address = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Ptp_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_Port.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf represents the /nokia-conf/configure/groups/group/system/ptp/ptsf YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf struct {
	MonitorPtsfUnusable *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable `path:"monitor-ptsf-unusable" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) IsYANGGoStruct() {}

// GetOrCreateMonitorPtsfUnusable retrieves the value of the MonitorPtsfUnusable field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) GetOrCreateMonitorPtsfUnusable() *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable {
	if t.MonitorPtsfUnusable != nil {
		return t.MonitorPtsfUnusable
	}
	t.MonitorPtsfUnusable = &NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable{}
	return t.MonitorPtsfUnusable
}

// GetMonitorPtsfUnusable returns the value of the MonitorPtsfUnusable struct pointer
// from NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf. If the receiver or the field MonitorPtsfUnusable is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) GetMonitorPtsfUnusable() *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable {
	if t != nil && t.MonitorPtsfUnusable != nil {
		return t.MonitorPtsfUnusable
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MonitorPtsfUnusable.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable represents the /nokia-conf/configure/groups/group/system/ptp/ptsf/monitor-ptsf-unusable YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Ptsf_MonitorPtsfUnusable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_Router represents the /nokia-conf/configure/groups/group/system/ptp/router YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_Router struct {
	AdminState     E_NokiaTypesSros_AdminState                                         `path:"admin-state" module:"nokia-conf"`
	Peer           map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer `path:"peer" module:"nokia-conf"`
	PeerLimit      *int32                                                              `path:"peer-limit" module:"nokia-conf"`
	RouterInstance *string                                                             `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_Router implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Router) IsYANGGoStruct() {}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_System_Ptp_Router struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) NewPeer(IpAddress string) (*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer{
		IpAddress: &IpAddress,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_System_Ptp_Router struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) RenamePeer(oldK, newK string) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp_Router. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) GetOrCreatePeer(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer {

	key := IpAddress

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_System_Ptp_Router. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) GetPeer(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Ptp_Router. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) DeletePeer(IpAddress string) {
	key := IpAddress

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_System_Ptp_Router. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) AppendPeer(v *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetPeerLimit retrieves the value of the leaf PeerLimit from the NokiaConf_Configure_Groups_Group_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerLimit is set, it can
// safely use t.GetPeerLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) GetPeerLimit() int32 {
	if t == nil || t.PeerLimit == nil {
		return 0
	}
	return *t.PeerLimit
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Ptp_Router
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_Router
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Ptp_Router struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_Router"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_Router.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Router) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer represents the /nokia-conf/configure/groups/group/system/ptp/router/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer struct {
	AdminState      E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IpAddress       *string                     `path:"ip-address" module:"nokia-conf"`
	LocalPriority   *uint32                     `path:"local-priority" module:"nokia-conf"`
	LogSyncInterval *int32                      `path:"log-sync-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetLocalPriority retrieves the value of the leaf LocalPriority from the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalPriority is set, it can
// safely use t.GetLocalPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) GetLocalPriority() uint32 {
	if t == nil || t.LocalPriority == nil {
		return 128
	}
	return *t.LocalPriority
}

// GetLogSyncInterval retrieves the value of the leaf LogSyncInterval from the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogSyncInterval is set, it can
// safely use t.GetLogSyncInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogSyncInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) GetLogSyncInterval() int32 {
	if t == nil || t.LogSyncInterval == nil {
		return 0
	}
	return *t.LogSyncInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.LocalPriority == nil {
		var v uint32 = 128
		t.LocalPriority = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer.
func (*NokiaConf_Configure_Groups_Group_System_Ptp_Router_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Resource represents the /nokia-conf/configure/groups/group/system/resource YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Resource struct {
	EcmpProfile map[NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile `path:"ecmp-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Resource implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Resource) IsYANGGoStruct() {}

// NewEcmpProfile creates a new entry in the EcmpProfile list of the
// NokiaConf_Configure_Groups_Group_System_Resource struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) NewEcmpProfile(ProfileId NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union) (*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcmpProfile == nil {
		t.EcmpProfile = make(map[NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile)
	}

	key := ProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EcmpProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EcmpProfile", key)
	}

	t.EcmpProfile[key] = &NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile{
		ProfileId: ProfileId,
	}

	return t.EcmpProfile[key], nil
}

// RenameEcmpProfile renames an entry in the list EcmpProfile within
// the NokiaConf_Configure_Groups_Group_System_Resource struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) RenameEcmpProfile(oldK, newK NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union) error {
	if _, ok := t.EcmpProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in EcmpProfile", newK)
	}

	e, ok := t.EcmpProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EcmpProfile", oldK)
	}
	e.ProfileId = newK

	t.EcmpProfile[newK] = e
	delete(t.EcmpProfile, oldK)
	return nil
}

// GetOrCreateEcmpProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Resource. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) GetOrCreateEcmpProfile(ProfileId NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile {

	key := ProfileId

	if v, ok := t.EcmpProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEcmpProfile(ProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEcmpProfile got unexpected error: %v", err))
	}
	return v
}

// GetEcmpProfile retrieves the value with the specified key from
// the EcmpProfile map field of NokiaConf_Configure_Groups_Group_System_Resource. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) GetEcmpProfile(ProfileId NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union) *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile {

	if t == nil {
		return nil
	}

	key := ProfileId

	if lm, ok := t.EcmpProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteEcmpProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Resource. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) DeleteEcmpProfile(ProfileId NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union) {
	key := ProfileId

	delete(t.EcmpProfile, key)
}

// AppendEcmpProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile struct to the
// list EcmpProfile of NokiaConf_Configure_Groups_Group_System_Resource. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) AppendEcmpProfile(v *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) error {
	key := v.ProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcmpProfile == nil {
		t.EcmpProfile = make(map[NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union]*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile)
	}

	if _, ok := t.EcmpProfile[key]; ok {
		return fmt.Errorf("duplicate key for list EcmpProfile %v", key)
	}

	t.EcmpProfile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Resource
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EcmpProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Resource"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Resource) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Resource.
func (*NokiaConf_Configure_Groups_Group_System_Resource) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile represents the /nokia-conf/configure/groups/group/system/resource/ecmp-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile struct {
	Groups    *uint32                                                                      `path:"groups" module:"nokia-conf"`
	Links     *uint32                                                                      `path:"links" module:"nokia-conf"`
	ProfileId NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union `path:"profile-id" module:"nokia-conf"`
	Type      E_NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_Type          `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) IsYANGGoStruct() {}

// GetGroups retrieves the value of the leaf Groups from the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Groups is set, it can
// safely use t.GetGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Groups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) GetGroups() uint32 {
	if t == nil || t.Groups == nil {
		return 0
	}
	return *t.Groups
}

// GetLinks retrieves the value of the leaf Links from the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Links is set, it can
// safely use t.GetLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Links == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) GetLinks() uint32 {
	if t == nil || t.Links == nil {
		return 0
	}
	return *t.Links
}

// GetProfileId retrieves the value of the leaf ProfileId from the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProfileId is set, it can
// safely use t.GetProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) GetProfileId() NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_ProfileId_Union {
	if t == nil || t.ProfileId == nil {
		return nil
	}
	return t.ProfileId
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) GetType() E_NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"profile-id": t.ProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile.
func (*NokiaConf_Configure_Groups_Group_System_Resource_EcmpProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl represents the /nokia-conf/configure/groups/group/system/script-control YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ScriptControl struct {
	Script       map[NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script             `path:"script" module:"nokia-conf"`
	ScriptPolicy map[NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy `path:"script-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ScriptControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key represents the key for list Script of element /nokia-conf/configure/groups/group/system/script-control.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key struct {
	ScriptName string `path:"script-name"`
	Owner      string `path:"owner"`
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key represents the key for list ScriptPolicy of element /nokia-conf/configure/groups/group/system/script-control.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key struct {
	PolicyName string `path:"policy-name"`
	Owner      string `path:"owner"`
}

// NewScript creates a new entry in the Script list of the
// NokiaConf_Configure_Groups_Group_System_ScriptControl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) NewScript(ScriptName string, Owner string) (*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Script == nil {
		t.Script = make(map[NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script)
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Script[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Script", key)
	}

	t.Script[key] = &NokiaConf_Configure_Groups_Group_System_ScriptControl_Script{
		ScriptName: &ScriptName,
		Owner:      &Owner,
	}

	return t.Script[key], nil
}

// RenameScript renames an entry in the list Script within
// the NokiaConf_Configure_Groups_Group_System_ScriptControl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) RenameScript(oldK, newK NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key) error {
	if _, ok := t.Script[newK]; ok {
		return fmt.Errorf("key %v already exists in Script", newK)
	}

	e, ok := t.Script[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Script", oldK)
	}
	e.ScriptName = &newK.ScriptName
	e.Owner = &newK.Owner

	t.Script[newK] = e
	delete(t.Script, oldK)
	return nil
}

// GetOrCreateScript retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ScriptControl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) GetOrCreateScript(ScriptName string, Owner string) *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script {

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	if v, ok := t.Script[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScript(ScriptName, Owner)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScript got unexpected error: %v", err))
	}
	return v
}

// GetScript retrieves the value with the specified key from
// the Script map field of NokiaConf_Configure_Groups_Group_System_ScriptControl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) GetScript(ScriptName string, Owner string) *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	if lm, ok := t.Script[key]; ok {
		return lm
	}
	return nil
}

// DeleteScript deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ScriptControl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) DeleteScript(ScriptName string, Owner string) {
	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key{
		ScriptName: ScriptName,
		Owner:      Owner,
	}

	delete(t.Script, key)
}

// AppendScript appends the supplied NokiaConf_Configure_Groups_Group_System_ScriptControl_Script struct to the
// list Script of NokiaConf_Configure_Groups_Group_System_ScriptControl. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_ScriptControl_Script already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) AppendScript(v *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) error {
	if v.ScriptName == nil {
		return fmt.Errorf("invalid nil key for ScriptName")
	}

	if v.Owner == nil {
		return fmt.Errorf("invalid nil key for Owner")
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key{
		ScriptName: *v.ScriptName,
		Owner:      *v.Owner,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Script == nil {
		t.Script = make(map[NokiaConf_Configure_Groups_Group_System_ScriptControl_Script_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script)
	}

	if _, ok := t.Script[key]; ok {
		return fmt.Errorf("duplicate key for list Script %v", key)
	}

	t.Script[key] = v
	return nil
}

// NewScriptPolicy creates a new entry in the ScriptPolicy list of the
// NokiaConf_Configure_Groups_Group_System_ScriptControl struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) NewScriptPolicy(PolicyName string, Owner string) (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScriptPolicy == nil {
		t.ScriptPolicy = make(map[NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy)
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ScriptPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ScriptPolicy", key)
	}

	t.ScriptPolicy[key] = &NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy{
		PolicyName: &PolicyName,
		Owner:      &Owner,
	}

	return t.ScriptPolicy[key], nil
}

// RenameScriptPolicy renames an entry in the list ScriptPolicy within
// the NokiaConf_Configure_Groups_Group_System_ScriptControl struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) RenameScriptPolicy(oldK, newK NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key) error {
	if _, ok := t.ScriptPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in ScriptPolicy", newK)
	}

	e, ok := t.ScriptPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ScriptPolicy", oldK)
	}
	e.PolicyName = &newK.PolicyName
	e.Owner = &newK.Owner

	t.ScriptPolicy[newK] = e
	delete(t.ScriptPolicy, oldK)
	return nil
}

// GetOrCreateScriptPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ScriptControl. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) GetOrCreateScriptPolicy(PolicyName string, Owner string) *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy {

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	if v, ok := t.ScriptPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewScriptPolicy(PolicyName, Owner)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateScriptPolicy got unexpected error: %v", err))
	}
	return v
}

// GetScriptPolicy retrieves the value with the specified key from
// the ScriptPolicy map field of NokiaConf_Configure_Groups_Group_System_ScriptControl. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) GetScriptPolicy(PolicyName string, Owner string) *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	if lm, ok := t.ScriptPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteScriptPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_ScriptControl. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) DeleteScriptPolicy(PolicyName string, Owner string) {
	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: PolicyName,
		Owner:      Owner,
	}

	delete(t.ScriptPolicy, key)
}

// AppendScriptPolicy appends the supplied NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy struct to the
// list ScriptPolicy of NokiaConf_Configure_Groups_Group_System_ScriptControl. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) AppendScriptPolicy(v *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key for PolicyName")
	}

	if v.Owner == nil {
		return fmt.Errorf("invalid nil key for Owner")
	}

	key := NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key{
		PolicyName: *v.PolicyName,
		Owner:      *v.Owner,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ScriptPolicy == nil {
		t.ScriptPolicy = make(map[NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Key]*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy)
	}

	if _, ok := t.ScriptPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list ScriptPolicy %v", key)
	}

	t.ScriptPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ScriptControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Script {
		e.PopulateDefaults()
	}
	for _, e := range t.ScriptPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ScriptControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ScriptControl.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_Script represents the /nokia-conf/configure/groups/group/system/script-control/script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_Script struct {
	AdminState  E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Description *string                     `path:"description" module:"nokia-conf"`
	Location    *string                     `path:"location" module:"nokia-conf"`
	Owner       *string                     `path:"owner" module:"nokia-conf"`
	ScriptName  *string                     `path:"script-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ScriptControl_Script implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLocation retrieves the value of the leaf Location from the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Location is set, it can
// safely use t.GetLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Location == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) GetLocation() string {
	if t == nil || t.Location == nil {
		return ""
	}
	return *t.Location
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// GetScriptName retrieves the value of the leaf ScriptName from the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScriptName is set, it can
// safely use t.GetScriptName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScriptName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) GetScriptName() string {
	if t == nil || t.ScriptName == nil {
		return ""
	}
	return *t.ScriptName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_ScriptControl_Script struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	if t.ScriptName == nil {
		return nil, fmt.Errorf("nil value for key ScriptName")
	}

	return map[string]interface{}{
		"owner":       *t.Owner,
		"script-name": *t.ScriptName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ScriptControl_Script"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ScriptControl_Script.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_Script) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy represents the /nokia-conf/configure/groups/group/system/script-control/script-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy struct {
	AdminState     E_NokiaTypesSros_AdminState                                                         `path:"admin-state" module:"nokia-conf"`
	ExpireTime     NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_ExpireTime_Union `path:"expire-time" module:"nokia-conf"`
	Lifetime       NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Lifetime_Union   `path:"lifetime" module:"nokia-conf"`
	LockOverride   *bool                                                                               `path:"lock-override" module:"nokia-conf"`
	MaxCompleted   *uint32                                                                             `path:"max-completed" module:"nokia-conf"`
	Owner          *string                                                                             `path:"owner" module:"nokia-conf"`
	PolicyName     *string                                                                             `path:"policy-name" module:"nokia-conf"`
	PythonLifetime *uint32                                                                             `path:"python-lifetime" module:"nokia-conf"`
	PythonScript   *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript    `path:"python-script" module:"nokia-conf"`
	Results        *string                                                                             `path:"results" module:"nokia-conf"`
	Script         *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script          `path:"script" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) IsYANGGoStruct() {}

// GetOrCreatePythonScript retrieves the value of the PythonScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetOrCreatePythonScript() *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript {
	if t.PythonScript != nil {
		return t.PythonScript
	}
	t.PythonScript = &NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript{}
	return t.PythonScript
}

// GetOrCreateScript retrieves the value of the Script field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetOrCreateScript() *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script {
	if t.Script != nil {
		return t.Script
	}
	t.Script = &NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script{}
	return t.Script
}

// GetPythonScript returns the value of the PythonScript struct pointer
// from NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy. If the receiver or the field PythonScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetPythonScript() *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript {
	if t != nil && t.PythonScript != nil {
		return t.PythonScript
	}
	return nil
}

// GetScript returns the value of the Script struct pointer
// from NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy. If the receiver or the field Script is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetScript() *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script {
	if t != nil && t.Script != nil {
		return t.Script
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetExpireTime retrieves the value of the leaf ExpireTime from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExpireTime is set, it can
// safely use t.GetExpireTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExpireTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetExpireTime() NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_ExpireTime_Union {
	if t == nil || t.ExpireTime == nil {
		return UnionUint32(3600)
	}
	return t.ExpireTime
}

// GetLifetime retrieves the value of the leaf Lifetime from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lifetime is set, it can
// safely use t.GetLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetLifetime() NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Lifetime_Union {
	if t == nil || t.Lifetime == nil {
		return UnionUint32(3600)
	}
	return t.Lifetime
}

// GetLockOverride retrieves the value of the leaf LockOverride from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LockOverride is set, it can
// safely use t.GetLockOverride() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LockOverride == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetLockOverride() bool {
	if t == nil || t.LockOverride == nil {
		return false
	}
	return *t.LockOverride
}

// GetMaxCompleted retrieves the value of the leaf MaxCompleted from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxCompleted is set, it can
// safely use t.GetMaxCompleted() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxCompleted == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetMaxCompleted() uint32 {
	if t == nil || t.MaxCompleted == nil {
		return 1
	}
	return *t.MaxCompleted
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetPythonLifetime retrieves the value of the leaf PythonLifetime from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PythonLifetime is set, it can
// safely use t.GetPythonLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PythonLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetPythonLifetime() uint32 {
	if t == nil || t.PythonLifetime == nil {
		return 0
	}
	return *t.PythonLifetime
}

// GetResults retrieves the value of the leaf Results from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Results is set, it can
// safely use t.GetResults() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Results == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) GetResults() string {
	if t == nil || t.Results == nil {
		return ""
	}
	return *t.Results
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ExpireTime == nil {
		t.ExpireTime = UnionUint32(3600)
	}
	if t.Lifetime == nil {
		t.Lifetime = UnionUint32(3600)
	}
	if t.LockOverride == nil {
		var v bool = false
		t.LockOverride = &v
	}
	if t.MaxCompleted == nil {
		var v uint32 = 1
		t.MaxCompleted = &v
	}
	t.PythonScript.PopulateDefaults()
	t.Script.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Owner == nil {
		return nil, fmt.Errorf("nil value for key Owner")
	}

	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"owner":       *t.Owner,
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript represents the /nokia-conf/configure/groups/group/system/script-control/script-policy/python-script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript struct {
	Name *string `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script represents the /nokia-conf/configure/groups/group/system/script-control/script-policy/script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script struct {
	Name  *string `path:"name" module:"nokia-conf"`
	Owner *string `path:"owner" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) GetOwner() string {
	if t == nil || t.Owner == nil {
		return ""
	}
	return *t.Owner
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script.
func (*NokiaConf_Configure_Groups_Group_System_ScriptControl_ScriptPolicy_Script) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security represents the /nokia-conf/configure/groups/group/system/security YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security struct {
	Aaa                    *NokiaConf_Configure_Groups_Group_System_Security_Aaa                    `path:"aaa" module:"nokia-conf" yangPresence:"true"`
	CliScript              *NokiaConf_Configure_Groups_Group_System_Security_CliScript              `path:"cli-script" module:"nokia-conf" yangPresence:"true"`
	CpmFilter              *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter              `path:"cpm-filter" module:"nokia-conf" yangPresence:"true"`
	CpmQueue               *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue               `path:"cpm-queue" module:"nokia-conf" yangPresence:"true"`
	CpuProtection          *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection          `path:"cpu-protection" module:"nokia-conf" yangPresence:"true"`
	DistCpuProtection      *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection      `path:"dist-cpu-protection" module:"nokia-conf" yangPresence:"true"`
	Dot1X                  *NokiaConf_Configure_Groups_Group_System_Security_Dot1X                  `path:"dot1x" module:"nokia-conf" yangPresence:"true"`
	FtpServer              *bool                                                                    `path:"ftp-server" module:"nokia-conf"`
	HashControl            *NokiaConf_Configure_Groups_Group_System_Security_HashControl            `path:"hash-control" module:"nokia-conf" yangPresence:"true"`
	Keychains              *NokiaConf_Configure_Groups_Group_System_Security_Keychains              `path:"keychains" module:"nokia-conf"`
	Management             *NokiaConf_Configure_Groups_Group_System_Security_Management             `path:"management" module:"nokia-conf" yangPresence:"true"`
	ManagementAccessFilter *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter `path:"management-access-filter" module:"nokia-conf" yangPresence:"true"`
	PerPeerQueuing         *bool                                                                    `path:"per-peer-queuing" module:"nokia-conf"`
	Pki                    *NokiaConf_Configure_Groups_Group_System_Security_Pki                    `path:"pki" module:"nokia-conf" yangPresence:"true"`
	PythonScript           *NokiaConf_Configure_Groups_Group_System_Security_PythonScript           `path:"python-script" module:"nokia-conf" yangPresence:"true"`
	Snmp                   *NokiaConf_Configure_Groups_Group_System_Security_Snmp                   `path:"snmp" module:"nokia-conf" yangPresence:"true"`
	SourceAddress          *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress          `path:"source-address" module:"nokia-conf"`
	Ssh                    *NokiaConf_Configure_Groups_Group_System_Security_Ssh                    `path:"ssh" module:"nokia-conf" yangPresence:"true"`
	SystemPasswords        *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords        `path:"system-passwords" module:"nokia-conf" yangPresence:"true"`
	TechSupport            *NokiaConf_Configure_Groups_Group_System_Security_TechSupport            `path:"tech-support" module:"nokia-conf" yangPresence:"true"`
	TelnetServer           *bool                                                                    `path:"telnet-server" module:"nokia-conf"`
	Telnet6Server          *bool                                                                    `path:"telnet6-server" module:"nokia-conf"`
	Tls                    *NokiaConf_Configure_Groups_Group_System_Security_Tls                    `path:"tls" module:"nokia-conf" yangPresence:"true"`
	UserParams             *NokiaConf_Configure_Groups_Group_System_Security_UserParams             `path:"user-params" module:"nokia-conf" yangPresence:"true"`
	VprnNetworkExceptions  *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions  `path:"vprn-network-exceptions" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security) IsYANGGoStruct() {}

// GetOrCreateAaa retrieves the value of the Aaa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateAaa() *NokiaConf_Configure_Groups_Group_System_Security_Aaa {
	if t.Aaa != nil {
		return t.Aaa
	}
	t.Aaa = &NokiaConf_Configure_Groups_Group_System_Security_Aaa{}
	return t.Aaa
}

// GetOrCreateCliScript retrieves the value of the CliScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateCliScript() *NokiaConf_Configure_Groups_Group_System_Security_CliScript {
	if t.CliScript != nil {
		return t.CliScript
	}
	t.CliScript = &NokiaConf_Configure_Groups_Group_System_Security_CliScript{}
	return t.CliScript
}

// GetOrCreateCpmFilter retrieves the value of the CpmFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateCpmFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter {
	if t.CpmFilter != nil {
		return t.CpmFilter
	}
	t.CpmFilter = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter{}
	return t.CpmFilter
}

// GetOrCreateCpmQueue retrieves the value of the CpmQueue field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateCpmQueue() *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue {
	if t.CpmQueue != nil {
		return t.CpmQueue
	}
	t.CpmQueue = &NokiaConf_Configure_Groups_Group_System_Security_CpmQueue{}
	return t.CpmQueue
}

// GetOrCreateCpuProtection retrieves the value of the CpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateCpuProtection() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection {
	if t.CpuProtection != nil {
		return t.CpuProtection
	}
	t.CpuProtection = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection{}
	return t.CpuProtection
}

// GetOrCreateDistCpuProtection retrieves the value of the DistCpuProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateDistCpuProtection() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection {
	if t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	t.DistCpuProtection = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection{}
	return t.DistCpuProtection
}

// GetOrCreateDot1X retrieves the value of the Dot1X field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateDot1X() *NokiaConf_Configure_Groups_Group_System_Security_Dot1X {
	if t.Dot1X != nil {
		return t.Dot1X
	}
	t.Dot1X = &NokiaConf_Configure_Groups_Group_System_Security_Dot1X{}
	return t.Dot1X
}

// GetOrCreateHashControl retrieves the value of the HashControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateHashControl() *NokiaConf_Configure_Groups_Group_System_Security_HashControl {
	if t.HashControl != nil {
		return t.HashControl
	}
	t.HashControl = &NokiaConf_Configure_Groups_Group_System_Security_HashControl{}
	return t.HashControl
}

// GetOrCreateKeychains retrieves the value of the Keychains field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateKeychains() *NokiaConf_Configure_Groups_Group_System_Security_Keychains {
	if t.Keychains != nil {
		return t.Keychains
	}
	t.Keychains = &NokiaConf_Configure_Groups_Group_System_Security_Keychains{}
	return t.Keychains
}

// GetOrCreateManagement retrieves the value of the Management field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateManagement() *NokiaConf_Configure_Groups_Group_System_Security_Management {
	if t.Management != nil {
		return t.Management
	}
	t.Management = &NokiaConf_Configure_Groups_Group_System_Security_Management{}
	return t.Management
}

// GetOrCreateManagementAccessFilter retrieves the value of the ManagementAccessFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateManagementAccessFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter {
	if t.ManagementAccessFilter != nil {
		return t.ManagementAccessFilter
	}
	t.ManagementAccessFilter = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter{}
	return t.ManagementAccessFilter
}

// GetOrCreatePki retrieves the value of the Pki field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreatePki() *NokiaConf_Configure_Groups_Group_System_Security_Pki {
	if t.Pki != nil {
		return t.Pki
	}
	t.Pki = &NokiaConf_Configure_Groups_Group_System_Security_Pki{}
	return t.Pki
}

// GetOrCreatePythonScript retrieves the value of the PythonScript field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreatePythonScript() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript {
	if t.PythonScript != nil {
		return t.PythonScript
	}
	t.PythonScript = &NokiaConf_Configure_Groups_Group_System_Security_PythonScript{}
	return t.PythonScript
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateSnmp() *NokiaConf_Configure_Groups_Group_System_Security_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Groups_Group_System_Security_Snmp{}
	return t.Snmp
}

// GetOrCreateSourceAddress retrieves the value of the SourceAddress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateSourceAddress() *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress {
	if t.SourceAddress != nil {
		return t.SourceAddress
	}
	t.SourceAddress = &NokiaConf_Configure_Groups_Group_System_Security_SourceAddress{}
	return t.SourceAddress
}

// GetOrCreateSsh retrieves the value of the Ssh field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateSsh() *NokiaConf_Configure_Groups_Group_System_Security_Ssh {
	if t.Ssh != nil {
		return t.Ssh
	}
	t.Ssh = &NokiaConf_Configure_Groups_Group_System_Security_Ssh{}
	return t.Ssh
}

// GetOrCreateSystemPasswords retrieves the value of the SystemPasswords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateSystemPasswords() *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords {
	if t.SystemPasswords != nil {
		return t.SystemPasswords
	}
	t.SystemPasswords = &NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords{}
	return t.SystemPasswords
}

// GetOrCreateTechSupport retrieves the value of the TechSupport field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateTechSupport() *NokiaConf_Configure_Groups_Group_System_Security_TechSupport {
	if t.TechSupport != nil {
		return t.TechSupport
	}
	t.TechSupport = &NokiaConf_Configure_Groups_Group_System_Security_TechSupport{}
	return t.TechSupport
}

// GetOrCreateTls retrieves the value of the Tls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateTls() *NokiaConf_Configure_Groups_Group_System_Security_Tls {
	if t.Tls != nil {
		return t.Tls
	}
	t.Tls = &NokiaConf_Configure_Groups_Group_System_Security_Tls{}
	return t.Tls
}

// GetOrCreateUserParams retrieves the value of the UserParams field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateUserParams() *NokiaConf_Configure_Groups_Group_System_Security_UserParams {
	if t.UserParams != nil {
		return t.UserParams
	}
	t.UserParams = &NokiaConf_Configure_Groups_Group_System_Security_UserParams{}
	return t.UserParams
}

// GetOrCreateVprnNetworkExceptions retrieves the value of the VprnNetworkExceptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetOrCreateVprnNetworkExceptions() *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions {
	if t.VprnNetworkExceptions != nil {
		return t.VprnNetworkExceptions
	}
	t.VprnNetworkExceptions = &NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions{}
	return t.VprnNetworkExceptions
}

// GetAaa returns the value of the Aaa struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Aaa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetAaa() *NokiaConf_Configure_Groups_Group_System_Security_Aaa {
	if t != nil && t.Aaa != nil {
		return t.Aaa
	}
	return nil
}

// GetCliScript returns the value of the CliScript struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field CliScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetCliScript() *NokiaConf_Configure_Groups_Group_System_Security_CliScript {
	if t != nil && t.CliScript != nil {
		return t.CliScript
	}
	return nil
}

// GetCpmFilter returns the value of the CpmFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field CpmFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetCpmFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter {
	if t != nil && t.CpmFilter != nil {
		return t.CpmFilter
	}
	return nil
}

// GetCpmQueue returns the value of the CpmQueue struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field CpmQueue is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetCpmQueue() *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue {
	if t != nil && t.CpmQueue != nil {
		return t.CpmQueue
	}
	return nil
}

// GetCpuProtection returns the value of the CpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field CpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetCpuProtection() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection {
	if t != nil && t.CpuProtection != nil {
		return t.CpuProtection
	}
	return nil
}

// GetDistCpuProtection returns the value of the DistCpuProtection struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field DistCpuProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetDistCpuProtection() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection {
	if t != nil && t.DistCpuProtection != nil {
		return t.DistCpuProtection
	}
	return nil
}

// GetDot1X returns the value of the Dot1X struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Dot1X is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetDot1X() *NokiaConf_Configure_Groups_Group_System_Security_Dot1X {
	if t != nil && t.Dot1X != nil {
		return t.Dot1X
	}
	return nil
}

// GetHashControl returns the value of the HashControl struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field HashControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetHashControl() *NokiaConf_Configure_Groups_Group_System_Security_HashControl {
	if t != nil && t.HashControl != nil {
		return t.HashControl
	}
	return nil
}

// GetKeychains returns the value of the Keychains struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Keychains is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetKeychains() *NokiaConf_Configure_Groups_Group_System_Security_Keychains {
	if t != nil && t.Keychains != nil {
		return t.Keychains
	}
	return nil
}

// GetManagement returns the value of the Management struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Management is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetManagement() *NokiaConf_Configure_Groups_Group_System_Security_Management {
	if t != nil && t.Management != nil {
		return t.Management
	}
	return nil
}

// GetManagementAccessFilter returns the value of the ManagementAccessFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field ManagementAccessFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetManagementAccessFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter {
	if t != nil && t.ManagementAccessFilter != nil {
		return t.ManagementAccessFilter
	}
	return nil
}

// GetPki returns the value of the Pki struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Pki is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetPki() *NokiaConf_Configure_Groups_Group_System_Security_Pki {
	if t != nil && t.Pki != nil {
		return t.Pki
	}
	return nil
}

// GetPythonScript returns the value of the PythonScript struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field PythonScript is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetPythonScript() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript {
	if t != nil && t.PythonScript != nil {
		return t.PythonScript
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetSnmp() *NokiaConf_Configure_Groups_Group_System_Security_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetSourceAddress returns the value of the SourceAddress struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field SourceAddress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetSourceAddress() *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress {
	if t != nil && t.SourceAddress != nil {
		return t.SourceAddress
	}
	return nil
}

// GetSsh returns the value of the Ssh struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Ssh is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetSsh() *NokiaConf_Configure_Groups_Group_System_Security_Ssh {
	if t != nil && t.Ssh != nil {
		return t.Ssh
	}
	return nil
}

// GetSystemPasswords returns the value of the SystemPasswords struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field SystemPasswords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetSystemPasswords() *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords {
	if t != nil && t.SystemPasswords != nil {
		return t.SystemPasswords
	}
	return nil
}

// GetTechSupport returns the value of the TechSupport struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field TechSupport is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetTechSupport() *NokiaConf_Configure_Groups_Group_System_Security_TechSupport {
	if t != nil && t.TechSupport != nil {
		return t.TechSupport
	}
	return nil
}

// GetTls returns the value of the Tls struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field Tls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetTls() *NokiaConf_Configure_Groups_Group_System_Security_Tls {
	if t != nil && t.Tls != nil {
		return t.Tls
	}
	return nil
}

// GetUserParams returns the value of the UserParams struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field UserParams is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetUserParams() *NokiaConf_Configure_Groups_Group_System_Security_UserParams {
	if t != nil && t.UserParams != nil {
		return t.UserParams
	}
	return nil
}

// GetVprnNetworkExceptions returns the value of the VprnNetworkExceptions struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security. If the receiver or the field VprnNetworkExceptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetVprnNetworkExceptions() *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions {
	if t != nil && t.VprnNetworkExceptions != nil {
		return t.VprnNetworkExceptions
	}
	return nil
}

// GetFtpServer retrieves the value of the leaf FtpServer from the NokiaConf_Configure_Groups_Group_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FtpServer is set, it can
// safely use t.GetFtpServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FtpServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetFtpServer() bool {
	if t == nil || t.FtpServer == nil {
		return false
	}
	return *t.FtpServer
}

// GetPerPeerQueuing retrieves the value of the leaf PerPeerQueuing from the NokiaConf_Configure_Groups_Group_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerPeerQueuing is set, it can
// safely use t.GetPerPeerQueuing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerPeerQueuing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetPerPeerQueuing() bool {
	if t == nil || t.PerPeerQueuing == nil {
		return false
	}
	return *t.PerPeerQueuing
}

// GetTelnetServer retrieves the value of the leaf TelnetServer from the NokiaConf_Configure_Groups_Group_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetServer is set, it can
// safely use t.GetTelnetServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetTelnetServer() bool {
	if t == nil || t.TelnetServer == nil {
		return false
	}
	return *t.TelnetServer
}

// GetTelnet6Server retrieves the value of the leaf Telnet6Server from the NokiaConf_Configure_Groups_Group_System_Security
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Telnet6Server is set, it can
// safely use t.GetTelnet6Server() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Telnet6Server == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security) GetTelnet6Server() bool {
	if t == nil || t.Telnet6Server == nil {
		return false
	}
	return *t.Telnet6Server
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FtpServer == nil {
		var v bool = false
		t.FtpServer = &v
	}
	if t.TelnetServer == nil {
		var v bool = false
		t.TelnetServer = &v
	}
	if t.Telnet6Server == nil {
		var v bool = false
		t.Telnet6Server = &v
	}
	t.Aaa.PopulateDefaults()
	t.CliScript.PopulateDefaults()
	t.CpmFilter.PopulateDefaults()
	t.CpmQueue.PopulateDefaults()
	t.CpuProtection.PopulateDefaults()
	t.DistCpuProtection.PopulateDefaults()
	t.Dot1X.PopulateDefaults()
	t.HashControl.PopulateDefaults()
	t.Keychains.PopulateDefaults()
	t.Management.PopulateDefaults()
	t.ManagementAccessFilter.PopulateDefaults()
	t.Pki.PopulateDefaults()
	t.PythonScript.PopulateDefaults()
	t.Snmp.PopulateDefaults()
	t.SourceAddress.PopulateDefaults()
	t.Ssh.PopulateDefaults()
	t.SystemPasswords.PopulateDefaults()
	t.TechSupport.PopulateDefaults()
	t.Tls.PopulateDefaults()
	t.UserParams.PopulateDefaults()
	t.VprnNetworkExceptions.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security.
func (*NokiaConf_Configure_Groups_Group_System_Security) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa represents the /nokia-conf/configure/groups/group/system/security/aaa YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa struct {
	CliSessionGroup     map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup                                                                                `path:"cli-session-group" module:"nokia-conf"`
	HealthCheck         NokiaConf_Configure_Groups_Group_System_Security_Aaa_HealthCheck_Union                                                                                          `path:"health-check" module:"nokia-conf"`
	LocalProfiles       *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles                                                                                             `path:"local-profiles" module:"nokia-conf" yangPresence:"true"`
	ManagementInterface *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface                                                                                       `path:"management-interface" module:"nokia-conf" yangPresence:"true"`
	RemoteServers       *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers                                                                                             `path:"remote-servers" module:"nokia-conf" yangPresence:"true"`
	UserTemplate        map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate `path:"user-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa) IsYANGGoStruct() {}

// NewCliSessionGroup creates a new entry in the CliSessionGroup list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) NewCliSessionGroup(CliSessionGroupName string) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CliSessionGroup == nil {
		t.CliSessionGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup)
	}

	key := CliSessionGroupName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CliSessionGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CliSessionGroup", key)
	}

	t.CliSessionGroup[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup{
		CliSessionGroupName: &CliSessionGroupName,
	}

	return t.CliSessionGroup[key], nil
}

// RenameCliSessionGroup renames an entry in the list CliSessionGroup within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) RenameCliSessionGroup(oldK, newK string) error {
	if _, ok := t.CliSessionGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in CliSessionGroup", newK)
	}

	e, ok := t.CliSessionGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CliSessionGroup", oldK)
	}
	e.CliSessionGroupName = &newK

	t.CliSessionGroup[newK] = e
	delete(t.CliSessionGroup, oldK)
	return nil
}

// GetOrCreateCliSessionGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetOrCreateCliSessionGroup(CliSessionGroupName string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup {

	key := CliSessionGroupName

	if v, ok := t.CliSessionGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCliSessionGroup(CliSessionGroupName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCliSessionGroup got unexpected error: %v", err))
	}
	return v
}

// GetCliSessionGroup retrieves the value with the specified key from
// the CliSessionGroup map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetCliSessionGroup(CliSessionGroupName string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup {

	if t == nil {
		return nil
	}

	key := CliSessionGroupName

	if lm, ok := t.CliSessionGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteCliSessionGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) DeleteCliSessionGroup(CliSessionGroupName string) {
	key := CliSessionGroupName

	delete(t.CliSessionGroup, key)
}

// AppendCliSessionGroup appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup struct to the
// list CliSessionGroup of NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) AppendCliSessionGroup(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) error {
	if v.CliSessionGroupName == nil {
		return fmt.Errorf("invalid nil key received for CliSessionGroupName")
	}

	key := *v.CliSessionGroupName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CliSessionGroup == nil {
		t.CliSessionGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup)
	}

	if _, ok := t.CliSessionGroup[key]; ok {
		return fmt.Errorf("duplicate key for list CliSessionGroup %v", key)
	}

	t.CliSessionGroup[key] = v
	return nil
}

// NewUserTemplate creates a new entry in the UserTemplate list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) NewUserTemplate(UserTemplateName NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UserTemplate == nil {
		t.UserTemplate = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate)
	}

	key := UserTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UserTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UserTemplate", key)
	}

	t.UserTemplate[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate{
		UserTemplateName: UserTemplateName,
	}

	return t.UserTemplate[key], nil
}

// RenameUserTemplate renames an entry in the list UserTemplate within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) RenameUserTemplate(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union) error {
	if _, ok := t.UserTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in UserTemplate", newK)
	}

	e, ok := t.UserTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UserTemplate", oldK)
	}
	e.UserTemplateName = newK

	t.UserTemplate[newK] = e
	delete(t.UserTemplate, oldK)
	return nil
}

// GetOrCreateUserTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetOrCreateUserTemplate(UserTemplateName NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate {

	key := UserTemplateName

	if v, ok := t.UserTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUserTemplate(UserTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUserTemplate got unexpected error: %v", err))
	}
	return v
}

// GetUserTemplate retrieves the value with the specified key from
// the UserTemplate map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetUserTemplate(UserTemplateName NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate {

	if t == nil {
		return nil
	}

	key := UserTemplateName

	if lm, ok := t.UserTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteUserTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) DeleteUserTemplate(UserTemplateName NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union) {
	key := UserTemplateName

	delete(t.UserTemplate, key)
}

// AppendUserTemplate appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate struct to the
// list UserTemplate of NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) AppendUserTemplate(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) error {
	key := v.UserTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UserTemplate == nil {
		t.UserTemplate = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate)
	}

	if _, ok := t.UserTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list UserTemplate %v", key)
	}

	t.UserTemplate[key] = v
	return nil
}

// GetOrCreateLocalProfiles retrieves the value of the LocalProfiles field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetOrCreateLocalProfiles() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles {
	if t.LocalProfiles != nil {
		return t.LocalProfiles
	}
	t.LocalProfiles = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles{}
	return t.LocalProfiles
}

// GetOrCreateManagementInterface retrieves the value of the ManagementInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetOrCreateManagementInterface() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface {
	if t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	t.ManagementInterface = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface{}
	return t.ManagementInterface
}

// GetOrCreateRemoteServers retrieves the value of the RemoteServers field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetOrCreateRemoteServers() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers {
	if t.RemoteServers != nil {
		return t.RemoteServers
	}
	t.RemoteServers = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers{}
	return t.RemoteServers
}

// GetLocalProfiles returns the value of the LocalProfiles struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the receiver or the field LocalProfiles is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetLocalProfiles() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles {
	if t != nil && t.LocalProfiles != nil {
		return t.LocalProfiles
	}
	return nil
}

// GetManagementInterface returns the value of the ManagementInterface struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the receiver or the field ManagementInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetManagementInterface() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface {
	if t != nil && t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	return nil
}

// GetRemoteServers returns the value of the RemoteServers struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa. If the receiver or the field RemoteServers is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetRemoteServers() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers {
	if t != nil && t.RemoteServers != nil {
		return t.RemoteServers
	}
	return nil
}

// GetHealthCheck retrieves the value of the leaf HealthCheck from the NokiaConf_Configure_Groups_Group_System_Security_Aaa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthCheck is set, it can
// safely use t.GetHealthCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) GetHealthCheck() NokiaConf_Configure_Groups_Group_System_Security_Aaa_HealthCheck_Union {
	if t == nil || t.HealthCheck == nil {
		return UnionInt32(30)
	}
	return t.HealthCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthCheck == nil {
		t.HealthCheck = UnionInt32(30)
	}
	t.LocalProfiles.PopulateDefaults()
	t.ManagementInterface.PopulateDefaults()
	t.RemoteServers.PopulateDefaults()
	for _, e := range t.CliSessionGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.UserTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup represents the /nokia-conf/configure/groups/group/system/security/aaa/cli-session-group YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup struct {
	CliSessionGroupName *string `path:"cli-session-group-name" module:"nokia-conf"`
	CombinedMaxSessions *int32  `path:"combined-max-sessions" module:"nokia-conf"`
	Description         *string `path:"description" module:"nokia-conf"`
	SshMaxSessions      *int32  `path:"ssh-max-sessions" module:"nokia-conf"`
	TelnetMaxSessions   *int32  `path:"telnet-max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) IsYANGGoStruct() {}

// GetCliSessionGroupName retrieves the value of the leaf CliSessionGroupName from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliSessionGroupName is set, it can
// safely use t.GetCliSessionGroupName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliSessionGroupName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) GetCliSessionGroupName() string {
	if t == nil || t.CliSessionGroupName == nil {
		return ""
	}
	return *t.CliSessionGroupName
}

// GetCombinedMaxSessions retrieves the value of the leaf CombinedMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CombinedMaxSessions is set, it can
// safely use t.GetCombinedMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CombinedMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) GetCombinedMaxSessions() int32 {
	if t == nil || t.CombinedMaxSessions == nil {
		return 0
	}
	return *t.CombinedMaxSessions
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetSshMaxSessions retrieves the value of the leaf SshMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshMaxSessions is set, it can
// safely use t.GetSshMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) GetSshMaxSessions() int32 {
	if t == nil || t.SshMaxSessions == nil {
		return 0
	}
	return *t.SshMaxSessions
}

// GetTelnetMaxSessions retrieves the value of the leaf TelnetMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetMaxSessions is set, it can
// safely use t.GetTelnetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) GetTelnetMaxSessions() int32 {
	if t == nil || t.TelnetMaxSessions == nil {
		return 0
	}
	return *t.TelnetMaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CliSessionGroupName == nil {
		return nil, fmt.Errorf("nil value for key CliSessionGroupName")
	}

	return map[string]interface{}{
		"cli-session-group-name": *t.CliSessionGroupName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_CliSessionGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles struct {
	Profile map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile `path:"profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) IsYANGGoStruct() {}

// NewProfile creates a new entry in the Profile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) NewProfile(UserProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile)
	}

	key := UserProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Profile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Profile", key)
	}

	t.Profile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile{
		UserProfileName: &UserProfileName,
	}

	return t.Profile[key], nil
}

// RenameProfile renames an entry in the list Profile within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) RenameProfile(oldK, newK string) error {
	if _, ok := t.Profile[newK]; ok {
		return fmt.Errorf("key %v already exists in Profile", newK)
	}

	e, ok := t.Profile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Profile", oldK)
	}
	e.UserProfileName = &newK

	t.Profile[newK] = e
	delete(t.Profile, oldK)
	return nil
}

// GetOrCreateProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) GetOrCreateProfile(UserProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile {

	key := UserProfileName

	if v, ok := t.Profile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProfile(UserProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProfile got unexpected error: %v", err))
	}
	return v
}

// GetProfile retrieves the value with the specified key from
// the Profile map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) GetProfile(UserProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile {

	if t == nil {
		return nil
	}

	key := UserProfileName

	if lm, ok := t.Profile[key]; ok {
		return lm
	}
	return nil
}

// DeleteProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) DeleteProfile(UserProfileName string) {
	key := UserProfileName

	delete(t.Profile, key)
}

// AppendProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile struct to the
// list Profile of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) AppendProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) error {
	if v.UserProfileName == nil {
		return fmt.Errorf("invalid nil key received for UserProfileName")
	}

	key := *v.UserProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Profile == nil {
		t.Profile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile)
	}

	if _, ok := t.Profile[key]; ok {
		return fmt.Errorf("duplicate key for list Profile %v", key)
	}

	t.Profile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Profile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile struct {
	CliSessionGroup     *string                                                                                                                                                                              `path:"cli-session-group" module:"nokia-conf"`
	CombinedMaxSessions *int32                                                                                                                                                                               `path:"combined-max-sessions" module:"nokia-conf"`
	DefaultAction       E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_DefaultAction                                                                                           `path:"default-action" module:"nokia-conf"`
	Entry               map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry `path:"entry" module:"nokia-conf"`
	Grpc                *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc                                                                                                     `path:"grpc" module:"nokia-conf"`
	Li                  *bool                                                                                                                                                                                `path:"li" module:"nokia-conf"`
	Netconf             *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf                                                                                                  `path:"netconf" module:"nokia-conf"`
	SshMaxSessions      *int32                                                                                                                                                                               `path:"ssh-max-sessions" module:"nokia-conf"`
	TelnetMaxSessions   *int32                                                                                                                                                                               `path:"telnet-max-sessions" module:"nokia-conf"`
	UserProfileName     *string                                                                                                                                                                              `path:"user-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetOrCreateGrpc retrieves the value of the Grpc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateGrpc() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc {
	if t.Grpc != nil {
		return t.Grpc
	}
	t.Grpc = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc{}
	return t.Grpc
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetOrCreateNetconf() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf{}
	return t.Netconf
}

// GetGrpc returns the value of the Grpc struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If the receiver or the field Grpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetGrpc() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc {
	if t != nil && t.Grpc != nil {
		return t.Grpc
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetNetconf() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// GetCliSessionGroup retrieves the value of the leaf CliSessionGroup from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliSessionGroup is set, it can
// safely use t.GetCliSessionGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliSessionGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetCliSessionGroup() string {
	if t == nil || t.CliSessionGroup == nil {
		return ""
	}
	return *t.CliSessionGroup
}

// GetCombinedMaxSessions retrieves the value of the leaf CombinedMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CombinedMaxSessions is set, it can
// safely use t.GetCombinedMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CombinedMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetCombinedMaxSessions() int32 {
	if t == nil || t.CombinedMaxSessions == nil {
		return 0
	}
	return *t.CombinedMaxSessions
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetDefaultAction() E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_DefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_DefaultAction_none
	}
	return t.DefaultAction
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetSshMaxSessions retrieves the value of the leaf SshMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SshMaxSessions is set, it can
// safely use t.GetSshMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SshMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetSshMaxSessions() int32 {
	if t == nil || t.SshMaxSessions == nil {
		return 0
	}
	return *t.SshMaxSessions
}

// GetTelnetMaxSessions retrieves the value of the leaf TelnetMaxSessions from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelnetMaxSessions is set, it can
// safely use t.GetTelnetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelnetMaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetTelnetMaxSessions() int32 {
	if t == nil || t.TelnetMaxSessions == nil {
		return 0
	}
	return *t.TelnetMaxSessions
}

// GetUserProfileName retrieves the value of the leaf UserProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserProfileName is set, it can
// safely use t.GetUserProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) GetUserProfileName() string {
	if t == nil || t.UserProfileName == nil {
		return ""
	}
	return *t.UserProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_DefaultAction_none
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	t.Grpc.PopulateDefaults()
	t.Netconf.PopulateDefaults()
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UserProfileName == nil {
		return nil, fmt.Errorf("nil value for key UserProfileName")
	}

	return map[string]interface{}{
		"user-profile-name": *t.UserProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry struct {
	Action      E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_Action      `path:"action" module:"nokia-conf"`
	Description *string                                                                                        `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Match       *string                                                                                        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) GetAction() E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_Action_none
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetMatch retrieves the value of the leaf Match from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Match is set, it can
// safely use t.GetMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Match == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) GetMatch() string {
	if t == nil || t.Match == nil {
		return ""
	}
	return *t.Match
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry_Action_none
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile/grpc YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc struct {
	RpcAuthorization *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization `path:"rpc-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) IsYANGGoStruct() {
}

// GetOrCreateRpcAuthorization retrieves the value of the RpcAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) GetOrCreateRpcAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization {
	if t.RpcAuthorization != nil {
		return t.RpcAuthorization
	}
	t.RpcAuthorization = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization{}
	return t.RpcAuthorization
}

// GetRpcAuthorization returns the value of the RpcAuthorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc. If the receiver or the field RpcAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) GetRpcAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization {
	if t != nil && t.RpcAuthorization != nil {
		return t.RpcAuthorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.RpcAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile/grpc/rpc-authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization struct {
	GnmiCapabilities                 E_NokiaTypesSystem_PermitDeny `path:"gnmi-capabilities" module:"nokia-conf"`
	GnmiGet                          E_NokiaTypesSystem_PermitDeny `path:"gnmi-get" module:"nokia-conf"`
	GnmiSet                          E_NokiaTypesSystem_PermitDeny `path:"gnmi-set" module:"nokia-conf"`
	GnmiSubscribe                    E_NokiaTypesSystem_PermitDeny `path:"gnmi-subscribe" module:"nokia-conf"`
	GnoiCertMgmtCangenerate          E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-cangenerate" module:"nokia-conf"`
	GnoiCertMgmtGetcert              E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-getcert" module:"nokia-conf"`
	GnoiCertMgmtInstall              E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-install" module:"nokia-conf"`
	GnoiCertMgmtRevoke               E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-revoke" module:"nokia-conf"`
	GnoiCertMgmtRotate               E_NokiaTypesSystem_PermitDeny `path:"gnoi-cert-mgmt-rotate" module:"nokia-conf"`
	GnoiFileGet                      E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-get" module:"nokia-conf"`
	GnoiFilePut                      E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-put" module:"nokia-conf"`
	GnoiFileRemove                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-remove" module:"nokia-conf"`
	GnoiFileStat                     E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-stat" module:"nokia-conf"`
	GnoiFileTransfertoremote         E_NokiaTypesSystem_PermitDeny `path:"gnoi-file-transfertoremote" module:"nokia-conf"`
	GnoiSystemCancelreboot           E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-cancelreboot" module:"nokia-conf"`
	GnoiSystemPing                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-ping" module:"nokia-conf"`
	GnoiSystemReboot                 E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-reboot" module:"nokia-conf"`
	GnoiSystemRebootstatus           E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-rebootstatus" module:"nokia-conf"`
	GnoiSystemSetpackage             E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-setpackage" module:"nokia-conf"`
	GnoiSystemSwitchcontrolprocessor E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-switchcontrolprocessor" module:"nokia-conf"`
	GnoiSystemTime                   E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-time" module:"nokia-conf"`
	GnoiSystemTraceroute             E_NokiaTypesSystem_PermitDeny `path:"gnoi-system-traceroute" module:"nokia-conf"`
	MdCliSession                     E_NokiaTypesSystem_PermitDeny `path:"md-cli-session" module:"nokia-conf"`
	RibApiGetversion                 E_NokiaTypesSystem_PermitDeny `path:"rib-api-getversion" module:"nokia-conf"`
	RibApiModify                     E_NokiaTypesSystem_PermitDeny `path:"rib-api-modify" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) IsYANGGoStruct() {
}

// GetGnmiCapabilities retrieves the value of the leaf GnmiCapabilities from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiCapabilities is set, it can
// safely use t.GetGnmiCapabilities() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiCapabilities == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiCapabilities() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiCapabilities == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiCapabilities
}

// GetGnmiGet retrieves the value of the leaf GnmiGet from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiGet is set, it can
// safely use t.GetGnmiGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiGet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiGet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiGet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiGet
}

// GetGnmiSet retrieves the value of the leaf GnmiSet from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiSet is set, it can
// safely use t.GetGnmiSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiSet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiSet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiSet
}

// GetGnmiSubscribe retrieves the value of the leaf GnmiSubscribe from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnmiSubscribe is set, it can
// safely use t.GetGnmiSubscribe() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnmiSubscribe == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnmiSubscribe() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnmiSubscribe == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnmiSubscribe
}

// GetGnoiCertMgmtCangenerate retrieves the value of the leaf GnoiCertMgmtCangenerate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtCangenerate is set, it can
// safely use t.GetGnoiCertMgmtCangenerate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtCangenerate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtCangenerate() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtCangenerate == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtCangenerate
}

// GetGnoiCertMgmtGetcert retrieves the value of the leaf GnoiCertMgmtGetcert from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtGetcert is set, it can
// safely use t.GetGnoiCertMgmtGetcert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtGetcert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtGetcert() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtGetcert == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtGetcert
}

// GetGnoiCertMgmtInstall retrieves the value of the leaf GnoiCertMgmtInstall from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtInstall is set, it can
// safely use t.GetGnoiCertMgmtInstall() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtInstall == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtInstall() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtInstall == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtInstall
}

// GetGnoiCertMgmtRevoke retrieves the value of the leaf GnoiCertMgmtRevoke from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtRevoke is set, it can
// safely use t.GetGnoiCertMgmtRevoke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtRevoke == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtRevoke() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtRevoke == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtRevoke
}

// GetGnoiCertMgmtRotate retrieves the value of the leaf GnoiCertMgmtRotate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiCertMgmtRotate is set, it can
// safely use t.GetGnoiCertMgmtRotate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiCertMgmtRotate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiCertMgmtRotate() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiCertMgmtRotate == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiCertMgmtRotate
}

// GetGnoiFileGet retrieves the value of the leaf GnoiFileGet from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileGet is set, it can
// safely use t.GetGnoiFileGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileGet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileGet() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileGet == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileGet
}

// GetGnoiFilePut retrieves the value of the leaf GnoiFilePut from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFilePut is set, it can
// safely use t.GetGnoiFilePut() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFilePut == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFilePut() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFilePut == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFilePut
}

// GetGnoiFileRemove retrieves the value of the leaf GnoiFileRemove from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileRemove is set, it can
// safely use t.GetGnoiFileRemove() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileRemove == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileRemove() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileRemove == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileRemove
}

// GetGnoiFileStat retrieves the value of the leaf GnoiFileStat from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileStat is set, it can
// safely use t.GetGnoiFileStat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileStat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileStat() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileStat == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileStat
}

// GetGnoiFileTransfertoremote retrieves the value of the leaf GnoiFileTransfertoremote from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiFileTransfertoremote is set, it can
// safely use t.GetGnoiFileTransfertoremote() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiFileTransfertoremote == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiFileTransfertoremote() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiFileTransfertoremote == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiFileTransfertoremote
}

// GetGnoiSystemCancelreboot retrieves the value of the leaf GnoiSystemCancelreboot from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemCancelreboot is set, it can
// safely use t.GetGnoiSystemCancelreboot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemCancelreboot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemCancelreboot() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemCancelreboot == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemCancelreboot
}

// GetGnoiSystemPing retrieves the value of the leaf GnoiSystemPing from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemPing is set, it can
// safely use t.GetGnoiSystemPing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemPing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemPing() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemPing == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemPing
}

// GetGnoiSystemReboot retrieves the value of the leaf GnoiSystemReboot from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemReboot is set, it can
// safely use t.GetGnoiSystemReboot() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemReboot == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemReboot() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemReboot == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemReboot
}

// GetGnoiSystemRebootstatus retrieves the value of the leaf GnoiSystemRebootstatus from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemRebootstatus is set, it can
// safely use t.GetGnoiSystemRebootstatus() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemRebootstatus == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemRebootstatus() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemRebootstatus == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemRebootstatus
}

// GetGnoiSystemSetpackage retrieves the value of the leaf GnoiSystemSetpackage from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemSetpackage is set, it can
// safely use t.GetGnoiSystemSetpackage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemSetpackage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemSetpackage() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemSetpackage == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemSetpackage
}

// GetGnoiSystemSwitchcontrolprocessor retrieves the value of the leaf GnoiSystemSwitchcontrolprocessor from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemSwitchcontrolprocessor is set, it can
// safely use t.GetGnoiSystemSwitchcontrolprocessor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemSwitchcontrolprocessor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemSwitchcontrolprocessor() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemSwitchcontrolprocessor == 0 {
		return NokiaTypesSystem_PermitDeny_deny
	}
	return t.GnoiSystemSwitchcontrolprocessor
}

// GetGnoiSystemTime retrieves the value of the leaf GnoiSystemTime from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemTime is set, it can
// safely use t.GetGnoiSystemTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemTime() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemTime == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemTime
}

// GetGnoiSystemTraceroute retrieves the value of the leaf GnoiSystemTraceroute from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GnoiSystemTraceroute is set, it can
// safely use t.GetGnoiSystemTraceroute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GnoiSystemTraceroute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetGnoiSystemTraceroute() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.GnoiSystemTraceroute == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.GnoiSystemTraceroute
}

// GetMdCliSession retrieves the value of the leaf MdCliSession from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdCliSession is set, it can
// safely use t.GetMdCliSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdCliSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetMdCliSession() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.MdCliSession == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.MdCliSession
}

// GetRibApiGetversion retrieves the value of the leaf RibApiGetversion from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApiGetversion is set, it can
// safely use t.GetRibApiGetversion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApiGetversion == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetRibApiGetversion() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.RibApiGetversion == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.RibApiGetversion
}

// GetRibApiModify retrieves the value of the leaf RibApiModify from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RibApiModify is set, it can
// safely use t.GetRibApiModify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RibApiModify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) GetRibApiModify() E_NokiaTypesSystem_PermitDeny {
	if t == nil || t.RibApiModify == 0 {
		return NokiaTypesSystem_PermitDeny_permit
	}
	return t.RibApiModify
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.GnmiCapabilities == 0 {
		t.GnmiCapabilities = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiGet == 0 {
		t.GnmiGet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiSet == 0 {
		t.GnmiSet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnmiSubscribe == 0 {
		t.GnmiSubscribe = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiCertMgmtCangenerate == 0 {
		t.GnoiCertMgmtCangenerate = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtGetcert == 0 {
		t.GnoiCertMgmtGetcert = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtInstall == 0 {
		t.GnoiCertMgmtInstall = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtRevoke == 0 {
		t.GnoiCertMgmtRevoke = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiCertMgmtRotate == 0 {
		t.GnoiCertMgmtRotate = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiFileGet == 0 {
		t.GnoiFileGet = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFilePut == 0 {
		t.GnoiFilePut = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileRemove == 0 {
		t.GnoiFileRemove = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileStat == 0 {
		t.GnoiFileStat = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiFileTransfertoremote == 0 {
		t.GnoiFileTransfertoremote = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemCancelreboot == 0 {
		t.GnoiSystemCancelreboot = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemPing == 0 {
		t.GnoiSystemPing = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemReboot == 0 {
		t.GnoiSystemReboot = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemRebootstatus == 0 {
		t.GnoiSystemRebootstatus = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemSetpackage == 0 {
		t.GnoiSystemSetpackage = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemSwitchcontrolprocessor == 0 {
		t.GnoiSystemSwitchcontrolprocessor = NokiaTypesSystem_PermitDeny_deny
	}
	if t.GnoiSystemTime == 0 {
		t.GnoiSystemTime = NokiaTypesSystem_PermitDeny_permit
	}
	if t.GnoiSystemTraceroute == 0 {
		t.GnoiSystemTraceroute = NokiaTypesSystem_PermitDeny_permit
	}
	if t.MdCliSession == 0 {
		t.MdCliSession = NokiaTypesSystem_PermitDeny_permit
	}
	if t.RibApiGetversion == 0 {
		t.RibApiGetversion = NokiaTypesSystem_PermitDeny_permit
	}
	if t.RibApiModify == 0 {
		t.RibApiModify = NokiaTypesSystem_PermitDeny_permit
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Grpc_RpcAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile/netconf YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf struct {
	BaseOpAuthorization *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization `path:"base-op-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) IsYANGGoStruct() {
}

// GetOrCreateBaseOpAuthorization retrieves the value of the BaseOpAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) GetOrCreateBaseOpAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization {
	if t.BaseOpAuthorization != nil {
		return t.BaseOpAuthorization
	}
	t.BaseOpAuthorization = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization{}
	return t.BaseOpAuthorization
}

// GetBaseOpAuthorization returns the value of the BaseOpAuthorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf. If the receiver or the field BaseOpAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) GetBaseOpAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization {
	if t != nil && t.BaseOpAuthorization != nil {
		return t.BaseOpAuthorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.BaseOpAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization represents the /nokia-conf/configure/groups/group/system/security/aaa/local-profiles/profile/netconf/base-op-authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization struct {
	Action             *bool `path:"action" module:"nokia-conf"`
	CancelCommit       *bool `path:"cancel-commit" module:"nokia-conf"`
	CloseSession       *bool `path:"close-session" module:"nokia-conf"`
	Commit             *bool `path:"commit" module:"nokia-conf"`
	CopyConfig         *bool `path:"copy-config" module:"nokia-conf"`
	CreateSubscription *bool `path:"create-subscription" module:"nokia-conf"`
	DeleteConfig       *bool `path:"delete-config" module:"nokia-conf"`
	DiscardChanges     *bool `path:"discard-changes" module:"nokia-conf"`
	EditConfig         *bool `path:"edit-config" module:"nokia-conf"`
	Get                *bool `path:"get" module:"nokia-conf"`
	GetConfig          *bool `path:"get-config" module:"nokia-conf"`
	GetData            *bool `path:"get-data" module:"nokia-conf"`
	GetSchema          *bool `path:"get-schema" module:"nokia-conf"`
	KillSession        *bool `path:"kill-session" module:"nokia-conf"`
	Lock               *bool `path:"lock" module:"nokia-conf"`
	Validate           *bool `path:"validate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetAction() bool {
	if t == nil || t.Action == nil {
		return false
	}
	return *t.Action
}

// GetCancelCommit retrieves the value of the leaf CancelCommit from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CancelCommit is set, it can
// safely use t.GetCancelCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CancelCommit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCancelCommit() bool {
	if t == nil || t.CancelCommit == nil {
		return false
	}
	return *t.CancelCommit
}

// GetCloseSession retrieves the value of the leaf CloseSession from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CloseSession is set, it can
// safely use t.GetCloseSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CloseSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCloseSession() bool {
	if t == nil || t.CloseSession == nil {
		return false
	}
	return *t.CloseSession
}

// GetCommit retrieves the value of the leaf Commit from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Commit is set, it can
// safely use t.GetCommit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Commit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCommit() bool {
	if t == nil || t.Commit == nil {
		return false
	}
	return *t.Commit
}

// GetCopyConfig retrieves the value of the leaf CopyConfig from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CopyConfig is set, it can
// safely use t.GetCopyConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CopyConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCopyConfig() bool {
	if t == nil || t.CopyConfig == nil {
		return false
	}
	return *t.CopyConfig
}

// GetCreateSubscription retrieves the value of the leaf CreateSubscription from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CreateSubscription is set, it can
// safely use t.GetCreateSubscription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CreateSubscription == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetCreateSubscription() bool {
	if t == nil || t.CreateSubscription == nil {
		return false
	}
	return *t.CreateSubscription
}

// GetDeleteConfig retrieves the value of the leaf DeleteConfig from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeleteConfig is set, it can
// safely use t.GetDeleteConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeleteConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetDeleteConfig() bool {
	if t == nil || t.DeleteConfig == nil {
		return false
	}
	return *t.DeleteConfig
}

// GetDiscardChanges retrieves the value of the leaf DiscardChanges from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardChanges is set, it can
// safely use t.GetDiscardChanges() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardChanges == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetDiscardChanges() bool {
	if t == nil || t.DiscardChanges == nil {
		return false
	}
	return *t.DiscardChanges
}

// GetEditConfig retrieves the value of the leaf EditConfig from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EditConfig is set, it can
// safely use t.GetEditConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EditConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetEditConfig() bool {
	if t == nil || t.EditConfig == nil {
		return false
	}
	return *t.EditConfig
}

// GetGet retrieves the value of the leaf Get from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Get is set, it can
// safely use t.GetGet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Get == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGet() bool {
	if t == nil || t.Get == nil {
		return false
	}
	return *t.Get
}

// GetGetConfig retrieves the value of the leaf GetConfig from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetConfig is set, it can
// safely use t.GetGetConfig() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetConfig == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetConfig() bool {
	if t == nil || t.GetConfig == nil {
		return false
	}
	return *t.GetConfig
}

// GetGetData retrieves the value of the leaf GetData from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetData is set, it can
// safely use t.GetGetData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetData() bool {
	if t == nil || t.GetData == nil {
		return false
	}
	return *t.GetData
}

// GetGetSchema retrieves the value of the leaf GetSchema from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GetSchema is set, it can
// safely use t.GetGetSchema() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GetSchema == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetGetSchema() bool {
	if t == nil || t.GetSchema == nil {
		return false
	}
	return *t.GetSchema
}

// GetKillSession retrieves the value of the leaf KillSession from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KillSession is set, it can
// safely use t.GetKillSession() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KillSession == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetKillSession() bool {
	if t == nil || t.KillSession == nil {
		return false
	}
	return *t.KillSession
}

// GetLock retrieves the value of the leaf Lock from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lock is set, it can
// safely use t.GetLock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lock == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetLock() bool {
	if t == nil || t.Lock == nil {
		return false
	}
	return *t.Lock
}

// GetValidate retrieves the value of the leaf Validate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Validate is set, it can
// safely use t.GetValidate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Validate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) GetValidate() bool {
	if t == nil || t.Validate == nil {
		return false
	}
	return *t.Validate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == nil {
		var v bool = false
		t.Action = &v
	}
	if t.CancelCommit == nil {
		var v bool = false
		t.CancelCommit = &v
	}
	if t.CloseSession == nil {
		var v bool = false
		t.CloseSession = &v
	}
	if t.Commit == nil {
		var v bool = false
		t.Commit = &v
	}
	if t.CopyConfig == nil {
		var v bool = false
		t.CopyConfig = &v
	}
	if t.CreateSubscription == nil {
		var v bool = false
		t.CreateSubscription = &v
	}
	if t.DeleteConfig == nil {
		var v bool = false
		t.DeleteConfig = &v
	}
	if t.DiscardChanges == nil {
		var v bool = false
		t.DiscardChanges = &v
	}
	if t.EditConfig == nil {
		var v bool = false
		t.EditConfig = &v
	}
	if t.Get == nil {
		var v bool = false
		t.Get = &v
	}
	if t.GetConfig == nil {
		var v bool = false
		t.GetConfig = &v
	}
	if t.GetData == nil {
		var v bool = false
		t.GetData = &v
	}
	if t.GetSchema == nil {
		var v bool = false
		t.GetSchema = &v
	}
	if t.KillSession == nil {
		var v bool = false
		t.KillSession = &v
	}
	if t.Lock == nil {
		var v bool = false
		t.Lock = &v
	}
	if t.Validate == nil {
		var v bool = false
		t.Validate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_LocalProfiles_Profile_Netconf_BaseOpAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface represents the /nokia-conf/configure/groups/group/system/security/aaa/management-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface struct {
	MdCli               *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli               `path:"md-cli" module:"nokia-conf"`
	OutputAuthorization *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization `path:"output-authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) IsYANGGoStruct() {}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) GetOrCreateMdCli() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli{}
	return t.MdCli
}

// GetOrCreateOutputAuthorization retrieves the value of the OutputAuthorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) GetOrCreateOutputAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization {
	if t.OutputAuthorization != nil {
		return t.OutputAuthorization
	}
	t.OutputAuthorization = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization{}
	return t.OutputAuthorization
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) GetMdCli() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetOutputAuthorization returns the value of the OutputAuthorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface. If the receiver or the field OutputAuthorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) GetOutputAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization {
	if t != nil && t.OutputAuthorization != nil {
		return t.OutputAuthorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.MdCli.PopulateDefaults()
	t.OutputAuthorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli represents the /nokia-conf/configure/groups/group/system/security/aaa/management-interface/md-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli struct {
	CommandAccountingDuringLoad *bool `path:"command-accounting-during-load" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) IsYANGGoStruct() {
}

// GetCommandAccountingDuringLoad retrieves the value of the leaf CommandAccountingDuringLoad from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommandAccountingDuringLoad is set, it can
// safely use t.GetCommandAccountingDuringLoad() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommandAccountingDuringLoad == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) GetCommandAccountingDuringLoad() bool {
	if t == nil || t.CommandAccountingDuringLoad == nil {
		return true
	}
	return *t.CommandAccountingDuringLoad
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CommandAccountingDuringLoad == nil {
		var v bool = true
		t.CommandAccountingDuringLoad = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization represents the /nokia-conf/configure/groups/group/system/security/aaa/management-interface/output-authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization struct {
	MdInterfaces  *bool `path:"md-interfaces" module:"nokia-conf"`
	TelemetryData *bool `path:"telemetry-data" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) IsYANGGoStruct() {
}

// GetMdInterfaces retrieves the value of the leaf MdInterfaces from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdInterfaces is set, it can
// safely use t.GetMdInterfaces() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdInterfaces == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) GetMdInterfaces() bool {
	if t == nil || t.MdInterfaces == nil {
		return true
	}
	return *t.MdInterfaces
}

// GetTelemetryData retrieves the value of the leaf TelemetryData from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TelemetryData is set, it can
// safely use t.GetTelemetryData() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TelemetryData == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) GetTelemetryData() bool {
	if t == nil || t.TelemetryData == nil {
		return false
	}
	return *t.TelemetryData
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MdInterfaces == nil {
		var v bool = true
		t.MdInterfaces = &v
	}
	if t.TelemetryData == nil {
		var v bool = false
		t.TelemetryData = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_ManagementInterface_OutputAuthorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers struct {
	Ldap       *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap       `path:"ldap" module:"nokia-conf" yangPresence:"true"`
	Radius     *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius     `path:"radius" module:"nokia-conf" yangPresence:"true"`
	Tacplus    *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus    `path:"tacplus" module:"nokia-conf" yangPresence:"true"`
	VprnServer *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer `path:"vprn-server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) IsYANGGoStruct() {}

// GetOrCreateLdap retrieves the value of the Ldap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetOrCreateLdap() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap {
	if t.Ldap != nil {
		return t.Ldap
	}
	t.Ldap = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap{}
	return t.Ldap
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetOrCreateRadius() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius{}
	return t.Radius
}

// GetOrCreateTacplus retrieves the value of the Tacplus field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetOrCreateTacplus() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus {
	if t.Tacplus != nil {
		return t.Tacplus
	}
	t.Tacplus = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus{}
	return t.Tacplus
}

// GetOrCreateVprnServer retrieves the value of the VprnServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetOrCreateVprnServer() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer {
	if t.VprnServer != nil {
		return t.VprnServer
	}
	t.VprnServer = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer{}
	return t.VprnServer
}

// GetLdap returns the value of the Ldap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers. If the receiver or the field Ldap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetLdap() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap {
	if t != nil && t.Ldap != nil {
		return t.Ldap
	}
	return nil
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetRadius() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetTacplus returns the value of the Tacplus struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers. If the receiver or the field Tacplus is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetTacplus() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus {
	if t != nil && t.Tacplus != nil {
		return t.Tacplus
	}
	return nil
}

// GetVprnServer returns the value of the VprnServer struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers. If the receiver or the field VprnServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) GetVprnServer() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer {
	if t != nil && t.VprnServer != nil {
		return t.VprnServer
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ldap.PopulateDefaults()
	t.Radius.PopulateDefaults()
	t.Tacplus.PopulateDefaults()
	t.VprnServer.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/ldap YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap struct {
	AdminState              E_NokiaTypesSros_AdminState                                                                                                                                                    `path:"admin-state" module:"nokia-conf"`
	PublicKeyAuthentication *bool                                                                                                                                                                          `path:"public-key-authentication" module:"nokia-conf"`
	RoutePreference         E_NokiaTypesSecurity_AaaRoutePreference                                                                                                                                        `path:"route-preference" module:"nokia-conf"`
	Server                  map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server `path:"server" module:"nokia-conf"`
	ServerRetry             *uint32                                                                                                                                                                        `path:"server-retry" module:"nokia-conf"`
	ServerTimeout           *uint32                                                                                                                                                                        `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate      *bool                                                                                                                                                                          `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) NewServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server{
		Index: Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetOrCreateServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) DeleteServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetPublicKeyAuthentication retrieves the value of the leaf PublicKeyAuthentication from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicKeyAuthentication is set, it can
// safely use t.GetPublicKeyAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicKeyAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetPublicKeyAuthentication() bool {
	if t == nil || t.PublicKeyAuthentication == nil {
		return false
	}
	return *t.PublicKeyAuthentication
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerRetry retrieves the value of the leaf ServerRetry from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerRetry is set, it can
// safely use t.GetServerRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetServerRetry() uint32 {
	if t == nil || t.ServerRetry == nil {
		return 3
	}
	return *t.ServerRetry
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return true
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.PublicKeyAuthentication == nil {
		var v bool = false
		t.PublicKeyAuthentication = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerRetry == nil {
		var v uint32 = 3
		t.ServerRetry = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = true
		t.UseDefaultTemplate = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/ldap/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server struct {
	Address            map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address `path:"address" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                                        `path:"admin-state" module:"nokia-conf"`
	BindAuthentication *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication `path:"bind-authentication" module:"nokia-conf"`
	Index              NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union         `path:"index" module:"nokia-conf"`
	Search             *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search             `path:"search" module:"nokia-conf"`
	ServerName         *string                                                                                            `path:"server-name" module:"nokia-conf"`
	TlsProfile         *string                                                                                            `path:"tls-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) IsYANGGoStruct() {
}

// NewAddress creates a new entry in the Address list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) NewAddress(IpAddress string) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Address[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Address", key)
	}

	t.Address[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address{
		IpAddress: &IpAddress,
	}

	return t.Address[key], nil
}

// RenameAddress renames an entry in the list Address within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) RenameAddress(oldK, newK string) error {
	if _, ok := t.Address[newK]; ok {
		return fmt.Errorf("key %v already exists in Address", newK)
	}

	e, ok := t.Address[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Address", oldK)
	}
	e.IpAddress = &newK

	t.Address[newK] = e
	delete(t.Address, oldK)
	return nil
}

// GetOrCreateAddress retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateAddress(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address {

	key := IpAddress

	if v, ok := t.Address[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAddress(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAddress got unexpected error: %v", err))
	}
	return v
}

// GetAddress retrieves the value with the specified key from
// the Address map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetAddress(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Address[key]; ok {
		return lm
	}
	return nil
}

// DeleteAddress deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) DeleteAddress(IpAddress string) {
	key := IpAddress

	delete(t.Address, key)
}

// AppendAddress appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct to the
// list Address of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) AppendAddress(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Address == nil {
		t.Address = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address)
	}

	if _, ok := t.Address[key]; ok {
		return fmt.Errorf("duplicate key for list Address %v", key)
	}

	t.Address[key] = v
	return nil
}

// GetOrCreateBindAuthentication retrieves the value of the BindAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateBindAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication {
	if t.BindAuthentication != nil {
		return t.BindAuthentication
	}
	t.BindAuthentication = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication{}
	return t.BindAuthentication
}

// GetOrCreateSearch retrieves the value of the Search field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetOrCreateSearch() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search {
	if t.Search != nil {
		return t.Search
	}
	t.Search = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search{}
	return t.Search
}

// GetBindAuthentication returns the value of the BindAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver or the field BindAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetBindAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication {
	if t != nil && t.BindAuthentication != nil {
		return t.BindAuthentication
	}
	return nil
}

// GetSearch returns the value of the Search struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server. If the receiver or the field Search is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetSearch() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search {
	if t != nil && t.Search != nil {
		return t.Search
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetServerName retrieves the value of the leaf ServerName from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerName is set, it can
// safely use t.GetServerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetServerName() string {
	if t == nil || t.ServerName == nil {
		return ""
	}
	return *t.ServerName
}

// GetTlsProfile retrieves the value of the leaf TlsProfile from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsProfile is set, it can
// safely use t.GetTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) GetTlsProfile() string {
	if t == nil || t.TlsProfile == nil {
		return ""
	}
	return *t.TlsProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.BindAuthentication.PopulateDefaults()
	t.Search.PopulateDefaults()
	for _, e := range t.Address {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/ldap/server/address YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	Port      *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 389
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 389
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/ldap/server/bind-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication struct {
	Password *string `path:"password" module:"nokia-conf"`
	RootDn   *string `path:"root-dn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) IsYANGGoStruct() {
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRootDn retrieves the value of the leaf RootDn from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RootDn is set, it can
// safely use t.GetRootDn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RootDn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) GetRootDn() string {
	if t == nil || t.RootDn == nil {
		return ""
	}
	return *t.RootDn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_BindAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/ldap/server/search YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search struct {
	BaseDn *string `path:"base-dn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) IsYANGGoStruct() {
}

// GetBaseDn retrieves the value of the leaf BaseDn from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BaseDn is set, it can
// safely use t.GetBaseDn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BaseDn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) GetBaseDn() string {
	if t == nil || t.BaseDn == nil {
		return ""
	}
	return *t.BaseDn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Ldap_Server_Search) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/radius YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius struct {
	AccessAlgorithm           E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm                                                                                        `path:"access-algorithm" module:"nokia-conf"`
	Accounting                *bool                                                                                                                                                                              `path:"accounting" module:"nokia-conf"`
	AccountingPort            *uint32                                                                                                                                                                            `path:"accounting-port" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	Authorization             *bool                                                                                                                                                                              `path:"authorization" module:"nokia-conf"`
	InteractiveAuthentication *bool                                                                                                                                                                              `path:"interactive-authentication" module:"nokia-conf"`
	Port                      *uint32                                                                                                                                                                            `path:"port" module:"nokia-conf"`
	RoutePreference           E_NokiaTypesSecurity_AaaRoutePreference                                                                                                                                            `path:"route-preference" module:"nokia-conf"`
	Server                    map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server `path:"server" module:"nokia-conf"`
	ServerRetry               *uint32                                                                                                                                                                            `path:"server-retry" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                                                                                                                            `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                                                                                                                              `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) NewServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server{
		Index: Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetOrCreateServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) DeleteServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAccessAlgorithm retrieves the value of the leaf AccessAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessAlgorithm is set, it can
// safely use t.GetAccessAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetAccessAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm {
	if t == nil || t.AccessAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	return t.AccessAlgorithm
}

// GetAccounting retrieves the value of the leaf Accounting from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accounting is set, it can
// safely use t.GetAccounting() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accounting == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetAccounting() bool {
	if t == nil || t.Accounting == nil {
		return false
	}
	return *t.Accounting
}

// GetAccountingPort retrieves the value of the leaf AccountingPort from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPort is set, it can
// safely use t.GetAccountingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetAccountingPort() uint32 {
	if t == nil || t.AccountingPort == nil {
		return 1813
	}
	return *t.AccountingPort
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAuthorization retrieves the value of the leaf Authorization from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authorization is set, it can
// safely use t.GetAuthorization() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authorization == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetAuthorization() bool {
	if t == nil || t.Authorization == nil {
		return false
	}
	return *t.Authorization
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetPort() uint32 {
	if t == nil || t.Port == nil {
		return 1812
	}
	return *t.Port
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerRetry retrieves the value of the leaf ServerRetry from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerRetry is set, it can
// safely use t.GetServerRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerRetry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetServerRetry() uint32 {
	if t == nil || t.ServerRetry == nil {
		return 3
	}
	return *t.ServerRetry
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return false
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccessAlgorithm == 0 {
		t.AccessAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_AccessAlgorithm_direct
	}
	if t.Accounting == nil {
		var v bool = false
		t.Accounting = &v
	}
	if t.AccountingPort == nil {
		var v uint32 = 1813
		t.AccountingPort = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Authorization == nil {
		var v bool = false
		t.Authorization = &v
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.Port == nil {
		var v uint32 = 1812
		t.Port = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerRetry == nil {
		var v uint32 = 3
		t.ServerRetry = &v
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = false
		t.UseDefaultTemplate = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/radius/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server struct {
	Address          *string                                                                                      `path:"address" module:"nokia-conf"`
	Index            NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union `path:"index" module:"nokia-conf"`
	Secret           *string                                                                                      `path:"secret" module:"nokia-conf"`
	TlsClientProfile *string                                                                                      `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Radius_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus struct {
	Accounting                *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting                                                                                               `path:"accounting" module:"nokia-conf" yangPresence:"true"`
	AdminControl              *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl                                                                                             `path:"admin-control" module:"nokia-conf"`
	AdminState                E_NokiaTypesSros_AdminState                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	Authorization             *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization                                                                                            `path:"authorization" module:"nokia-conf" yangPresence:"true"`
	InteractiveAuthentication *bool                                                                                                                                                                                `path:"interactive-authentication" module:"nokia-conf"`
	PrivLvlMap                *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap                                                                                               `path:"priv-lvl-map" module:"nokia-conf" yangPresence:"true"`
	RoutePreference           E_NokiaTypesSecurity_AaaRoutePreference                                                                                                                                              `path:"route-preference" module:"nokia-conf"`
	Server                    map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server `path:"server" module:"nokia-conf"`
	ServerTimeout             *uint32                                                                                                                                                                              `path:"server-timeout" module:"nokia-conf"`
	UseDefaultTemplate        *bool                                                                                                                                                                                `path:"use-default-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) NewServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server{
		Index: Index,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.Index = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server {

	key := Index

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) DeleteServer(Index NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union) {
	key := Index

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateAccounting retrieves the value of the Accounting field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAccounting() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting {
	if t.Accounting != nil {
		return t.Accounting
	}
	t.Accounting = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting{}
	return t.Accounting
}

// GetOrCreateAdminControl retrieves the value of the AdminControl field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAdminControl() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl {
	if t.AdminControl != nil {
		return t.AdminControl
	}
	t.AdminControl = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl{}
	return t.AdminControl
}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreateAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization{}
	return t.Authorization
}

// GetOrCreatePrivLvlMap retrieves the value of the PrivLvlMap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetOrCreatePrivLvlMap() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	t.PrivLvlMap = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap{}
	return t.PrivLvlMap
}

// GetAccounting returns the value of the Accounting struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field Accounting is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetAccounting() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting {
	if t != nil && t.Accounting != nil {
		return t.Accounting
	}
	return nil
}

// GetAdminControl returns the value of the AdminControl struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field AdminControl is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetAdminControl() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl {
	if t != nil && t.AdminControl != nil {
		return t.AdminControl
	}
	return nil
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// GetPrivLvlMap returns the value of the PrivLvlMap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus. If the receiver or the field PrivLvlMap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetPrivLvlMap() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap {
	if t != nil && t.PrivLvlMap != nil {
		return t.PrivLvlMap
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInteractiveAuthentication retrieves the value of the leaf InteractiveAuthentication from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InteractiveAuthentication is set, it can
// safely use t.GetInteractiveAuthentication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InteractiveAuthentication == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetInteractiveAuthentication() bool {
	if t == nil || t.InteractiveAuthentication == nil {
		return false
	}
	return *t.InteractiveAuthentication
}

// GetRoutePreference retrieves the value of the leaf RoutePreference from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RoutePreference is set, it can
// safely use t.GetRoutePreference() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RoutePreference == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetRoutePreference() E_NokiaTypesSecurity_AaaRoutePreference {
	if t == nil || t.RoutePreference == 0 {
		return NokiaTypesSecurity_AaaRoutePreference_both
	}
	return t.RoutePreference
}

// GetServerTimeout retrieves the value of the leaf ServerTimeout from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerTimeout is set, it can
// safely use t.GetServerTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetServerTimeout() uint32 {
	if t == nil || t.ServerTimeout == nil {
		return 3
	}
	return *t.ServerTimeout
}

// GetUseDefaultTemplate retrieves the value of the leaf UseDefaultTemplate from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UseDefaultTemplate is set, it can
// safely use t.GetUseDefaultTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UseDefaultTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) GetUseDefaultTemplate() bool {
	if t == nil || t.UseDefaultTemplate == nil {
		return true
	}
	return *t.UseDefaultTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.InteractiveAuthentication == nil {
		var v bool = false
		t.InteractiveAuthentication = &v
	}
	if t.RoutePreference == 0 {
		t.RoutePreference = NokiaTypesSecurity_AaaRoutePreference_both
	}
	if t.ServerTimeout == nil {
		var v uint32 = 3
		t.ServerTimeout = &v
	}
	if t.UseDefaultTemplate == nil {
		var v bool = true
		t.UseDefaultTemplate = &v
	}
	t.Accounting.PopulateDefaults()
	t.AdminControl.PopulateDefaults()
	t.Authorization.PopulateDefaults()
	t.PrivLvlMap.PopulateDefaults()
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/accounting YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting struct {
	RecordType E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType `path:"record-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) IsYANGGoStruct() {
}

// GetRecordType retrieves the value of the leaf RecordType from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RecordType is set, it can
// safely use t.GetRecordType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RecordType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) GetRecordType() E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType {
	if t == nil || t.RecordType == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
	return t.RecordType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RecordType == 0 {
		t.RecordType = NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting_RecordType_stop_only
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Accounting) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/admin-control YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl struct {
	TacplusMapToPrivLvl *int32 `path:"tacplus-map-to-priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) IsYANGGoStruct() {
}

// GetTacplusMapToPrivLvl retrieves the value of the leaf TacplusMapToPrivLvl from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TacplusMapToPrivLvl is set, it can
// safely use t.GetTacplusMapToPrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TacplusMapToPrivLvl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) GetTacplusMapToPrivLvl() int32 {
	if t == nil || t.TacplusMapToPrivLvl == nil {
		return 0
	}
	return *t.TacplusMapToPrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_AdminControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization struct {
	RequestFormat *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat `path:"request-format" module:"nokia-conf"`
	UsePrivLvl    *bool                                                                                                   `path:"use-priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) IsYANGGoStruct() {
}

// GetOrCreateRequestFormat retrieves the value of the RequestFormat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetOrCreateRequestFormat() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t.RequestFormat != nil {
		return t.RequestFormat
	}
	t.RequestFormat = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat{}
	return t.RequestFormat
}

// GetRequestFormat returns the value of the RequestFormat struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization. If the receiver or the field RequestFormat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetRequestFormat() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat {
	if t != nil && t.RequestFormat != nil {
		return t.RequestFormat
	}
	return nil
}

// GetUsePrivLvl retrieves the value of the leaf UsePrivLvl from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsePrivLvl is set, it can
// safely use t.GetUsePrivLvl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsePrivLvl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) GetUsePrivLvl() bool {
	if t == nil || t.UsePrivLvl == nil {
		return false
	}
	return *t.UsePrivLvl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UsePrivLvl == nil {
		var v bool = false
		t.UsePrivLvl = &v
	}
	t.RequestFormat.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/authorization/request-format YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat struct {
	AccessOperationCmd []E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd `path:"access-operation-cmd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) IsYANGGoStruct() {
}

// GetAccessOperationCmd retrieves the value of the leaf AccessOperationCmd from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessOperationCmd is set, it can
// safely use t.GetAccessOperationCmd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessOperationCmd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) GetAccessOperationCmd() []E_NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat_AccessOperationCmd {
	if t == nil || t.AccessOperationCmd == nil {
		return nil
	}
	return t.AccessOperationCmd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Authorization_RequestFormat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/priv-lvl-map YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct {
	PrivLvl map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl `path:"priv-lvl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) IsYANGGoStruct() {
}

// NewPrivLvl creates a new entry in the PrivLvl list of the
// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) NewPrivLvl(Level NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	key := Level

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PrivLvl[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PrivLvl", key)
	}

	t.PrivLvl[key] = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl{
		Level: Level,
	}

	return t.PrivLvl[key], nil
}

// RenamePrivLvl renames an entry in the list PrivLvl within
// the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) RenamePrivLvl(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union) error {
	if _, ok := t.PrivLvl[newK]; ok {
		return fmt.Errorf("key %v already exists in PrivLvl", newK)
	}

	e, ok := t.PrivLvl[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PrivLvl", oldK)
	}
	e.Level = newK

	t.PrivLvl[newK] = e
	delete(t.PrivLvl, oldK)
	return nil
}

// GetOrCreatePrivLvl retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetOrCreatePrivLvl(Level NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	key := Level

	if v, ok := t.PrivLvl[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrivLvl(Level)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrivLvl got unexpected error: %v", err))
	}
	return v
}

// GetPrivLvl retrieves the value with the specified key from
// the PrivLvl map field of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) GetPrivLvl(Level NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union) *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl {

	if t == nil {
		return nil
	}

	key := Level

	if lm, ok := t.PrivLvl[key]; ok {
		return lm
	}
	return nil
}

// DeletePrivLvl deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) DeletePrivLvl(Level NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union) {
	key := Level

	delete(t.PrivLvl, key)
}

// AppendPrivLvl appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct to the
// list PrivLvl of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) AppendPrivLvl(v *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) error {
	key := v.Level

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PrivLvl == nil {
		t.PrivLvl = make(map[NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union]*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl)
	}

	if _, ok := t.PrivLvl[key]; ok {
		return fmt.Errorf("duplicate key for list PrivLvl %v", key)
	}

	t.PrivLvl[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PrivLvl {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/priv-lvl-map/priv-lvl YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct {
	Level           NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union `path:"level" module:"nokia-conf"`
	UserProfileName *string                                                                                                   `path:"user-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) IsYANGGoStruct() {
}

// GetLevel retrieves the value of the leaf Level from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Level is set, it can
// safely use t.GetLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Level == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetLevel() NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl_Level_Union {
	if t == nil || t.Level == nil {
		return nil
	}
	return t.Level
}

// GetUserProfileName retrieves the value of the leaf UserProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserProfileName is set, it can
// safely use t.GetUserProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) GetUserProfileName() string {
	if t == nil || t.UserProfileName == nil {
		return ""
	}
	return *t.UserProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"level": t.Level,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_PrivLvlMap_PrivLvl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/tacplus/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server struct {
	Address *string                                                                                       `path:"address" module:"nokia-conf"`
	Index   NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union `path:"index" module:"nokia-conf"`
	Port    *int32                                                                                        `path:"port" module:"nokia-conf"`
	Secret  *string                                                                                       `path:"secret" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 49
	}
	return *t.Port
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 49
		t.Port = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_Tacplus_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer represents the /nokia-conf/configure/groups/group/system/security/aaa/remote-servers/vprn-server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer struct {
	Inband  *string `path:"inband" module:"nokia-conf"`
	Outband *string `path:"outband" module:"nokia-conf"`
	Vprn    *string `path:"vprn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) IsYANGGoStruct() {
}

// GetInband retrieves the value of the leaf Inband from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Inband is set, it can
// safely use t.GetInband() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Inband == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) GetInband() string {
	if t == nil || t.Inband == nil {
		return ""
	}
	return *t.Inband
}

// GetOutband retrieves the value of the leaf Outband from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Outband is set, it can
// safely use t.GetOutband() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Outband == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) GetOutband() string {
	if t == nil || t.Outband == nil {
		return ""
	}
	return *t.Outband
}

// GetVprn retrieves the value of the leaf Vprn from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vprn is set, it can
// safely use t.GetVprn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vprn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) GetVprn() string {
	if t == nil || t.Vprn == nil {
		return ""
	}
	return *t.Vprn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_RemoteServers_VprnServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate represents the /nokia-conf/configure/groups/group/system/security/aaa/user-template YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate struct {
	Access           *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access                `path:"access" module:"nokia-conf"`
	Console          *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console               `path:"console" module:"nokia-conf"`
	HomeDirectory    *string                                                                                  `path:"home-directory" module:"nokia-conf"`
	Profile          *string                                                                                  `path:"profile" module:"nokia-conf"`
	RestrictedToHome *bool                                                                                    `path:"restricted-to-home" module:"nokia-conf"`
	UserTemplateName NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union `path:"user-template-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access{}
	return t.Access
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetOrCreateConsole() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console{}
	return t.Console
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetAccess() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetConsole() *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetHomeDirectory retrieves the value of the leaf HomeDirectory from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HomeDirectory is set, it can
// safely use t.GetHomeDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HomeDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetHomeDirectory() string {
	if t == nil || t.HomeDirectory == nil {
		return ""
	}
	return *t.HomeDirectory
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetProfile() string {
	if t == nil || t.Profile == nil {
		return ""
	}
	return *t.Profile
}

// GetRestrictedToHome retrieves the value of the leaf RestrictedToHome from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestrictedToHome is set, it can
// safely use t.GetRestrictedToHome() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestrictedToHome == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetRestrictedToHome() bool {
	if t == nil || t.RestrictedToHome == nil {
		return false
	}
	return *t.RestrictedToHome
}

// GetUserTemplateName retrieves the value of the leaf UserTemplateName from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserTemplateName is set, it can
// safely use t.GetUserTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) GetUserTemplateName() NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_UserTemplateName_Union {
	if t == nil || t.UserTemplateName == nil {
		return nil
	}
	return t.UserTemplateName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RestrictedToHome == nil {
		var v bool = false
		t.RestrictedToHome = &v
	}
	t.Access.PopulateDefaults()
	t.Console.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"user-template-name": t.UserTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access represents the /nokia-conf/configure/groups/group/system/security/aaa/user-template/access YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access struct {
	Console *bool `path:"console" module:"nokia-conf"`
	Ftp     *bool `path:"ftp" module:"nokia-conf"`
	Grpc    *bool `path:"grpc" module:"nokia-conf"`
	Li      *bool `path:"li" module:"nokia-conf"`
	Netconf *bool `path:"netconf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) IsYANGGoStruct() {}

// GetConsole retrieves the value of the leaf Console from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Console is set, it can
// safely use t.GetConsole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Console == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) GetConsole() bool {
	if t == nil || t.Console == nil {
		return true
	}
	return *t.Console
}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return false
	}
	return *t.Ftp
}

// GetGrpc retrieves the value of the leaf Grpc from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grpc is set, it can
// safely use t.GetGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) GetGrpc() bool {
	if t == nil || t.Grpc == nil {
		return false
	}
	return *t.Grpc
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetNetconf retrieves the value of the leaf Netconf from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netconf is set, it can
// safely use t.GetNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) GetNetconf() bool {
	if t == nil || t.Netconf == nil {
		return false
	}
	return *t.Netconf
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Console == nil {
		var v bool = true
		t.Console = &v
	}
	if t.Ftp == nil {
		var v bool = false
		t.Ftp = &v
	}
	if t.Grpc == nil {
		var v bool = false
		t.Grpc = &v
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	if t.Netconf == nil {
		var v bool = false
		t.Netconf = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console represents the /nokia-conf/configure/groups/group/system/security/aaa/user-template/console YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console struct {
	LoginExec *string `path:"login-exec" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) IsYANGGoStruct() {}

// GetLoginExec retrieves the value of the leaf LoginExec from the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginExec is set, it can
// safely use t.GetLoginExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) GetLoginExec() string {
	if t == nil || t.LoginExec == nil {
		return ""
	}
	return *t.LoginExec
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console.
func (*NokiaConf_Configure_Groups_Group_System_Security_Aaa_UserTemplate_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CliScript represents the /nokia-conf/configure/groups/group/system/security/cli-script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CliScript struct {
	Authorization *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization `path:"authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CliScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript) IsYANGGoStruct() {}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) GetOrCreateAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization{}
	return t.Authorization
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CliScript. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) GetAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CliScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CliScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CliScript.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization represents the /nokia-conf/configure/groups/group/system/security/cli-script/authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization struct {
	Cron         *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron         `path:"cron" module:"nokia-conf"`
	EventHandler *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler `path:"event-handler" module:"nokia-conf"`
	Vsd          *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd          `path:"vsd" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) IsYANGGoStruct() {}

// GetOrCreateCron retrieves the value of the Cron field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetOrCreateCron() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron {
	if t.Cron != nil {
		return t.Cron
	}
	t.Cron = &NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron{}
	return t.Cron
}

// GetOrCreateEventHandler retrieves the value of the EventHandler field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetOrCreateEventHandler() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler {
	if t.EventHandler != nil {
		return t.EventHandler
	}
	t.EventHandler = &NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler{}
	return t.EventHandler
}

// GetOrCreateVsd retrieves the value of the Vsd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetOrCreateVsd() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd {
	if t.Vsd != nil {
		return t.Vsd
	}
	t.Vsd = &NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd{}
	return t.Vsd
}

// GetCron returns the value of the Cron struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization. If the receiver or the field Cron is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetCron() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron {
	if t != nil && t.Cron != nil {
		return t.Cron
	}
	return nil
}

// GetEventHandler returns the value of the EventHandler struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization. If the receiver or the field EventHandler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetEventHandler() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler {
	if t != nil && t.EventHandler != nil {
		return t.EventHandler
	}
	return nil
}

// GetVsd returns the value of the Vsd struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization. If the receiver or the field Vsd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) GetVsd() *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd {
	if t != nil && t.Vsd != nil {
		return t.Vsd
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cron.PopulateDefaults()
	t.EventHandler.PopulateDefaults()
	t.Vsd.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron represents the /nokia-conf/configure/groups/group/system/security/cli-script/authorization/cron YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Cron) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler represents the /nokia-conf/configure/groups/group/system/security/cli-script/authorization/event-handler YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_EventHandler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd represents the /nokia-conf/configure/groups/group/system/security/cli-script/authorization/vsd YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd.
func (*NokiaConf_Configure_Groups_Group_System_Security_CliScript_Authorization_Vsd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter represents the /nokia-conf/configure/groups/group/system/security/cpm-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter struct {
	DefaultAction E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_DefaultAction `path:"default-action" module:"nokia-conf"`
	IpFilter      *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter       `path:"ip-filter" module:"nokia-conf"`
	Ipv6Filter    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter     `path:"ipv6-filter" module:"nokia-conf"`
	MacFilter     *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter      `path:"mac-filter" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) IsYANGGoStruct() {}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetOrCreateIpFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetOrCreateIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetOrCreateMacFilter retrieves the value of the MacFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetOrCreateMacFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter {
	if t.MacFilter != nil {
		return t.MacFilter
	}
	t.MacFilter = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter{}
	return t.MacFilter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetIpFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// GetMacFilter returns the value of the MacFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter. If the receiver or the field MacFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetMacFilter() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter {
	if t != nil && t.MacFilter != nil {
		return t.MacFilter
	}
	return nil
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) GetDefaultAction() E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_DefaultAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_DefaultAction_accept
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_DefaultAction_accept
	}
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
	t.MacFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                            `path:"admin-state" module:"nokia-conf"`
	Entry      map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                                 `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Log         *uint32                                                                                 `path:"log" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) IsYANGGoStruct() {
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match struct {
	Dscp           E_NokiaTypesQos_DscpName                                                                       `path:"dscp" module:"nokia-conf"`
	DstIp          *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp         `path:"dst-ip" module:"nokia-conf"`
	DstPort        *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf"`
	Fragment       E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Fragment     `path:"fragment" module:"nokia-conf"`
	Icmp           *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp          `path:"icmp" module:"nokia-conf"`
	IpOption       *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption      `path:"ip-option" module:"nokia-conf" yangPresence:"true"`
	MultipleOption *bool                                                                                          `path:"multiple-option" module:"nokia-conf"`
	OptionPresent  *bool                                                                                          `path:"option-present" module:"nokia-conf"`
	Port           *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port          `path:"port" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	RouterInstance *string                                                                                        `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf"`
	TcpFlags       *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags      `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreateIpOption retrieves the value of the IpOption field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateIpOption() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption {
	if t.IpOption != nil {
		return t.IpOption
	}
	t.IpOption = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption{}
	return t.IpOption
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIpOption returns the value of the IpOption struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field IpOption is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetIpOption() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption {
	if t != nil && t.IpOption != nil {
		return t.IpOption
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetMultipleOption retrieves the value of the leaf MultipleOption from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MultipleOption is set, it can
// safely use t.GetMultipleOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MultipleOption == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetMultipleOption() bool {
	if t == nil || t.MultipleOption == nil {
		return false
	}
	return *t.MultipleOption
}

// GetOptionPresent retrieves the value of the leaf OptionPresent from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OptionPresent is set, it can
// safely use t.GetOptionPresent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OptionPresent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetOptionPresent() bool {
	if t == nil || t.OptionPresent == nil {
		return false
	}
	return *t.OptionPresent
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.IpOption.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort struct {
	Eq       *uint16                                                                                        `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                        `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/ip-option YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_IpOption) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port struct {
	Eq       *uint16                                                                                     `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                     `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                     `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                                                        `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                        `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                        `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}
