/*
Package ygotsros is a generated package which contains definitions
of structs which represent a YANG schema. The generated schema can be
compressed by a series of transformations (compression was false
in this case).

This package was generated by /home/hans/go/pkg/mod/github.com/openconfig/ygot@v0.20.0/genutil/names.go
using the following YANG input files:
	- nokia/YANG/nokia-combined/nokia-conf.yang
Imported modules were sourced from:
	- nokia/YANG/...
*/
package ygotsros

import (
	"fmt"
	"reflect"

	"github.com/openconfig/ygot/ygot"
	"github.com/openconfig/ygot/ytypes"
)

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ip-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_IpFilter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                                `path:"admin-state" module:"nokia-conf"`
	Entry      map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                                   `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Log         *uint32                                                                                   `path:"log" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) IsYANGGoStruct() {
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match struct {
	Dscp            E_NokiaTypesQos_DscpName                                                                           `path:"dscp" module:"nokia-conf"`
	DstIp           *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp           `path:"dst-ip" module:"nokia-conf"`
	DstPort         *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf"`
	ExtensionHeader *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader `path:"extension-header" module:"nokia-conf"`
	FlowLabel       *int32                                                                                             `path:"flow-label" module:"nokia-conf"`
	Fragment        E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Fragment       `path:"fragment" module:"nokia-conf"`
	Icmp            *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp            `path:"icmp" module:"nokia-conf"`
	NextHeader      NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	Port            *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port            `path:"port" module:"nokia-conf"`
	RouterInstance  *string                                                                                            `path:"router-instance" module:"nokia-conf"`
	SrcIp           *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort         *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf"`
	TcpFlags        *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags        `path:"tcp-flags" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstIp retrieves the value of the DstIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateDstIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp {
	if t.DstIp != nil {
		return t.DstIp
	}
	t.DstIp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp{}
	return t.DstIp
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateExtensionHeader retrieves the value of the ExtensionHeader field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateExtensionHeader() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	t.ExtensionHeader = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader{}
	return t.ExtensionHeader
}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp{}
	return t.Icmp
}

// GetOrCreatePort retrieves the value of the Port field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreatePort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port {
	if t.Port != nil {
		return t.Port
	}
	t.Port = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port{}
	return t.Port
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetOrCreateTcpFlags retrieves the value of the TcpFlags field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetOrCreateTcpFlags() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags {
	if t.TcpFlags != nil {
		return t.TcpFlags
	}
	t.TcpFlags = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags{}
	return t.TcpFlags
}

// GetDstIp returns the value of the DstIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDstIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp {
	if t != nil && t.DstIp != nil {
		return t.DstIp
	}
	return nil
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetExtensionHeader returns the value of the ExtensionHeader struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field ExtensionHeader is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetExtensionHeader() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader {
	if t != nil && t.ExtensionHeader != nil {
		return t.ExtensionHeader
	}
	return nil
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetIcmp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetPort returns the value of the Port struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field Port is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port {
	if t != nil && t.Port != nil {
		return t.Port
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetTcpFlags returns the value of the TcpFlags struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match. If the receiver or the field TcpFlags is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetTcpFlags() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags {
	if t != nil && t.TcpFlags != nil {
		return t.TcpFlags
	}
	return nil
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return 0
	}
	return t.Dscp
}

// GetFlowLabel retrieves the value of the leaf FlowLabel from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabel is set, it can
// safely use t.GetFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetFlowLabel() int32 {
	if t == nil || t.FlowLabel == nil {
		return 0
	}
	return *t.FlowLabel
}

// GetFragment retrieves the value of the leaf Fragment from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fragment is set, it can
// safely use t.GetFragment() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fragment == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetFragment() E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Fragment {
	if t == nil || t.Fragment == 0 {
		return 0
	}
	return t.Fragment
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstIp.PopulateDefaults()
	t.DstPort.PopulateDefaults()
	t.ExtensionHeader.PopulateDefaults()
	t.Icmp.PopulateDefaults()
	t.Port.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
	t.TcpFlags.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/dst-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort struct {
	Eq       *uint16                                                                                          `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                          `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/dst-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_DstPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/extension-header YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader struct {
	HopByHop *bool `path:"hop-by-hop" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) IsYANGGoStruct() {
}

// GetHopByHop retrieves the value of the leaf HopByHop from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HopByHop is set, it can
// safely use t.GetHopByHop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HopByHop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) GetHopByHop() bool {
	if t == nil || t.HopByHop == nil {
		return false
	}
	return *t.HopByHop
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_ExtensionHeader) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp struct {
	Code *int32 `path:"code" module:"nokia-conf"`
	Type *int32 `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) IsYANGGoStruct() {
}

// GetCode retrieves the value of the leaf Code from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Code is set, it can
// safely use t.GetCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Code == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) GetCode() int32 {
	if t == nil || t.Code == nil {
		return 0
	}
	return *t.Code
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) GetType() int32 {
	if t == nil || t.Type == nil {
		return 0
	}
	return *t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port struct {
	Eq       *uint16                                                                                       `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                       `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                       `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_Port_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort struct {
	Eq       *uint16                                                                                          `path:"eq" module:"nokia-conf"`
	Mask     *uint16                                                                                          `path:"mask" module:"nokia-conf"`
	PortList *string                                                                                          `path:"port-list" module:"nokia-conf"`
	Range    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetEq() uint16 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPortList retrieves the value of the leaf PortList from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortList is set, it can
// safely use t.GetPortList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) GetPortList() string {
	if t == nil || t.PortList == nil {
		return ""
	}
	return *t.PortList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/src-port/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range struct {
	End   *uint16 `path:"end" module:"nokia-conf"`
	Start *uint16 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) GetStart() uint16 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_SrcPort_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/ipv6-filter/entry/match/tcp-flags YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags struct {
	Ack *bool `path:"ack" module:"nokia-conf"`
	Syn *bool `path:"syn" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) IsYANGGoStruct() {
}

// GetAck retrieves the value of the leaf Ack from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ack is set, it can
// safely use t.GetAck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ack == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) GetAck() bool {
	if t == nil || t.Ack == nil {
		return false
	}
	return *t.Ack
}

// GetSyn retrieves the value of the leaf Syn from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Syn is set, it can
// safely use t.GetSyn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Syn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) GetSyn() bool {
	if t == nil || t.Syn == nil {
		return false
	}
	return *t.Syn
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_Ipv6Filter_Entry_Match_TcpFlags) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter struct {
	AdminState E_NokiaTypesSros_AdminState                                                                                                                                              `path:"admin-state" module:"nokia-conf"`
	Entry      map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry struct {
	Action      *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action       `path:"action" module:"nokia-conf"`
	Description *string                                                                                  `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	Log         *uint32                                                                                  `path:"log" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) IsYANGGoStruct() {}

// GetOrCreateAction retrieves the value of the Action field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetOrCreateAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action {
	if t.Action != nil {
		return t.Action
	}
	t.Action = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action{}
	return t.Action
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match{}
	return t.Match
}

// GetAction returns the value of the Action struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry. If the receiver or the field Action is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetAction() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action {
	if t != nil && t.Action != nil {
		return t.Action
	}
	return nil
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLog retrieves the value of the leaf Log from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Log is set, it can
// safely use t.GetLog() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Log == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) GetLog() uint32 {
	if t == nil || t.Log == nil {
		return 0
	}
	return *t.Log
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Action.PopulateDefaults()
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/action YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action struct {
	Accept  YANGEmpty `path:"accept" module:"nokia-conf"`
	Default YANGEmpty `path:"default" module:"nokia-conf"`
	Drop    YANGEmpty `path:"drop" module:"nokia-conf"`
	Queue   *uint32   `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) IsYANGGoStruct() {
}

// GetAccept retrieves the value of the leaf Accept from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Accept is set, it can
// safely use t.GetAccept() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Accept == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) GetAccept() YANGEmpty {
	if t == nil || t.Accept == false {
		return false
	}
	return t.Accept
}

// GetDefault retrieves the value of the leaf Default from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Default is set, it can
// safely use t.GetDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Default == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) GetDefault() YANGEmpty {
	if t == nil || t.Default == false {
		return false
	}
	return t.Default
}

// GetDrop retrieves the value of the leaf Drop from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drop is set, it can
// safely use t.GetDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) GetDrop() YANGEmpty {
	if t == nil || t.Drop == false {
		return false
	}
	return t.Drop
}

// GetQueue retrieves the value of the leaf Queue from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Queue is set, it can
// safely use t.GetQueue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Queue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) GetQueue() uint32 {
	if t == nil || t.Queue == nil {
		return 0
	}
	return *t.Queue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Action) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match struct {
	CfmOpcode *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode  `path:"cfm-opcode" module:"nokia-conf"`
	DstMac    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac     `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                                                      `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_FrameType `path:"frame-type" module:"nokia-conf"`
	LlcDsap   *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap    `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap    `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	Service   *string                                                                                      `path:"service" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac     `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateCfmOpcode retrieves the value of the CfmOpcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateCfmOpcode() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode {
	if t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	t.CfmOpcode = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode{}
	return t.CfmOpcode
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetCfmOpcode returns the value of the CfmOpcode struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field CfmOpcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetCfmOpcode() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode {
	if t != nil && t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetDstMac() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetLlcDsap() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetLlcSsap() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetFrameType() E_NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_FrameType {
	if t == nil || t.FrameType == 0 {
		return 0
	}
	return t.FrameType
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CfmOpcode.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/cfm-opcode YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode struct {
	Eq    *uint32                                                                                           `path:"eq" module:"nokia-conf"`
	Gt    *uint32                                                                                           `path:"gt" module:"nokia-conf"`
	Lt    *uint32                                                                                           `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/cfm-opcode/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) IsYANGGoStruct() {
}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/groups/group/system/security/cpm-filter/mac-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmFilter_MacFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmQueue represents the /nokia-conf/configure/groups/group/system/security/cpm-queue YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmQueue struct {
	Queue map[NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue `path:"queue" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmQueue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) IsYANGGoStruct() {}

// NewQueue creates a new entry in the Queue list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpmQueue struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) NewQueue(QueueId NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue)
	}

	key := QueueId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Queue[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Queue", key)
	}

	t.Queue[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue{
		QueueId: QueueId,
	}

	return t.Queue[key], nil
}

// RenameQueue renames an entry in the list Queue within
// the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) RenameQueue(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union) error {
	if _, ok := t.Queue[newK]; ok {
		return fmt.Errorf("key %v already exists in Queue", newK)
	}

	e, ok := t.Queue[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Queue", oldK)
	}
	e.QueueId = newK

	t.Queue[newK] = e
	delete(t.Queue, oldK)
	return nil
}

// GetOrCreateQueue retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmQueue. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) GetOrCreateQueue(QueueId NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue {

	key := QueueId

	if v, ok := t.Queue[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewQueue(QueueId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateQueue got unexpected error: %v", err))
	}
	return v
}

// GetQueue retrieves the value with the specified key from
// the Queue map field of NokiaConf_Configure_Groups_Group_System_Security_CpmQueue. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) GetQueue(QueueId NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue {

	if t == nil {
		return nil
	}

	key := QueueId

	if lm, ok := t.Queue[key]; ok {
		return lm
	}
	return nil
}

// DeleteQueue deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpmQueue. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) DeleteQueue(QueueId NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union) {
	key := QueueId

	delete(t.Queue, key)
}

// AppendQueue appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue struct to the
// list Queue of NokiaConf_Configure_Groups_Group_System_Security_CpmQueue. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) AppendQueue(v *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) error {
	key := v.QueueId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Queue == nil {
		t.Queue = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue)
	}

	if _, ok := t.Queue[key]; ok {
		return fmt.Errorf("duplicate key for list Queue %v", key)
	}

	t.Queue[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Queue {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmQueue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmQueue.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue represents the /nokia-conf/configure/groups/group/system/security/cpm-queue/queue YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue struct {
	Cbs     *int32                                                                        `path:"cbs" module:"nokia-conf"`
	Mbs     *int32                                                                        `path:"mbs" module:"nokia-conf"`
	QueueId NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union `path:"queue-id" module:"nokia-conf"`
	Rate    *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) IsYANGGoStruct() {}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) GetRate() *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetCbs retrieves the value of the leaf Cbs from the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cbs is set, it can
// safely use t.GetCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) GetCbs() int32 {
	if t == nil || t.Cbs == nil {
		return 0
	}
	return *t.Cbs
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// GetQueueId retrieves the value of the leaf QueueId from the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueueId is set, it can
// safely use t.GetQueueId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueueId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) GetQueueId() NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_QueueId_Union {
	if t == nil || t.QueueId == nil {
		return nil
	}
	return t.QueueId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"queue-id": t.QueueId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate represents the /nokia-conf/configure/groups/group/system/security/cpm-queue/queue/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate struct {
	Cir NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate_Cir_Union `path:"cir" module:"nokia-conf"`
	Pir NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) IsYANGGoStruct() {}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) GetCir() NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate_Cir_Union {
	if t == nil || t.Cir == nil {
		return NokiaTypesSystem_CirRate_Enum_max
	}
	return t.Cir
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) GetPir() NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaTypesSystem_PirRate_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		t.Cir = NokiaTypesSystem_CirRate_Enum_max
	}
	if t.Pir == nil {
		t.Pir = NokiaTypesSystem_PirRate_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpmQueue_Queue_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection represents the /nokia-conf/configure/groups/group/system/security/cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection struct {
	IpSrcMonitoring    *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring                                                                                 `path:"ip-src-monitoring" module:"nokia-conf"`
	LinkSpecificRate   NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_LinkSpecificRate_Union                                                                           `path:"link-specific-rate" module:"nokia-conf"`
	Policy             map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy `path:"policy" module:"nokia-conf"`
	PortOverallRate    *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate                                                                                 `path:"port-overall-rate" module:"nokia-conf"`
	ProtocolProtection *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection                                                                              `path:"protocol-protection" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) NewPolicy(PolicyId NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy{
		PolicyId: PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) RenamePolicy(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetOrCreatePolicy(PolicyId NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy {

	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetPolicy(PolicyId NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy {

	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) DeletePolicy(PolicyId NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy struct to the
// list Policy of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) AppendPolicy(v *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) error {
	key := v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// GetOrCreateIpSrcMonitoring retrieves the value of the IpSrcMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetOrCreateIpSrcMonitoring() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring {
	if t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	t.IpSrcMonitoring = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring{}
	return t.IpSrcMonitoring
}

// GetOrCreatePortOverallRate retrieves the value of the PortOverallRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetOrCreatePortOverallRate() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate {
	if t.PortOverallRate != nil {
		return t.PortOverallRate
	}
	t.PortOverallRate = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate{}
	return t.PortOverallRate
}

// GetOrCreateProtocolProtection retrieves the value of the ProtocolProtection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetOrCreateProtocolProtection() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection {
	if t.ProtocolProtection != nil {
		return t.ProtocolProtection
	}
	t.ProtocolProtection = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection{}
	return t.ProtocolProtection
}

// GetIpSrcMonitoring returns the value of the IpSrcMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the receiver or the field IpSrcMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetIpSrcMonitoring() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring {
	if t != nil && t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	return nil
}

// GetPortOverallRate returns the value of the PortOverallRate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the receiver or the field PortOverallRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetPortOverallRate() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate {
	if t != nil && t.PortOverallRate != nil {
		return t.PortOverallRate
	}
	return nil
}

// GetProtocolProtection returns the value of the ProtocolProtection struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection. If the receiver or the field ProtocolProtection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetProtocolProtection() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection {
	if t != nil && t.ProtocolProtection != nil {
		return t.ProtocolProtection
	}
	return nil
}

// GetLinkSpecificRate retrieves the value of the leaf LinkSpecificRate from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkSpecificRate is set, it can
// safely use t.GetLinkSpecificRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkSpecificRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) GetLinkSpecificRate() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_LinkSpecificRate_Union {
	if t == nil || t.LinkSpecificRate == nil {
		return nil
	}
	return t.LinkSpecificRate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpSrcMonitoring.PopulateDefaults()
	t.PortOverallRate.PopulateDefaults()
	t.ProtocolProtection.PopulateDefaults()
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/ip-src-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring struct {
	IncludedProtocols *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols `path:"included-protocols" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) IsYANGGoStruct() {
}

// GetOrCreateIncludedProtocols retrieves the value of the IncludedProtocols field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) GetOrCreateIncludedProtocols() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols {
	if t.IncludedProtocols != nil {
		return t.IncludedProtocols
	}
	t.IncludedProtocols = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols{}
	return t.IncludedProtocols
}

// GetIncludedProtocols returns the value of the IncludedProtocols struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring. If the receiver or the field IncludedProtocols is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) GetIncludedProtocols() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols {
	if t != nil && t.IncludedProtocols != nil {
		return t.IncludedProtocols
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludedProtocols.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/ip-src-monitoring/included-protocols YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols struct {
	Dhcp *bool `path:"dhcp" module:"nokia-conf"`
	Gtp  *bool `path:"gtp" module:"nokia-conf"`
	Icmp *bool `path:"icmp" module:"nokia-conf"`
	Igmp *bool `path:"igmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) IsYANGGoStruct() {
}

// GetDhcp retrieves the value of the leaf Dhcp from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dhcp is set, it can
// safely use t.GetDhcp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dhcp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetDhcp() bool {
	if t == nil || t.Dhcp == nil {
		return true
	}
	return *t.Dhcp
}

// GetGtp retrieves the value of the leaf Gtp from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gtp is set, it can
// safely use t.GetGtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetGtp() bool {
	if t == nil || t.Gtp == nil {
		return false
	}
	return *t.Gtp
}

// GetIcmp retrieves the value of the leaf Icmp from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Icmp is set, it can
// safely use t.GetIcmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Icmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetIcmp() bool {
	if t == nil || t.Icmp == nil {
		return false
	}
	return *t.Icmp
}

// GetIgmp retrieves the value of the leaf Igmp from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Igmp is set, it can
// safely use t.GetIgmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Igmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) GetIgmp() bool {
	if t == nil || t.Igmp == nil {
		return false
	}
	return *t.Igmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dhcp == nil {
		var v bool = true
		t.Dhcp = &v
	}
	if t.Gtp == nil {
		var v bool = false
		t.Gtp = &v
	}
	if t.Icmp == nil {
		var v bool = false
		t.Icmp = &v
	}
	if t.Igmp == nil {
		var v bool = false
		t.Igmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_IpSrcMonitoring_IncludedProtocols) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy struct {
	Alarm               *bool                                                                                      `path:"alarm" module:"nokia-conf"`
	Description         *string                                                                                    `path:"description" module:"nokia-conf"`
	EthCfm              *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm              `path:"eth-cfm" module:"nokia-conf"`
	OutProfileRate      *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate      `path:"out-profile-rate" module:"nokia-conf"`
	OverallRate         NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OverallRate_Union    `path:"overall-rate" module:"nokia-conf"`
	PerSourceParameters *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters `path:"per-source-parameters" module:"nokia-conf"`
	PerSourceRate       NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceRate_Union  `path:"per-source-rate" module:"nokia-conf"`
	PolicyId            NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union       `path:"policy-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) IsYANGGoStruct() {}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm{}
	return t.EthCfm
}

// GetOrCreateOutProfileRate retrieves the value of the OutProfileRate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetOrCreateOutProfileRate() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate {
	if t.OutProfileRate != nil {
		return t.OutProfileRate
	}
	t.OutProfileRate = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate{}
	return t.OutProfileRate
}

// GetOrCreatePerSourceParameters retrieves the value of the PerSourceParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetOrCreatePerSourceParameters() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters {
	if t.PerSourceParameters != nil {
		return t.PerSourceParameters
	}
	t.PerSourceParameters = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters{}
	return t.PerSourceParameters
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetEthCfm() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetOutProfileRate returns the value of the OutProfileRate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy. If the receiver or the field OutProfileRate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetOutProfileRate() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate {
	if t != nil && t.OutProfileRate != nil {
		return t.OutProfileRate
	}
	return nil
}

// GetPerSourceParameters returns the value of the PerSourceParameters struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy. If the receiver or the field PerSourceParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetPerSourceParameters() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters {
	if t != nil && t.PerSourceParameters != nil {
		return t.PerSourceParameters
	}
	return nil
}

// GetAlarm retrieves the value of the leaf Alarm from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Alarm is set, it can
// safely use t.GetAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Alarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetAlarm() bool {
	if t == nil || t.Alarm == nil {
		return true
	}
	return *t.Alarm
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetOverallRate retrieves the value of the leaf OverallRate from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverallRate is set, it can
// safely use t.GetOverallRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverallRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetOverallRate() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OverallRate_Union {
	if t == nil || t.OverallRate == nil {
		return NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	return t.OverallRate
}

// GetPerSourceRate retrieves the value of the leaf PerSourceRate from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerSourceRate is set, it can
// safely use t.GetPerSourceRate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerSourceRate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetPerSourceRate() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceRate_Union {
	if t == nil || t.PerSourceRate == nil {
		return NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	return t.PerSourceRate
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) GetPolicyId() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PolicyId_Union {
	if t == nil || t.PolicyId == nil {
		return nil
	}
	return t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Alarm == nil {
		var v bool = true
		t.Alarm = &v
	}
	if t.OverallRate == nil {
		t.OverallRate = NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	if t.PerSourceRate == nil {
		t.PerSourceRate = NokiaTypesSecurity_CpmPolicyPacketRateLimit_Enum_max
	}
	t.EthCfm.PopulateDefaults()
	t.OutProfileRate.PopulateDefaults()
	t.PerSourceParameters.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policy-id": t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm struct {
	Entry map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) NewEntry(Id NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry{
		Id: Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) GetOrCreateEntry(Id NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) GetEntry(Id NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) DeleteEntry(Id NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) error {
	key := v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct {
	Id     NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union                                                                                                  `path:"id" module:"nokia-conf"`
	Level  map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level   `path:"level" module:"nokia-conf"`
	Opcode map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode `path:"opcode" module:"nokia-conf"`
	Pir    NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Union                                                                                                 `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) IsYANGGoStruct() {
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key represents the key for list Level of element /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm/entry.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key struct {
	Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union   `path:"end"`
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key represents the key for list Opcode of element /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm/entry.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key struct {
	Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union `path:"start"`
	End   NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union   `path:"end"`
}

// NewLevel creates a new entry in the Level list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) NewLevel(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level)
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Level[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Level", key)
	}

	t.Level[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level{
		Start: Start,
		End:   End,
	}

	return t.Level[key], nil
}

// RenameLevel renames an entry in the list Level within
// the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) RenameLevel(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key) error {
	if _, ok := t.Level[newK]; ok {
		return fmt.Errorf("key %v already exists in Level", newK)
	}

	e, ok := t.Level[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Level", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Level[newK] = e
	delete(t.Level, oldK)
	return nil
}

// GetOrCreateLevel retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOrCreateLevel(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level {

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Level[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLevel(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLevel got unexpected error: %v", err))
	}
	return v
}

// GetLevel retrieves the value with the specified key from
// the Level map field of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetLevel(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Level[key]; ok {
		return lm
	}
	return nil
}

// DeleteLevel deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) DeleteLevel(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union) {
	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Level, key)
}

// AppendLevel appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct to the
// list Level of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) AppendLevel(v *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) error {
	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Level == nil {
		t.Level = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level)
	}

	if _, ok := t.Level[key]; ok {
		return fmt.Errorf("duplicate key for list Level %v", key)
	}

	t.Level[key] = v
	return nil
}

// NewOpcode creates a new entry in the Opcode list of the
// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) NewOpcode(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union) (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Opcode == nil {
		t.Opcode = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode)
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Opcode[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Opcode", key)
	}

	t.Opcode[key] = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode{
		Start: Start,
		End:   End,
	}

	return t.Opcode[key], nil
}

// RenameOpcode renames an entry in the list Opcode within
// the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) RenameOpcode(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key) error {
	if _, ok := t.Opcode[newK]; ok {
		return fmt.Errorf("key %v already exists in Opcode", newK)
	}

	e, ok := t.Opcode[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Opcode", oldK)
	}
	e.Start = newK.Start
	e.End = newK.End

	t.Opcode[newK] = e
	delete(t.Opcode, oldK)
	return nil
}

// GetOrCreateOpcode retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOrCreateOpcode(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode {

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	if v, ok := t.Opcode[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewOpcode(Start, End)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateOpcode got unexpected error: %v", err))
	}
	return v
}

// GetOpcode retrieves the value with the specified key from
// the Opcode map field of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetOpcode(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union) *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	if lm, ok := t.Opcode[key]; ok {
		return lm
	}
	return nil
}

// DeleteOpcode deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) DeleteOpcode(Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union, End NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union) {
	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: Start,
		End:   End,
	}

	delete(t.Opcode, key)
}

// AppendOpcode appends the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct to the
// list Opcode of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) AppendOpcode(v *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) error {
	key := NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key{
		Start: v.Start,
		End:   v.End,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Opcode == nil {
		t.Opcode = make(map[NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Key]*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode)
	}

	if _, ok := t.Opcode[key]; ok {
		return fmt.Errorf("duplicate key for list Opcode %v", key)
	}

	t.Opcode[key] = v
	return nil
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetId() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Id_Union {
	if t == nil || t.Id == nil {
		return nil
	}
	return t.Id
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) GetPir() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Union {
	if t == nil || t.Pir == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Enum_max
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Pir == nil {
		t.Pir = NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Pir_Enum_max
	}
	for _, e := range t.Level {
		e.PopulateDefaults()
	}
	for _, e := range t.Opcode {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"id": t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm/entry/level YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct {
	End   NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) GetEnd() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) GetStart() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Level) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/eth-cfm/entry/opcode YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct {
	End   NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union   `path:"end" module:"nokia-conf"`
	Start NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) GetEnd() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_End_Union {
	if t == nil || t.End == nil {
		return nil
	}
	return t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) GetStart() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode_Start_Union {
	if t == nil || t.Start == nil {
		return nil
	}
	return t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"end":   t.End,
		"start": t.Start,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_EthCfm_Entry_Opcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/out-profile-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate struct {
	LogEvents *bool                                                                                          `path:"log-events" module:"nokia-conf"`
	Pir       NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) IsYANGGoStruct() {
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) GetPir() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate_Pir_Union {
	if t == nil || t.Pir == nil {
		return UnionInt32(3000)
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	if t.Pir == nil {
		t.Pir = UnionInt32(3000)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_OutProfileRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/per-source-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters struct {
	IpSrcMonitoring *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring `path:"ip-src-monitoring" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) IsYANGGoStruct() {
}

// GetOrCreateIpSrcMonitoring retrieves the value of the IpSrcMonitoring field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) GetOrCreateIpSrcMonitoring() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring {
	if t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	t.IpSrcMonitoring = &NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring{}
	return t.IpSrcMonitoring
}

// GetIpSrcMonitoring returns the value of the IpSrcMonitoring struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters. If the receiver or the field IpSrcMonitoring is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) GetIpSrcMonitoring() *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring {
	if t != nil && t.IpSrcMonitoring != nil {
		return t.IpSrcMonitoring
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpSrcMonitoring.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/policy/per-source-parameters/ip-src-monitoring YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring struct {
	LimitDhcpCiAddrZero *bool `path:"limit-dhcp-ci-addr-zero" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) IsYANGGoStruct() {
}

// GetLimitDhcpCiAddrZero retrieves the value of the leaf LimitDhcpCiAddrZero from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LimitDhcpCiAddrZero is set, it can
// safely use t.GetLimitDhcpCiAddrZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LimitDhcpCiAddrZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) GetLimitDhcpCiAddrZero() bool {
	if t == nil || t.LimitDhcpCiAddrZero == nil {
		return false
	}
	return *t.LimitDhcpCiAddrZero
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.LimitDhcpCiAddrZero == nil {
		var v bool = false
		t.LimitDhcpCiAddrZero = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_Policy_PerSourceParameters_IpSrcMonitoring) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/port-overall-rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate struct {
	ActionLowPriority *bool                                                                                    `path:"action-low-priority" module:"nokia-conf"`
	Pir               NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate_Pir_Union `path:"pir" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) IsYANGGoStruct() {
}

// GetActionLowPriority retrieves the value of the leaf ActionLowPriority from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActionLowPriority is set, it can
// safely use t.GetActionLowPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActionLowPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) GetActionLowPriority() bool {
	if t == nil || t.ActionLowPriority == nil {
		return false
	}
	return *t.ActionLowPriority
}

// GetPir retrieves the value of the leaf Pir from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pir is set, it can
// safely use t.GetPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) GetPir() NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate_Pir_Union {
	if t == nil || t.Pir == nil {
		return nil
	}
	return t.Pir
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActionLowPriority == nil {
		var v bool = false
		t.ActionLowPriority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_PortOverallRate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection represents the /nokia-conf/configure/groups/group/system/security/cpu-protection/protocol-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection struct {
	AllowShamLinks   *bool `path:"allow-sham-links" module:"nokia-conf"`
	BlockPimTunneled *bool `path:"block-pim-tunneled" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) IsYANGGoStruct() {
}

// GetAllowShamLinks retrieves the value of the leaf AllowShamLinks from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowShamLinks is set, it can
// safely use t.GetAllowShamLinks() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowShamLinks == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) GetAllowShamLinks() bool {
	if t == nil || t.AllowShamLinks == nil {
		return false
	}
	return *t.AllowShamLinks
}

// GetBlockPimTunneled retrieves the value of the leaf BlockPimTunneled from the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BlockPimTunneled is set, it can
// safely use t.GetBlockPimTunneled() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BlockPimTunneled == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) GetBlockPimTunneled() bool {
	if t == nil || t.BlockPimTunneled == nil {
		return false
	}
	return *t.BlockPimTunneled
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowShamLinks == nil {
		var v bool = false
		t.AllowShamLinks = &v
	}
	if t.BlockPimTunneled == nil {
		var v bool = false
		t.BlockPimTunneled = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection.
func (*NokiaConf_Configure_Groups_Group_System_Security_CpuProtection_ProtocolProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection struct {
	Policy map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) NewPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy{
		PolicyName: &PolicyName,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) RenamePolicy(oldK, newK string) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyName = &newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) GetOrCreatePolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy {

	key := PolicyName

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) GetPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) DeletePolicy(PolicyName string) {
	key := PolicyName

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct to the
// list Policy of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) AppendPolicy(v *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct {
	Description            *string                                                                                                                                                                                       `path:"description" module:"nokia-conf"`
	LocalMonitoringPolicer map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer                                                                                  `path:"local-monitoring-policer" module:"nokia-conf"`
	PolicyName             *string                                                                                                                                                                                       `path:"policy-name" module:"nokia-conf"`
	Protocol               map[NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol `path:"protocol" module:"nokia-conf"`
	StaticPolicer          map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer                                                                                           `path:"static-policer" module:"nokia-conf"`
	Type                   E_NokiaTypesSystem_DcpuPolicyType                                                                                                                                                             `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) IsYANGGoStruct() {}

// NewLocalMonitoringPolicer creates a new entry in the LocalMonitoringPolicer list of the
// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) NewLocalMonitoringPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalMonitoringPolicer == nil {
		t.LocalMonitoringPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LocalMonitoringPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LocalMonitoringPolicer", key)
	}

	t.LocalMonitoringPolicer[key] = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer{
		PolicerName: &PolicerName,
	}

	return t.LocalMonitoringPolicer[key], nil
}

// RenameLocalMonitoringPolicer renames an entry in the list LocalMonitoringPolicer within
// the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) RenameLocalMonitoringPolicer(oldK, newK string) error {
	if _, ok := t.LocalMonitoringPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in LocalMonitoringPolicer", newK)
	}

	e, ok := t.LocalMonitoringPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LocalMonitoringPolicer", oldK)
	}
	e.PolicerName = &newK

	t.LocalMonitoringPolicer[newK] = e
	delete(t.LocalMonitoringPolicer, oldK)
	return nil
}

// GetOrCreateLocalMonitoringPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetOrCreateLocalMonitoringPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer {

	key := PolicerName

	if v, ok := t.LocalMonitoringPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLocalMonitoringPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLocalMonitoringPolicer got unexpected error: %v", err))
	}
	return v
}

// GetLocalMonitoringPolicer retrieves the value with the specified key from
// the LocalMonitoringPolicer map field of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetLocalMonitoringPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.LocalMonitoringPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteLocalMonitoringPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) DeleteLocalMonitoringPolicer(PolicerName string) {
	key := PolicerName

	delete(t.LocalMonitoringPolicer, key)
}

// AppendLocalMonitoringPolicer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct to the
// list LocalMonitoringPolicer of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) AppendLocalMonitoringPolicer(v *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LocalMonitoringPolicer == nil {
		t.LocalMonitoringPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer)
	}

	if _, ok := t.LocalMonitoringPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list LocalMonitoringPolicer %v", key)
	}

	t.LocalMonitoringPolicer[key] = v
	return nil
}

// NewProtocol creates a new entry in the Protocol list of the
// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) NewProtocol(ProtocolName NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union) (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol)
	}

	key := ProtocolName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Protocol[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Protocol", key)
	}

	t.Protocol[key] = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol{
		ProtocolName: ProtocolName,
	}

	return t.Protocol[key], nil
}

// RenameProtocol renames an entry in the list Protocol within
// the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) RenameProtocol(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union) error {
	if _, ok := t.Protocol[newK]; ok {
		return fmt.Errorf("key %v already exists in Protocol", newK)
	}

	e, ok := t.Protocol[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Protocol", oldK)
	}
	e.ProtocolName = newK

	t.Protocol[newK] = e
	delete(t.Protocol, oldK)
	return nil
}

// GetOrCreateProtocol retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetOrCreateProtocol(ProtocolName NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol {

	key := ProtocolName

	if v, ok := t.Protocol[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewProtocol(ProtocolName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateProtocol got unexpected error: %v", err))
	}
	return v
}

// GetProtocol retrieves the value with the specified key from
// the Protocol map field of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetProtocol(ProtocolName NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol {

	if t == nil {
		return nil
	}

	key := ProtocolName

	if lm, ok := t.Protocol[key]; ok {
		return lm
	}
	return nil
}

// DeleteProtocol deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) DeleteProtocol(ProtocolName NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union) {
	key := ProtocolName

	delete(t.Protocol, key)
}

// AppendProtocol appends the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol struct to the
// list Protocol of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) AppendProtocol(v *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) error {
	key := v.ProtocolName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Protocol == nil {
		t.Protocol = make(map[NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol)
	}

	if _, ok := t.Protocol[key]; ok {
		return fmt.Errorf("duplicate key for list Protocol %v", key)
	}

	t.Protocol[key] = v
	return nil
}

// NewStaticPolicer creates a new entry in the StaticPolicer list of the
// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) NewStaticPolicer(PolicerName string) (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicer == nil {
		t.StaticPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer)
	}

	key := PolicerName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticPolicer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticPolicer", key)
	}

	t.StaticPolicer[key] = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer{
		PolicerName: &PolicerName,
	}

	return t.StaticPolicer[key], nil
}

// RenameStaticPolicer renames an entry in the list StaticPolicer within
// the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) RenameStaticPolicer(oldK, newK string) error {
	if _, ok := t.StaticPolicer[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticPolicer", newK)
	}

	e, ok := t.StaticPolicer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticPolicer", oldK)
	}
	e.PolicerName = &newK

	t.StaticPolicer[newK] = e
	delete(t.StaticPolicer, oldK)
	return nil
}

// GetOrCreateStaticPolicer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetOrCreateStaticPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer {

	key := PolicerName

	if v, ok := t.StaticPolicer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticPolicer(PolicerName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticPolicer got unexpected error: %v", err))
	}
	return v
}

// GetStaticPolicer retrieves the value with the specified key from
// the StaticPolicer map field of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetStaticPolicer(PolicerName string) *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer {

	if t == nil {
		return nil
	}

	key := PolicerName

	if lm, ok := t.StaticPolicer[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticPolicer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) DeleteStaticPolicer(PolicerName string) {
	key := PolicerName

	delete(t.StaticPolicer, key)
}

// AppendStaticPolicer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer struct to the
// list StaticPolicer of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) AppendStaticPolicer(v *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) error {
	if v.PolicerName == nil {
		return fmt.Errorf("invalid nil key received for PolicerName")
	}

	key := *v.PolicerName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticPolicer == nil {
		t.StaticPolicer = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer)
	}

	if _, ok := t.StaticPolicer[key]; ok {
		return fmt.Errorf("duplicate key for list StaticPolicer %v", key)
	}

	t.StaticPolicer[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) GetType() E_NokiaTypesSystem_DcpuPolicyType {
	if t == nil || t.Type == 0 {
		return NokiaTypesSystem_DcpuPolicyType_access_network
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Type == 0 {
		t.Type = NokiaTypesSystem_DcpuPolicyType_access_network
	}
	for _, e := range t.LocalMonitoringPolicer {
		e.PopulateDefaults()
	}
	for _, e := range t.Protocol {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticPolicer {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/local-monitoring-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct {
	Description  *string                                                                                                      `path:"description" module:"nokia-conf"`
	ExceedAction E_NokiaTypesSystem_DcpExceedAction                                                                           `path:"exceed-action" module:"nokia-conf"`
	LogEvents    E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents `path:"log-events" module:"nokia-conf"`
	PolicerName  *string                                                                                                      `path:"policer-name" module:"nokia-conf"`
	Rate         *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate       `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) IsYANGGoStruct() {
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate{}
	return t.Rate
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetExceedAction retrieves the value of the leaf ExceedAction from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExceedAction is set, it can
// safely use t.GetExceedAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExceedAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetExceedAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.ExceedAction == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.ExceedAction
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetLogEvents() E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents_true
	}
	return t.LogEvents
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExceedAction == 0 {
		t.ExceedAction = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_LogEvents_true
	}
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate struct {
	Kbps    *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetOrCreateKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetOrCreatePackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) GetPackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate/kbps YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps struct {
	Limit NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                                                 `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/local-monitoring-policer/rate/packets YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets struct {
	InitialDelay *uint32                                                                                                                   `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                                                   `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_LocalMonitoringPolicer_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol struct {
	DynamicParameters *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters `path:"dynamic-parameters" module:"nokia-conf"`
	Enforcement       *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement       `path:"enforcement" module:"nokia-conf"`
	ProtocolName      NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union `path:"protocol-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) IsYANGGoStruct() {
}

// GetOrCreateDynamicParameters retrieves the value of the DynamicParameters field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) GetOrCreateDynamicParameters() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters {
	if t.DynamicParameters != nil {
		return t.DynamicParameters
	}
	t.DynamicParameters = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters{}
	return t.DynamicParameters
}

// GetOrCreateEnforcement retrieves the value of the Enforcement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) GetOrCreateEnforcement() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement {
	if t.Enforcement != nil {
		return t.Enforcement
	}
	t.Enforcement = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement{}
	return t.Enforcement
}

// GetDynamicParameters returns the value of the DynamicParameters struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol. If the receiver or the field DynamicParameters is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) GetDynamicParameters() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters {
	if t != nil && t.DynamicParameters != nil {
		return t.DynamicParameters
	}
	return nil
}

// GetEnforcement returns the value of the Enforcement struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol. If the receiver or the field Enforcement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) GetEnforcement() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement {
	if t != nil && t.Enforcement != nil {
		return t.Enforcement
	}
	return nil
}

// GetProtocolName retrieves the value of the leaf ProtocolName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolName is set, it can
// safely use t.GetProtocolName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) GetProtocolName() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_ProtocolName_Union {
	if t == nil || t.ProtocolName == nil {
		return nil
	}
	return t.ProtocolName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DynamicParameters.PopulateDefaults()
	t.Enforcement.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"protocol-name": t.ProtocolName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters struct {
	DetectionTime *uint32                                                                                                            `path:"detection-time" module:"nokia-conf"`
	ExceedAction  *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction `path:"exceed-action" module:"nokia-conf"`
	LogEvents     E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents   `path:"log-events" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) IsYANGGoStruct() {
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetOrCreateExceedAction() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate{}
	return t.Rate
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetExceedAction() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetDetectionTime retrieves the value of the leaf DetectionTime from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionTime is set, it can
// safely use t.GetDetectionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetDetectionTime() uint32 {
	if t == nil || t.DetectionTime == nil {
		return 30
	}
	return *t.DetectionTime
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) GetLogEvents() E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents_true
	}
	return t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectionTime == nil {
		var v uint32 = 30
		t.DetectionTime = &v
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_LogEvents_true
	}
	t.ExceedAction.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/exceed-action YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction struct {
	Action   E_NokiaTypesSystem_DcpExceedAction                                                                                               `path:"action" module:"nokia-conf"`
	HoldDown NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Union `path:"hold-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) GetAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.Action
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) GetHoldDown() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Union {
	if t == nil || t.HoldDown == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Enum_none
	}
	return t.HoldDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.HoldDown == nil {
		t.HoldDown = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction_HoldDown_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_ExceedAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate struct {
	Kbps    *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetOrCreateKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetOrCreatePackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) GetPackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate/kbps YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps struct {
	Limit NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                                                     `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/dynamic-parameters/rate/packets YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets struct {
	InitialDelay *uint32                                                                                                                       `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                                                       `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_DynamicParameters_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/enforcement YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement struct {
	Dynamic               *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic `path:"dynamic" module:"nokia-conf"`
	DynamicLocalMonBypass YANGEmpty                                                                                               `path:"dynamic-local-mon-bypass" module:"nokia-conf"`
	Static                *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static  `path:"static" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) IsYANGGoStruct() {
}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetOrCreateDynamic() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic{}
	return t.Dynamic
}

// GetOrCreateStatic retrieves the value of the Static field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetOrCreateStatic() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static {
	if t.Static != nil {
		return t.Static
	}
	t.Static = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static{}
	return t.Static
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetDynamic() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// GetStatic returns the value of the Static struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement. If the receiver or the field Static is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetStatic() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static {
	if t != nil && t.Static != nil {
		return t.Static
	}
	return nil
}

// GetDynamicLocalMonBypass retrieves the value of the leaf DynamicLocalMonBypass from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicLocalMonBypass is set, it can
// safely use t.GetDynamicLocalMonBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicLocalMonBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) GetDynamicLocalMonBypass() YANGEmpty {
	if t == nil || t.DynamicLocalMonBypass == false {
		return false
	}
	return t.DynamicLocalMonBypass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
	t.Static.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/enforcement/dynamic YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic struct {
	MonPolicerName *string `path:"mon-policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) IsYANGGoStruct() {
}

// GetMonPolicerName retrieves the value of the leaf MonPolicerName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonPolicerName is set, it can
// safely use t.GetMonPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonPolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) GetMonPolicerName() string {
	if t == nil || t.MonPolicerName == nil {
		return ""
	}
	return *t.MonPolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/protocol/enforcement/static YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static struct {
	PolicerName *string `path:"policer-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) IsYANGGoStruct() {
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_Protocol_Enforcement_Static) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/static-policer YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer struct {
	Description   *string                                                                                               `path:"description" module:"nokia-conf"`
	DetectionTime *uint32                                                                                               `path:"detection-time" module:"nokia-conf"`
	ExceedAction  *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction `path:"exceed-action" module:"nokia-conf"`
	LogEvents     E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents   `path:"log-events" module:"nokia-conf"`
	PolicerName   *string                                                                                               `path:"policer-name" module:"nokia-conf"`
	Rate          *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate         `path:"rate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) IsYANGGoStruct() {
}

// GetOrCreateExceedAction retrieves the value of the ExceedAction field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetOrCreateExceedAction() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction {
	if t.ExceedAction != nil {
		return t.ExceedAction
	}
	t.ExceedAction = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction{}
	return t.ExceedAction
}

// GetOrCreateRate retrieves the value of the Rate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetOrCreateRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate {
	if t.Rate != nil {
		return t.Rate
	}
	t.Rate = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate{}
	return t.Rate
}

// GetExceedAction returns the value of the ExceedAction struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer. If the receiver or the field ExceedAction is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetExceedAction() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction {
	if t != nil && t.ExceedAction != nil {
		return t.ExceedAction
	}
	return nil
}

// GetRate returns the value of the Rate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer. If the receiver or the field Rate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetRate() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate {
	if t != nil && t.Rate != nil {
		return t.Rate
	}
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDetectionTime retrieves the value of the leaf DetectionTime from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DetectionTime is set, it can
// safely use t.GetDetectionTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DetectionTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetDetectionTime() uint32 {
	if t == nil || t.DetectionTime == nil {
		return 30
	}
	return *t.DetectionTime
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetLogEvents() E_NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents {
	if t == nil || t.LogEvents == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents_true
	}
	return t.LogEvents
}

// GetPolicerName retrieves the value of the leaf PolicerName from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicerName is set, it can
// safely use t.GetPolicerName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicerName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) GetPolicerName() string {
	if t == nil || t.PolicerName == nil {
		return ""
	}
	return *t.PolicerName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DetectionTime == nil {
		var v uint32 = 30
		t.DetectionTime = &v
	}
	if t.LogEvents == 0 {
		t.LogEvents = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_LogEvents_true
	}
	t.ExceedAction.PopulateDefaults()
	t.Rate.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicerName == nil {
		return nil, fmt.Errorf("nil value for key PolicerName")
	}

	return map[string]interface{}{
		"policer-name": *t.PolicerName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/static-policer/exceed-action YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction struct {
	Action   E_NokiaTypesSystem_DcpExceedAction                                                                                  `path:"action" module:"nokia-conf"`
	HoldDown NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Union `path:"hold-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) IsYANGGoStruct() {
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) GetAction() E_NokiaTypesSystem_DcpExceedAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesSystem_DcpExceedAction_none
	}
	return t.Action
}

// GetHoldDown retrieves the value of the leaf HoldDown from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldDown is set, it can
// safely use t.GetHoldDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) GetHoldDown() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Union {
	if t == nil || t.HoldDown == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Enum_none
	}
	return t.HoldDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesSystem_DcpExceedAction_none
	}
	if t.HoldDown == nil {
		t.HoldDown = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction_HoldDown_Enum_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_ExceedAction) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/static-policer/rate YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate struct {
	Kbps    *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps    `path:"kbps" module:"nokia-conf"`
	Packets *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets `path:"packets" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) IsYANGGoStruct() {
}

// GetOrCreateKbps retrieves the value of the Kbps field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetOrCreateKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps {
	if t.Kbps != nil {
		return t.Kbps
	}
	t.Kbps = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps{}
	return t.Kbps
}

// GetOrCreatePackets retrieves the value of the Packets field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetOrCreatePackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets {
	if t.Packets != nil {
		return t.Packets
	}
	t.Packets = &NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets{}
	return t.Packets
}

// GetKbps returns the value of the Kbps struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate. If the receiver or the field Kbps is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetKbps() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps {
	if t != nil && t.Kbps != nil {
		return t.Kbps
	}
	return nil
}

// GetPackets returns the value of the Packets struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate. If the receiver or the field Packets is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) GetPackets() *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets {
	if t != nil && t.Packets != nil {
		return t.Packets
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Kbps.PopulateDefaults()
	t.Packets.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/static-policer/rate/kbps YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps struct {
	Limit NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Union `path:"limit" module:"nokia-conf"`
	Mbs   *int32                                                                                                        `path:"mbs" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) IsYANGGoStruct() {
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Enum_max
	}
	return t.Limit
}

// GetMbs retrieves the value of the leaf Mbs from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbs is set, it can
// safely use t.GetMbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) GetMbs() int32 {
	if t == nil || t.Mbs == nil {
		return 0
	}
	return *t.Mbs
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps_Limit_Enum_max
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Kbps) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets represents the /nokia-conf/configure/groups/group/system/security/dist-cpu-protection/policy/static-policer/rate/packets YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets struct {
	InitialDelay *uint32                                                                                                          `path:"initial-delay" module:"nokia-conf"`
	Limit        NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Union `path:"limit" module:"nokia-conf"`
	Within       *uint32                                                                                                          `path:"within" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) IsYANGGoStruct() {
}

// GetInitialDelay retrieves the value of the leaf InitialDelay from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InitialDelay is set, it can
// safely use t.GetInitialDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InitialDelay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetInitialDelay() uint32 {
	if t == nil || t.InitialDelay == nil {
		return 0
	}
	return *t.InitialDelay
}

// GetLimit retrieves the value of the leaf Limit from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Limit is set, it can
// safely use t.GetLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Limit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetLimit() NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Union {
	if t == nil || t.Limit == nil {
		return NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Enum_max
	}
	return t.Limit
}

// GetWithin retrieves the value of the leaf Within from the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Within is set, it can
// safely use t.GetWithin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Within == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) GetWithin() uint32 {
	if t == nil || t.Within == nil {
		return 1
	}
	return *t.Within
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InitialDelay == nil {
		var v uint32 = 0
		t.InitialDelay = &v
	}
	if t.Limit == nil {
		t.Limit = NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets_Limit_Enum_max
	}
	if t.Within == nil {
		var v uint32 = 1
		t.Within = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets.
func (*NokiaConf_Configure_Groups_Group_System_Security_DistCpuProtection_Policy_StaticPolicer_Rate_Packets) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Dot1X represents the /nokia-conf/configure/groups/group/system/security/dot1x YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Dot1X struct {
	AdminState   E_NokiaTypesSros_AdminState                                                     `path:"admin-state" module:"nokia-conf"`
	RadiusPolicy map[string]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy `path:"radius-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Dot1X implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X) IsYANGGoStruct() {}

// NewRadiusPolicy creates a new entry in the RadiusPolicy list of the
// NokiaConf_Configure_Groups_Group_System_Security_Dot1X struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) NewRadiusPolicy(PolicyName string) (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusPolicy == nil {
		t.RadiusPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy)
	}

	key := PolicyName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RadiusPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RadiusPolicy", key)
	}

	t.RadiusPolicy[key] = &NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy{
		PolicyName: &PolicyName,
	}

	return t.RadiusPolicy[key], nil
}

// RenameRadiusPolicy renames an entry in the list RadiusPolicy within
// the NokiaConf_Configure_Groups_Group_System_Security_Dot1X struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) RenameRadiusPolicy(oldK, newK string) error {
	if _, ok := t.RadiusPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in RadiusPolicy", newK)
	}

	e, ok := t.RadiusPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RadiusPolicy", oldK)
	}
	e.PolicyName = &newK

	t.RadiusPolicy[newK] = e
	delete(t.RadiusPolicy, oldK)
	return nil
}

// GetOrCreateRadiusPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Dot1X. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) GetOrCreateRadiusPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy {

	key := PolicyName

	if v, ok := t.RadiusPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRadiusPolicy(PolicyName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRadiusPolicy got unexpected error: %v", err))
	}
	return v
}

// GetRadiusPolicy retrieves the value with the specified key from
// the RadiusPolicy map field of NokiaConf_Configure_Groups_Group_System_Security_Dot1X. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) GetRadiusPolicy(PolicyName string) *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy {

	if t == nil {
		return nil
	}

	key := PolicyName

	if lm, ok := t.RadiusPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteRadiusPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Dot1X. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) DeleteRadiusPolicy(PolicyName string) {
	key := PolicyName

	delete(t.RadiusPolicy, key)
}

// AppendRadiusPolicy appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy struct to the
// list RadiusPolicy of NokiaConf_Configure_Groups_Group_System_Security_Dot1X. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) AppendRadiusPolicy(v *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) error {
	if v.PolicyName == nil {
		return fmt.Errorf("invalid nil key received for PolicyName")
	}

	key := *v.PolicyName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RadiusPolicy == nil {
		t.RadiusPolicy = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy)
	}

	if _, ok := t.RadiusPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list RadiusPolicy %v", key)
	}

	t.RadiusPolicy[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Dot1X
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.RadiusPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Dot1X"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Dot1X.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy represents the /nokia-conf/configure/groups/group/system/security/dot1x/radius-policy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                                                  `path:"admin-state" module:"nokia-conf"`
	PolicyName    *string                                                                                                                                                                      `path:"policy-name" module:"nokia-conf"`
	Retry         *uint32                                                                                                                                                                      `path:"retry" module:"nokia-conf"`
	Server        map[NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server `path:"server" module:"nokia-conf"`
	SourceAddress *string                                                                                                                                                                      `path:"source-address" module:"nokia-conf"`
	Timeout       *uint32                                                                                                                                                                      `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) NewServer(ServerIndex NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server)
	}

	key := ServerIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server{
		ServerIndex: ServerIndex,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.ServerIndex = newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetOrCreateServer(ServerIndex NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server {

	key := ServerIndex

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(ServerIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetServer(ServerIndex NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server {

	if t == nil {
		return nil
	}

	key := ServerIndex

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) DeleteServer(ServerIndex NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union) {
	key := ServerIndex

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) error {
	key := v.ServerIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPolicyName retrieves the value of the leaf PolicyName from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyName is set, it can
// safely use t.GetPolicyName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetPolicyName() string {
	if t == nil || t.PolicyName == nil {
		return ""
	}
	return *t.PolicyName
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 3
	}
	return *t.Retry
}

// GetSourceAddress retrieves the value of the leaf SourceAddress from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAddress is set, it can
// safely use t.GetSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetSourceAddress() string {
	if t == nil || t.SourceAddress == nil {
		return ""
	}
	return *t.SourceAddress
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Retry == nil {
		var v uint32 = 3
		t.Retry = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PolicyName == nil {
		return nil, fmt.Errorf("nil value for key PolicyName")
	}

	return map[string]interface{}{
		"policy-name": *t.PolicyName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server represents the /nokia-conf/configure/groups/group/system/security/dot1x/radius-policy/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server struct {
	AccountingPort     *int32                                                                                       `path:"accounting-port" module:"nokia-conf"`
	Address            *string                                                                                      `path:"address" module:"nokia-conf"`
	AuthenticationPort *int32                                                                                       `path:"authentication-port" module:"nokia-conf"`
	Secret             *string                                                                                      `path:"secret" module:"nokia-conf"`
	ServerIndex        NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union `path:"server-index" module:"nokia-conf"`
	Type               E_NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_Type            `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) IsYANGGoStruct() {}

// GetAccountingPort retrieves the value of the leaf AccountingPort from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPort is set, it can
// safely use t.GetAccountingPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetAccountingPort() int32 {
	if t == nil || t.AccountingPort == nil {
		return 1813
	}
	return *t.AccountingPort
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetAuthenticationPort retrieves the value of the leaf AuthenticationPort from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationPort is set, it can
// safely use t.GetAuthenticationPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetAuthenticationPort() int32 {
	if t == nil || t.AuthenticationPort == nil {
		return 1812
	}
	return *t.AuthenticationPort
}

// GetSecret retrieves the value of the leaf Secret from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secret is set, it can
// safely use t.GetSecret() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetSecret() string {
	if t == nil || t.Secret == nil {
		return ""
	}
	return *t.Secret
}

// GetServerIndex retrieves the value of the leaf ServerIndex from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerIndex is set, it can
// safely use t.GetServerIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetServerIndex() NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_ServerIndex_Union {
	if t == nil || t.ServerIndex == nil {
		return nil
	}
	return t.ServerIndex
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) GetType() E_NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_Type_authorization
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AccountingPort == nil {
		var v int32 = 1813
		t.AccountingPort = &v
	}
	if t.AuthenticationPort == nil {
		var v int32 = 1812
		t.AuthenticationPort = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server_Type_authorization
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"server-index": t.ServerIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Dot1X_RadiusPolicy_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl represents the /nokia-conf/configure/groups/group/system/security/hash-control YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl struct {
	ManagementInterface *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface `path:"management-interface" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl) IsYANGGoStruct() {}

// GetOrCreateManagementInterface retrieves the value of the ManagementInterface field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) GetOrCreateManagementInterface() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface {
	if t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	t.ManagementInterface = &NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface{}
	return t.ManagementInterface
}

// GetManagementInterface returns the value of the ManagementInterface struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_HashControl. If the receiver or the field ManagementInterface is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) GetManagementInterface() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface {
	if t != nil && t.ManagementInterface != nil {
		return t.ManagementInterface
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ManagementInterface.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface represents the /nokia-conf/configure/groups/group/system/security/hash-control/management-interface YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface struct {
	ClassicCli *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli `path:"classic-cli" module:"nokia-conf"`
	Grpc       *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc       `path:"grpc" module:"nokia-conf"`
	MdCli      *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli      `path:"md-cli" module:"nokia-conf"`
	Netconf    *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf    `path:"netconf" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) IsYANGGoStruct() {
}

// GetOrCreateClassicCli retrieves the value of the ClassicCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetOrCreateClassicCli() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli {
	if t.ClassicCli != nil {
		return t.ClassicCli
	}
	t.ClassicCli = &NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli{}
	return t.ClassicCli
}

// GetOrCreateGrpc retrieves the value of the Grpc field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetOrCreateGrpc() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc {
	if t.Grpc != nil {
		return t.Grpc
	}
	t.Grpc = &NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc{}
	return t.Grpc
}

// GetOrCreateMdCli retrieves the value of the MdCli field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetOrCreateMdCli() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli {
	if t.MdCli != nil {
		return t.MdCli
	}
	t.MdCli = &NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli{}
	return t.MdCli
}

// GetOrCreateNetconf retrieves the value of the Netconf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetOrCreateNetconf() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf {
	if t.Netconf != nil {
		return t.Netconf
	}
	t.Netconf = &NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf{}
	return t.Netconf
}

// GetClassicCli returns the value of the ClassicCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface. If the receiver or the field ClassicCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetClassicCli() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli {
	if t != nil && t.ClassicCli != nil {
		return t.ClassicCli
	}
	return nil
}

// GetGrpc returns the value of the Grpc struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface. If the receiver or the field Grpc is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetGrpc() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc {
	if t != nil && t.Grpc != nil {
		return t.Grpc
	}
	return nil
}

// GetMdCli returns the value of the MdCli struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface. If the receiver or the field MdCli is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetMdCli() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli {
	if t != nil && t.MdCli != nil {
		return t.MdCli
	}
	return nil
}

// GetNetconf returns the value of the Netconf struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface. If the receiver or the field Netconf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) GetNetconf() *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf {
	if t != nil && t.Netconf != nil {
		return t.Netconf
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ClassicCli.PopulateDefaults()
	t.Grpc.PopulateDefaults()
	t.MdCli.PopulateDefaults()
	t.Netconf.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli represents the /nokia-conf/configure/groups/group/system/security/hash-control/management-interface/classic-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli struct {
	ReadAlgorithm  E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm  `path:"read-algorithm" module:"nokia-conf"`
	WriteAlgorithm E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm `path:"write-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) IsYANGGoStruct() {
}

// GetReadAlgorithm retrieves the value of the leaf ReadAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReadAlgorithm is set, it can
// safely use t.GetReadAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReadAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) GetReadAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm {
	if t == nil || t.ReadAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm_all_hash
	}
	return t.ReadAlgorithm
}

// GetWriteAlgorithm retrieves the value of the leaf WriteAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WriteAlgorithm is set, it can
// safely use t.GetWriteAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WriteAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) GetWriteAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm {
	if t == nil || t.WriteAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm_hash2
	}
	return t.WriteAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ReadAlgorithm == 0 {
		t.ReadAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_ReadAlgorithm_all_hash
	}
	if t.WriteAlgorithm == 0 {
		t.WriteAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli_WriteAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_ClassicCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc represents the /nokia-conf/configure/groups/group/system/security/hash-control/management-interface/grpc YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc struct {
	HashAlgorithm E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) IsYANGGoStruct() {
}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) GetHashAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Grpc) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli represents the /nokia-conf/configure/groups/group/system/security/hash-control/management-interface/md-cli YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli struct {
	HashAlgorithm E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) IsYANGGoStruct() {
}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) GetHashAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_MdCli) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf represents the /nokia-conf/configure/groups/group/system/security/hash-control/management-interface/netconf YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf struct {
	HashAlgorithm E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm `path:"hash-algorithm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) IsYANGGoStruct() {
}

// GetHashAlgorithm retrieves the value of the leaf HashAlgorithm from the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashAlgorithm is set, it can
// safely use t.GetHashAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) GetHashAlgorithm() E_NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm {
	if t == nil || t.HashAlgorithm == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm_hash2
	}
	return t.HashAlgorithm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HashAlgorithm == 0 {
		t.HashAlgorithm = NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf_HashAlgorithm_hash2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf.
func (*NokiaConf_Configure_Groups_Group_System_Security_HashControl_ManagementInterface_Netconf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains represents the /nokia-conf/configure/groups/group/system/security/keychains YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains struct {
	Keychain map[string]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain `path:"keychain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains) IsYANGGoStruct() {}

// NewKeychain creates a new entry in the Keychain list of the
// NokiaConf_Configure_Groups_Group_System_Security_Keychains struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) NewKeychain(KeychainName string) (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain)
	}

	key := KeychainName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Keychain[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Keychain", key)
	}

	t.Keychain[key] = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain{
		KeychainName: &KeychainName,
	}

	return t.Keychain[key], nil
}

// RenameKeychain renames an entry in the list Keychain within
// the NokiaConf_Configure_Groups_Group_System_Security_Keychains struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) RenameKeychain(oldK, newK string) error {
	if _, ok := t.Keychain[newK]; ok {
		return fmt.Errorf("key %v already exists in Keychain", newK)
	}

	e, ok := t.Keychain[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Keychain", oldK)
	}
	e.KeychainName = &newK

	t.Keychain[newK] = e
	delete(t.Keychain, oldK)
	return nil
}

// GetOrCreateKeychain retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) GetOrCreateKeychain(KeychainName string) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain {

	key := KeychainName

	if v, ok := t.Keychain[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKeychain(KeychainName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKeychain got unexpected error: %v", err))
	}
	return v
}

// GetKeychain retrieves the value with the specified key from
// the Keychain map field of NokiaConf_Configure_Groups_Group_System_Security_Keychains. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) GetKeychain(KeychainName string) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain {

	if t == nil {
		return nil
	}

	key := KeychainName

	if lm, ok := t.Keychain[key]; ok {
		return lm
	}
	return nil
}

// DeleteKeychain deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) DeleteKeychain(KeychainName string) {
	key := KeychainName

	delete(t.Keychain, key)
}

// AppendKeychain appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain struct to the
// list Keychain of NokiaConf_Configure_Groups_Group_System_Security_Keychains. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) AppendKeychain(v *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) error {
	if v.KeychainName == nil {
		return fmt.Errorf("invalid nil key received for KeychainName")
	}

	key := *v.KeychainName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Keychain == nil {
		t.Keychain = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain)
	}

	if _, ok := t.Keychain[key]; ok {
		return fmt.Errorf("duplicate key for list Keychain %v", key)
	}

	t.Keychain[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Keychain {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain struct {
	AdminState      E_NokiaTypesSros_AdminState                                                          `path:"admin-state" module:"nokia-conf"`
	Bidirectional   *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional   `path:"bidirectional" module:"nokia-conf"`
	Description     *string                                                                              `path:"description" module:"nokia-conf"`
	KeychainName    *string                                                                              `path:"keychain-name" module:"nokia-conf"`
	Receive         *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive         `path:"receive" module:"nokia-conf"`
	Send            *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send            `path:"send" module:"nokia-conf"`
	TcpOptionNumber *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber `path:"tcp-option-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) IsYANGGoStruct() {}

// GetOrCreateBidirectional retrieves the value of the Bidirectional field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetOrCreateBidirectional() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional {
	if t.Bidirectional != nil {
		return t.Bidirectional
	}
	t.Bidirectional = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional{}
	return t.Bidirectional
}

// GetOrCreateReceive retrieves the value of the Receive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetOrCreateReceive() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive {
	if t.Receive != nil {
		return t.Receive
	}
	t.Receive = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive{}
	return t.Receive
}

// GetOrCreateSend retrieves the value of the Send field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetOrCreateSend() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send {
	if t.Send != nil {
		return t.Send
	}
	t.Send = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send{}
	return t.Send
}

// GetOrCreateTcpOptionNumber retrieves the value of the TcpOptionNumber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetOrCreateTcpOptionNumber() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber {
	if t.TcpOptionNumber != nil {
		return t.TcpOptionNumber
	}
	t.TcpOptionNumber = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber{}
	return t.TcpOptionNumber
}

// GetBidirectional returns the value of the Bidirectional struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain. If the receiver or the field Bidirectional is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetBidirectional() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional {
	if t != nil && t.Bidirectional != nil {
		return t.Bidirectional
	}
	return nil
}

// GetReceive returns the value of the Receive struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain. If the receiver or the field Receive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetReceive() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive {
	if t != nil && t.Receive != nil {
		return t.Receive
	}
	return nil
}

// GetSend returns the value of the Send struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain. If the receiver or the field Send is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetSend() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send {
	if t != nil && t.Send != nil {
		return t.Send
	}
	return nil
}

// GetTcpOptionNumber returns the value of the TcpOptionNumber struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain. If the receiver or the field TcpOptionNumber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetTcpOptionNumber() *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber {
	if t != nil && t.TcpOptionNumber != nil {
		return t.TcpOptionNumber
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetKeychainName retrieves the value of the leaf KeychainName from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainName is set, it can
// safely use t.GetKeychainName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) GetKeychainName() string {
	if t == nil || t.KeychainName == nil {
		return ""
	}
	return *t.KeychainName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	t.Bidirectional.PopulateDefaults()
	t.Receive.PopulateDefaults()
	t.Send.PopulateDefaults()
	t.TcpOptionNumber.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) ΛListKeyMap() (map[string]interface{}, error) {
	if t.KeychainName == nil {
		return nil, fmt.Errorf("nil value for key KeychainName")
	}

	return map[string]interface{}{
		"keychain-name": *t.KeychainName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/bidirectional YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional struct {
	Entry map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) NewEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry{
		KeychainEntryIndex: KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) GetOrCreateEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) GetEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) DeleteEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) error {
	key := v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/bidirectional/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                      `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo                                                                                `path:"algorithm" module:"nokia-conf"`
	AuthenticationKey  *string                                                                                                          `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                                                                                                          `path:"begin-time" module:"nokia-conf"`
	KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union `path:"keychain-entry-index" module:"nokia-conf"`
	Option             E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Option                 `path:"option" module:"nokia-conf"`
	Tolerance          NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Tolerance_Union          `path:"tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetKeychainEntryIndex() NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_KeychainEntryIndex_Union {
	if t == nil || t.KeychainEntryIndex == nil {
		return nil
	}
	return t.KeychainEntryIndex
}

// GetOption retrieves the value of the leaf Option from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Option is set, it can
// safely use t.GetOption() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Option == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetOption() E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Option {
	if t == nil || t.Option == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Option_none
	}
	return t.Option
}

// GetTolerance retrieves the value of the leaf Tolerance from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) GetTolerance() NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Tolerance_Union {
	if t == nil || t.Tolerance == nil {
		return UnionUint32(300)
	}
	return t.Tolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Option == 0 {
		t.Option = NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry_Option_none
	}
	if t.Tolerance == nil {
		t.Tolerance = UnionUint32(300)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"keychain-entry-index": t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Bidirectional_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/receive YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive struct {
	Entry map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) NewEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry{
		KeychainEntryIndex: KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) GetOrCreateEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) GetEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) DeleteEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) error {
	key := v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/receive/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                                `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo                                                                          `path:"algorithm" module:"nokia-conf"`
	AuthenticationKey  *string                                                                                                    `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                                                                                                    `path:"begin-time" module:"nokia-conf"`
	EndTime            *string                                                                                                    `path:"end-time" module:"nokia-conf"`
	KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union `path:"keychain-entry-index" module:"nokia-conf"`
	Tolerance          NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_Tolerance_Union          `path:"tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetEndTime retrieves the value of the leaf EndTime from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndTime is set, it can
// safely use t.GetEndTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetEndTime() string {
	if t == nil || t.EndTime == nil {
		return ""
	}
	return *t.EndTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetKeychainEntryIndex() NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_KeychainEntryIndex_Union {
	if t == nil || t.KeychainEntryIndex == nil {
		return nil
	}
	return t.KeychainEntryIndex
}

// GetTolerance retrieves the value of the leaf Tolerance from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) GetTolerance() NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry_Tolerance_Union {
	if t == nil || t.Tolerance == nil {
		return UnionUint32(300)
	}
	return t.Tolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Tolerance == nil {
		t.Tolerance = UnionUint32(300)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"keychain-entry-index": t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Receive_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/send YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send struct {
	Entry map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) NewEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry)
	}

	key := KeychainEntryIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry{
		KeychainEntryIndex: KeychainEntryIndex,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.KeychainEntryIndex = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) GetOrCreateEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry {

	key := KeychainEntryIndex

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(KeychainEntryIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) GetEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry {

	if t == nil {
		return nil
	}

	key := KeychainEntryIndex

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) DeleteEntry(KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union) {
	key := KeychainEntryIndex

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) error {
	key := v.KeychainEntryIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/send/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry struct {
	AdminState         E_NokiaTypesSros_AdminState                                                                             `path:"admin-state" module:"nokia-conf"`
	Algorithm          E_NokiaTypesSecurity_KeychainAlgo                                                                       `path:"algorithm" module:"nokia-conf"`
	AuthenticationKey  *string                                                                                                 `path:"authentication-key" module:"nokia-conf"`
	BeginTime          *string                                                                                                 `path:"begin-time" module:"nokia-conf"`
	KeychainEntryIndex NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union `path:"keychain-entry-index" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) GetAlgorithm() E_NokiaTypesSecurity_KeychainAlgo {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetBeginTime retrieves the value of the leaf BeginTime from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginTime is set, it can
// safely use t.GetBeginTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) GetBeginTime() string {
	if t == nil || t.BeginTime == nil {
		return ""
	}
	return *t.BeginTime
}

// GetKeychainEntryIndex retrieves the value of the leaf KeychainEntryIndex from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeychainEntryIndex is set, it can
// safely use t.GetKeychainEntryIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeychainEntryIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) GetKeychainEntryIndex() NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry_KeychainEntryIndex_Union {
	if t == nil || t.KeychainEntryIndex == nil {
		return nil
	}
	return t.KeychainEntryIndex
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"keychain-entry-index": t.KeychainEntryIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_Send_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber represents the /nokia-conf/configure/groups/group/system/security/keychains/keychain/tcp-option-number YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber struct {
	Receive E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Receive `path:"receive" module:"nokia-conf"`
	Send    E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Send    `path:"send" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) IsYANGGoStruct() {
}

// GetReceive retrieves the value of the leaf Receive from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Receive is set, it can
// safely use t.GetReceive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Receive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) GetReceive() E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Receive {
	if t == nil || t.Receive == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Receive_option_254
	}
	return t.Receive
}

// GetSend retrieves the value of the leaf Send from the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Send is set, it can
// safely use t.GetSend() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Send == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) GetSend() E_NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Send {
	if t == nil || t.Send == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Send_option_254
	}
	return t.Send
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Receive == 0 {
		t.Receive = NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Receive_option_254
	}
	if t.Send == 0 {
		t.Send = NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber_Send_option_254
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber.
func (*NokiaConf_Configure_Groups_Group_System_Security_Keychains_Keychain_TcpOptionNumber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Management represents the /nokia-conf/configure/groups/group/system/security/management YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Management struct {
	AllowFtp     *bool `path:"allow-ftp" module:"nokia-conf"`
	AllowGrpc    *bool `path:"allow-grpc" module:"nokia-conf"`
	AllowNetconf *bool `path:"allow-netconf" module:"nokia-conf"`
	AllowSsh     *bool `path:"allow-ssh" module:"nokia-conf"`
	AllowTelnet  *bool `path:"allow-telnet" module:"nokia-conf"`
	AllowTelnet6 *bool `path:"allow-telnet6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Management implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Management) IsYANGGoStruct() {}

// GetAllowFtp retrieves the value of the leaf AllowFtp from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowFtp is set, it can
// safely use t.GetAllowFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowFtp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowFtp() bool {
	if t == nil || t.AllowFtp == nil {
		return true
	}
	return *t.AllowFtp
}

// GetAllowGrpc retrieves the value of the leaf AllowGrpc from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowGrpc is set, it can
// safely use t.GetAllowGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowGrpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowGrpc() bool {
	if t == nil || t.AllowGrpc == nil {
		return true
	}
	return *t.AllowGrpc
}

// GetAllowNetconf retrieves the value of the leaf AllowNetconf from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowNetconf is set, it can
// safely use t.GetAllowNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowNetconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowNetconf() bool {
	if t == nil || t.AllowNetconf == nil {
		return true
	}
	return *t.AllowNetconf
}

// GetAllowSsh retrieves the value of the leaf AllowSsh from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowSsh is set, it can
// safely use t.GetAllowSsh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowSsh == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowSsh() bool {
	if t == nil || t.AllowSsh == nil {
		return true
	}
	return *t.AllowSsh
}

// GetAllowTelnet retrieves the value of the leaf AllowTelnet from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet is set, it can
// safely use t.GetAllowTelnet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowTelnet() bool {
	if t == nil || t.AllowTelnet == nil {
		return true
	}
	return *t.AllowTelnet
}

// GetAllowTelnet6 retrieves the value of the leaf AllowTelnet6 from the NokiaConf_Configure_Groups_Group_System_Security_Management
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowTelnet6 is set, it can
// safely use t.GetAllowTelnet6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowTelnet6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) GetAllowTelnet6() bool {
	if t == nil || t.AllowTelnet6 == nil {
		return true
	}
	return *t.AllowTelnet6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Management
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowFtp == nil {
		var v bool = true
		t.AllowFtp = &v
	}
	if t.AllowGrpc == nil {
		var v bool = true
		t.AllowGrpc = &v
	}
	if t.AllowNetconf == nil {
		var v bool = true
		t.AllowNetconf = &v
	}
	if t.AllowSsh == nil {
		var v bool = true
		t.AllowSsh = &v
	}
	if t.AllowTelnet == nil {
		var v bool = true
		t.AllowTelnet = &v
	}
	if t.AllowTelnet6 == nil {
		var v bool = true
		t.AllowTelnet6 = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Management"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Management) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Management.
func (*NokiaConf_Configure_Groups_Group_System_Security_Management) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter represents the /nokia-conf/configure/groups/group/system/security/management-access-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter struct {
	IpFilter   *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter   `path:"ip-filter" module:"nokia-conf" yangPresence:"true"`
	Ipv6Filter *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter `path:"ipv6-filter" module:"nokia-conf" yangPresence:"true"`
	MacFilter  *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter  `path:"mac-filter" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) IsYANGGoStruct() {}

// GetOrCreateIpFilter retrieves the value of the IpFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetOrCreateIpFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter {
	if t.IpFilter != nil {
		return t.IpFilter
	}
	t.IpFilter = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter{}
	return t.IpFilter
}

// GetOrCreateIpv6Filter retrieves the value of the Ipv6Filter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetOrCreateIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter {
	if t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	t.Ipv6Filter = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter{}
	return t.Ipv6Filter
}

// GetOrCreateMacFilter retrieves the value of the MacFilter field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetOrCreateMacFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter {
	if t.MacFilter != nil {
		return t.MacFilter
	}
	t.MacFilter = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter{}
	return t.MacFilter
}

// GetIpFilter returns the value of the IpFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter. If the receiver or the field IpFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetIpFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter {
	if t != nil && t.IpFilter != nil {
		return t.IpFilter
	}
	return nil
}

// GetIpv6Filter returns the value of the Ipv6Filter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter. If the receiver or the field Ipv6Filter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetIpv6Filter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter {
	if t != nil && t.Ipv6Filter != nil {
		return t.Ipv6Filter
	}
	return nil
}

// GetMacFilter returns the value of the MacFilter struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter. If the receiver or the field MacFilter is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) GetMacFilter() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter {
	if t != nil && t.MacFilter != nil {
		return t.MacFilter
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IpFilter.PopulateDefaults()
	t.Ipv6Filter.PopulateDefaults()
	t.MacFilter.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                                                                      `path:"admin-state" module:"nokia-conf"`
	DefaultAction E_NokiaTypesFilter_MafAction                                                                                                                                                                     `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) GetDefaultAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry struct {
	Action      E_NokiaTypesFilter_MafAction                                                                         `path:"action" module:"nokia-conf"`
	Description *string                                                                                              `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	LogEvents   *bool                                                                                                `path:"log-events" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match struct {
	DstPort        *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort       `path:"dst-port" module:"nokia-conf" yangPresence:"true"`
	MgmtPort       *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort      `path:"mgmt-port" module:"nokia-conf"`
	Protocol       NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_Protocol_Union `path:"protocol" module:"nokia-conf"`
	RouterInstance *string                                                                                                     `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp         `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort       `path:"src-port" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateMgmtPort retrieves the value of the MgmtPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateMgmtPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort {
	if t.MgmtPort != nil {
		return t.MgmtPort
	}
	t.MgmtPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort{}
	return t.MgmtPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetMgmtPort returns the value of the MgmtPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field MgmtPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetMgmtPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort {
	if t != nil && t.MgmtPort != nil {
		return t.MgmtPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetProtocol() NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_Protocol_Union {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.MgmtPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry/match/mgmt-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort struct {
	Cpm    YANGEmpty `path:"cpm" module:"nokia-conf"`
	Lag    *string   `path:"lag" module:"nokia-conf"`
	LagId  *string   `path:"lag-id" module:"nokia-conf"`
	PortId *string   `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) IsYANGGoStruct() {
}

// GetCpm retrieves the value of the leaf Cpm from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpm is set, it can
// safely use t.GetCpm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetCpm() YANGEmpty {
	if t == nil || t.Cpm == false {
		return false
	}
	return t.Cpm
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetLag() string {
	if t == nil || t.Lag == nil {
		return ""
	}
	return *t.Lag
}

// GetLagId retrieves the value of the leaf LagId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagId is set, it can
// safely use t.GetLagId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetLagId() string {
	if t == nil || t.LagId == nil {
		return ""
	}
	return *t.LagId
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_MgmtPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp struct {
	Address      *string `path:"address" module:"nokia-conf"`
	IpPrefixList *string `path:"ip-prefix-list" module:"nokia-conf"`
	Mask         *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpPrefixList retrieves the value of the leaf IpPrefixList from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefixList is set, it can
// safely use t.GetIpPrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetIpPrefixList() string {
	if t == nil || t.IpPrefixList == nil {
		return ""
	}
	return *t.IpPrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ip-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_IpFilter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                                                                          `path:"admin-state" module:"nokia-conf"`
	DefaultAction E_NokiaTypesFilter_MafAction                                                                                                                                                                         `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) GetDefaultAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct {
	Action      E_NokiaTypesFilter_MafAction                                                                           `path:"action" module:"nokia-conf"`
	Description *string                                                                                                `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	LogEvents   *bool                                                                                                  `path:"log-events" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetAction() E_NokiaTypesFilter_MafAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafAction_ignore_match
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match struct {
	DstPort        *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort         `path:"dst-port" module:"nokia-conf" yangPresence:"true"`
	FlowLabel      *int32                                                                                                          `path:"flow-label" module:"nokia-conf"`
	MgmtPort       *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort        `path:"mgmt-port" module:"nokia-conf"`
	NextHeader     NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_NextHeader_Union `path:"next-header" module:"nokia-conf"`
	RouterInstance *string                                                                                                         `path:"router-instance" module:"nokia-conf"`
	SrcIp          *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp           `path:"src-ip" module:"nokia-conf"`
	SrcPort        *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort         `path:"src-port" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateDstPort retrieves the value of the DstPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateDstPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort {
	if t.DstPort != nil {
		return t.DstPort
	}
	t.DstPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort{}
	return t.DstPort
}

// GetOrCreateMgmtPort retrieves the value of the MgmtPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateMgmtPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort {
	if t.MgmtPort != nil {
		return t.MgmtPort
	}
	t.MgmtPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort{}
	return t.MgmtPort
}

// GetOrCreateSrcIp retrieves the value of the SrcIp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t.SrcIp != nil {
		return t.SrcIp
	}
	t.SrcIp = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp{}
	return t.SrcIp
}

// GetOrCreateSrcPort retrieves the value of the SrcPort field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetOrCreateSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t.SrcPort != nil {
		return t.SrcPort
	}
	t.SrcPort = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort{}
	return t.SrcPort
}

// GetDstPort returns the value of the DstPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field DstPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetDstPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort {
	if t != nil && t.DstPort != nil {
		return t.DstPort
	}
	return nil
}

// GetMgmtPort returns the value of the MgmtPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field MgmtPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetMgmtPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort {
	if t != nil && t.MgmtPort != nil {
		return t.MgmtPort
	}
	return nil
}

// GetSrcIp returns the value of the SrcIp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcIp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetSrcIp() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp {
	if t != nil && t.SrcIp != nil {
		return t.SrcIp
	}
	return nil
}

// GetSrcPort returns the value of the SrcPort struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match. If the receiver or the field SrcPort is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetSrcPort() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort {
	if t != nil && t.SrcPort != nil {
		return t.SrcPort
	}
	return nil
}

// GetFlowLabel retrieves the value of the leaf FlowLabel from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowLabel is set, it can
// safely use t.GetFlowLabel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowLabel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetFlowLabel() int32 {
	if t == nil || t.FlowLabel == nil {
		return 0
	}
	return *t.FlowLabel
}

// GetNextHeader retrieves the value of the leaf NextHeader from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NextHeader is set, it can
// safely use t.GetNextHeader() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NextHeader == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetNextHeader() NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_NextHeader_Union {
	if t == nil || t.NextHeader == nil {
		return nil
	}
	return t.NextHeader
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DstPort.PopulateDefaults()
	t.MgmtPort.PopulateDefaults()
	t.SrcIp.PopulateDefaults()
	t.SrcPort.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry/match/dst-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_DstPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry/match/mgmt-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort struct {
	Cpm    YANGEmpty `path:"cpm" module:"nokia-conf"`
	Lag    *string   `path:"lag" module:"nokia-conf"`
	LagId  *string   `path:"lag-id" module:"nokia-conf"`
	PortId *string   `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) IsYANGGoStruct() {
}

// GetCpm retrieves the value of the leaf Cpm from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cpm is set, it can
// safely use t.GetCpm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cpm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetCpm() YANGEmpty {
	if t == nil || t.Cpm == false {
		return false
	}
	return t.Cpm
}

// GetLag retrieves the value of the leaf Lag from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lag is set, it can
// safely use t.GetLag() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lag == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetLag() string {
	if t == nil || t.Lag == nil {
		return ""
	}
	return *t.Lag
}

// GetLagId retrieves the value of the leaf LagId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagId is set, it can
// safely use t.GetLagId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetLagId() string {
	if t == nil || t.LagId == nil {
		return ""
	}
	return *t.LagId
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_MgmtPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry/match/src-ip YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp struct {
	Address        *string `path:"address" module:"nokia-conf"`
	Ipv6PrefixList *string `path:"ipv6-prefix-list" module:"nokia-conf"`
	Mask           *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetIpv6PrefixList retrieves the value of the leaf Ipv6PrefixList from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixList is set, it can
// safely use t.GetIpv6PrefixList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetIpv6PrefixList() string {
	if t == nil || t.Ipv6PrefixList == nil {
		return ""
	}
	return *t.Ipv6PrefixList
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) GetMask() string {
	if t == nil || t.Mask == nil {
		return ""
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcIp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/ipv6-filter/entry/match/src-port YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort struct {
	Mask *uint16 `path:"mask" module:"nokia-conf"`
	Port *uint16 `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) GetMask() uint16 {
	if t == nil || t.Mask == nil {
		return 65535
	}
	return *t.Mask
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) GetPort() uint16 {
	if t == nil || t.Port == nil {
		return 0
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v uint16 = 65535
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_Ipv6Filter_Entry_Match_SrcPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter struct {
	AdminState    E_NokiaTypesSros_AdminState                                                                                                                                                                        `path:"admin-state" module:"nokia-conf"`
	DefaultAction E_NokiaTypesFilter_MafMacAction                                                                                                                                                                    `path:"default-action" module:"nokia-conf"`
	Entry         map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) IsYANGGoStruct() {
}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetDefaultAction retrieves the value of the leaf DefaultAction from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultAction is set, it can
// safely use t.GetDefaultAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultAction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) GetDefaultAction() E_NokiaTypesFilter_MafMacAction {
	if t == nil || t.DefaultAction == 0 {
		return NokiaTypesFilter_MafMacAction_ignore_match
	}
	return t.DefaultAction
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DefaultAction == 0 {
		t.DefaultAction = NokiaTypesFilter_MafMacAction_ignore_match
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry struct {
	Action      E_NokiaTypesFilter_MafMacAction                                                                       `path:"action" module:"nokia-conf"`
	Description *string                                                                                               `path:"description" module:"nokia-conf"`
	EntryId     NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	LogEvents   *bool                                                                                                 `path:"log-events" module:"nokia-conf"`
	Match       *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match        `path:"match" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) IsYANGGoStruct() {
}

// GetOrCreateMatch retrieves the value of the Match field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetOrCreateMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match {
	if t.Match != nil {
		return t.Match
	}
	t.Match = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match{}
	return t.Match
}

// GetMatch returns the value of the Match struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry. If the receiver or the field Match is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetMatch() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match {
	if t != nil && t.Match != nil {
		return t.Match
	}
	return nil
}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetAction() E_NokiaTypesFilter_MafMacAction {
	if t == nil || t.Action == 0 {
		return NokiaTypesFilter_MafMacAction_ignore_match
	}
	return t.Action
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetLogEvents retrieves the value of the leaf LogEvents from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LogEvents is set, it can
// safely use t.GetLogEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LogEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) GetLogEvents() bool {
	if t == nil || t.LogEvents == nil {
		return false
	}
	return *t.LogEvents
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaTypesFilter_MafMacAction_ignore_match
	}
	if t.LogEvents == nil {
		var v bool = false
		t.LogEvents = &v
	}
	t.Match.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match struct {
	CfmOpcode *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode  `path:"cfm-opcode" module:"nokia-conf"`
	Dot1P     *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P      `path:"dot1p" module:"nokia-conf" yangPresence:"true"`
	DstMac    *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac     `path:"dst-mac" module:"nokia-conf" yangPresence:"true"`
	Etype     *string                                                                                                   `path:"etype" module:"nokia-conf"`
	FrameType E_NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType `path:"frame-type" module:"nokia-conf"`
	LlcDsap   *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap    `path:"llc-dsap" module:"nokia-conf" yangPresence:"true"`
	LlcSsap   *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap    `path:"llc-ssap" module:"nokia-conf" yangPresence:"true"`
	Service   *string                                                                                                   `path:"service" module:"nokia-conf"`
	SnapOui   E_NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SnapOui   `path:"snap-oui" module:"nokia-conf"`
	SnapPid   *int32                                                                                                    `path:"snap-pid" module:"nokia-conf"`
	SrcMac    *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac     `path:"src-mac" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) IsYANGGoStruct() {
}

// GetOrCreateCfmOpcode retrieves the value of the CfmOpcode field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateCfmOpcode() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode {
	if t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	t.CfmOpcode = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode{}
	return t.CfmOpcode
}

// GetOrCreateDot1P retrieves the value of the Dot1P field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateDot1P() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P {
	if t.Dot1P != nil {
		return t.Dot1P
	}
	t.Dot1P = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P{}
	return t.Dot1P
}

// GetOrCreateDstMac retrieves the value of the DstMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateDstMac() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac {
	if t.DstMac != nil {
		return t.DstMac
	}
	t.DstMac = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac{}
	return t.DstMac
}

// GetOrCreateLlcDsap retrieves the value of the LlcDsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateLlcDsap() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap {
	if t.LlcDsap != nil {
		return t.LlcDsap
	}
	t.LlcDsap = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap{}
	return t.LlcDsap
}

// GetOrCreateLlcSsap retrieves the value of the LlcSsap field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateLlcSsap() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap {
	if t.LlcSsap != nil {
		return t.LlcSsap
	}
	t.LlcSsap = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap{}
	return t.LlcSsap
}

// GetOrCreateSrcMac retrieves the value of the SrcMac field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetOrCreateSrcMac() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac {
	if t.SrcMac != nil {
		return t.SrcMac
	}
	t.SrcMac = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac{}
	return t.SrcMac
}

// GetCfmOpcode returns the value of the CfmOpcode struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field CfmOpcode is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetCfmOpcode() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode {
	if t != nil && t.CfmOpcode != nil {
		return t.CfmOpcode
	}
	return nil
}

// GetDot1P returns the value of the Dot1P struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field Dot1P is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetDot1P() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P {
	if t != nil && t.Dot1P != nil {
		return t.Dot1P
	}
	return nil
}

// GetDstMac returns the value of the DstMac struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field DstMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetDstMac() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac {
	if t != nil && t.DstMac != nil {
		return t.DstMac
	}
	return nil
}

// GetLlcDsap returns the value of the LlcDsap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field LlcDsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetLlcDsap() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap {
	if t != nil && t.LlcDsap != nil {
		return t.LlcDsap
	}
	return nil
}

// GetLlcSsap returns the value of the LlcSsap struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field LlcSsap is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetLlcSsap() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap {
	if t != nil && t.LlcSsap != nil {
		return t.LlcSsap
	}
	return nil
}

// GetSrcMac returns the value of the SrcMac struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match. If the receiver or the field SrcMac is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSrcMac() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac {
	if t != nil && t.SrcMac != nil {
		return t.SrcMac
	}
	return nil
}

// GetEtype retrieves the value of the leaf Etype from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Etype is set, it can
// safely use t.GetEtype() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Etype == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetEtype() string {
	if t == nil || t.Etype == nil {
		return ""
	}
	return *t.Etype
}

// GetFrameType retrieves the value of the leaf FrameType from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameType is set, it can
// safely use t.GetFrameType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetFrameType() E_NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType {
	if t == nil || t.FrameType == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType_802dot3
	}
	return t.FrameType
}

// GetService retrieves the value of the leaf Service from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Service is set, it can
// safely use t.GetService() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Service == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetService() string {
	if t == nil || t.Service == nil {
		return ""
	}
	return *t.Service
}

// GetSnapOui retrieves the value of the leaf SnapOui from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapOui is set, it can
// safely use t.GetSnapOui() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapOui == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSnapOui() E_NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SnapOui {
	if t == nil || t.SnapOui == 0 {
		return 0
	}
	return t.SnapOui
}

// GetSnapPid retrieves the value of the leaf SnapPid from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SnapPid is set, it can
// safely use t.GetSnapPid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SnapPid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) GetSnapPid() int32 {
	if t == nil || t.SnapPid == nil {
		return 0
	}
	return *t.SnapPid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FrameType == 0 {
		t.FrameType = NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_FrameType_802dot3
	}
	t.CfmOpcode.PopulateDefaults()
	t.Dot1P.PopulateDefaults()
	t.DstMac.PopulateDefaults()
	t.LlcDsap.PopulateDefaults()
	t.LlcSsap.PopulateDefaults()
	t.SrcMac.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/cfm-opcode YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode struct {
	Eq    *uint32                                                                                                        `path:"eq" module:"nokia-conf"`
	Gt    *uint32                                                                                                        `path:"gt" module:"nokia-conf"`
	Lt    *uint32                                                                                                        `path:"lt" module:"nokia-conf"`
	Range *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) IsYANGGoStruct() {
}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetOrCreateRange() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetRange() *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetEq retrieves the value of the leaf Eq from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Eq is set, it can
// safely use t.GetEq() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Eq == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetEq() uint32 {
	if t == nil || t.Eq == nil {
		return 0
	}
	return *t.Eq
}

// GetGt retrieves the value of the leaf Gt from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Gt is set, it can
// safely use t.GetGt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Gt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetGt() uint32 {
	if t == nil || t.Gt == nil {
		return 0
	}
	return *t.Gt
}

// GetLt retrieves the value of the leaf Lt from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lt is set, it can
// safely use t.GetLt() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lt == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) GetLt() uint32 {
	if t == nil || t.Lt == nil {
		return 0
	}
	return *t.Lt
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/cfm-opcode/range YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range struct {
	End   *uint32 `path:"end" module:"nokia-conf"`
	Start *uint32 `path:"start" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) IsYANGGoStruct() {
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// GetStart retrieves the value of the leaf Start from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Start is set, it can
// safely use t.GetStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Start == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) GetStart() uint32 {
	if t == nil || t.Start == nil {
		return 0
	}
	return *t.Start
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_CfmOpcode_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/dot1p YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P struct {
	Mask     *int32 `path:"mask" module:"nokia-conf"`
	Priority *int32 `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 7
	}
	return *t.Mask
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 7
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_Dot1P) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/dst-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_DstMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/llc-dsap YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap struct {
	Dsap *int32 `path:"dsap" module:"nokia-conf"`
	Mask *int32 `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) IsYANGGoStruct() {
}

// GetDsap retrieves the value of the leaf Dsap from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dsap is set, it can
// safely use t.GetDsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dsap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) GetDsap() int32 {
	if t == nil || t.Dsap == nil {
		return 0
	}
	return *t.Dsap
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcDsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/llc-ssap YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap struct {
	Mask *int32 `path:"mask" module:"nokia-conf"`
	Ssap *int32 `path:"ssap" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) IsYANGGoStruct() {
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) GetMask() int32 {
	if t == nil || t.Mask == nil {
		return 255
	}
	return *t.Mask
}

// GetSsap retrieves the value of the leaf Ssap from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ssap is set, it can
// safely use t.GetSsap() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ssap == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) GetSsap() int32 {
	if t == nil || t.Ssap == nil {
		return 0
	}
	return *t.Ssap
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v int32 = 255
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_LlcSsap) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac represents the /nokia-conf/configure/groups/group/system/security/management-access-filter/mac-filter/entry/match/src-mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac struct {
	Address *string `path:"address" module:"nokia-conf"`
	Mask    *string `path:"mask" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff:ff:ff:ff:ff:ff"
	}
	return *t.Mask
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff:ff:ff:ff:ff:ff"
		t.Mask = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac.
func (*NokiaConf_Configure_Groups_Group_System_Security_ManagementAccessFilter_MacFilter_Entry_Match_SrcMac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki represents the /nokia-conf/configure/groups/group/system/security/pki YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki struct {
	CaProfile                    map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile         `path:"ca-profile" module:"nokia-conf"`
	CertificateDisplayFormat     E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateDisplayFormat    `path:"certificate-display-format" module:"nokia-conf"`
	CertificateExpirationWarning *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning `path:"certificate-expiration-warning" module:"nokia-conf"`
	CommonNameList               map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList    `path:"common-name-list" module:"nokia-conf"`
	CrlExpirationWarning         *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning         `path:"crl-expiration-warning" module:"nokia-conf"`
	EstProfile                   map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile        `path:"est-profile" module:"nokia-conf"`
	ImportedFormat               E_NokiaConf_Configure_Groups_Group_System_Security_Pki_ImportedFormat              `path:"imported-format" module:"nokia-conf"`
	MaximumCertChainDepth        *uint32                                                                            `path:"maximum-cert-chain-depth" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki) IsYANGGoStruct() {}

// NewCaProfile creates a new entry in the CaProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) NewCaProfile(CaProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaProfile", key)
	}

	t.CaProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile{
		CaProfileName: &CaProfileName,
	}

	return t.CaProfile[key], nil
}

// RenameCaProfile renames an entry in the list CaProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) RenameCaProfile(oldK, newK string) error {
	if _, ok := t.CaProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CaProfile", newK)
	}

	e, ok := t.CaProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaProfile", oldK)
	}
	e.CaProfileName = &newK

	t.CaProfile[newK] = e
	delete(t.CaProfile, oldK)
	return nil
}

// GetOrCreateCaProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetOrCreateCaProfile(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile {

	key := CaProfileName

	if v, ok := t.CaProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaProfile(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaProfile got unexpected error: %v", err))
	}
	return v
}

// GetCaProfile retrieves the value with the specified key from
// the CaProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetCaProfile(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.CaProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) DeleteCaProfile(CaProfileName string) {
	key := CaProfileName

	delete(t.CaProfile, key)
}

// AppendCaProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile struct to the
// list CaProfile of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) AppendCaProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile)
	}

	if _, ok := t.CaProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CaProfile %v", key)
	}

	t.CaProfile[key] = v
	return nil
}

// NewCommonNameList creates a new entry in the CommonNameList list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) NewCommonNameList(CnListName string) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonNameList == nil {
		t.CommonNameList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList)
	}

	key := CnListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommonNameList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommonNameList", key)
	}

	t.CommonNameList[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList{
		CnListName: &CnListName,
	}

	return t.CommonNameList[key], nil
}

// RenameCommonNameList renames an entry in the list CommonNameList within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) RenameCommonNameList(oldK, newK string) error {
	if _, ok := t.CommonNameList[newK]; ok {
		return fmt.Errorf("key %v already exists in CommonNameList", newK)
	}

	e, ok := t.CommonNameList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommonNameList", oldK)
	}
	e.CnListName = &newK

	t.CommonNameList[newK] = e
	delete(t.CommonNameList, oldK)
	return nil
}

// GetOrCreateCommonNameList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetOrCreateCommonNameList(CnListName string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList {

	key := CnListName

	if v, ok := t.CommonNameList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommonNameList(CnListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommonNameList got unexpected error: %v", err))
	}
	return v
}

// GetCommonNameList retrieves the value with the specified key from
// the CommonNameList map field of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetCommonNameList(CnListName string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList {

	if t == nil {
		return nil
	}

	key := CnListName

	if lm, ok := t.CommonNameList[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommonNameList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) DeleteCommonNameList(CnListName string) {
	key := CnListName

	delete(t.CommonNameList, key)
}

// AppendCommonNameList appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList struct to the
// list CommonNameList of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) AppendCommonNameList(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) error {
	if v.CnListName == nil {
		return fmt.Errorf("invalid nil key received for CnListName")
	}

	key := *v.CnListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonNameList == nil {
		t.CommonNameList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList)
	}

	if _, ok := t.CommonNameList[key]; ok {
		return fmt.Errorf("duplicate key for list CommonNameList %v", key)
	}

	t.CommonNameList[key] = v
	return nil
}

// NewEstProfile creates a new entry in the EstProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) NewEstProfile(Name string) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EstProfile == nil {
		t.EstProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EstProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EstProfile", key)
	}

	t.EstProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile{
		Name: &Name,
	}

	return t.EstProfile[key], nil
}

// RenameEstProfile renames an entry in the list EstProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) RenameEstProfile(oldK, newK string) error {
	if _, ok := t.EstProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in EstProfile", newK)
	}

	e, ok := t.EstProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EstProfile", oldK)
	}
	e.Name = &newK

	t.EstProfile[newK] = e
	delete(t.EstProfile, oldK)
	return nil
}

// GetOrCreateEstProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetOrCreateEstProfile(Name string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile {

	key := Name

	if v, ok := t.EstProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEstProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEstProfile got unexpected error: %v", err))
	}
	return v
}

// GetEstProfile retrieves the value with the specified key from
// the EstProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetEstProfile(Name string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.EstProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteEstProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) DeleteEstProfile(Name string) {
	key := Name

	delete(t.EstProfile, key)
}

// AppendEstProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile struct to the
// list EstProfile of NokiaConf_Configure_Groups_Group_System_Security_Pki. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) AppendEstProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EstProfile == nil {
		t.EstProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile)
	}

	if _, ok := t.EstProfile[key]; ok {
		return fmt.Errorf("duplicate key for list EstProfile %v", key)
	}

	t.EstProfile[key] = v
	return nil
}

// GetOrCreateCertificateExpirationWarning retrieves the value of the CertificateExpirationWarning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetOrCreateCertificateExpirationWarning() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning {
	if t.CertificateExpirationWarning != nil {
		return t.CertificateExpirationWarning
	}
	t.CertificateExpirationWarning = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning{}
	return t.CertificateExpirationWarning
}

// GetOrCreateCrlExpirationWarning retrieves the value of the CrlExpirationWarning field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetOrCreateCrlExpirationWarning() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning {
	if t.CrlExpirationWarning != nil {
		return t.CrlExpirationWarning
	}
	t.CrlExpirationWarning = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning{}
	return t.CrlExpirationWarning
}

// GetCertificateExpirationWarning returns the value of the CertificateExpirationWarning struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki. If the receiver or the field CertificateExpirationWarning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetCertificateExpirationWarning() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning {
	if t != nil && t.CertificateExpirationWarning != nil {
		return t.CertificateExpirationWarning
	}
	return nil
}

// GetCrlExpirationWarning returns the value of the CrlExpirationWarning struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki. If the receiver or the field CrlExpirationWarning is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetCrlExpirationWarning() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning {
	if t != nil && t.CrlExpirationWarning != nil {
		return t.CrlExpirationWarning
	}
	return nil
}

// GetCertificateDisplayFormat retrieves the value of the leaf CertificateDisplayFormat from the NokiaConf_Configure_Groups_Group_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateDisplayFormat is set, it can
// safely use t.GetCertificateDisplayFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateDisplayFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetCertificateDisplayFormat() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateDisplayFormat {
	if t == nil || t.CertificateDisplayFormat == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateDisplayFormat_ascii
	}
	return t.CertificateDisplayFormat
}

// GetImportedFormat retrieves the value of the leaf ImportedFormat from the NokiaConf_Configure_Groups_Group_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ImportedFormat is set, it can
// safely use t.GetImportedFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ImportedFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetImportedFormat() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_ImportedFormat {
	if t == nil || t.ImportedFormat == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Pki_ImportedFormat_any
	}
	return t.ImportedFormat
}

// GetMaximumCertChainDepth retrieves the value of the leaf MaximumCertChainDepth from the NokiaConf_Configure_Groups_Group_System_Security_Pki
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaximumCertChainDepth is set, it can
// safely use t.GetMaximumCertChainDepth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaximumCertChainDepth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) GetMaximumCertChainDepth() uint32 {
	if t == nil || t.MaximumCertChainDepth == nil {
		return 7
	}
	return *t.MaximumCertChainDepth
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CertificateDisplayFormat == 0 {
		t.CertificateDisplayFormat = NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateDisplayFormat_ascii
	}
	if t.ImportedFormat == 0 {
		t.ImportedFormat = NokiaConf_Configure_Groups_Group_System_Security_Pki_ImportedFormat_any
	}
	if t.MaximumCertChainDepth == nil {
		var v uint32 = 7
		t.MaximumCertChainDepth = &v
	}
	t.CertificateExpirationWarning.PopulateDefaults()
	t.CrlExpirationWarning.PopulateDefaults()
	for _, e := range t.CaProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.CommonNameList {
		e.PopulateDefaults()
	}
	for _, e := range t.EstProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile struct {
	AdminState      E_NokiaTypesSros_AdminState                                                      `path:"admin-state" module:"nokia-conf"`
	AutoCrlUpdate   *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate    `path:"auto-crl-update" module:"nokia-conf" yangPresence:"true"`
	CaProfileName   *string                                                                          `path:"ca-profile-name" module:"nokia-conf"`
	CertFile        *string                                                                          `path:"cert-file" module:"nokia-conf"`
	Cmpv2           *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2            `path:"cmpv2" module:"nokia-conf"`
	CrlFile         *string                                                                          `path:"crl-file" module:"nokia-conf"`
	Description     *string                                                                          `path:"description" module:"nokia-conf"`
	Ocsp            *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp             `path:"ocsp" module:"nokia-conf"`
	RevocationCheck E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_RevocationCheck `path:"revocation-check" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) IsYANGGoStruct() {}

// GetOrCreateAutoCrlUpdate retrieves the value of the AutoCrlUpdate field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetOrCreateAutoCrlUpdate() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate {
	if t.AutoCrlUpdate != nil {
		return t.AutoCrlUpdate
	}
	t.AutoCrlUpdate = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate{}
	return t.AutoCrlUpdate
}

// GetOrCreateCmpv2 retrieves the value of the Cmpv2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetOrCreateCmpv2() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2 {
	if t.Cmpv2 != nil {
		return t.Cmpv2
	}
	t.Cmpv2 = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2{}
	return t.Cmpv2
}

// GetOrCreateOcsp retrieves the value of the Ocsp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetOrCreateOcsp() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp {
	if t.Ocsp != nil {
		return t.Ocsp
	}
	t.Ocsp = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp{}
	return t.Ocsp
}

// GetAutoCrlUpdate returns the value of the AutoCrlUpdate struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile. If the receiver or the field AutoCrlUpdate is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetAutoCrlUpdate() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate {
	if t != nil && t.AutoCrlUpdate != nil {
		return t.AutoCrlUpdate
	}
	return nil
}

// GetCmpv2 returns the value of the Cmpv2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile. If the receiver or the field Cmpv2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetCmpv2() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2 {
	if t != nil && t.Cmpv2 != nil {
		return t.Cmpv2
	}
	return nil
}

// GetOcsp returns the value of the Ocsp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile. If the receiver or the field Ocsp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetOcsp() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp {
	if t != nil && t.Ocsp != nil {
		return t.Ocsp
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// GetCertFile retrieves the value of the leaf CertFile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertFile is set, it can
// safely use t.GetCertFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetCertFile() string {
	if t == nil || t.CertFile == nil {
		return ""
	}
	return *t.CertFile
}

// GetCrlFile retrieves the value of the leaf CrlFile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrlFile is set, it can
// safely use t.GetCrlFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrlFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetCrlFile() string {
	if t == nil || t.CrlFile == nil {
		return ""
	}
	return *t.CrlFile
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetRevocationCheck retrieves the value of the leaf RevocationCheck from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RevocationCheck is set, it can
// safely use t.GetRevocationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RevocationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) GetRevocationCheck() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_RevocationCheck {
	if t == nil || t.RevocationCheck == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_RevocationCheck_crl
	}
	return t.RevocationCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RevocationCheck == 0 {
		t.RevocationCheck = NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_RevocationCheck_crl
	}
	t.AutoCrlUpdate.PopulateDefaults()
	t.Cmpv2.PopulateDefaults()
	t.Ocsp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/auto-crl-update YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate struct {
	AdminState             E_NokiaTypesSros_AdminState                                                                 `path:"admin-state" module:"nokia-conf"`
	CrlUrls                *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls       `path:"crl-urls" module:"nokia-conf"`
	PeriodicUpdateInterval *uint32                                                                                     `path:"periodic-update-interval" module:"nokia-conf"`
	PreUpdateTime          *uint32                                                                                     `path:"pre-update-time" module:"nokia-conf"`
	RetryInterval          *uint32                                                                                     `path:"retry-interval" module:"nokia-conf"`
	ScheduleType           E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType `path:"schedule-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) IsYANGGoStruct() {
}

// GetOrCreateCrlUrls retrieves the value of the CrlUrls field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetOrCreateCrlUrls() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls {
	if t.CrlUrls != nil {
		return t.CrlUrls
	}
	t.CrlUrls = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls{}
	return t.CrlUrls
}

// GetCrlUrls returns the value of the CrlUrls struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate. If the receiver or the field CrlUrls is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetCrlUrls() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls {
	if t != nil && t.CrlUrls != nil {
		return t.CrlUrls
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetPeriodicUpdateInterval retrieves the value of the leaf PeriodicUpdateInterval from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeriodicUpdateInterval is set, it can
// safely use t.GetPeriodicUpdateInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeriodicUpdateInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetPeriodicUpdateInterval() uint32 {
	if t == nil || t.PeriodicUpdateInterval == nil {
		return 86400
	}
	return *t.PeriodicUpdateInterval
}

// GetPreUpdateTime retrieves the value of the leaf PreUpdateTime from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreUpdateTime is set, it can
// safely use t.GetPreUpdateTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreUpdateTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetPreUpdateTime() uint32 {
	if t == nil || t.PreUpdateTime == nil {
		return 3600
	}
	return *t.PreUpdateTime
}

// GetRetryInterval retrieves the value of the leaf RetryInterval from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RetryInterval is set, it can
// safely use t.GetRetryInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RetryInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetRetryInterval() uint32 {
	if t == nil || t.RetryInterval == nil {
		return 3600
	}
	return *t.RetryInterval
}

// GetScheduleType retrieves the value of the leaf ScheduleType from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScheduleType is set, it can
// safely use t.GetScheduleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScheduleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) GetScheduleType() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType {
	if t == nil || t.ScheduleType == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType_next_update_based
	}
	return t.ScheduleType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.PeriodicUpdateInterval == nil {
		var v uint32 = 86400
		t.PeriodicUpdateInterval = &v
	}
	if t.PreUpdateTime == nil {
		var v uint32 = 3600
		t.PreUpdateTime = &v
	}
	if t.RetryInterval == nil {
		var v uint32 = 3600
		t.RetryInterval = &v
	}
	if t.ScheduleType == 0 {
		t.ScheduleType = NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_ScheduleType_next_update_based
	}
	t.CrlUrls.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/auto-crl-update/crl-urls YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct {
	UrlEntry map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry `path:"url-entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) IsYANGGoStruct() {
}

// NewUrlEntry creates a new entry in the UrlEntry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) NewUrlEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlEntry == nil {
		t.UrlEntry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UrlEntry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UrlEntry", key)
	}

	t.UrlEntry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry{
		EntryId: EntryId,
	}

	return t.UrlEntry[key], nil
}

// RenameUrlEntry renames an entry in the list UrlEntry within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) RenameUrlEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union) error {
	if _, ok := t.UrlEntry[newK]; ok {
		return fmt.Errorf("key %v already exists in UrlEntry", newK)
	}

	e, ok := t.UrlEntry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UrlEntry", oldK)
	}
	e.EntryId = newK

	t.UrlEntry[newK] = e
	delete(t.UrlEntry, oldK)
	return nil
}

// GetOrCreateUrlEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) GetOrCreateUrlEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry {

	key := EntryId

	if v, ok := t.UrlEntry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUrlEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUrlEntry got unexpected error: %v", err))
	}
	return v
}

// GetUrlEntry retrieves the value with the specified key from
// the UrlEntry map field of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) GetUrlEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.UrlEntry[key]; ok {
		return lm
	}
	return nil
}

// DeleteUrlEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) DeleteUrlEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union) {
	key := EntryId

	delete(t.UrlEntry, key)
}

// AppendUrlEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct to the
// list UrlEntry of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) AppendUrlEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UrlEntry == nil {
		t.UrlEntry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry)
	}

	if _, ok := t.UrlEntry[key]; ok {
		return fmt.Errorf("duplicate key for list UrlEntry %v", key)
	}

	t.UrlEntry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.UrlEntry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/auto-crl-update/crl-urls/url-entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct {
	EntryId             NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	TransmissionProfile *string                                                                                                     `path:"transmission-profile" module:"nokia-conf"`
	Url                 *string                                                                                                     `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) IsYANGGoStruct() {
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// GetUrl retrieves the value of the leaf Url from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Url is set, it can
// safely use t.GetUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Url == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) GetUrl() string {
	if t == nil || t.Url == nil {
		return ""
	}
	return *t.Url
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_AutoCrlUpdate_CrlUrls_UrlEntry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2 represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2 struct {
	AcceptUnprotectedMessage         *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage `path:"accept-unprotected-message" module:"nokia-conf"`
	AlwaysSetSenderForIr             *bool                                                                                          `path:"always-set-sender-for-ir" module:"nokia-conf"`
	Http                             *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http                     `path:"http" module:"nokia-conf"`
	KeyList                          *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList                  `path:"key-list" module:"nokia-conf"`
	ResponseSigningCert              *string                                                                                        `path:"response-signing-cert" module:"nokia-conf"`
	SameRecipientNonceForPollRequest *bool                                                                                          `path:"same-recipient-nonce-for-poll-request" module:"nokia-conf"`
	Url                              *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url                      `path:"url" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) IsYANGGoStruct() {}

// GetOrCreateAcceptUnprotectedMessage retrieves the value of the AcceptUnprotectedMessage field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateAcceptUnprotectedMessage() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage {
	if t.AcceptUnprotectedMessage != nil {
		return t.AcceptUnprotectedMessage
	}
	t.AcceptUnprotectedMessage = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage{}
	return t.AcceptUnprotectedMessage
}

// GetOrCreateHttp retrieves the value of the Http field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateHttp() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http {
	if t.Http != nil {
		return t.Http
	}
	t.Http = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http{}
	return t.Http
}

// GetOrCreateKeyList retrieves the value of the KeyList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateKeyList() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList {
	if t.KeyList != nil {
		return t.KeyList
	}
	t.KeyList = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList{}
	return t.KeyList
}

// GetOrCreateUrl retrieves the value of the Url field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetOrCreateUrl() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url {
	if t.Url != nil {
		return t.Url
	}
	t.Url = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url{}
	return t.Url
}

// GetAcceptUnprotectedMessage returns the value of the AcceptUnprotectedMessage struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field AcceptUnprotectedMessage is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetAcceptUnprotectedMessage() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage {
	if t != nil && t.AcceptUnprotectedMessage != nil {
		return t.AcceptUnprotectedMessage
	}
	return nil
}

// GetHttp returns the value of the Http struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field Http is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetHttp() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http {
	if t != nil && t.Http != nil {
		return t.Http
	}
	return nil
}

// GetKeyList returns the value of the KeyList struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field KeyList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetKeyList() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList {
	if t != nil && t.KeyList != nil {
		return t.KeyList
	}
	return nil
}

// GetUrl returns the value of the Url struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2. If the receiver or the field Url is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetUrl() *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url {
	if t != nil && t.Url != nil {
		return t.Url
	}
	return nil
}

// GetAlwaysSetSenderForIr retrieves the value of the leaf AlwaysSetSenderForIr from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AlwaysSetSenderForIr is set, it can
// safely use t.GetAlwaysSetSenderForIr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AlwaysSetSenderForIr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetAlwaysSetSenderForIr() bool {
	if t == nil || t.AlwaysSetSenderForIr == nil {
		return false
	}
	return *t.AlwaysSetSenderForIr
}

// GetResponseSigningCert retrieves the value of the leaf ResponseSigningCert from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponseSigningCert is set, it can
// safely use t.GetResponseSigningCert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponseSigningCert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetResponseSigningCert() string {
	if t == nil || t.ResponseSigningCert == nil {
		return ""
	}
	return *t.ResponseSigningCert
}

// GetSameRecipientNonceForPollRequest retrieves the value of the leaf SameRecipientNonceForPollRequest from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SameRecipientNonceForPollRequest is set, it can
// safely use t.GetSameRecipientNonceForPollRequest() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SameRecipientNonceForPollRequest == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) GetSameRecipientNonceForPollRequest() bool {
	if t == nil || t.SameRecipientNonceForPollRequest == nil {
		return false
	}
	return *t.SameRecipientNonceForPollRequest
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AlwaysSetSenderForIr == nil {
		var v bool = false
		t.AlwaysSetSenderForIr = &v
	}
	if t.SameRecipientNonceForPollRequest == nil {
		var v bool = false
		t.SameRecipientNonceForPollRequest = &v
	}
	t.AcceptUnprotectedMessage.PopulateDefaults()
	t.Http.PopulateDefaults()
	t.KeyList.PopulateDefaults()
	t.Url.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2/accept-unprotected-message YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage struct {
	ErrorMessage   *bool `path:"error-message" module:"nokia-conf"`
	PkiconfMessage *bool `path:"pkiconf-message" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) IsYANGGoStruct() {
}

// GetErrorMessage retrieves the value of the leaf ErrorMessage from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ErrorMessage is set, it can
// safely use t.GetErrorMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ErrorMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) GetErrorMessage() bool {
	if t == nil || t.ErrorMessage == nil {
		return false
	}
	return *t.ErrorMessage
}

// GetPkiconfMessage retrieves the value of the leaf PkiconfMessage from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PkiconfMessage is set, it can
// safely use t.GetPkiconfMessage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PkiconfMessage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) GetPkiconfMessage() bool {
	if t == nil || t.PkiconfMessage == nil {
		return false
	}
	return *t.PkiconfMessage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ErrorMessage == nil {
		var v bool = false
		t.ErrorMessage = &v
	}
	if t.PkiconfMessage == nil {
		var v bool = false
		t.PkiconfMessage = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_AcceptUnprotectedMessage) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2/http YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http struct {
	ResponseTimeout *uint32                                                                             `path:"response-timeout" module:"nokia-conf"`
	Version         E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http_Version `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) IsYANGGoStruct() {}

// GetResponseTimeout retrieves the value of the leaf ResponseTimeout from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponseTimeout is set, it can
// safely use t.GetResponseTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponseTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) GetResponseTimeout() uint32 {
	if t == nil || t.ResponseTimeout == nil {
		return 30
	}
	return *t.ResponseTimeout
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) GetVersion() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http_Version_1_1
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ResponseTimeout == nil {
		var v uint32 = 30
		t.ResponseTimeout = &v
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http_Version_1_1
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Http) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2/key-list YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList struct {
	Key map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) IsYANGGoStruct() {
}

// NewKey creates a new entry in the Key list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) NewKey(ReferenceNumber string) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key)
	}

	key := ReferenceNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Key[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Key", key)
	}

	t.Key[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key{
		ReferenceNumber: &ReferenceNumber,
	}

	return t.Key[key], nil
}

// RenameKey renames an entry in the list Key within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) RenameKey(oldK, newK string) error {
	if _, ok := t.Key[newK]; ok {
		return fmt.Errorf("key %v already exists in Key", newK)
	}

	e, ok := t.Key[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Key", oldK)
	}
	e.ReferenceNumber = &newK

	t.Key[newK] = e
	delete(t.Key, oldK)
	return nil
}

// GetOrCreateKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) GetOrCreateKey(ReferenceNumber string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key {

	key := ReferenceNumber

	if v, ok := t.Key[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKey(ReferenceNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKey got unexpected error: %v", err))
	}
	return v
}

// GetKey retrieves the value with the specified key from
// the Key map field of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) GetKey(ReferenceNumber string) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key {

	if t == nil {
		return nil
	}

	key := ReferenceNumber

	if lm, ok := t.Key[key]; ok {
		return lm
	}
	return nil
}

// DeleteKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) DeleteKey(ReferenceNumber string) {
	key := ReferenceNumber

	delete(t.Key, key)
}

// AppendKey appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct to the
// list Key of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) AppendKey(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) error {
	if v.ReferenceNumber == nil {
		return fmt.Errorf("invalid nil key received for ReferenceNumber")
	}

	key := *v.ReferenceNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Key == nil {
		t.Key = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key)
	}

	if _, ok := t.Key[key]; ok {
		return fmt.Errorf("duplicate key for list Key %v", key)
	}

	t.Key[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Key {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2/key-list/key YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct {
	Password        *string `path:"password" module:"nokia-conf"`
	ReferenceNumber *string `path:"reference-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) IsYANGGoStruct() {
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetReferenceNumber retrieves the value of the leaf ReferenceNumber from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReferenceNumber is set, it can
// safely use t.GetReferenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReferenceNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) GetReferenceNumber() string {
	if t == nil || t.ReferenceNumber == nil {
		return ""
	}
	return *t.ReferenceNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ReferenceNumber == nil {
		return nil, fmt.Errorf("nil value for key ReferenceNumber")
	}

	return map[string]interface{}{
		"reference-number": *t.ReferenceNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_KeyList_Key) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/cmpv2/url YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url struct {
	ServiceName *string `path:"service-name" module:"nokia-conf"`
	UrlString   *string `path:"url-string" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) IsYANGGoStruct() {}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetUrlString retrieves the value of the leaf UrlString from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlString is set, it can
// safely use t.GetUrlString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) GetUrlString() string {
	if t == nil || t.UrlString == nil {
		return ""
	}
	return *t.UrlString
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Cmpv2_Url) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp represents the /nokia-conf/configure/groups/group/system/security/pki/ca-profile/ocsp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp struct {
	ResponderUrl        *string `path:"responder-url" module:"nokia-conf"`
	ServiceName         *string `path:"service-name" module:"nokia-conf"`
	TransmissionProfile *string `path:"transmission-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) IsYANGGoStruct() {}

// GetResponderUrl retrieves the value of the leaf ResponderUrl from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResponderUrl is set, it can
// safely use t.GetResponderUrl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResponderUrl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) GetResponderUrl() string {
	if t == nil || t.ResponderUrl == nil {
		return ""
	}
	return *t.ResponderUrl
}

// GetServiceName retrieves the value of the leaf ServiceName from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceName is set, it can
// safely use t.GetServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) GetServiceName() string {
	if t == nil || t.ServiceName == nil {
		return ""
	}
	return *t.ServiceName
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CaProfile_Ocsp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning represents the /nokia-conf/configure/groups/group/system/security/pki/certificate-expiration-warning YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning struct {
	Hours       *int32 `path:"hours" module:"nokia-conf"`
	RepeatHours *int32 `path:"repeat-hours" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) IsYANGGoStruct() {
}

// GetHours retrieves the value of the leaf Hours from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hours is set, it can
// safely use t.GetHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) GetHours() int32 {
	if t == nil || t.Hours == nil {
		return 0
	}
	return *t.Hours
}

// GetRepeatHours retrieves the value of the leaf RepeatHours from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatHours is set, it can
// safely use t.GetRepeatHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatHours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) GetRepeatHours() int32 {
	if t == nil || t.RepeatHours == nil {
		return 0
	}
	return *t.RepeatHours
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RepeatHours == nil {
		var v int32 = 0
		t.RepeatHours = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CertificateExpirationWarning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList represents the /nokia-conf/configure/groups/group/system/security/pki/common-name-list YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList struct {
	CnListName *string                                                                                                                                                                          `path:"cn-list-name" module:"nokia-conf"`
	CommonName map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName `path:"common-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) IsYANGGoStruct() {}

// NewCommonName creates a new entry in the CommonName list of the
// NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) NewCommonName(CnIndex NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonName == nil {
		t.CommonName = make(map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName)
	}

	key := CnIndex

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CommonName[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CommonName", key)
	}

	t.CommonName[key] = &NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName{
		CnIndex: CnIndex,
	}

	return t.CommonName[key], nil
}

// RenameCommonName renames an entry in the list CommonName within
// the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) RenameCommonName(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union) error {
	if _, ok := t.CommonName[newK]; ok {
		return fmt.Errorf("key %v already exists in CommonName", newK)
	}

	e, ok := t.CommonName[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CommonName", oldK)
	}
	e.CnIndex = newK

	t.CommonName[newK] = e
	delete(t.CommonName, oldK)
	return nil
}

// GetOrCreateCommonName retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) GetOrCreateCommonName(CnIndex NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName {

	key := CnIndex

	if v, ok := t.CommonName[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommonName(CnIndex)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommonName got unexpected error: %v", err))
	}
	return v
}

// GetCommonName retrieves the value with the specified key from
// the CommonName map field of NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) GetCommonName(CnIndex NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union) *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName {

	if t == nil {
		return nil
	}

	key := CnIndex

	if lm, ok := t.CommonName[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommonName deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) DeleteCommonName(CnIndex NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union) {
	key := CnIndex

	delete(t.CommonName, key)
}

// AppendCommonName appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName struct to the
// list CommonName of NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) AppendCommonName(v *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) error {
	key := v.CnIndex

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CommonName == nil {
		t.CommonName = make(map[NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union]*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName)
	}

	if _, ok := t.CommonName[key]; ok {
		return fmt.Errorf("duplicate key for list CommonName %v", key)
	}

	t.CommonName[key] = v
	return nil
}

// GetCnListName retrieves the value of the leaf CnListName from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnListName is set, it can
// safely use t.GetCnListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) GetCnListName() string {
	if t == nil || t.CnListName == nil {
		return ""
	}
	return *t.CnListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CommonName {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CnListName == nil {
		return nil, fmt.Errorf("nil value for key CnListName")
	}

	return map[string]interface{}{
		"cn-list-name": *t.CnListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName represents the /nokia-conf/configure/groups/group/system/security/pki/common-name-list/common-name YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName struct {
	CnIndex NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union `path:"cn-index" module:"nokia-conf"`
	CnType  E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnType      `path:"cn-type" module:"nokia-conf"`
	CnValue *string                                                                                      `path:"cn-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) IsYANGGoStruct() {
}

// GetCnIndex retrieves the value of the leaf CnIndex from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnIndex is set, it can
// safely use t.GetCnIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnIndex == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) GetCnIndex() NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnIndex_Union {
	if t == nil || t.CnIndex == nil {
		return nil
	}
	return t.CnIndex
}

// GetCnType retrieves the value of the leaf CnType from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnType is set, it can
// safely use t.GetCnType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) GetCnType() E_NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName_CnType {
	if t == nil || t.CnType == 0 {
		return 0
	}
	return t.CnType
}

// GetCnValue retrieves the value of the leaf CnValue from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CnValue is set, it can
// safely use t.GetCnValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CnValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) GetCnValue() string {
	if t == nil || t.CnValue == nil {
		return ""
	}
	return *t.CnValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"cn-index": t.CnIndex,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CommonNameList_CommonName) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning represents the /nokia-conf/configure/groups/group/system/security/pki/crl-expiration-warning YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning struct {
	Hours       *int32 `path:"hours" module:"nokia-conf"`
	RepeatHours *int32 `path:"repeat-hours" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) IsYANGGoStruct() {}

// GetHours retrieves the value of the leaf Hours from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hours is set, it can
// safely use t.GetHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) GetHours() int32 {
	if t == nil || t.Hours == nil {
		return 0
	}
	return *t.Hours
}

// GetRepeatHours retrieves the value of the leaf RepeatHours from the NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatHours is set, it can
// safely use t.GetRepeatHours() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatHours == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) GetRepeatHours() int32 {
	if t == nil || t.RepeatHours == nil {
		return 0
	}
	return *t.RepeatHours
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RepeatHours == nil {
		var v int32 = 0
		t.RepeatHours = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_CrlExpirationWarning) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile represents the /nokia-conf/configure/groups/group/system/security/pki/est-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile struct {
	CheckIdKpCmcraOnly  *bool                                                                               `path:"check-id-kp-cmcra-only" module:"nokia-conf"`
	ClientTlsProfile    *string                                                                             `path:"client-tls-profile" module:"nokia-conf"`
	HttpAuthentication  *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication `path:"http-authentication" module:"nokia-conf"`
	Name                *string                                                                             `path:"name" module:"nokia-conf"`
	Server              *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server             `path:"server" module:"nokia-conf"`
	TransmissionProfile *string                                                                             `path:"transmission-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) IsYANGGoStruct() {}

// GetOrCreateHttpAuthentication retrieves the value of the HttpAuthentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetOrCreateHttpAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication {
	if t.HttpAuthentication != nil {
		return t.HttpAuthentication
	}
	t.HttpAuthentication = &NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication{}
	return t.HttpAuthentication
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server{}
	return t.Server
}

// GetHttpAuthentication returns the value of the HttpAuthentication struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile. If the receiver or the field HttpAuthentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetHttpAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication {
	if t != nil && t.HttpAuthentication != nil {
		return t.HttpAuthentication
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetServer() *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetCheckIdKpCmcraOnly retrieves the value of the leaf CheckIdKpCmcraOnly from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CheckIdKpCmcraOnly is set, it can
// safely use t.GetCheckIdKpCmcraOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CheckIdKpCmcraOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetCheckIdKpCmcraOnly() bool {
	if t == nil || t.CheckIdKpCmcraOnly == nil {
		return false
	}
	return *t.CheckIdKpCmcraOnly
}

// GetClientTlsProfile retrieves the value of the leaf ClientTlsProfile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientTlsProfile is set, it can
// safely use t.GetClientTlsProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientTlsProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetClientTlsProfile() string {
	if t == nil || t.ClientTlsProfile == nil {
		return ""
	}
	return *t.ClientTlsProfile
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTransmissionProfile retrieves the value of the leaf TransmissionProfile from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmissionProfile is set, it can
// safely use t.GetTransmissionProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmissionProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) GetTransmissionProfile() string {
	if t == nil || t.TransmissionProfile == nil {
		return ""
	}
	return *t.TransmissionProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CheckIdKpCmcraOnly == nil {
		var v bool = false
		t.CheckIdKpCmcraOnly = &v
	}
	t.HttpAuthentication.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication represents the /nokia-conf/configure/groups/group/system/security/pki/est-profile/http-authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication struct {
	Password *string `path:"password" module:"nokia-conf"`
	Username *string `path:"username" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) IsYANGGoStruct() {
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetUsername retrieves the value of the leaf Username from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Username is set, it can
// safely use t.GetUsername() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Username == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) GetUsername() string {
	if t == nil || t.Username == nil {
		return ""
	}
	return *t.Username
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_HttpAuthentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server represents the /nokia-conf/configure/groups/group/system/security/pki/est-profile/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server struct {
	Fqdn *string `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
	Port *int32  `path:"port" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) GetPort() int32 {
	if t == nil || t.Port == nil {
		return 443
	}
	return *t.Port
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Port == nil {
		var v int32 = 443
		t.Port = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Pki_EstProfile_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_PythonScript represents the /nokia-conf/configure/groups/group/system/security/python-script YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_PythonScript struct {
	Authorization *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization `path:"authorization" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_PythonScript implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript) IsYANGGoStruct() {}

// GetOrCreateAuthorization retrieves the value of the Authorization field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) GetOrCreateAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization {
	if t.Authorization != nil {
		return t.Authorization
	}
	t.Authorization = &NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization{}
	return t.Authorization
}

// GetAuthorization returns the value of the Authorization struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_PythonScript. If the receiver or the field Authorization is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) GetAuthorization() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization {
	if t != nil && t.Authorization != nil {
		return t.Authorization
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_PythonScript
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authorization.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_PythonScript"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_PythonScript.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization represents the /nokia-conf/configure/groups/group/system/security/python-script/authorization YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization struct {
	Cron         *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron         `path:"cron" module:"nokia-conf"`
	EventHandler *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler `path:"event-handler" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) IsYANGGoStruct() {
}

// GetOrCreateCron retrieves the value of the Cron field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) GetOrCreateCron() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron {
	if t.Cron != nil {
		return t.Cron
	}
	t.Cron = &NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron{}
	return t.Cron
}

// GetOrCreateEventHandler retrieves the value of the EventHandler field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) GetOrCreateEventHandler() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler {
	if t.EventHandler != nil {
		return t.EventHandler
	}
	t.EventHandler = &NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler{}
	return t.EventHandler
}

// GetCron returns the value of the Cron struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization. If the receiver or the field Cron is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) GetCron() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron {
	if t != nil && t.Cron != nil {
		return t.Cron
	}
	return nil
}

// GetEventHandler returns the value of the EventHandler struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization. If the receiver or the field EventHandler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) GetEventHandler() *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler {
	if t != nil && t.EventHandler != nil {
		return t.EventHandler
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cron.PopulateDefaults()
	t.EventHandler.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron represents the /nokia-conf/configure/groups/group/system/security/python-script/authorization/cron YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_Cron) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler represents the /nokia-conf/configure/groups/group/system/security/python-script/authorization/event-handler YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler struct {
	CliUser *string `path:"cli-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) IsYANGGoStruct() {
}

// GetCliUser retrieves the value of the leaf CliUser from the NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliUser is set, it can
// safely use t.GetCliUser() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliUser == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) GetCliUser() string {
	if t == nil || t.CliUser == nil {
		return ""
	}
	return *t.CliUser
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler.
func (*NokiaConf_Configure_Groups_Group_System_Security_PythonScript_Authorization_EventHandler) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp represents the /nokia-conf/configure/groups/group/system/security/snmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp struct {
	Access           map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access `path:"access" module:"nokia-conf"`
	Attempts         *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts                                                                    `path:"attempts" module:"nokia-conf" yangPresence:"true"`
	Community        map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community                                                        `path:"community" module:"nokia-conf"`
	SourceAccessList map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList                                                 `path:"source-access-list" module:"nokia-conf"`
	UsmCommunity     map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity                                                     `path:"usm-community" module:"nokia-conf"`
	View             map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View     `path:"view" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key represents the key for list Access of element /nokia-conf/configure/groups/group/system/security/snmp.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key struct {
	Group         string                                                                           `path:"group"`
	Context       string                                                                           `path:"context"`
	SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union `path:"security-model"`
	SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union `path:"security-level"`
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key represents the key for list View of element /nokia-conf/configure/groups/group/system/security/snmp.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key struct {
	ViewName string `path:"view-name"`
	Subtree  string `path:"subtree"`
}

// NewAccess creates a new entry in the Access list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) NewAccess(Group string, Context string, SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union, SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Access == nil {
		t.Access = make(map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access)
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Access[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Access", key)
	}

	t.Access[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access{
		Group:         &Group,
		Context:       &Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	return t.Access[key], nil
}

// RenameAccess renames an entry in the list Access within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) RenameAccess(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key) error {
	if _, ok := t.Access[newK]; ok {
		return fmt.Errorf("key %v already exists in Access", newK)
	}

	e, ok := t.Access[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Access", oldK)
	}
	e.Group = &newK.Group
	e.Context = &newK.Context
	e.SecurityModel = newK.SecurityModel
	e.SecurityLevel = newK.SecurityLevel

	t.Access[newK] = e
	delete(t.Access, oldK)
	return nil
}

// GetOrCreateAccess retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateAccess(Group string, Context string, SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union, SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access {

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	if v, ok := t.Access[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccess(Group, Context, SecurityModel, SecurityLevel)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccess got unexpected error: %v", err))
	}
	return v
}

// GetAccess retrieves the value with the specified key from
// the Access map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetAccess(Group string, Context string, SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union, SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	if lm, ok := t.Access[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccess deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) DeleteAccess(Group string, Context string, SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union, SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union) {
	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key{
		Group:         Group,
		Context:       Context,
		SecurityModel: SecurityModel,
		SecurityLevel: SecurityLevel,
	}

	delete(t.Access, key)
}

// AppendAccess appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access struct to the
// list Access of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) AppendAccess(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) error {
	if v.Group == nil {
		return fmt.Errorf("invalid nil key for Group")
	}

	if v.Context == nil {
		return fmt.Errorf("invalid nil key for Context")
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key{
		Group:         *v.Group,
		Context:       *v.Context,
		SecurityModel: v.SecurityModel,
		SecurityLevel: v.SecurityLevel,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Access == nil {
		t.Access = make(map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access)
	}

	if _, ok := t.Access[key]; ok {
		return fmt.Errorf("duplicate key for list Access %v", key)
	}

	t.Access[key] = v
	return nil
}

// NewCommunity creates a new entry in the Community list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) NewCommunity(CommunityString string) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community)
	}

	key := CommunityString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Community[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Community", key)
	}

	t.Community[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community{
		CommunityString: &CommunityString,
	}

	return t.Community[key], nil
}

// RenameCommunity renames an entry in the list Community within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) RenameCommunity(oldK, newK string) error {
	if _, ok := t.Community[newK]; ok {
		return fmt.Errorf("key %v already exists in Community", newK)
	}

	e, ok := t.Community[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Community", oldK)
	}
	e.CommunityString = &newK

	t.Community[newK] = e
	delete(t.Community, oldK)
	return nil
}

// GetOrCreateCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateCommunity(CommunityString string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community {

	key := CommunityString

	if v, ok := t.Community[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCommunity(CommunityString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCommunity got unexpected error: %v", err))
	}
	return v
}

// GetCommunity retrieves the value with the specified key from
// the Community map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetCommunity(CommunityString string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community {

	if t == nil {
		return nil
	}

	key := CommunityString

	if lm, ok := t.Community[key]; ok {
		return lm
	}
	return nil
}

// DeleteCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) DeleteCommunity(CommunityString string) {
	key := CommunityString

	delete(t.Community, key)
}

// AppendCommunity appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community struct to the
// list Community of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) AppendCommunity(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) error {
	if v.CommunityString == nil {
		return fmt.Errorf("invalid nil key received for CommunityString")
	}

	key := *v.CommunityString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Community == nil {
		t.Community = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community)
	}

	if _, ok := t.Community[key]; ok {
		return fmt.Errorf("duplicate key for list Community %v", key)
	}

	t.Community[key] = v
	return nil
}

// NewSourceAccessList creates a new entry in the SourceAccessList list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) NewSourceAccessList(ListName string) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceAccessList == nil {
		t.SourceAccessList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList)
	}

	key := ListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceAccessList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceAccessList", key)
	}

	t.SourceAccessList[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList{
		ListName: &ListName,
	}

	return t.SourceAccessList[key], nil
}

// RenameSourceAccessList renames an entry in the list SourceAccessList within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) RenameSourceAccessList(oldK, newK string) error {
	if _, ok := t.SourceAccessList[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceAccessList", newK)
	}

	e, ok := t.SourceAccessList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceAccessList", oldK)
	}
	e.ListName = &newK

	t.SourceAccessList[newK] = e
	delete(t.SourceAccessList, oldK)
	return nil
}

// GetOrCreateSourceAccessList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateSourceAccessList(ListName string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList {

	key := ListName

	if v, ok := t.SourceAccessList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceAccessList(ListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceAccessList got unexpected error: %v", err))
	}
	return v
}

// GetSourceAccessList retrieves the value with the specified key from
// the SourceAccessList map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetSourceAccessList(ListName string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList {

	if t == nil {
		return nil
	}

	key := ListName

	if lm, ok := t.SourceAccessList[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceAccessList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) DeleteSourceAccessList(ListName string) {
	key := ListName

	delete(t.SourceAccessList, key)
}

// AppendSourceAccessList appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList struct to the
// list SourceAccessList of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) AppendSourceAccessList(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) error {
	if v.ListName == nil {
		return fmt.Errorf("invalid nil key received for ListName")
	}

	key := *v.ListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceAccessList == nil {
		t.SourceAccessList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList)
	}

	if _, ok := t.SourceAccessList[key]; ok {
		return fmt.Errorf("duplicate key for list SourceAccessList %v", key)
	}

	t.SourceAccessList[key] = v
	return nil
}

// NewUsmCommunity creates a new entry in the UsmCommunity list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) NewUsmCommunity(CommunityString string) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UsmCommunity == nil {
		t.UsmCommunity = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity)
	}

	key := CommunityString

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.UsmCommunity[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list UsmCommunity", key)
	}

	t.UsmCommunity[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity{
		CommunityString: &CommunityString,
	}

	return t.UsmCommunity[key], nil
}

// RenameUsmCommunity renames an entry in the list UsmCommunity within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) RenameUsmCommunity(oldK, newK string) error {
	if _, ok := t.UsmCommunity[newK]; ok {
		return fmt.Errorf("key %v already exists in UsmCommunity", newK)
	}

	e, ok := t.UsmCommunity[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in UsmCommunity", oldK)
	}
	e.CommunityString = &newK

	t.UsmCommunity[newK] = e
	delete(t.UsmCommunity, oldK)
	return nil
}

// GetOrCreateUsmCommunity retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateUsmCommunity(CommunityString string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity {

	key := CommunityString

	if v, ok := t.UsmCommunity[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUsmCommunity(CommunityString)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUsmCommunity got unexpected error: %v", err))
	}
	return v
}

// GetUsmCommunity retrieves the value with the specified key from
// the UsmCommunity map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetUsmCommunity(CommunityString string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity {

	if t == nil {
		return nil
	}

	key := CommunityString

	if lm, ok := t.UsmCommunity[key]; ok {
		return lm
	}
	return nil
}

// DeleteUsmCommunity deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) DeleteUsmCommunity(CommunityString string) {
	key := CommunityString

	delete(t.UsmCommunity, key)
}

// AppendUsmCommunity appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity struct to the
// list UsmCommunity of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) AppendUsmCommunity(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) error {
	if v.CommunityString == nil {
		return fmt.Errorf("invalid nil key received for CommunityString")
	}

	key := *v.CommunityString

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.UsmCommunity == nil {
		t.UsmCommunity = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity)
	}

	if _, ok := t.UsmCommunity[key]; ok {
		return fmt.Errorf("duplicate key for list UsmCommunity %v", key)
	}

	t.UsmCommunity[key] = v
	return nil
}

// NewView creates a new entry in the View list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) NewView(ViewName string, Subtree string) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.View == nil {
		t.View = make(map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View)
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.View[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list View", key)
	}

	t.View[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_View{
		ViewName: &ViewName,
		Subtree:  &Subtree,
	}

	return t.View[key], nil
}

// RenameView renames an entry in the list View within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) RenameView(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key) error {
	if _, ok := t.View[newK]; ok {
		return fmt.Errorf("key %v already exists in View", newK)
	}

	e, ok := t.View[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in View", oldK)
	}
	e.ViewName = &newK.ViewName
	e.Subtree = &newK.Subtree

	t.View[newK] = e
	delete(t.View, oldK)
	return nil
}

// GetOrCreateView retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateView(ViewName string, Subtree string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View {

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	if v, ok := t.View[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewView(ViewName, Subtree)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateView got unexpected error: %v", err))
	}
	return v
}

// GetView retrieves the value with the specified key from
// the View map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetView(ViewName string, Subtree string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	if lm, ok := t.View[key]; ok {
		return lm
	}
	return nil
}

// DeleteView deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) DeleteView(ViewName string, Subtree string) {
	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key{
		ViewName: ViewName,
		Subtree:  Subtree,
	}

	delete(t.View, key)
}

// AppendView appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_View struct to the
// list View of NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_View already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) AppendView(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) error {
	if v.ViewName == nil {
		return fmt.Errorf("invalid nil key for ViewName")
	}

	if v.Subtree == nil {
		return fmt.Errorf("invalid nil key for Subtree")
	}

	key := NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key{
		ViewName: *v.ViewName,
		Subtree:  *v.Subtree,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.View == nil {
		t.View = make(map[NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Key]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View)
	}

	if _, ok := t.View[key]; ok {
		return fmt.Errorf("duplicate key for list View %v", key)
	}

	t.View[key] = v
	return nil
}

// GetOrCreateAttempts retrieves the value of the Attempts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetOrCreateAttempts() *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts {
	if t.Attempts != nil {
		return t.Attempts
	}
	t.Attempts = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts{}
	return t.Attempts
}

// GetAttempts returns the value of the Attempts struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Snmp. If the receiver or the field Attempts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) GetAttempts() *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts {
	if t != nil && t.Attempts != nil {
		return t.Attempts
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attempts.PopulateDefaults()
	for _, e := range t.Access {
		e.PopulateDefaults()
	}
	for _, e := range t.Community {
		e.PopulateDefaults()
	}
	for _, e := range t.SourceAccessList {
		e.PopulateDefaults()
	}
	for _, e := range t.UsmCommunity {
		e.PopulateDefaults()
	}
	for _, e := range t.View {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access represents the /nokia-conf/configure/groups/group/system/security/snmp/access YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access struct {
	Context       *string                                                                          `path:"context" module:"nokia-conf"`
	Group         *string                                                                          `path:"group" module:"nokia-conf"`
	Notify        *string                                                                          `path:"notify" module:"nokia-conf"`
	PrefixMatch   E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_PrefixMatch       `path:"prefix-match" module:"nokia-conf"`
	Read          *string                                                                          `path:"read" module:"nokia-conf"`
	SecurityLevel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union `path:"security-level" module:"nokia-conf"`
	SecurityModel NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union `path:"security-model" module:"nokia-conf"`
	Write         *string                                                                          `path:"write" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) IsYANGGoStruct() {}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetContext() string {
	if t == nil || t.Context == nil {
		return ""
	}
	return *t.Context
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetNotify retrieves the value of the leaf Notify from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Notify is set, it can
// safely use t.GetNotify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Notify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetNotify() string {
	if t == nil || t.Notify == nil {
		return ""
	}
	return *t.Notify
}

// GetPrefixMatch retrieves the value of the leaf PrefixMatch from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrefixMatch is set, it can
// safely use t.GetPrefixMatch() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrefixMatch == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetPrefixMatch() E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_PrefixMatch {
	if t == nil || t.PrefixMatch == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_PrefixMatch_exact
	}
	return t.PrefixMatch
}

// GetRead retrieves the value of the leaf Read from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Read is set, it can
// safely use t.GetRead() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Read == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetRead() string {
	if t == nil || t.Read == nil {
		return ""
	}
	return *t.Read
}

// GetSecurityLevel retrieves the value of the leaf SecurityLevel from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityLevel is set, it can
// safely use t.GetSecurityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetSecurityLevel() NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityLevel_Union {
	if t == nil || t.SecurityLevel == nil {
		return nil
	}
	return t.SecurityLevel
}

// GetSecurityModel retrieves the value of the leaf SecurityModel from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecurityModel is set, it can
// safely use t.GetSecurityModel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecurityModel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetSecurityModel() NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_SecurityModel_Union {
	if t == nil || t.SecurityModel == nil {
		return nil
	}
	return t.SecurityModel
}

// GetWrite retrieves the value of the leaf Write from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Write is set, it can
// safely use t.GetWrite() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Write == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) GetWrite() string {
	if t == nil || t.Write == nil {
		return ""
	}
	return *t.Write
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PrefixMatch == 0 {
		t.PrefixMatch = NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access_PrefixMatch_exact
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Context == nil {
		return nil, fmt.Errorf("nil value for key Context")
	}

	if t.Group == nil {
		return nil, fmt.Errorf("nil value for key Group")
	}

	return map[string]interface{}{
		"context":        *t.Context,
		"group":          *t.Group,
		"security-level": t.SecurityLevel,
		"security-model": t.SecurityModel,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts represents the /nokia-conf/configure/groups/group/system/security/snmp/attempts YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts struct {
	Count   *uint16 `path:"count" module:"nokia-conf"`
	Lockout *uint16 `path:"lockout" module:"nokia-conf"`
	Time    *uint16 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) GetCount() uint16 {
	if t == nil || t.Count == nil {
		return 20
	}
	return *t.Count
}

// GetLockout retrieves the value of the leaf Lockout from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lockout is set, it can
// safely use t.GetLockout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lockout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) GetLockout() uint16 {
	if t == nil || t.Lockout == nil {
		return 10
	}
	return *t.Lockout
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) GetTime() uint16 {
	if t == nil || t.Time == nil {
		return 5
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint16 = 20
		t.Count = &v
	}
	if t.Lockout == nil {
		var v uint16 = 10
		t.Lockout = &v
	}
	if t.Time == nil {
		var v uint16 = 5
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Attempts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community represents the /nokia-conf/configure/groups/group/system/security/snmp/community YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community struct {
	AccessPermissions E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_AccessPermissions `path:"access-permissions" module:"nokia-conf"`
	CommunityString   *string                                                                             `path:"community-string" module:"nokia-conf"`
	SourceAccessList  *string                                                                             `path:"source-access-list" module:"nokia-conf"`
	Version           E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_Version           `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) IsYANGGoStruct() {}

// GetAccessPermissions retrieves the value of the leaf AccessPermissions from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccessPermissions is set, it can
// safely use t.GetAccessPermissions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccessPermissions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) GetAccessPermissions() E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_AccessPermissions {
	if t == nil || t.AccessPermissions == 0 {
		return 0
	}
	return t.AccessPermissions
}

// GetCommunityString retrieves the value of the leaf CommunityString from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityString is set, it can
// safely use t.GetCommunityString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) GetCommunityString() string {
	if t == nil || t.CommunityString == nil {
		return ""
	}
	return *t.CommunityString
}

// GetSourceAccessList retrieves the value of the leaf SourceAccessList from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAccessList is set, it can
// safely use t.GetSourceAccessList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAccessList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) GetSourceAccessList() string {
	if t == nil || t.SourceAccessList == nil {
		return ""
	}
	return *t.SourceAccessList
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) GetVersion() E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_Version_both
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community_Version_both
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityString == nil {
		return nil, fmt.Errorf("nil value for key CommunityString")
	}

	return map[string]interface{}{
		"community-string": *t.CommunityString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_Community) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList represents the /nokia-conf/configure/groups/group/system/security/snmp/source-access-list YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList struct {
	ListName   *string                                                                                       `path:"list-name" module:"nokia-conf"`
	SourceHost map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost `path:"source-host" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) IsYANGGoStruct() {}

// NewSourceHost creates a new entry in the SourceHost list of the
// NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) NewSourceHost(HostName string) (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceHost == nil {
		t.SourceHost = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost)
	}

	key := HostName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SourceHost[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SourceHost", key)
	}

	t.SourceHost[key] = &NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost{
		HostName: &HostName,
	}

	return t.SourceHost[key], nil
}

// RenameSourceHost renames an entry in the list SourceHost within
// the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) RenameSourceHost(oldK, newK string) error {
	if _, ok := t.SourceHost[newK]; ok {
		return fmt.Errorf("key %v already exists in SourceHost", newK)
	}

	e, ok := t.SourceHost[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SourceHost", oldK)
	}
	e.HostName = &newK

	t.SourceHost[newK] = e
	delete(t.SourceHost, oldK)
	return nil
}

// GetOrCreateSourceHost retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) GetOrCreateSourceHost(HostName string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost {

	key := HostName

	if v, ok := t.SourceHost[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSourceHost(HostName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSourceHost got unexpected error: %v", err))
	}
	return v
}

// GetSourceHost retrieves the value with the specified key from
// the SourceHost map field of NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) GetSourceHost(HostName string) *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost {

	if t == nil {
		return nil
	}

	key := HostName

	if lm, ok := t.SourceHost[key]; ok {
		return lm
	}
	return nil
}

// DeleteSourceHost deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) DeleteSourceHost(HostName string) {
	key := HostName

	delete(t.SourceHost, key)
}

// AppendSourceHost appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost struct to the
// list SourceHost of NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) AppendSourceHost(v *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) error {
	if v.HostName == nil {
		return fmt.Errorf("invalid nil key received for HostName")
	}

	key := *v.HostName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SourceHost == nil {
		t.SourceHost = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost)
	}

	if _, ok := t.SourceHost[key]; ok {
		return fmt.Errorf("duplicate key for list SourceHost %v", key)
	}

	t.SourceHost[key] = v
	return nil
}

// GetListName retrieves the value of the leaf ListName from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ListName is set, it can
// safely use t.GetListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) GetListName() string {
	if t == nil || t.ListName == nil {
		return ""
	}
	return *t.ListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SourceHost {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ListName == nil {
		return nil, fmt.Errorf("nil value for key ListName")
	}

	return map[string]interface{}{
		"list-name": *t.ListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost represents the /nokia-conf/configure/groups/group/system/security/snmp/source-access-list/source-host YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost struct {
	Address  *string `path:"address" module:"nokia-conf"`
	HostName *string `path:"host-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetHostName retrieves the value of the leaf HostName from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HostName is set, it can
// safely use t.GetHostName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HostName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) GetHostName() string {
	if t == nil || t.HostName == nil {
		return ""
	}
	return *t.HostName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) ΛListKeyMap() (map[string]interface{}, error) {
	if t.HostName == nil {
		return nil, fmt.Errorf("nil value for key HostName")
	}

	return map[string]interface{}{
		"host-name": *t.HostName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_SourceAccessList_SourceHost) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity represents the /nokia-conf/configure/groups/group/system/security/snmp/usm-community YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity struct {
	CommunityString  *string `path:"community-string" module:"nokia-conf"`
	Group            *string `path:"group" module:"nokia-conf"`
	SourceAccessList *string `path:"source-access-list" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) IsYANGGoStruct() {}

// GetCommunityString retrieves the value of the leaf CommunityString from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommunityString is set, it can
// safely use t.GetCommunityString() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommunityString == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) GetCommunityString() string {
	if t == nil || t.CommunityString == nil {
		return ""
	}
	return *t.CommunityString
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// GetSourceAccessList retrieves the value of the leaf SourceAccessList from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SourceAccessList is set, it can
// safely use t.GetSourceAccessList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SourceAccessList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) GetSourceAccessList() string {
	if t == nil || t.SourceAccessList == nil {
		return ""
	}
	return *t.SourceAccessList
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CommunityString == nil {
		return nil, fmt.Errorf("nil value for key CommunityString")
	}

	return map[string]interface{}{
		"community-string": *t.CommunityString,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_UsmCommunity) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Snmp_View represents the /nokia-conf/configure/groups/group/system/security/snmp/view YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Snmp_View struct {
	Mask     *string                                                           `path:"mask" module:"nokia-conf"`
	Subtree  *string                                                           `path:"subtree" module:"nokia-conf"`
	Type     E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Type `path:"type" module:"nokia-conf"`
	ViewName *string                                                           `path:"view-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Snmp_View implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) IsYANGGoStruct() {}

// GetMask retrieves the value of the leaf Mask from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mask is set, it can
// safely use t.GetMask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) GetMask() string {
	if t == nil || t.Mask == nil {
		return "ff"
	}
	return *t.Mask
}

// GetSubtree retrieves the value of the leaf Subtree from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Subtree is set, it can
// safely use t.GetSubtree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Subtree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) GetSubtree() string {
	if t == nil || t.Subtree == nil {
		return ""
	}
	return *t.Subtree
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) GetType() E_NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Type {
	if t == nil || t.Type == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Type_included
	}
	return t.Type
}

// GetViewName retrieves the value of the leaf ViewName from the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ViewName is set, it can
// safely use t.GetViewName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ViewName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) GetViewName() string {
	if t == nil || t.ViewName == nil {
		return ""
	}
	return *t.ViewName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mask == nil {
		var v string = "ff"
		t.Mask = &v
	}
	if t.Type == 0 {
		t.Type = NokiaConf_Configure_Groups_Group_System_Security_Snmp_View_Type_included
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Snmp_View struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Subtree == nil {
		return nil, fmt.Errorf("nil value for key Subtree")
	}

	if t.ViewName == nil {
		return nil, fmt.Errorf("nil value for key ViewName")
	}

	return map[string]interface{}{
		"subtree":   *t.Subtree,
		"view-name": *t.ViewName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Snmp_View"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Snmp_View.
func (*NokiaConf_Configure_Groups_Group_System_Security_Snmp_View) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_SourceAddress represents the /nokia-conf/configure/groups/group/system/security/source-address YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_SourceAddress struct {
	Ipv4 map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6 map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_SourceAddress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) IsYANGGoStruct() {}

// NewIpv4 creates a new entry in the Ipv4 list of the
// NokiaConf_Configure_Groups_Group_System_Security_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) NewIpv4(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union) (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv4[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv4", key)
	}

	t.Ipv4[key] = &NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4{
		Application: Application,
	}

	return t.Ipv4[key], nil
}

// RenameIpv4 renames an entry in the list Ipv4 within
// the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) RenameIpv4(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union) error {
	if _, ok := t.Ipv4[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv4", newK)
	}

	e, ok := t.Ipv4[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv4", oldK)
	}
	e.Application = newK

	t.Ipv4[newK] = e
	delete(t.Ipv4, oldK)
	return nil
}

// GetOrCreateIpv4 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) GetOrCreateIpv4(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union) *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 {

	key := Application

	if v, ok := t.Ipv4[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv4(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv4 got unexpected error: %v", err))
	}
	return v
}

// GetIpv4 retrieves the value with the specified key from
// the Ipv4 map field of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) GetIpv4(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union) *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv4[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv4 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) DeleteIpv4(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union) {
	key := Application

	delete(t.Ipv4, key)
}

// AppendIpv4 appends the supplied NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 struct to the
// list Ipv4 of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) AppendIpv4(v *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv4 == nil {
		t.Ipv4 = make(map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4)
	}

	if _, ok := t.Ipv4[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv4 %v", key)
	}

	t.Ipv4[key] = v
	return nil
}

// NewIpv6 creates a new entry in the Ipv6 list of the
// NokiaConf_Configure_Groups_Group_System_Security_SourceAddress struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) NewIpv6(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union) (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6)
	}

	key := Application

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Ipv6[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Ipv6", key)
	}

	t.Ipv6[key] = &NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6{
		Application: Application,
	}

	return t.Ipv6[key], nil
}

// RenameIpv6 renames an entry in the list Ipv6 within
// the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) RenameIpv6(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union) error {
	if _, ok := t.Ipv6[newK]; ok {
		return fmt.Errorf("key %v already exists in Ipv6", newK)
	}

	e, ok := t.Ipv6[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Ipv6", oldK)
	}
	e.Application = newK

	t.Ipv6[newK] = e
	delete(t.Ipv6, oldK)
	return nil
}

// GetOrCreateIpv6 retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) GetOrCreateIpv6(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union) *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 {

	key := Application

	if v, ok := t.Ipv6[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpv6(Application)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpv6 got unexpected error: %v", err))
	}
	return v
}

// GetIpv6 retrieves the value with the specified key from
// the Ipv6 map field of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) GetIpv6(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union) *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 {

	if t == nil {
		return nil
	}

	key := Application

	if lm, ok := t.Ipv6[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpv6 deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) DeleteIpv6(Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union) {
	key := Application

	delete(t.Ipv6, key)
}

// AppendIpv6 appends the supplied NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 struct to the
// list Ipv6 of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) AppendIpv6(v *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) error {
	key := v.Application

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Ipv6 == nil {
		t.Ipv6 = make(map[NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union]*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6)
	}

	if _, ok := t.Ipv6[key]; ok {
		return fmt.Errorf("duplicate key for list Ipv6 %v", key)
	}

	t.Ipv6[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Ipv4 {
		e.PopulateDefaults()
	}
	for _, e := range t.Ipv6 {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_SourceAddress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 represents the /nokia-conf/configure/groups/group/system/security/source-address/ipv4 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 struct {
	Address       *string                                                                               `path:"address" module:"nokia-conf"`
	Application   NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union `path:"application" module:"nokia-conf"`
	InterfaceName *string                                                                               `path:"interface-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) GetApplication() NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4_Application_Union {
	if t == nil || t.Application == nil {
		return nil
	}
	return t.Application
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 represents the /nokia-conf/configure/groups/group/system/security/source-address/ipv6 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 struct {
	Address     *string                                                                               `path:"address" module:"nokia-conf"`
	Application NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union `path:"application" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) IsYANGGoStruct() {}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetApplication retrieves the value of the leaf Application from the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Application is set, it can
// safely use t.GetApplication() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Application == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) GetApplication() NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6_Application_Union {
	if t == nil || t.Application == nil {
		return nil
	}
	return t.Application
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6 struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"application": t.Application,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6.
func (*NokiaConf_Configure_Groups_Group_System_Security_SourceAddress_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh represents the /nokia-conf/configure/groups/group/system/security/ssh YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh struct {
	ClientCipherListV1 *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 `path:"client-cipher-list-v1" module:"nokia-conf" yangPresence:"true"`
	ClientCipherListV2 *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 `path:"client-cipher-list-v2" module:"nokia-conf" yangPresence:"true"`
	ClientKexListV2    *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2    `path:"client-kex-list-v2" module:"nokia-conf"`
	ClientMacListV2    *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2    `path:"client-mac-list-v2" module:"nokia-conf"`
	KeyReExchange      *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange      `path:"key-re-exchange" module:"nokia-conf"`
	PreserveKey        *bool                                                                    `path:"preserve-key" module:"nokia-conf"`
	ServerAdminState   E_NokiaTypesSros_AdminState                                              `path:"server-admin-state" module:"nokia-conf"`
	ServerCipherListV1 *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 `path:"server-cipher-list-v1" module:"nokia-conf" yangPresence:"true"`
	ServerCipherListV2 *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 `path:"server-cipher-list-v2" module:"nokia-conf" yangPresence:"true"`
	ServerKexListV2    *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2    `path:"server-kex-list-v2" module:"nokia-conf"`
	ServerMacListV2    *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2    `path:"server-mac-list-v2" module:"nokia-conf"`
	Version            E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_Version           `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh) IsYANGGoStruct() {}

// GetOrCreateClientCipherListV1 retrieves the value of the ClientCipherListV1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateClientCipherListV1() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 {
	if t.ClientCipherListV1 != nil {
		return t.ClientCipherListV1
	}
	t.ClientCipherListV1 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1{}
	return t.ClientCipherListV1
}

// GetOrCreateClientCipherListV2 retrieves the value of the ClientCipherListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateClientCipherListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 {
	if t.ClientCipherListV2 != nil {
		return t.ClientCipherListV2
	}
	t.ClientCipherListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2{}
	return t.ClientCipherListV2
}

// GetOrCreateClientKexListV2 retrieves the value of the ClientKexListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateClientKexListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 {
	if t.ClientKexListV2 != nil {
		return t.ClientKexListV2
	}
	t.ClientKexListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2{}
	return t.ClientKexListV2
}

// GetOrCreateClientMacListV2 retrieves the value of the ClientMacListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateClientMacListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 {
	if t.ClientMacListV2 != nil {
		return t.ClientMacListV2
	}
	t.ClientMacListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2{}
	return t.ClientMacListV2
}

// GetOrCreateKeyReExchange retrieves the value of the KeyReExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateKeyReExchange() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange {
	if t.KeyReExchange != nil {
		return t.KeyReExchange
	}
	t.KeyReExchange = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange{}
	return t.KeyReExchange
}

// GetOrCreateServerCipherListV1 retrieves the value of the ServerCipherListV1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateServerCipherListV1() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 {
	if t.ServerCipherListV1 != nil {
		return t.ServerCipherListV1
	}
	t.ServerCipherListV1 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1{}
	return t.ServerCipherListV1
}

// GetOrCreateServerCipherListV2 retrieves the value of the ServerCipherListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateServerCipherListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 {
	if t.ServerCipherListV2 != nil {
		return t.ServerCipherListV2
	}
	t.ServerCipherListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2{}
	return t.ServerCipherListV2
}

// GetOrCreateServerKexListV2 retrieves the value of the ServerKexListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateServerKexListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 {
	if t.ServerKexListV2 != nil {
		return t.ServerKexListV2
	}
	t.ServerKexListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2{}
	return t.ServerKexListV2
}

// GetOrCreateServerMacListV2 retrieves the value of the ServerMacListV2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetOrCreateServerMacListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 {
	if t.ServerMacListV2 != nil {
		return t.ServerMacListV2
	}
	t.ServerMacListV2 = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2{}
	return t.ServerMacListV2
}

// GetClientCipherListV1 returns the value of the ClientCipherListV1 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ClientCipherListV1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetClientCipherListV1() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 {
	if t != nil && t.ClientCipherListV1 != nil {
		return t.ClientCipherListV1
	}
	return nil
}

// GetClientCipherListV2 returns the value of the ClientCipherListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ClientCipherListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetClientCipherListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 {
	if t != nil && t.ClientCipherListV2 != nil {
		return t.ClientCipherListV2
	}
	return nil
}

// GetClientKexListV2 returns the value of the ClientKexListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ClientKexListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetClientKexListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 {
	if t != nil && t.ClientKexListV2 != nil {
		return t.ClientKexListV2
	}
	return nil
}

// GetClientMacListV2 returns the value of the ClientMacListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ClientMacListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetClientMacListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 {
	if t != nil && t.ClientMacListV2 != nil {
		return t.ClientMacListV2
	}
	return nil
}

// GetKeyReExchange returns the value of the KeyReExchange struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field KeyReExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetKeyReExchange() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange {
	if t != nil && t.KeyReExchange != nil {
		return t.KeyReExchange
	}
	return nil
}

// GetServerCipherListV1 returns the value of the ServerCipherListV1 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ServerCipherListV1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetServerCipherListV1() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 {
	if t != nil && t.ServerCipherListV1 != nil {
		return t.ServerCipherListV1
	}
	return nil
}

// GetServerCipherListV2 returns the value of the ServerCipherListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ServerCipherListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetServerCipherListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 {
	if t != nil && t.ServerCipherListV2 != nil {
		return t.ServerCipherListV2
	}
	return nil
}

// GetServerKexListV2 returns the value of the ServerKexListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ServerKexListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetServerKexListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 {
	if t != nil && t.ServerKexListV2 != nil {
		return t.ServerKexListV2
	}
	return nil
}

// GetServerMacListV2 returns the value of the ServerMacListV2 struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh. If the receiver or the field ServerMacListV2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetServerMacListV2() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 {
	if t != nil && t.ServerMacListV2 != nil {
		return t.ServerMacListV2
	}
	return nil
}

// GetPreserveKey retrieves the value of the leaf PreserveKey from the NokiaConf_Configure_Groups_Group_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreserveKey is set, it can
// safely use t.GetPreserveKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreserveKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetPreserveKey() bool {
	if t == nil || t.PreserveKey == nil {
		return false
	}
	return *t.PreserveKey
}

// GetServerAdminState retrieves the value of the leaf ServerAdminState from the NokiaConf_Configure_Groups_Group_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerAdminState is set, it can
// safely use t.GetServerAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerAdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetServerAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.ServerAdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.ServerAdminState
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Security_Ssh
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) GetVersion() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_Version {
	if t == nil || t.Version == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_Ssh_Version_2
	}
	return t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreserveKey == nil {
		var v bool = false
		t.PreserveKey = &v
	}
	if t.ServerAdminState == 0 {
		t.ServerAdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Version == 0 {
		t.Version = NokiaConf_Configure_Groups_Group_System_Security_Ssh_Version_2
	}
	t.ClientCipherListV1.PopulateDefaults()
	t.ClientCipherListV2.PopulateDefaults()
	t.ClientKexListV2.PopulateDefaults()
	t.ClientMacListV2.PopulateDefaults()
	t.KeyReExchange.PopulateDefaults()
	t.ServerCipherListV1.PopulateDefaults()
	t.ServerCipherListV2.PopulateDefaults()
	t.ServerKexListV2.PopulateDefaults()
	t.ServerMacListV2.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 represents the /nokia-conf/configure/groups/group/system/security/ssh/client-cipher-list-v1 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 struct {
	Cipher map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher represents the /nokia-conf/configure/groups/group/system/security/ssh/client-cipher-list-v1/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV1_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/client-cipher-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 struct {
	Cipher map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher represents the /nokia-conf/configure/groups/group/system/security/ssh/client-cipher-list-v2/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientCipherListV2_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/client-kex-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 struct {
	Kex map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex `path:"kex" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) IsYANGGoStruct() {}

// NewKex creates a new entry in the Kex list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) NewKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Kex[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Kex", key)
	}

	t.Kex[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex{
		Index: Index,
	}

	return t.Kex[key], nil
}

// RenameKex renames an entry in the list Kex within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) RenameKex(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union) error {
	if _, ok := t.Kex[newK]; ok {
		return fmt.Errorf("key %v already exists in Kex", newK)
	}

	e, ok := t.Kex[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Kex", oldK)
	}
	e.Index = newK

	t.Kex[newK] = e
	delete(t.Kex, oldK)
	return nil
}

// GetOrCreateKex retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) GetOrCreateKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex {

	key := Index

	if v, ok := t.Kex[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKex(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKex got unexpected error: %v", err))
	}
	return v
}

// GetKex retrieves the value with the specified key from
// the Kex map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) GetKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Kex[key]; ok {
		return lm
	}
	return nil
}

// DeleteKex deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) DeleteKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union) {
	key := Index

	delete(t.Kex, key)
}

// AppendKex appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex struct to the
// list Kex of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) AppendKex(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex)
	}

	if _, ok := t.Kex[key]; ok {
		return fmt.Errorf("duplicate key for list Kex %v", key)
	}

	t.Kex[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Kex {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex represents the /nokia-conf/configure/groups/group/system/security/ssh/client-kex-list-v2/kex YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientKexListV2_Kex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/client-mac-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 struct {
	Mac map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) NewMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac{
		Index: Index,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) RenameMac(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Index = newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) GetOrCreateMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac {

	key := Index

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) GetMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) DeleteMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union) {
	key := Index

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) AppendMac(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac represents the /nokia-conf/configure/groups/group/system/security/ssh/client-mac-list-v2/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ClientMacListV2_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange represents the /nokia-conf/configure/groups/group/system/security/ssh/key-re-exchange YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange struct {
	Client *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client `path:"client" module:"nokia-conf" yangPresence:"true"`
	Server *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server `path:"server" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) IsYANGGoStruct() {}

// GetOrCreateClient retrieves the value of the Client field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) GetOrCreateClient() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client {
	if t.Client != nil {
		return t.Client
	}
	t.Client = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client{}
	return t.Client
}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server{}
	return t.Server
}

// GetClient returns the value of the Client struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange. If the receiver or the field Client is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) GetClient() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client {
	if t != nil && t.Client != nil {
		return t.Client
	}
	return nil
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) GetServer() *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Client.PopulateDefaults()
	t.Server.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client represents the /nokia-conf/configure/groups/group/system/security/ssh/key-re-exchange/client YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client struct {
	AdminState E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Mbytes     NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client_Mbytes_Union  `path:"mbytes" module:"nokia-conf"`
	Minutes    NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client_Minutes_Union `path:"minutes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMbytes retrieves the value of the leaf Mbytes from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbytes is set, it can
// safely use t.GetMbytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) GetMbytes() NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client_Mbytes_Union {
	if t == nil || t.Mbytes == nil {
		return UnionUint32(1024)
	}
	return t.Mbytes
}

// GetMinutes retrieves the value of the leaf Minutes from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minutes is set, it can
// safely use t.GetMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) GetMinutes() NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client_Minutes_Union {
	if t == nil || t.Minutes == nil {
		return UnionUint32(60)
	}
	return t.Minutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mbytes == nil {
		t.Mbytes = UnionUint32(1024)
	}
	if t.Minutes == nil {
		t.Minutes = UnionUint32(60)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Client) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server represents the /nokia-conf/configure/groups/group/system/security/ssh/key-re-exchange/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server struct {
	AdminState E_NokiaTypesSros_AdminState                                                             `path:"admin-state" module:"nokia-conf"`
	Mbytes     NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server_Mbytes_Union  `path:"mbytes" module:"nokia-conf"`
	Minutes    NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server_Minutes_Union `path:"minutes" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetMbytes retrieves the value of the leaf Mbytes from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mbytes is set, it can
// safely use t.GetMbytes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mbytes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) GetMbytes() NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server_Mbytes_Union {
	if t == nil || t.Mbytes == nil {
		return UnionUint32(1024)
	}
	return t.Mbytes
}

// GetMinutes retrieves the value of the leaf Minutes from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Minutes is set, it can
// safely use t.GetMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Minutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) GetMinutes() NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server_Minutes_Union {
	if t == nil || t.Minutes == nil {
		return UnionUint32(60)
	}
	return t.Minutes
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Mbytes == nil {
		t.Mbytes = UnionUint32(1024)
	}
	if t.Minutes == nil {
		t.Minutes = UnionUint32(60)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_KeyReExchange_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 represents the /nokia-conf/configure/groups/group/system/security/ssh/server-cipher-list-v1 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 struct {
	Cipher map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher represents the /nokia-conf/configure/groups/group/system/security/ssh/server-cipher-list-v1/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV1_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/server-cipher-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 struct {
	Cipher map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher `path:"cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher represents the /nokia-conf/configure/groups/group/system/security/ssh/server-cipher-list-v2/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerCipherListV2_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/server-kex-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 struct {
	Kex map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex `path:"kex" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) IsYANGGoStruct() {}

// NewKex creates a new entry in the Kex list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) NewKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Kex[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Kex", key)
	}

	t.Kex[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex{
		Index: Index,
	}

	return t.Kex[key], nil
}

// RenameKex renames an entry in the list Kex within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) RenameKex(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union) error {
	if _, ok := t.Kex[newK]; ok {
		return fmt.Errorf("key %v already exists in Kex", newK)
	}

	e, ok := t.Kex[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Kex", oldK)
	}
	e.Index = newK

	t.Kex[newK] = e
	delete(t.Kex, oldK)
	return nil
}

// GetOrCreateKex retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) GetOrCreateKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex {

	key := Index

	if v, ok := t.Kex[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewKex(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateKex got unexpected error: %v", err))
	}
	return v
}

// GetKex retrieves the value with the specified key from
// the Kex map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) GetKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Kex[key]; ok {
		return lm
	}
	return nil
}

// DeleteKex deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) DeleteKex(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union) {
	key := Index

	delete(t.Kex, key)
}

// AppendKex appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex struct to the
// list Kex of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) AppendKex(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Kex == nil {
		t.Kex = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex)
	}

	if _, ok := t.Kex[key]; ok {
		return fmt.Errorf("duplicate key for list Kex %v", key)
	}

	t.Kex[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Kex {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex represents the /nokia-conf/configure/groups/group/system/security/ssh/server-kex-list-v2/kex YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerKexListV2_Kex) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 represents the /nokia-conf/configure/groups/group/system/security/ssh/server-mac-list-v2 YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 struct {
	Mac map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac `path:"mac" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) IsYANGGoStruct() {}

// NewMac creates a new entry in the Mac list of the
// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) NewMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mac[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mac", key)
	}

	t.Mac[key] = &NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac{
		Index: Index,
	}

	return t.Mac[key], nil
}

// RenameMac renames an entry in the list Mac within
// the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2 struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) RenameMac(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union) error {
	if _, ok := t.Mac[newK]; ok {
		return fmt.Errorf("key %v already exists in Mac", newK)
	}

	e, ok := t.Mac[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mac", oldK)
	}
	e.Index = newK

	t.Mac[newK] = e
	delete(t.Mac, oldK)
	return nil
}

// GetOrCreateMac retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) GetOrCreateMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac {

	key := Index

	if v, ok := t.Mac[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMac(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMac got unexpected error: %v", err))
	}
	return v
}

// GetMac retrieves the value with the specified key from
// the Mac map field of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) GetMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Mac[key]; ok {
		return lm
	}
	return nil
}

// DeleteMac deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) DeleteMac(Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union) {
	key := Index

	delete(t.Mac, key)
}

// AppendMac appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac struct to the
// list Mac of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) AppendMac(v *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mac == nil {
		t.Mac = make(map[NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac)
	}

	if _, ok := t.Mac[key]; ok {
		return fmt.Errorf("duplicate key for list Mac %v", key)
	}

	t.Mac[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mac {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac represents the /nokia-conf/configure/groups/group/system/security/ssh/server-mac-list-v2/mac YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) IsYANGGoStruct() {}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac.
func (*NokiaConf_Configure_Groups_Group_System_Security_Ssh_ServerMacListV2_Mac) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords represents the /nokia-conf/configure/groups/group/system/security/system-passwords YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords struct {
	AdminPassword *string `path:"admin-password" module:"nokia-conf"`
	VsdPassword   *string `path:"vsd-password" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) IsYANGGoStruct() {}

// GetAdminPassword retrieves the value of the leaf AdminPassword from the NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminPassword is set, it can
// safely use t.GetAdminPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminPassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) GetAdminPassword() string {
	if t == nil || t.AdminPassword == nil {
		return ""
	}
	return *t.AdminPassword
}

// GetVsdPassword retrieves the value of the leaf VsdPassword from the NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VsdPassword is set, it can
// safely use t.GetVsdPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VsdPassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) GetVsdPassword() string {
	if t == nil || t.VsdPassword == nil {
		return ""
	}
	return *t.VsdPassword
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords.
func (*NokiaConf_Configure_Groups_Group_System_Security_SystemPasswords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_TechSupport represents the /nokia-conf/configure/groups/group/system/security/tech-support YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_TechSupport struct {
	TsLocation *string `path:"ts-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_TechSupport implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_TechSupport) IsYANGGoStruct() {}

// GetTsLocation retrieves the value of the leaf TsLocation from the NokiaConf_Configure_Groups_Group_System_Security_TechSupport
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsLocation is set, it can
// safely use t.GetTsLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_TechSupport) GetTsLocation() string {
	if t == nil || t.TsLocation == nil {
		return ""
	}
	return *t.TsLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_TechSupport
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_TechSupport) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_TechSupport) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_TechSupport"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_TechSupport) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_TechSupport) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_TechSupport.
func (*NokiaConf_Configure_Groups_Group_System_Security_TechSupport) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls represents the /nokia-conf/configure/groups/group/system/security/tls YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls struct {
	CertProfile        map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile        `path:"cert-profile" module:"nokia-conf"`
	ClientCipherList   map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList   `path:"client-cipher-list" module:"nokia-conf"`
	ClientTlsProfile   map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile   `path:"client-tls-profile" module:"nokia-conf"`
	ServerCipherList   map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList   `path:"server-cipher-list" module:"nokia-conf"`
	ServerTlsProfile   map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile   `path:"server-tls-profile" module:"nokia-conf"`
	TrustAnchorProfile map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls) IsYANGGoStruct() {}

// NewCertProfile creates a new entry in the CertProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewCertProfile(CertProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile)
	}

	key := CertProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CertProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CertProfile", key)
	}

	t.CertProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile{
		CertProfileName: &CertProfileName,
	}

	return t.CertProfile[key], nil
}

// RenameCertProfile renames an entry in the list CertProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameCertProfile(oldK, newK string) error {
	if _, ok := t.CertProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CertProfile", newK)
	}

	e, ok := t.CertProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CertProfile", oldK)
	}
	e.CertProfileName = &newK

	t.CertProfile[newK] = e
	delete(t.CertProfile, oldK)
	return nil
}

// GetOrCreateCertProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateCertProfile(CertProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile {

	key := CertProfileName

	if v, ok := t.CertProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCertProfile(CertProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCertProfile got unexpected error: %v", err))
	}
	return v
}

// GetCertProfile retrieves the value with the specified key from
// the CertProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetCertProfile(CertProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile {

	if t == nil {
		return nil
	}

	key := CertProfileName

	if lm, ok := t.CertProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCertProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteCertProfile(CertProfileName string) {
	key := CertProfileName

	delete(t.CertProfile, key)
}

// AppendCertProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile struct to the
// list CertProfile of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendCertProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) error {
	if v.CertProfileName == nil {
		return fmt.Errorf("invalid nil key received for CertProfileName")
	}

	key := *v.CertProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile)
	}

	if _, ok := t.CertProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CertProfile %v", key)
	}

	t.CertProfile[key] = v
	return nil
}

// NewClientCipherList creates a new entry in the ClientCipherList list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewClientCipherList(ClientCipherListName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientCipherList == nil {
		t.ClientCipherList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList)
	}

	key := ClientCipherListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClientCipherList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClientCipherList", key)
	}

	t.ClientCipherList[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList{
		ClientCipherListName: &ClientCipherListName,
	}

	return t.ClientCipherList[key], nil
}

// RenameClientCipherList renames an entry in the list ClientCipherList within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameClientCipherList(oldK, newK string) error {
	if _, ok := t.ClientCipherList[newK]; ok {
		return fmt.Errorf("key %v already exists in ClientCipherList", newK)
	}

	e, ok := t.ClientCipherList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClientCipherList", oldK)
	}
	e.ClientCipherListName = &newK

	t.ClientCipherList[newK] = e
	delete(t.ClientCipherList, oldK)
	return nil
}

// GetOrCreateClientCipherList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateClientCipherList(ClientCipherListName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList {

	key := ClientCipherListName

	if v, ok := t.ClientCipherList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClientCipherList(ClientCipherListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClientCipherList got unexpected error: %v", err))
	}
	return v
}

// GetClientCipherList retrieves the value with the specified key from
// the ClientCipherList map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetClientCipherList(ClientCipherListName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList {

	if t == nil {
		return nil
	}

	key := ClientCipherListName

	if lm, ok := t.ClientCipherList[key]; ok {
		return lm
	}
	return nil
}

// DeleteClientCipherList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteClientCipherList(ClientCipherListName string) {
	key := ClientCipherListName

	delete(t.ClientCipherList, key)
}

// AppendClientCipherList appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct to the
// list ClientCipherList of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendClientCipherList(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) error {
	if v.ClientCipherListName == nil {
		return fmt.Errorf("invalid nil key received for ClientCipherListName")
	}

	key := *v.ClientCipherListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientCipherList == nil {
		t.ClientCipherList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList)
	}

	if _, ok := t.ClientCipherList[key]; ok {
		return fmt.Errorf("duplicate key for list ClientCipherList %v", key)
	}

	t.ClientCipherList[key] = v
	return nil
}

// NewClientTlsProfile creates a new entry in the ClientTlsProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewClientTlsProfile(ClientProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientTlsProfile == nil {
		t.ClientTlsProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile)
	}

	key := ClientProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClientTlsProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClientTlsProfile", key)
	}

	t.ClientTlsProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile{
		ClientProfileName: &ClientProfileName,
	}

	return t.ClientTlsProfile[key], nil
}

// RenameClientTlsProfile renames an entry in the list ClientTlsProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameClientTlsProfile(oldK, newK string) error {
	if _, ok := t.ClientTlsProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in ClientTlsProfile", newK)
	}

	e, ok := t.ClientTlsProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClientTlsProfile", oldK)
	}
	e.ClientProfileName = &newK

	t.ClientTlsProfile[newK] = e
	delete(t.ClientTlsProfile, oldK)
	return nil
}

// GetOrCreateClientTlsProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateClientTlsProfile(ClientProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile {

	key := ClientProfileName

	if v, ok := t.ClientTlsProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClientTlsProfile(ClientProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClientTlsProfile got unexpected error: %v", err))
	}
	return v
}

// GetClientTlsProfile retrieves the value with the specified key from
// the ClientTlsProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetClientTlsProfile(ClientProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile {

	if t == nil {
		return nil
	}

	key := ClientProfileName

	if lm, ok := t.ClientTlsProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteClientTlsProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteClientTlsProfile(ClientProfileName string) {
	key := ClientProfileName

	delete(t.ClientTlsProfile, key)
}

// AppendClientTlsProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile struct to the
// list ClientTlsProfile of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendClientTlsProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) error {
	if v.ClientProfileName == nil {
		return fmt.Errorf("invalid nil key received for ClientProfileName")
	}

	key := *v.ClientProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientTlsProfile == nil {
		t.ClientTlsProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile)
	}

	if _, ok := t.ClientTlsProfile[key]; ok {
		return fmt.Errorf("duplicate key for list ClientTlsProfile %v", key)
	}

	t.ClientTlsProfile[key] = v
	return nil
}

// NewServerCipherList creates a new entry in the ServerCipherList list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewServerCipherList(ServerCipherListName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerCipherList == nil {
		t.ServerCipherList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList)
	}

	key := ServerCipherListName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerCipherList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerCipherList", key)
	}

	t.ServerCipherList[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList{
		ServerCipherListName: &ServerCipherListName,
	}

	return t.ServerCipherList[key], nil
}

// RenameServerCipherList renames an entry in the list ServerCipherList within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameServerCipherList(oldK, newK string) error {
	if _, ok := t.ServerCipherList[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerCipherList", newK)
	}

	e, ok := t.ServerCipherList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerCipherList", oldK)
	}
	e.ServerCipherListName = &newK

	t.ServerCipherList[newK] = e
	delete(t.ServerCipherList, oldK)
	return nil
}

// GetOrCreateServerCipherList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateServerCipherList(ServerCipherListName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList {

	key := ServerCipherListName

	if v, ok := t.ServerCipherList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerCipherList(ServerCipherListName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerCipherList got unexpected error: %v", err))
	}
	return v
}

// GetServerCipherList retrieves the value with the specified key from
// the ServerCipherList map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetServerCipherList(ServerCipherListName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList {

	if t == nil {
		return nil
	}

	key := ServerCipherListName

	if lm, ok := t.ServerCipherList[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerCipherList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteServerCipherList(ServerCipherListName string) {
	key := ServerCipherListName

	delete(t.ServerCipherList, key)
}

// AppendServerCipherList appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct to the
// list ServerCipherList of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendServerCipherList(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) error {
	if v.ServerCipherListName == nil {
		return fmt.Errorf("invalid nil key received for ServerCipherListName")
	}

	key := *v.ServerCipherListName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerCipherList == nil {
		t.ServerCipherList = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList)
	}

	if _, ok := t.ServerCipherList[key]; ok {
		return fmt.Errorf("duplicate key for list ServerCipherList %v", key)
	}

	t.ServerCipherList[key] = v
	return nil
}

// NewServerTlsProfile creates a new entry in the ServerTlsProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewServerTlsProfile(ServerProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerTlsProfile == nil {
		t.ServerTlsProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile)
	}

	key := ServerProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServerTlsProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServerTlsProfile", key)
	}

	t.ServerTlsProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile{
		ServerProfileName: &ServerProfileName,
	}

	return t.ServerTlsProfile[key], nil
}

// RenameServerTlsProfile renames an entry in the list ServerTlsProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameServerTlsProfile(oldK, newK string) error {
	if _, ok := t.ServerTlsProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in ServerTlsProfile", newK)
	}

	e, ok := t.ServerTlsProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServerTlsProfile", oldK)
	}
	e.ServerProfileName = &newK

	t.ServerTlsProfile[newK] = e
	delete(t.ServerTlsProfile, oldK)
	return nil
}

// GetOrCreateServerTlsProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateServerTlsProfile(ServerProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile {

	key := ServerProfileName

	if v, ok := t.ServerTlsProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServerTlsProfile(ServerProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServerTlsProfile got unexpected error: %v", err))
	}
	return v
}

// GetServerTlsProfile retrieves the value with the specified key from
// the ServerTlsProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetServerTlsProfile(ServerProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile {

	if t == nil {
		return nil
	}

	key := ServerProfileName

	if lm, ok := t.ServerTlsProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteServerTlsProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteServerTlsProfile(ServerProfileName string) {
	key := ServerProfileName

	delete(t.ServerTlsProfile, key)
}

// AppendServerTlsProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile struct to the
// list ServerTlsProfile of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendServerTlsProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) error {
	if v.ServerProfileName == nil {
		return fmt.Errorf("invalid nil key received for ServerProfileName")
	}

	key := *v.ServerProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServerTlsProfile == nil {
		t.ServerTlsProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile)
	}

	if _, ok := t.ServerTlsProfile[key]; ok {
		return fmt.Errorf("duplicate key for list ServerTlsProfile %v", key)
	}

	t.ServerTlsProfile[key] = v
	return nil
}

// NewTrustAnchorProfile creates a new entry in the TrustAnchorProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) NewTrustAnchorProfile(TrustAnchorProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile)
	}

	key := TrustAnchorProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchorProfile", key)
	}

	t.TrustAnchorProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile{
		TrustAnchorProfileName: &TrustAnchorProfileName,
	}

	return t.TrustAnchorProfile[key], nil
}

// RenameTrustAnchorProfile renames an entry in the list TrustAnchorProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) RenameTrustAnchorProfile(oldK, newK string) error {
	if _, ok := t.TrustAnchorProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchorProfile", newK)
	}

	e, ok := t.TrustAnchorProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchorProfile", oldK)
	}
	e.TrustAnchorProfileName = &newK

	t.TrustAnchorProfile[newK] = e
	delete(t.TrustAnchorProfile, oldK)
	return nil
}

// GetOrCreateTrustAnchorProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetOrCreateTrustAnchorProfile(TrustAnchorProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile {

	key := TrustAnchorProfileName

	if v, ok := t.TrustAnchorProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchorProfile(TrustAnchorProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchorProfile got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchorProfile retrieves the value with the specified key from
// the TrustAnchorProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) GetTrustAnchorProfile(TrustAnchorProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile {

	if t == nil {
		return nil
	}

	key := TrustAnchorProfileName

	if lm, ok := t.TrustAnchorProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchorProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) DeleteTrustAnchorProfile(TrustAnchorProfileName string) {
	key := TrustAnchorProfileName

	delete(t.TrustAnchorProfile, key)
}

// AppendTrustAnchorProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile struct to the
// list TrustAnchorProfile of NokiaConf_Configure_Groups_Group_System_Security_Tls. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) AppendTrustAnchorProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) error {
	if v.TrustAnchorProfileName == nil {
		return fmt.Errorf("invalid nil key received for TrustAnchorProfileName")
	}

	key := *v.TrustAnchorProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile)
	}

	if _, ok := t.TrustAnchorProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchorProfile %v", key)
	}

	t.TrustAnchorProfile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CertProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.ClientCipherList {
		e.PopulateDefaults()
	}
	for _, e := range t.ClientTlsProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerCipherList {
		e.PopulateDefaults()
	}
	for _, e := range t.ServerTlsProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.TrustAnchorProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile represents the /nokia-conf/configure/groups/group/system/security/tls/cert-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile struct {
	AdminState      E_NokiaTypesSros_AdminState                                                                                                                                      `path:"admin-state" module:"nokia-conf"`
	CertProfileName *string                                                                                                                                                          `path:"cert-profile-name" module:"nokia-conf"`
	Entry           map[NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) NewEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry)
	}

	key := EntryId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry{
		EntryId: EntryId,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) RenameEntry(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.EntryId = newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) GetOrCreateEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry {

	key := EntryId

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(EntryId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) GetEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry {

	if t == nil {
		return nil
	}

	key := EntryId

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) DeleteEntry(EntryId NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union) {
	key := EntryId

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry struct to the
// list Entry of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) AppendEntry(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) error {
	key := v.EntryId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCertProfileName retrieves the value of the leaf CertProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfileName is set, it can
// safely use t.GetCertProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) GetCertProfileName() string {
	if t == nil || t.CertProfileName == nil {
		return ""
	}
	return *t.CertProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CertProfileName == nil {
		return nil, fmt.Errorf("nil value for key CertProfileName")
	}

	return map[string]interface{}{
		"cert-profile-name": *t.CertProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry represents the /nokia-conf/configure/groups/group/system/security/tls/cert-profile/entry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry struct {
	CertificateFile *string                                                                              `path:"certificate-file" module:"nokia-conf"`
	EntryId         NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union `path:"entry-id" module:"nokia-conf"`
	KeyFile         *string                                                                              `path:"key-file" module:"nokia-conf"`
	SendChain       *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain    `path:"send-chain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) IsYANGGoStruct() {}

// GetOrCreateSendChain retrieves the value of the SendChain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) GetOrCreateSendChain() *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain {
	if t.SendChain != nil {
		return t.SendChain
	}
	t.SendChain = &NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain{}
	return t.SendChain
}

// GetSendChain returns the value of the SendChain struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry. If the receiver or the field SendChain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) GetSendChain() *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain {
	if t != nil && t.SendChain != nil {
		return t.SendChain
	}
	return nil
}

// GetCertificateFile retrieves the value of the leaf CertificateFile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertificateFile is set, it can
// safely use t.GetCertificateFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertificateFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) GetCertificateFile() string {
	if t == nil || t.CertificateFile == nil {
		return ""
	}
	return *t.CertificateFile
}

// GetEntryId retrieves the value of the leaf EntryId from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EntryId is set, it can
// safely use t.GetEntryId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EntryId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) GetEntryId() NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_EntryId_Union {
	if t == nil || t.EntryId == nil {
		return nil
	}
	return t.EntryId
}

// GetKeyFile retrieves the value of the leaf KeyFile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyFile is set, it can
// safely use t.GetKeyFile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyFile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) GetKeyFile() string {
	if t == nil || t.KeyFile == nil {
		return ""
	}
	return *t.KeyFile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.SendChain.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entry-id": t.EntryId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain represents the /nokia-conf/configure/groups/group/system/security/tls/cert-profile/entry/send-chain YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain struct {
	CaProfile map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile `path:"ca-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) IsYANGGoStruct() {
}

// NewCaProfile creates a new entry in the CaProfile list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) NewCaProfile(CaProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CaProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CaProfile", key)
	}

	t.CaProfile[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile{
		CaProfileName: &CaProfileName,
	}

	return t.CaProfile[key], nil
}

// RenameCaProfile renames an entry in the list CaProfile within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) RenameCaProfile(oldK, newK string) error {
	if _, ok := t.CaProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CaProfile", newK)
	}

	e, ok := t.CaProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CaProfile", oldK)
	}
	e.CaProfileName = &newK

	t.CaProfile[newK] = e
	delete(t.CaProfile, oldK)
	return nil
}

// GetOrCreateCaProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) GetOrCreateCaProfile(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile {

	key := CaProfileName

	if v, ok := t.CaProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCaProfile(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCaProfile got unexpected error: %v", err))
	}
	return v
}

// GetCaProfile retrieves the value with the specified key from
// the CaProfile map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) GetCaProfile(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.CaProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCaProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) DeleteCaProfile(CaProfileName string) {
	key := CaProfileName

	delete(t.CaProfile, key)
}

// AppendCaProfile appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct to the
// list CaProfile of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) AppendCaProfile(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CaProfile == nil {
		t.CaProfile = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile)
	}

	if _, ok := t.CaProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CaProfile %v", key)
	}

	t.CaProfile[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.CaProfile {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile represents the /nokia-conf/configure/groups/group/system/security/tls/cert-profile/entry/send-chain/ca-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct {
	CaProfileName *string `path:"ca-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) IsYANGGoStruct() {
}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_CertProfile_Entry_SendChain_CaProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList represents the /nokia-conf/configure/groups/group/system/security/tls/client-cipher-list YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct {
	Cipher               map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher           `path:"cipher" module:"nokia-conf"`
	ClientCipherListName *string                                                                                                                                                                              `path:"client-cipher-list-name" module:"nokia-conf"`
	Tls12Cipher          map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher `path:"tls12-cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// NewTls12Cipher creates a new entry in the Tls12Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) NewTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tls12Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tls12Cipher", key)
	}

	t.Tls12Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher{
		Index: Index,
	}

	return t.Tls12Cipher[key], nil
}

// RenameTls12Cipher renames an entry in the list Tls12Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) RenameTls12Cipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union) error {
	if _, ok := t.Tls12Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Tls12Cipher", newK)
	}

	e, ok := t.Tls12Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tls12Cipher", oldK)
	}
	e.Index = newK

	t.Tls12Cipher[newK] = e
	delete(t.Tls12Cipher, oldK)
	return nil
}

// GetOrCreateTls12Cipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) GetOrCreateTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher {

	key := Index

	if v, ok := t.Tls12Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTls12Cipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTls12Cipher got unexpected error: %v", err))
	}
	return v
}

// GetTls12Cipher retrieves the value with the specified key from
// the Tls12Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) GetTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Tls12Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteTls12Cipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) DeleteTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union) {
	key := Index

	delete(t.Tls12Cipher, key)
}

// AppendTls12Cipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher struct to the
// list Tls12Cipher of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) AppendTls12Cipher(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher)
	}

	if _, ok := t.Tls12Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Tls12Cipher %v", key)
	}

	t.Tls12Cipher[key] = v
	return nil
}

// GetClientCipherListName retrieves the value of the leaf ClientCipherListName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientCipherListName is set, it can
// safely use t.GetClientCipherListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientCipherListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) GetClientCipherListName() string {
	if t == nil || t.ClientCipherListName == nil {
		return ""
	}
	return *t.ClientCipherListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
	for _, e := range t.Tls12Cipher {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientCipherListName == nil {
		return nil, fmt.Errorf("nil value for key ClientCipherListName")
	}

	return map[string]interface{}{
		"client-cipher-list-name": *t.ClientCipherListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher represents the /nokia-conf/configure/groups/group/system/security/tls/client-cipher-list/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher represents the /nokia-conf/configure/groups/group/system/security/tls/client-cipher-list/tls12-cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientCipherList_Tls12Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile represents the /nokia-conf/configure/groups/group/system/security/tls/client-tls-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	CertProfile        *string                     `path:"cert-profile" module:"nokia-conf"`
	CipherList         *string                     `path:"cipher-list" module:"nokia-conf"`
	ClientProfileName  *string                     `path:"client-profile-name" module:"nokia-conf"`
	TrustAnchorProfile *string                     `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetCipherList retrieves the value of the leaf CipherList from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CipherList is set, it can
// safely use t.GetCipherList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CipherList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) GetCipherList() string {
	if t == nil || t.CipherList == nil {
		return ""
	}
	return *t.CipherList
}

// GetClientProfileName retrieves the value of the leaf ClientProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientProfileName is set, it can
// safely use t.GetClientProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) GetClientProfileName() string {
	if t == nil || t.ClientProfileName == nil {
		return ""
	}
	return *t.ClientProfileName
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ClientProfileName == nil {
		return nil, fmt.Errorf("nil value for key ClientProfileName")
	}

	return map[string]interface{}{
		"client-profile-name": *t.ClientProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ClientTlsProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList represents the /nokia-conf/configure/groups/group/system/security/tls/server-cipher-list YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct {
	Cipher               map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher           `path:"cipher" module:"nokia-conf"`
	ServerCipherListName *string                                                                                                                                                                              `path:"server-cipher-list-name" module:"nokia-conf"`
	Tls12Cipher          map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher `path:"tls12-cipher" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) IsYANGGoStruct() {}

// NewCipher creates a new entry in the Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) NewCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Cipher", key)
	}

	t.Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher{
		Index: Index,
	}

	return t.Cipher[key], nil
}

// RenameCipher renames an entry in the list Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) RenameCipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union) error {
	if _, ok := t.Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Cipher", newK)
	}

	e, ok := t.Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Cipher", oldK)
	}
	e.Index = newK

	t.Cipher[newK] = e
	delete(t.Cipher, oldK)
	return nil
}

// GetOrCreateCipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) GetOrCreateCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher {

	key := Index

	if v, ok := t.Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCipher got unexpected error: %v", err))
	}
	return v
}

// GetCipher retrieves the value with the specified key from
// the Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) GetCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteCipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) DeleteCipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union) {
	key := Index

	delete(t.Cipher, key)
}

// AppendCipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher struct to the
// list Cipher of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) AppendCipher(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Cipher == nil {
		t.Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher)
	}

	if _, ok := t.Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Cipher %v", key)
	}

	t.Cipher[key] = v
	return nil
}

// NewTls12Cipher creates a new entry in the Tls12Cipher list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) NewTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher)
	}

	key := Index

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Tls12Cipher[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Tls12Cipher", key)
	}

	t.Tls12Cipher[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher{
		Index: Index,
	}

	return t.Tls12Cipher[key], nil
}

// RenameTls12Cipher renames an entry in the list Tls12Cipher within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) RenameTls12Cipher(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union) error {
	if _, ok := t.Tls12Cipher[newK]; ok {
		return fmt.Errorf("key %v already exists in Tls12Cipher", newK)
	}

	e, ok := t.Tls12Cipher[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Tls12Cipher", oldK)
	}
	e.Index = newK

	t.Tls12Cipher[newK] = e
	delete(t.Tls12Cipher, oldK)
	return nil
}

// GetOrCreateTls12Cipher retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) GetOrCreateTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher {

	key := Index

	if v, ok := t.Tls12Cipher[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTls12Cipher(Index)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTls12Cipher got unexpected error: %v", err))
	}
	return v
}

// GetTls12Cipher retrieves the value with the specified key from
// the Tls12Cipher map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) GetTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union) *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher {

	if t == nil {
		return nil
	}

	key := Index

	if lm, ok := t.Tls12Cipher[key]; ok {
		return lm
	}
	return nil
}

// DeleteTls12Cipher deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) DeleteTls12Cipher(Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union) {
	key := Index

	delete(t.Tls12Cipher, key)
}

// AppendTls12Cipher appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher struct to the
// list Tls12Cipher of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) AppendTls12Cipher(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) error {
	key := v.Index

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Tls12Cipher == nil {
		t.Tls12Cipher = make(map[NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union]*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher)
	}

	if _, ok := t.Tls12Cipher[key]; ok {
		return fmt.Errorf("duplicate key for list Tls12Cipher %v", key)
	}

	t.Tls12Cipher[key] = v
	return nil
}

// GetServerCipherListName retrieves the value of the leaf ServerCipherListName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerCipherListName is set, it can
// safely use t.GetServerCipherListName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerCipherListName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) GetServerCipherListName() string {
	if t == nil || t.ServerCipherListName == nil {
		return ""
	}
	return *t.ServerCipherListName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Cipher {
		e.PopulateDefaults()
	}
	for _, e := range t.Tls12Cipher {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerCipherListName == nil {
		return nil, fmt.Errorf("nil value for key ServerCipherListName")
	}

	return map[string]interface{}{
		"server-cipher-list-name": *t.ServerCipherListName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher represents the /nokia-conf/configure/groups/group/system/security/tls/server-cipher-list/cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher represents the /nokia-conf/configure/groups/group/system/security/tls/server-cipher-list/tls12-cipher YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher struct {
	Index NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union `path:"index" module:"nokia-conf"`
	Name  E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Name      `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) IsYANGGoStruct() {
}

// GetIndex retrieves the value of the leaf Index from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Index is set, it can
// safely use t.GetIndex() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Index == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) GetIndex() NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Index_Union {
	if t == nil || t.Index == nil {
		return nil
	}
	return t.Index
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) GetName() E_NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher_Name {
	if t == nil || t.Name == 0 {
		return 0
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"index": t.Index,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerCipherList_Tls12Cipher) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile represents the /nokia-conf/configure/groups/group/system/security/tls/server-tls-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile struct {
	AdminState          E_NokiaTypesSros_AdminState                                                               `path:"admin-state" module:"nokia-conf"`
	AuthenticateClient  *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient `path:"authenticate-client" module:"nokia-conf"`
	CertProfile         *string                                                                                   `path:"cert-profile" module:"nokia-conf"`
	CipherList          *string                                                                                   `path:"cipher-list" module:"nokia-conf"`
	ServerProfileName   *string                                                                                   `path:"server-profile-name" module:"nokia-conf"`
	TlsReNegotiateTimer *uint32                                                                                   `path:"tls-re-negotiate-timer" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) IsYANGGoStruct() {}

// GetOrCreateAuthenticateClient retrieves the value of the AuthenticateClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetOrCreateAuthenticateClient() *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient {
	if t.AuthenticateClient != nil {
		return t.AuthenticateClient
	}
	t.AuthenticateClient = &NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient{}
	return t.AuthenticateClient
}

// GetAuthenticateClient returns the value of the AuthenticateClient struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile. If the receiver or the field AuthenticateClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetAuthenticateClient() *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient {
	if t != nil && t.AuthenticateClient != nil {
		return t.AuthenticateClient
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetCipherList retrieves the value of the leaf CipherList from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CipherList is set, it can
// safely use t.GetCipherList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CipherList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetCipherList() string {
	if t == nil || t.CipherList == nil {
		return ""
	}
	return *t.CipherList
}

// GetServerProfileName retrieves the value of the leaf ServerProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServerProfileName is set, it can
// safely use t.GetServerProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServerProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetServerProfileName() string {
	if t == nil || t.ServerProfileName == nil {
		return ""
	}
	return *t.ServerProfileName
}

// GetTlsReNegotiateTimer retrieves the value of the leaf TlsReNegotiateTimer from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsReNegotiateTimer is set, it can
// safely use t.GetTlsReNegotiateTimer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsReNegotiateTimer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) GetTlsReNegotiateTimer() uint32 {
	if t == nil || t.TlsReNegotiateTimer == nil {
		return 0
	}
	return *t.TlsReNegotiateTimer
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.TlsReNegotiateTimer == nil {
		var v uint32 = 0
		t.TlsReNegotiateTimer = &v
	}
	t.AuthenticateClient.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.ServerProfileName == nil {
		return nil, fmt.Errorf("nil value for key ServerProfileName")
	}

	return map[string]interface{}{
		"server-profile-name": *t.ServerProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient represents the /nokia-conf/configure/groups/group/system/security/tls/server-tls-profile/authenticate-client YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient struct {
	CommonNameList     *string `path:"common-name-list" module:"nokia-conf"`
	TrustAnchorProfile *string `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) IsYANGGoStruct() {
}

// GetCommonNameList retrieves the value of the leaf CommonNameList from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CommonNameList is set, it can
// safely use t.GetCommonNameList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CommonNameList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) GetCommonNameList() string {
	if t == nil || t.CommonNameList == nil {
		return ""
	}
	return *t.CommonNameList
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_ServerTlsProfile_AuthenticateClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile represents the /nokia-conf/configure/groups/group/system/security/tls/trust-anchor-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile struct {
	TrustAnchor            map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor `path:"trust-anchor" module:"nokia-conf"`
	TrustAnchorProfileName *string                                                                                         `path:"trust-anchor-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) IsYANGGoStruct() {}

// NewTrustAnchor creates a new entry in the TrustAnchor list of the
// NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) NewTrustAnchor(CaProfileName string) (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor)
	}

	key := CaProfileName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchor", key)
	}

	t.TrustAnchor[key] = &NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor{
		CaProfileName: &CaProfileName,
	}

	return t.TrustAnchor[key], nil
}

// RenameTrustAnchor renames an entry in the list TrustAnchor within
// the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) RenameTrustAnchor(oldK, newK string) error {
	if _, ok := t.TrustAnchor[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchor", newK)
	}

	e, ok := t.TrustAnchor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchor", oldK)
	}
	e.CaProfileName = &newK

	t.TrustAnchor[newK] = e
	delete(t.TrustAnchor, oldK)
	return nil
}

// GetOrCreateTrustAnchor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) GetOrCreateTrustAnchor(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor {

	key := CaProfileName

	if v, ok := t.TrustAnchor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchor(CaProfileName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchor got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchor retrieves the value with the specified key from
// the TrustAnchor map field of NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) GetTrustAnchor(CaProfileName string) *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor {

	if t == nil {
		return nil
	}

	key := CaProfileName

	if lm, ok := t.TrustAnchor[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) DeleteTrustAnchor(CaProfileName string) {
	key := CaProfileName

	delete(t.TrustAnchor, key)
}

// AppendTrustAnchor appends the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct to the
// list TrustAnchor of NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) AppendTrustAnchor(v *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) error {
	if v.CaProfileName == nil {
		return fmt.Errorf("invalid nil key received for CaProfileName")
	}

	key := *v.CaProfileName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor)
	}

	if _, ok := t.TrustAnchor[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchor %v", key)
	}

	t.TrustAnchor[key] = v
	return nil
}

// GetTrustAnchorProfileName retrieves the value of the leaf TrustAnchorProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfileName is set, it can
// safely use t.GetTrustAnchorProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) GetTrustAnchorProfileName() string {
	if t == nil || t.TrustAnchorProfileName == nil {
		return ""
	}
	return *t.TrustAnchorProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrustAnchor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TrustAnchorProfileName == nil {
		return nil, fmt.Errorf("nil value for key TrustAnchorProfileName")
	}

	return map[string]interface{}{
		"trust-anchor-profile-name": *t.TrustAnchorProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor represents the /nokia-conf/configure/groups/group/system/security/tls/trust-anchor-profile/trust-anchor YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct {
	CaProfileName *string `path:"ca-profile-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) IsYANGGoStruct() {
}

// GetCaProfileName retrieves the value of the leaf CaProfileName from the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfileName is set, it can
// safely use t.GetCaProfileName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfileName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) GetCaProfileName() string {
	if t == nil || t.CaProfileName == nil {
		return ""
	}
	return *t.CaProfileName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfileName == nil {
		return nil, fmt.Errorf("nil value for key CaProfileName")
	}

	return map[string]interface{}{
		"ca-profile-name": *t.CaProfileName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor.
func (*NokiaConf_Configure_Groups_Group_System_Security_Tls_TrustAnchorProfile_TrustAnchor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams represents the /nokia-conf/configure/groups/group/system/security/user-params YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams struct {
	Attempts            *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts            `path:"attempts" module:"nokia-conf"`
	AuthenticationOrder *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder `path:"authentication-order" module:"nokia-conf"`
	LocalUser           *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser           `path:"local-user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams) IsYANGGoStruct() {}

// GetOrCreateAttempts retrieves the value of the Attempts field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetOrCreateAttempts() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts {
	if t.Attempts != nil {
		return t.Attempts
	}
	t.Attempts = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts{}
	return t.Attempts
}

// GetOrCreateAuthenticationOrder retrieves the value of the AuthenticationOrder field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetOrCreateAuthenticationOrder() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder {
	if t.AuthenticationOrder != nil {
		return t.AuthenticationOrder
	}
	t.AuthenticationOrder = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder{}
	return t.AuthenticationOrder
}

// GetOrCreateLocalUser retrieves the value of the LocalUser field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetOrCreateLocalUser() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser {
	if t.LocalUser != nil {
		return t.LocalUser
	}
	t.LocalUser = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser{}
	return t.LocalUser
}

// GetAttempts returns the value of the Attempts struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams. If the receiver or the field Attempts is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetAttempts() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts {
	if t != nil && t.Attempts != nil {
		return t.Attempts
	}
	return nil
}

// GetAuthenticationOrder returns the value of the AuthenticationOrder struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams. If the receiver or the field AuthenticationOrder is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetAuthenticationOrder() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder {
	if t != nil && t.AuthenticationOrder != nil {
		return t.AuthenticationOrder
	}
	return nil
}

// GetLocalUser returns the value of the LocalUser struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams. If the receiver or the field LocalUser is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) GetLocalUser() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser {
	if t != nil && t.LocalUser != nil {
		return t.LocalUser
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Attempts.PopulateDefaults()
	t.AuthenticationOrder.PopulateDefaults()
	t.LocalUser.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts represents the /nokia-conf/configure/groups/group/system/security/user-params/attempts YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts struct {
	Count   *uint32 `path:"count" module:"nokia-conf"`
	Lockout *uint32 `path:"lockout" module:"nokia-conf"`
	Time    *uint32 `path:"time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 3
	}
	return *t.Count
}

// GetLockout retrieves the value of the leaf Lockout from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lockout is set, it can
// safely use t.GetLockout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lockout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) GetLockout() uint32 {
	if t == nil || t.Lockout == nil {
		return 10
	}
	return *t.Lockout
}

// GetTime retrieves the value of the leaf Time from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Time is set, it can
// safely use t.GetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Time == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) GetTime() uint32 {
	if t == nil || t.Time == nil {
		return 5
	}
	return *t.Time
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 3
		t.Count = &v
	}
	if t.Lockout == nil {
		var v uint32 = 10
		t.Lockout = &v
	}
	if t.Time == nil {
		var v uint32 = 5
		t.Time = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_Attempts) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder represents the /nokia-conf/configure/groups/group/system/security/user-params/authentication-order YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder struct {
	ExitOnReject *bool                                              `path:"exit-on-reject" module:"nokia-conf"`
	Order        []E_NokiaTypesSecurity_PasswordAuthenticationOrder `path:"order" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) IsYANGGoStruct() {
}

// GetExitOnReject retrieves the value of the leaf ExitOnReject from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExitOnReject is set, it can
// safely use t.GetExitOnReject() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExitOnReject == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) GetExitOnReject() bool {
	if t == nil || t.ExitOnReject == nil {
		return false
	}
	return *t.ExitOnReject
}

// GetOrder retrieves the value of the leaf Order from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Order is set, it can
// safely use t.GetOrder() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Order == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) GetOrder() []E_NokiaTypesSecurity_PasswordAuthenticationOrder {
	if t == nil || t.Order == nil {
		return nil
	}
	return t.Order
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ExitOnReject == nil {
		var v bool = false
		t.ExitOnReject = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_AuthenticationOrder) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser struct {
	Password *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password        `path:"password" module:"nokia-conf" yangPresence:"true"`
	User     map[string]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User `path:"user" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) IsYANGGoStruct() {}

// NewUser creates a new entry in the User list of the
// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) NewUser(UserName string) (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User)
	}

	key := UserName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.User[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list User", key)
	}

	t.User[key] = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User{
		UserName: &UserName,
	}

	return t.User[key], nil
}

// RenameUser renames an entry in the list User within
// the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) RenameUser(oldK, newK string) error {
	if _, ok := t.User[newK]; ok {
		return fmt.Errorf("key %v already exists in User", newK)
	}

	e, ok := t.User[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in User", oldK)
	}
	e.UserName = &newK

	t.User[newK] = e
	delete(t.User, oldK)
	return nil
}

// GetOrCreateUser retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) GetOrCreateUser(UserName string) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User {

	key := UserName

	if v, ok := t.User[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewUser(UserName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateUser got unexpected error: %v", err))
	}
	return v
}

// GetUser retrieves the value with the specified key from
// the User map field of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) GetUser(UserName string) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User {

	if t == nil {
		return nil
	}

	key := UserName

	if lm, ok := t.User[key]; ok {
		return lm
	}
	return nil
}

// DeleteUser deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) DeleteUser(UserName string) {
	key := UserName

	delete(t.User, key)
}

// AppendUser appends the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User struct to the
// list User of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) AppendUser(v *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) error {
	if v.UserName == nil {
		return fmt.Errorf("invalid nil key received for UserName")
	}

	key := *v.UserName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.User == nil {
		t.User = make(map[string]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User)
	}

	if _, ok := t.User[key]; ok {
		return fmt.Errorf("duplicate key for list User %v", key)
	}

	t.User[key] = v
	return nil
}

// GetOrCreatePassword retrieves the value of the Password field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) GetOrCreatePassword() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password {
	if t.Password != nil {
		return t.Password
	}
	t.Password = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password{}
	return t.Password
}

// GetPassword returns the value of the Password struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser. If the receiver or the field Password is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) GetPassword() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password {
	if t != nil && t.Password != nil {
		return t.Password
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Password.PopulateDefaults()
	for _, e := range t.User {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/password YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password struct {
	Aging           *uint32                                                                                         `path:"aging" module:"nokia-conf"`
	ComplexityRules *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules `path:"complexity-rules" module:"nokia-conf"`
	Hashing         E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_Hashing        `path:"hashing" module:"nokia-conf"`
	HistorySize     *uint32                                                                                         `path:"history-size" module:"nokia-conf"`
	MinimumAge      *uint32                                                                                         `path:"minimum-age" module:"nokia-conf"`
	MinimumChange   *uint32                                                                                         `path:"minimum-change" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) IsYANGGoStruct() {
}

// GetOrCreateComplexityRules retrieves the value of the ComplexityRules field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetOrCreateComplexityRules() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules {
	if t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	t.ComplexityRules = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules{}
	return t.ComplexityRules
}

// GetComplexityRules returns the value of the ComplexityRules struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password. If the receiver or the field ComplexityRules is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetComplexityRules() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules {
	if t != nil && t.ComplexityRules != nil {
		return t.ComplexityRules
	}
	return nil
}

// GetAging retrieves the value of the leaf Aging from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Aging is set, it can
// safely use t.GetAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Aging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetAging() uint32 {
	if t == nil || t.Aging == nil {
		return 0
	}
	return *t.Aging
}

// GetHashing retrieves the value of the leaf Hashing from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Hashing is set, it can
// safely use t.GetHashing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Hashing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetHashing() E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_Hashing {
	if t == nil || t.Hashing == 0 {
		return NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_Hashing_bcrypt
	}
	return t.Hashing
}

// GetHistorySize retrieves the value of the leaf HistorySize from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HistorySize is set, it can
// safely use t.GetHistorySize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HistorySize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetHistorySize() uint32 {
	if t == nil || t.HistorySize == nil {
		return 0
	}
	return *t.HistorySize
}

// GetMinimumAge retrieves the value of the leaf MinimumAge from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumAge is set, it can
// safely use t.GetMinimumAge() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumAge == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetMinimumAge() uint32 {
	if t == nil || t.MinimumAge == nil {
		return 600
	}
	return *t.MinimumAge
}

// GetMinimumChange retrieves the value of the leaf MinimumChange from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumChange is set, it can
// safely use t.GetMinimumChange() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumChange == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) GetMinimumChange() uint32 {
	if t == nil || t.MinimumChange == nil {
		return 5
	}
	return *t.MinimumChange
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Hashing == 0 {
		t.Hashing = NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_Hashing_bcrypt
	}
	if t.MinimumAge == nil {
		var v uint32 = 600
		t.MinimumAge = &v
	}
	if t.MinimumChange == nil {
		var v uint32 = 5
		t.MinimumChange = &v
	}
	t.ComplexityRules.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/password/complexity-rules YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules struct {
	AllowUserName      *bool                                                                                                    `path:"allow-user-name" module:"nokia-conf"`
	Credits            *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits  `path:"credits" module:"nokia-conf"`
	MinimumClasses     *uint32                                                                                                  `path:"minimum-classes" module:"nokia-conf"`
	MinimumLength      *uint32                                                                                                  `path:"minimum-length" module:"nokia-conf"`
	RepeatedCharacters *uint32                                                                                                  `path:"repeated-characters" module:"nokia-conf"`
	Required           *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required `path:"required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) IsYANGGoStruct() {
}

// GetOrCreateCredits retrieves the value of the Credits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetOrCreateCredits() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits {
	if t.Credits != nil {
		return t.Credits
	}
	t.Credits = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits{}
	return t.Credits
}

// GetOrCreateRequired retrieves the value of the Required field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetOrCreateRequired() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required {
	if t.Required != nil {
		return t.Required
	}
	t.Required = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required{}
	return t.Required
}

// GetCredits returns the value of the Credits struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules. If the receiver or the field Credits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetCredits() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits {
	if t != nil && t.Credits != nil {
		return t.Credits
	}
	return nil
}

// GetRequired returns the value of the Required struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules. If the receiver or the field Required is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetRequired() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required {
	if t != nil && t.Required != nil {
		return t.Required
	}
	return nil
}

// GetAllowUserName retrieves the value of the leaf AllowUserName from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUserName is set, it can
// safely use t.GetAllowUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetAllowUserName() bool {
	if t == nil || t.AllowUserName == nil {
		return false
	}
	return *t.AllowUserName
}

// GetMinimumClasses retrieves the value of the leaf MinimumClasses from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumClasses is set, it can
// safely use t.GetMinimumClasses() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumClasses == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetMinimumClasses() uint32 {
	if t == nil || t.MinimumClasses == nil {
		return 0
	}
	return *t.MinimumClasses
}

// GetMinimumLength retrieves the value of the leaf MinimumLength from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumLength is set, it can
// safely use t.GetMinimumLength() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumLength == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetMinimumLength() uint32 {
	if t == nil || t.MinimumLength == nil {
		return 6
	}
	return *t.MinimumLength
}

// GetRepeatedCharacters retrieves the value of the leaf RepeatedCharacters from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepeatedCharacters is set, it can
// safely use t.GetRepeatedCharacters() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepeatedCharacters == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) GetRepeatedCharacters() uint32 {
	if t == nil || t.RepeatedCharacters == nil {
		return 0
	}
	return *t.RepeatedCharacters
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowUserName == nil {
		var v bool = false
		t.AllowUserName = &v
	}
	if t.MinimumLength == nil {
		var v uint32 = 6
		t.MinimumLength = &v
	}
	t.Credits.PopulateDefaults()
	t.Required.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/password/complexity-rules/credits YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits struct {
	Lowercase        *uint32 `path:"lowercase" module:"nokia-conf"`
	Numeric          *uint32 `path:"numeric" module:"nokia-conf"`
	SpecialCharacter *uint32 `path:"special-character" module:"nokia-conf"`
	Uppercase        *uint32 `path:"uppercase" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) IsYANGGoStruct() {
}

// GetLowercase retrieves the value of the leaf Lowercase from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lowercase is set, it can
// safely use t.GetLowercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lowercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetLowercase() uint32 {
	if t == nil || t.Lowercase == nil {
		return 0
	}
	return *t.Lowercase
}

// GetNumeric retrieves the value of the leaf Numeric from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Numeric is set, it can
// safely use t.GetNumeric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Numeric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetNumeric() uint32 {
	if t == nil || t.Numeric == nil {
		return 0
	}
	return *t.Numeric
}

// GetSpecialCharacter retrieves the value of the leaf SpecialCharacter from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpecialCharacter is set, it can
// safely use t.GetSpecialCharacter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpecialCharacter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetSpecialCharacter() uint32 {
	if t == nil || t.SpecialCharacter == nil {
		return 0
	}
	return *t.SpecialCharacter
}

// GetUppercase retrieves the value of the leaf Uppercase from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uppercase is set, it can
// safely use t.GetUppercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uppercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) GetUppercase() uint32 {
	if t == nil || t.Uppercase == nil {
		return 0
	}
	return *t.Uppercase
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Credits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/password/complexity-rules/required YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required struct {
	Lowercase        *uint32 `path:"lowercase" module:"nokia-conf"`
	Numeric          *uint32 `path:"numeric" module:"nokia-conf"`
	SpecialCharacter *uint32 `path:"special-character" module:"nokia-conf"`
	Uppercase        *uint32 `path:"uppercase" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) IsYANGGoStruct() {
}

// GetLowercase retrieves the value of the leaf Lowercase from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lowercase is set, it can
// safely use t.GetLowercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lowercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetLowercase() uint32 {
	if t == nil || t.Lowercase == nil {
		return 0
	}
	return *t.Lowercase
}

// GetNumeric retrieves the value of the leaf Numeric from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Numeric is set, it can
// safely use t.GetNumeric() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Numeric == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetNumeric() uint32 {
	if t == nil || t.Numeric == nil {
		return 0
	}
	return *t.Numeric
}

// GetSpecialCharacter retrieves the value of the leaf SpecialCharacter from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpecialCharacter is set, it can
// safely use t.GetSpecialCharacter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpecialCharacter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetSpecialCharacter() uint32 {
	if t == nil || t.SpecialCharacter == nil {
		return 0
	}
	return *t.SpecialCharacter
}

// GetUppercase retrieves the value of the leaf Uppercase from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Uppercase is set, it can
// safely use t.GetUppercase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Uppercase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) GetUppercase() uint32 {
	if t == nil || t.Uppercase == nil {
		return 0
	}
	return *t.Uppercase
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_Password_ComplexityRules_Required) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User struct {
	Access           *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access     `path:"access" module:"nokia-conf"`
	CliEngine        []E_NokiaTypesSystem_CliEngineType                                                     `path:"cli-engine" module:"nokia-conf"`
	Console          *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console    `path:"console" module:"nokia-conf"`
	HomeDirectory    *string                                                                                `path:"home-directory" module:"nokia-conf"`
	Password         *string                                                                                `path:"password" module:"nokia-conf"`
	PublicKeys       *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys `path:"public-keys" module:"nokia-conf"`
	RestrictedToHome *bool                                                                                  `path:"restricted-to-home" module:"nokia-conf"`
	Snmp             *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp       `path:"snmp" module:"nokia-conf" yangPresence:"true"`
	UserName         *string                                                                                `path:"user-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) IsYANGGoStruct() {}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetOrCreateAccess() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access{}
	return t.Access
}

// GetOrCreateConsole retrieves the value of the Console field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetOrCreateConsole() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console {
	if t.Console != nil {
		return t.Console
	}
	t.Console = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console{}
	return t.Console
}

// GetOrCreatePublicKeys retrieves the value of the PublicKeys field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetOrCreatePublicKeys() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys {
	if t.PublicKeys != nil {
		return t.PublicKeys
	}
	t.PublicKeys = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys{}
	return t.PublicKeys
}

// GetOrCreateSnmp retrieves the value of the Snmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetOrCreateSnmp() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp {
	if t.Snmp != nil {
		return t.Snmp
	}
	t.Snmp = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp{}
	return t.Snmp
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetAccess() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetConsole returns the value of the Console struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User. If the receiver or the field Console is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetConsole() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console {
	if t != nil && t.Console != nil {
		return t.Console
	}
	return nil
}

// GetPublicKeys returns the value of the PublicKeys struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User. If the receiver or the field PublicKeys is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetPublicKeys() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys {
	if t != nil && t.PublicKeys != nil {
		return t.PublicKeys
	}
	return nil
}

// GetSnmp returns the value of the Snmp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User. If the receiver or the field Snmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetSnmp() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp {
	if t != nil && t.Snmp != nil {
		return t.Snmp
	}
	return nil
}

// GetCliEngine retrieves the value of the leaf CliEngine from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CliEngine is set, it can
// safely use t.GetCliEngine() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CliEngine == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetCliEngine() []E_NokiaTypesSystem_CliEngineType {
	if t == nil || t.CliEngine == nil {
		return []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	return t.CliEngine
}

// GetHomeDirectory retrieves the value of the leaf HomeDirectory from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HomeDirectory is set, it can
// safely use t.GetHomeDirectory() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HomeDirectory == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetHomeDirectory() string {
	if t == nil || t.HomeDirectory == nil {
		return ""
	}
	return *t.HomeDirectory
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRestrictedToHome retrieves the value of the leaf RestrictedToHome from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RestrictedToHome is set, it can
// safely use t.GetRestrictedToHome() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RestrictedToHome == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetRestrictedToHome() bool {
	if t == nil || t.RestrictedToHome == nil {
		return false
	}
	return *t.RestrictedToHome
}

// GetUserName retrieves the value of the leaf UserName from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UserName is set, it can
// safely use t.GetUserName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UserName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) GetUserName() string {
	if t == nil || t.UserName == nil {
		return ""
	}
	return *t.UserName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CliEngine == nil {
		t.CliEngine = []E_NokiaTypesSystem_CliEngineType{NokiaTypesSystem_CliEngineType_md_cli}
	}
	if t.RestrictedToHome == nil {
		var v bool = false
		t.RestrictedToHome = &v
	}
	t.Access.PopulateDefaults()
	t.Console.PopulateDefaults()
	t.PublicKeys.PopulateDefaults()
	t.Snmp.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) ΛListKeyMap() (map[string]interface{}, error) {
	if t.UserName == nil {
		return nil, fmt.Errorf("nil value for key UserName")
	}

	return map[string]interface{}{
		"user-name": *t.UserName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/access YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access struct {
	Console *bool `path:"console" module:"nokia-conf"`
	Ftp     *bool `path:"ftp" module:"nokia-conf"`
	Grpc    *bool `path:"grpc" module:"nokia-conf"`
	Li      *bool `path:"li" module:"nokia-conf"`
	Netconf *bool `path:"netconf" module:"nokia-conf"`
	Snmp    *bool `path:"snmp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) IsYANGGoStruct() {
}

// GetConsole retrieves the value of the leaf Console from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Console is set, it can
// safely use t.GetConsole() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Console == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetConsole() bool {
	if t == nil || t.Console == nil {
		return false
	}
	return *t.Console
}

// GetFtp retrieves the value of the leaf Ftp from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ftp is set, it can
// safely use t.GetFtp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ftp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetFtp() bool {
	if t == nil || t.Ftp == nil {
		return false
	}
	return *t.Ftp
}

// GetGrpc retrieves the value of the leaf Grpc from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Grpc is set, it can
// safely use t.GetGrpc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Grpc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetGrpc() bool {
	if t == nil || t.Grpc == nil {
		return false
	}
	return *t.Grpc
}

// GetLi retrieves the value of the leaf Li from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Li is set, it can
// safely use t.GetLi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Li == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetLi() bool {
	if t == nil || t.Li == nil {
		return false
	}
	return *t.Li
}

// GetNetconf retrieves the value of the leaf Netconf from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Netconf is set, it can
// safely use t.GetNetconf() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Netconf == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetNetconf() bool {
	if t == nil || t.Netconf == nil {
		return false
	}
	return *t.Netconf
}

// GetSnmp retrieves the value of the leaf Snmp from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Snmp is set, it can
// safely use t.GetSnmp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Snmp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) GetSnmp() bool {
	if t == nil || t.Snmp == nil {
		return false
	}
	return *t.Snmp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Console == nil {
		var v bool = false
		t.Console = &v
	}
	if t.Ftp == nil {
		var v bool = false
		t.Ftp = &v
	}
	if t.Grpc == nil {
		var v bool = false
		t.Grpc = &v
	}
	if t.Li == nil {
		var v bool = false
		t.Li = &v
	}
	if t.Netconf == nil {
		var v bool = false
		t.Netconf = &v
	}
	if t.Snmp == nil {
		var v bool = false
		t.Snmp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/console YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console struct {
	CannotChangePassword *bool    `path:"cannot-change-password" module:"nokia-conf"`
	LoginExec            *string  `path:"login-exec" module:"nokia-conf"`
	Member               []string `path:"member" module:"nokia-conf"`
	NewPasswordAtLogin   *bool    `path:"new-password-at-login" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) IsYANGGoStruct() {
}

// GetCannotChangePassword retrieves the value of the leaf CannotChangePassword from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CannotChangePassword is set, it can
// safely use t.GetCannotChangePassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CannotChangePassword == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) GetCannotChangePassword() bool {
	if t == nil || t.CannotChangePassword == nil {
		return false
	}
	return *t.CannotChangePassword
}

// GetLoginExec retrieves the value of the leaf LoginExec from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LoginExec is set, it can
// safely use t.GetLoginExec() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LoginExec == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) GetLoginExec() string {
	if t == nil || t.LoginExec == nil {
		return ""
	}
	return *t.LoginExec
}

// GetMember retrieves the value of the leaf Member from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Member is set, it can
// safely use t.GetMember() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Member == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) GetMember() []string {
	if t == nil || t.Member == nil {
		return nil
	}
	return t.Member
}

// GetNewPasswordAtLogin retrieves the value of the leaf NewPasswordAtLogin from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NewPasswordAtLogin is set, it can
// safely use t.GetNewPasswordAtLogin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NewPasswordAtLogin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) GetNewPasswordAtLogin() bool {
	if t == nil || t.NewPasswordAtLogin == nil {
		return false
	}
	return *t.NewPasswordAtLogin
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CannotChangePassword == nil {
		var v bool = false
		t.CannotChangePassword = &v
	}
	if t.NewPasswordAtLogin == nil {
		var v bool = false
		t.NewPasswordAtLogin = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Console) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/public-keys YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys struct {
	Ecdsa *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa `path:"ecdsa" module:"nokia-conf"`
	Rsa   *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa   `path:"rsa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) IsYANGGoStruct() {
}

// GetOrCreateEcdsa retrieves the value of the Ecdsa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) GetOrCreateEcdsa() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa {
	if t.Ecdsa != nil {
		return t.Ecdsa
	}
	t.Ecdsa = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa{}
	return t.Ecdsa
}

// GetOrCreateRsa retrieves the value of the Rsa field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) GetOrCreateRsa() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa {
	if t.Rsa != nil {
		return t.Rsa
	}
	t.Rsa = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa{}
	return t.Rsa
}

// GetEcdsa returns the value of the Ecdsa struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys. If the receiver or the field Ecdsa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) GetEcdsa() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa {
	if t != nil && t.Ecdsa != nil {
		return t.Ecdsa
	}
	return nil
}

// GetRsa returns the value of the Rsa struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys. If the receiver or the field Rsa is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) GetRsa() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa {
	if t != nil && t.Rsa != nil {
		return t.Rsa
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Ecdsa.PopulateDefaults()
	t.Rsa.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/public-keys/ecdsa YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct {
	EcdsaKey map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey `path:"ecdsa-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) IsYANGGoStruct() {
}

// NewEcdsaKey creates a new entry in the EcdsaKey list of the
// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) NewEcdsaKey(EcdsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcdsaKey == nil {
		t.EcdsaKey = make(map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey)
	}

	key := EcdsaPublicKeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.EcdsaKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list EcdsaKey", key)
	}

	t.EcdsaKey[key] = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey{
		EcdsaPublicKeyId: EcdsaPublicKeyId,
	}

	return t.EcdsaKey[key], nil
}

// RenameEcdsaKey renames an entry in the list EcdsaKey within
// the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) RenameEcdsaKey(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union) error {
	if _, ok := t.EcdsaKey[newK]; ok {
		return fmt.Errorf("key %v already exists in EcdsaKey", newK)
	}

	e, ok := t.EcdsaKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in EcdsaKey", oldK)
	}
	e.EcdsaPublicKeyId = newK

	t.EcdsaKey[newK] = e
	delete(t.EcdsaKey, oldK)
	return nil
}

// GetOrCreateEcdsaKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) GetOrCreateEcdsaKey(EcdsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey {

	key := EcdsaPublicKeyId

	if v, ok := t.EcdsaKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEcdsaKey(EcdsaPublicKeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEcdsaKey got unexpected error: %v", err))
	}
	return v
}

// GetEcdsaKey retrieves the value with the specified key from
// the EcdsaKey map field of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) GetEcdsaKey(EcdsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey {

	if t == nil {
		return nil
	}

	key := EcdsaPublicKeyId

	if lm, ok := t.EcdsaKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteEcdsaKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) DeleteEcdsaKey(EcdsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union) {
	key := EcdsaPublicKeyId

	delete(t.EcdsaKey, key)
}

// AppendEcdsaKey appends the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct to the
// list EcdsaKey of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) AppendEcdsaKey(v *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) error {
	key := v.EcdsaPublicKeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.EcdsaKey == nil {
		t.EcdsaKey = make(map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey)
	}

	if _, ok := t.EcdsaKey[key]; ok {
		return fmt.Errorf("duplicate key for list EcdsaKey %v", key)
	}

	t.EcdsaKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.EcdsaKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/public-keys/ecdsa/ecdsa-key YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct {
	Description      *string                                                                                                                     `path:"description" module:"nokia-conf"`
	EcdsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union `path:"ecdsa-public-key-id" module:"nokia-conf"`
	KeyValue         *string                                                                                                                     `path:"key-value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) IsYANGGoStruct() {
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEcdsaPublicKeyId retrieves the value of the leaf EcdsaPublicKeyId from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EcdsaPublicKeyId is set, it can
// safely use t.GetEcdsaPublicKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EcdsaPublicKeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetEcdsaPublicKeyId() NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey_EcdsaPublicKeyId_Union {
	if t == nil || t.EcdsaPublicKeyId == nil {
		return nil
	}
	return t.EcdsaPublicKeyId
}

// GetKeyValue retrieves the value of the leaf KeyValue from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"ecdsa-public-key-id": t.EcdsaPublicKeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Ecdsa_EcdsaKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/public-keys/rsa YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct {
	RsaKey map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey `path:"rsa-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) IsYANGGoStruct() {
}

// NewRsaKey creates a new entry in the RsaKey list of the
// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) NewRsaKey(RsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union) (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsaKey == nil {
		t.RsaKey = make(map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey)
	}

	key := RsaPublicKeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RsaKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RsaKey", key)
	}

	t.RsaKey[key] = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey{
		RsaPublicKeyId: RsaPublicKeyId,
	}

	return t.RsaKey[key], nil
}

// RenameRsaKey renames an entry in the list RsaKey within
// the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) RenameRsaKey(oldK, newK NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union) error {
	if _, ok := t.RsaKey[newK]; ok {
		return fmt.Errorf("key %v already exists in RsaKey", newK)
	}

	e, ok := t.RsaKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RsaKey", oldK)
	}
	e.RsaPublicKeyId = newK

	t.RsaKey[newK] = e
	delete(t.RsaKey, oldK)
	return nil
}

// GetOrCreateRsaKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) GetOrCreateRsaKey(RsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey {

	key := RsaPublicKeyId

	if v, ok := t.RsaKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRsaKey(RsaPublicKeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRsaKey got unexpected error: %v", err))
	}
	return v
}

// GetRsaKey retrieves the value with the specified key from
// the RsaKey map field of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) GetRsaKey(RsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union) *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey {

	if t == nil {
		return nil
	}

	key := RsaPublicKeyId

	if lm, ok := t.RsaKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteRsaKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) DeleteRsaKey(RsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union) {
	key := RsaPublicKeyId

	delete(t.RsaKey, key)
}

// AppendRsaKey appends the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct to the
// list RsaKey of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) AppendRsaKey(v *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) error {
	key := v.RsaPublicKeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RsaKey == nil {
		t.RsaKey = make(map[NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union]*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey)
	}

	if _, ok := t.RsaKey[key]; ok {
		return fmt.Errorf("duplicate key for list RsaKey %v", key)
	}

	t.RsaKey[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.RsaKey {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/public-keys/rsa/rsa-key YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct {
	Description    *string                                                                                                               `path:"description" module:"nokia-conf"`
	KeyValue       *string                                                                                                               `path:"key-value" module:"nokia-conf"`
	RsaPublicKeyId NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union `path:"rsa-public-key-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) IsYANGGoStruct() {
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetKeyValue retrieves the value of the leaf KeyValue from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyValue is set, it can
// safely use t.GetKeyValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyValue == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetKeyValue() string {
	if t == nil || t.KeyValue == nil {
		return ""
	}
	return *t.KeyValue
}

// GetRsaPublicKeyId retrieves the value of the leaf RsaPublicKeyId from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsaPublicKeyId is set, it can
// safely use t.GetRsaPublicKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsaPublicKeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) GetRsaPublicKeyId() NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey_RsaPublicKeyId_Union {
	if t == nil || t.RsaPublicKeyId == nil {
		return nil
	}
	return t.RsaPublicKeyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rsa-public-key-id": t.RsaPublicKeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_PublicKeys_Rsa_RsaKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/snmp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp struct {
	Authentication *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	Group          *string                                                                                         `path:"group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) IsYANGGoStruct() {
}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) GetOrCreateAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) GetAuthentication() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetGroup retrieves the value of the leaf Group from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Group is set, it can
// safely use t.GetGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Group == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) GetGroup() string {
	if t == nil || t.Group == nil {
		return ""
	}
	return *t.Group
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Authentication.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/snmp/authentication YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication struct {
	AuthenticationKey      *string                                                                                                                 `path:"authentication-key" module:"nokia-conf"`
	AuthenticationProtocol E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_AuthenticationProtocol `path:"authentication-protocol" module:"nokia-conf"`
	Privacy                *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy                 `path:"privacy" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) IsYANGGoStruct() {
}

// GetOrCreatePrivacy retrieves the value of the Privacy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetOrCreatePrivacy() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy {
	if t.Privacy != nil {
		return t.Privacy
	}
	t.Privacy = &NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy{}
	return t.Privacy
}

// GetPrivacy returns the value of the Privacy struct pointer
// from NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication. If the receiver or the field Privacy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetPrivacy() *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy {
	if t != nil && t.Privacy != nil {
		return t.Privacy
	}
	return nil
}

// GetAuthenticationKey retrieves the value of the leaf AuthenticationKey from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationKey is set, it can
// safely use t.GetAuthenticationKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetAuthenticationKey() string {
	if t == nil || t.AuthenticationKey == nil {
		return ""
	}
	return *t.AuthenticationKey
}

// GetAuthenticationProtocol retrieves the value of the leaf AuthenticationProtocol from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationProtocol is set, it can
// safely use t.GetAuthenticationProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) GetAuthenticationProtocol() E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_AuthenticationProtocol {
	if t == nil || t.AuthenticationProtocol == 0 {
		return 0
	}
	return t.AuthenticationProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Privacy.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy represents the /nokia-conf/configure/groups/group/system/security/user-params/local-user/user/snmp/authentication/privacy YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy struct {
	PrivacyKey      *string                                                                                                                  `path:"privacy-key" module:"nokia-conf"`
	PrivacyProtocol E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy_PrivacyProtocol `path:"privacy-protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) IsYANGGoStruct() {
}

// GetPrivacyKey retrieves the value of the leaf PrivacyKey from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivacyKey is set, it can
// safely use t.GetPrivacyKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivacyKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) GetPrivacyKey() string {
	if t == nil || t.PrivacyKey == nil {
		return ""
	}
	return *t.PrivacyKey
}

// GetPrivacyProtocol retrieves the value of the leaf PrivacyProtocol from the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivacyProtocol is set, it can
// safely use t.GetPrivacyProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivacyProtocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) GetPrivacyProtocol() E_NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy_PrivacyProtocol {
	if t == nil || t.PrivacyProtocol == 0 {
		return 0
	}
	return t.PrivacyProtocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy.
func (*NokiaConf_Configure_Groups_Group_System_Security_UserParams_LocalUser_User_Snmp_Authentication_Privacy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions represents the /nokia-conf/configure/groups/group/system/security/vprn-network-exceptions YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions struct {
	Count  *uint32 `path:"count" module:"nokia-conf"`
	Window *uint32 `path:"window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) IsYANGGoStruct() {}

// GetCount retrieves the value of the leaf Count from the NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Count is set, it can
// safely use t.GetCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Count == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) GetCount() uint32 {
	if t == nil || t.Count == nil {
		return 100
	}
	return *t.Count
}

// GetWindow retrieves the value of the leaf Window from the NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Window is set, it can
// safely use t.GetWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Window == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) GetWindow() uint32 {
	if t == nil || t.Window == nil {
		return 10
	}
	return *t.Window
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Count == nil {
		var v uint32 = 100
		t.Count = &v
	}
	if t.Window == nil {
		var v uint32 = 10
		t.Window = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions.
func (*NokiaConf_Configure_Groups_Group_System_Security_VprnNetworkExceptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_SoftwareRepository represents the /nokia-conf/configure/groups/group/system/software-repository YANG schema element.
type NokiaConf_Configure_Groups_Group_System_SoftwareRepository struct {
	Description       *string `path:"description" module:"nokia-conf"`
	PrimaryLocation   *string `path:"primary-location" module:"nokia-conf"`
	RepositoryName    *string `path:"repository-name" module:"nokia-conf"`
	SecondaryLocation *string `path:"secondary-location" module:"nokia-conf"`
	TertiaryLocation  *string `path:"tertiary-location" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_SoftwareRepository implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_SoftwareRepository) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPrimaryLocation retrieves the value of the leaf PrimaryLocation from the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrimaryLocation is set, it can
// safely use t.GetPrimaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrimaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) GetPrimaryLocation() string {
	if t == nil || t.PrimaryLocation == nil {
		return ""
	}
	return *t.PrimaryLocation
}

// GetRepositoryName retrieves the value of the leaf RepositoryName from the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RepositoryName is set, it can
// safely use t.GetRepositoryName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RepositoryName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) GetRepositoryName() string {
	if t == nil || t.RepositoryName == nil {
		return ""
	}
	return *t.RepositoryName
}

// GetSecondaryLocation retrieves the value of the leaf SecondaryLocation from the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SecondaryLocation is set, it can
// safely use t.GetSecondaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SecondaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) GetSecondaryLocation() string {
	if t == nil || t.SecondaryLocation == nil {
		return ""
	}
	return *t.SecondaryLocation
}

// GetTertiaryLocation retrieves the value of the leaf TertiaryLocation from the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TertiaryLocation is set, it can
// safely use t.GetTertiaryLocation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TertiaryLocation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) GetTertiaryLocation() string {
	if t == nil || t.TertiaryLocation == nil {
		return ""
	}
	return *t.TertiaryLocation
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_SoftwareRepository
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_SoftwareRepository struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) ΛListKeyMap() (map[string]interface{}, error) {
	if t.RepositoryName == nil {
		return nil, fmt.Errorf("nil value for key RepositoryName")
	}

	return map[string]interface{}{
		"repository-name": *t.RepositoryName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_SoftwareRepository"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_SoftwareRepository) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_SoftwareRepository.
func (*NokiaConf_Configure_Groups_Group_System_SoftwareRepository) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_SwitchFabric represents the /nokia-conf/configure/groups/group/system/switch-fabric YANG schema element.
type NokiaConf_Configure_Groups_Group_System_SwitchFabric struct {
	FailureRecovery  *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery `path:"failure-recovery" module:"nokia-conf"`
	SfmLossThreshold *uint32                                                               `path:"sfm-loss-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_SwitchFabric implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_SwitchFabric) IsYANGGoStruct() {}

// GetOrCreateFailureRecovery retrieves the value of the FailureRecovery field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) GetOrCreateFailureRecovery() *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery {
	if t.FailureRecovery != nil {
		return t.FailureRecovery
	}
	t.FailureRecovery = &NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery{}
	return t.FailureRecovery
}

// GetFailureRecovery returns the value of the FailureRecovery struct pointer
// from NokiaConf_Configure_Groups_Group_System_SwitchFabric. If the receiver or the field FailureRecovery is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) GetFailureRecovery() *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery {
	if t != nil && t.FailureRecovery != nil {
		return t.FailureRecovery
	}
	return nil
}

// GetSfmLossThreshold retrieves the value of the leaf SfmLossThreshold from the NokiaConf_Configure_Groups_Group_System_SwitchFabric
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SfmLossThreshold is set, it can
// safely use t.GetSfmLossThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SfmLossThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) GetSfmLossThreshold() uint32 {
	if t == nil || t.SfmLossThreshold == nil {
		return 0
	}
	return *t.SfmLossThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_SwitchFabric
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FailureRecovery.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_SwitchFabric"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_SwitchFabric.
func (*NokiaConf_Configure_Groups_Group_System_SwitchFabric) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery represents the /nokia-conf/configure/groups/group/system/switch-fabric/failure-recovery YANG schema element.
type NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery.
func (*NokiaConf_Configure_Groups_Group_System_SwitchFabric_FailureRecovery) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry represents the /nokia-conf/configure/groups/group/system/telemetry YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry struct {
	DestinationGroup        map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup `path:"destination-group" module:"nokia-conf"`
	NotificationBundling    *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling        `path:"notification-bundling" module:"nokia-conf" yangPresence:"true"`
	PersistentSubscriptions *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions     `path:"persistent-subscriptions" module:"nokia-conf"`
	SensorGroups            *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups                `path:"sensor-groups" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry) IsYANGGoStruct() {}

// NewDestinationGroup creates a new entry in the DestinationGroup list of the
// NokiaConf_Configure_Groups_Group_System_Telemetry struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) NewDestinationGroup(Name string) (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DestinationGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DestinationGroup", key)
	}

	t.DestinationGroup[key] = &NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup{
		Name: &Name,
	}

	return t.DestinationGroup[key], nil
}

// RenameDestinationGroup renames an entry in the list DestinationGroup within
// the NokiaConf_Configure_Groups_Group_System_Telemetry struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) RenameDestinationGroup(oldK, newK string) error {
	if _, ok := t.DestinationGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in DestinationGroup", newK)
	}

	e, ok := t.DestinationGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DestinationGroup", oldK)
	}
	e.Name = &newK

	t.DestinationGroup[newK] = e
	delete(t.DestinationGroup, oldK)
	return nil
}

// GetOrCreateDestinationGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetOrCreateDestinationGroup(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup {

	key := Name

	if v, ok := t.DestinationGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestinationGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestinationGroup got unexpected error: %v", err))
	}
	return v
}

// GetDestinationGroup retrieves the value with the specified key from
// the DestinationGroup map field of NokiaConf_Configure_Groups_Group_System_Telemetry. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetDestinationGroup(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.DestinationGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestinationGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) DeleteDestinationGroup(Name string) {
	key := Name

	delete(t.DestinationGroup, key)
}

// AppendDestinationGroup appends the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup struct to the
// list DestinationGroup of NokiaConf_Configure_Groups_Group_System_Telemetry. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) AppendDestinationGroup(v *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DestinationGroup == nil {
		t.DestinationGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup)
	}

	if _, ok := t.DestinationGroup[key]; ok {
		return fmt.Errorf("duplicate key for list DestinationGroup %v", key)
	}

	t.DestinationGroup[key] = v
	return nil
}

// GetOrCreateNotificationBundling retrieves the value of the NotificationBundling field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetOrCreateNotificationBundling() *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling {
	if t.NotificationBundling != nil {
		return t.NotificationBundling
	}
	t.NotificationBundling = &NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling{}
	return t.NotificationBundling
}

// GetOrCreatePersistentSubscriptions retrieves the value of the PersistentSubscriptions field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetOrCreatePersistentSubscriptions() *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions {
	if t.PersistentSubscriptions != nil {
		return t.PersistentSubscriptions
	}
	t.PersistentSubscriptions = &NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions{}
	return t.PersistentSubscriptions
}

// GetOrCreateSensorGroups retrieves the value of the SensorGroups field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetOrCreateSensorGroups() *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups {
	if t.SensorGroups != nil {
		return t.SensorGroups
	}
	t.SensorGroups = &NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups{}
	return t.SensorGroups
}

// GetNotificationBundling returns the value of the NotificationBundling struct pointer
// from NokiaConf_Configure_Groups_Group_System_Telemetry. If the receiver or the field NotificationBundling is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetNotificationBundling() *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling {
	if t != nil && t.NotificationBundling != nil {
		return t.NotificationBundling
	}
	return nil
}

// GetPersistentSubscriptions returns the value of the PersistentSubscriptions struct pointer
// from NokiaConf_Configure_Groups_Group_System_Telemetry. If the receiver or the field PersistentSubscriptions is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetPersistentSubscriptions() *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions {
	if t != nil && t.PersistentSubscriptions != nil {
		return t.PersistentSubscriptions
	}
	return nil
}

// GetSensorGroups returns the value of the SensorGroups struct pointer
// from NokiaConf_Configure_Groups_Group_System_Telemetry. If the receiver or the field SensorGroups is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) GetSensorGroups() *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups {
	if t != nil && t.SensorGroups != nil {
		return t.SensorGroups
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NotificationBundling.PopulateDefaults()
	t.PersistentSubscriptions.PopulateDefaults()
	t.SensorGroups.PopulateDefaults()
	for _, e := range t.DestinationGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup represents the /nokia-conf/configure/groups/group/system/telemetry/destination-group YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup struct {
	AllowUnsecureConnection YANGEmpty                                                                                                                                                              `path:"allow-unsecure-connection" module:"nokia-conf"`
	Description             *string                                                                                                                                                                `path:"description" module:"nokia-conf"`
	Destination             map[NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination `path:"destination" module:"nokia-conf"`
	Name                    *string                                                                                                                                                                `path:"name" module:"nokia-conf"`
	TcpKeepalive            *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive                                                                                       `path:"tcp-keepalive" module:"nokia-conf"`
	TlsClientProfile        *string                                                                                                                                                                `path:"tls-client-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key represents the key for list Destination of element /nokia-conf/configure/groups/group/system/telemetry/destination-group.
type NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key struct {
	Address string                                                                                    `path:"address"`
	Port    NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union `path:"port"`
}

// NewDestination creates a new entry in the Destination list of the
// NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) NewDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union) (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination)
	}

	key := NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Destination[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Destination", key)
	}

	t.Destination[key] = &NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination{
		Address: &Address,
		Port:    Port,
	}

	return t.Destination[key], nil
}

// RenameDestination renames an entry in the list Destination within
// the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) RenameDestination(oldK, newK NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key) error {
	if _, ok := t.Destination[newK]; ok {
		return fmt.Errorf("key %v already exists in Destination", newK)
	}

	e, ok := t.Destination[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Destination", oldK)
	}
	e.Address = &newK.Address
	e.Port = newK.Port

	t.Destination[newK] = e
	delete(t.Destination, oldK)
	return nil
}

// GetOrCreateDestination retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetOrCreateDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union) *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination {

	key := NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if v, ok := t.Destination[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDestination(Address, Port)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDestination got unexpected error: %v", err))
	}
	return v
}

// GetDestination retrieves the value with the specified key from
// the Destination map field of NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union) *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	if lm, ok := t.Destination[key]; ok {
		return lm
	}
	return nil
}

// DeleteDestination deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) DeleteDestination(Address string, Port NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union) {
	key := NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key{
		Address: Address,
		Port:    Port,
	}

	delete(t.Destination, key)
}

// AppendDestination appends the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination struct to the
// list Destination of NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) AppendDestination(v *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) error {
	if v.Address == nil {
		return fmt.Errorf("invalid nil key for Address")
	}

	key := NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key{
		Address: *v.Address,
		Port:    v.Port,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Destination == nil {
		t.Destination = make(map[NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Key]*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination)
	}

	if _, ok := t.Destination[key]; ok {
		return fmt.Errorf("duplicate key for list Destination %v", key)
	}

	t.Destination[key] = v
	return nil
}

// GetOrCreateTcpKeepalive retrieves the value of the TcpKeepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetOrCreateTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive {
	if t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	t.TcpKeepalive = &NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive{}
	return t.TcpKeepalive
}

// GetTcpKeepalive returns the value of the TcpKeepalive struct pointer
// from NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup. If the receiver or the field TcpKeepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetTcpKeepalive() *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive {
	if t != nil && t.TcpKeepalive != nil {
		return t.TcpKeepalive
	}
	return nil
}

// GetAllowUnsecureConnection retrieves the value of the leaf AllowUnsecureConnection from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowUnsecureConnection is set, it can
// safely use t.GetAllowUnsecureConnection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowUnsecureConnection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetAllowUnsecureConnection() YANGEmpty {
	if t == nil || t.AllowUnsecureConnection == false {
		return false
	}
	return t.AllowUnsecureConnection
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetTlsClientProfile retrieves the value of the leaf TlsClientProfile from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TlsClientProfile is set, it can
// safely use t.GetTlsClientProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TlsClientProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) GetTlsClientProfile() string {
	if t == nil || t.TlsClientProfile == nil {
		return ""
	}
	return *t.TlsClientProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.TcpKeepalive.PopulateDefaults()
	for _, e := range t.Destination {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination represents the /nokia-conf/configure/groups/group/system/telemetry/destination-group/destination YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination struct {
	Address        *string                                                                                   `path:"address" module:"nokia-conf"`
	Port           NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union `path:"port" module:"nokia-conf"`
	RouterInstance *string                                                                                   `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) IsYANGGoStruct() {
}

// GetAddress retrieves the value of the leaf Address from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Address is set, it can
// safely use t.GetAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) GetAddress() string {
	if t == nil || t.Address == nil {
		return ""
	}
	return *t.Address
}

// GetPort retrieves the value of the leaf Port from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Port is set, it can
// safely use t.GetPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Port == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) GetPort() NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination_Port_Union {
	if t == nil || t.Port == nil {
		return nil
	}
	return t.Port
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Address == nil {
		return nil, fmt.Errorf("nil value for key Address")
	}

	return map[string]interface{}{
		"address": *t.Address,
		"port":    t.Port,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_Destination) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive represents the /nokia-conf/configure/groups/group/system/telemetry/destination-group/tcp-keepalive YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	IdleTime   *uint32                     `path:"idle-time" module:"nokia-conf"`
	Interval   *uint32                     `path:"interval" module:"nokia-conf"`
	Retries    *uint32                     `path:"retries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetIdleTime retrieves the value of the leaf IdleTime from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IdleTime is set, it can
// safely use t.GetIdleTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IdleTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) GetIdleTime() uint32 {
	if t == nil || t.IdleTime == nil {
		return 600
	}
	return *t.IdleTime
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 15
	}
	return *t.Interval
}

// GetRetries retrieves the value of the leaf Retries from the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retries is set, it can
// safely use t.GetRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) GetRetries() uint32 {
	if t == nil || t.Retries == nil {
		return 4
	}
	return *t.Retries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IdleTime == nil {
		var v uint32 = 600
		t.IdleTime = &v
	}
	if t.Interval == nil {
		var v uint32 = 15
		t.Interval = &v
	}
	if t.Retries == nil {
		var v uint32 = 4
		t.Retries = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_DestinationGroup_TcpKeepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling represents the /nokia-conf/configure/groups/group/system/telemetry/notification-bundling YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling struct {
	AdminState         E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	MaxMsgCount        *uint32                     `path:"max-msg-count" module:"nokia-conf"`
	MaxTimeGranularity *uint32                     `path:"max-time-granularity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetMaxMsgCount retrieves the value of the leaf MaxMsgCount from the NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxMsgCount is set, it can
// safely use t.GetMaxMsgCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxMsgCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) GetMaxMsgCount() uint32 {
	if t == nil || t.MaxMsgCount == nil {
		return 100
	}
	return *t.MaxMsgCount
}

// GetMaxTimeGranularity retrieves the value of the leaf MaxTimeGranularity from the NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxTimeGranularity is set, it can
// safely use t.GetMaxTimeGranularity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxTimeGranularity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) GetMaxTimeGranularity() uint32 {
	if t == nil || t.MaxTimeGranularity == nil {
		return 100
	}
	return *t.MaxTimeGranularity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.MaxMsgCount == nil {
		var v uint32 = 100
		t.MaxMsgCount = &v
	}
	if t.MaxTimeGranularity == nil {
		var v uint32 = 100
		t.MaxTimeGranularity = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_NotificationBundling) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions represents the /nokia-conf/configure/groups/group/system/telemetry/persistent-subscriptions YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions struct {
	Subscription map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription `path:"subscription" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) IsYANGGoStruct() {}

// NewSubscription creates a new entry in the Subscription list of the
// NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) NewSubscription(Name string) (*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscription == nil {
		t.Subscription = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Subscription[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Subscription", key)
	}

	t.Subscription[key] = &NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription{
		Name: &Name,
	}

	return t.Subscription[key], nil
}

// RenameSubscription renames an entry in the list Subscription within
// the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) RenameSubscription(oldK, newK string) error {
	if _, ok := t.Subscription[newK]; ok {
		return fmt.Errorf("key %v already exists in Subscription", newK)
	}

	e, ok := t.Subscription[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Subscription", oldK)
	}
	e.Name = &newK

	t.Subscription[newK] = e
	delete(t.Subscription, oldK)
	return nil
}

// GetOrCreateSubscription retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) GetOrCreateSubscription(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription {

	key := Name

	if v, ok := t.Subscription[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSubscription(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSubscription got unexpected error: %v", err))
	}
	return v
}

// GetSubscription retrieves the value with the specified key from
// the Subscription map field of NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) GetSubscription(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.Subscription[key]; ok {
		return lm
	}
	return nil
}

// DeleteSubscription deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) DeleteSubscription(Name string) {
	key := Name

	delete(t.Subscription, key)
}

// AppendSubscription appends the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription struct to the
// list Subscription of NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) AppendSubscription(v *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Subscription == nil {
		t.Subscription = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription)
	}

	if _, ok := t.Subscription[key]; ok {
		return fmt.Errorf("duplicate key for list Subscription %v", key)
	}

	t.Subscription[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Subscription {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription represents the /nokia-conf/configure/groups/group/system/telemetry/persistent-subscriptions/subscription YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription struct {
	AdminState           E_NokiaTypesSros_AdminState               `path:"admin-state" module:"nokia-conf"`
	Description          *string                                   `path:"description" module:"nokia-conf"`
	DestinationGroup     *string                                   `path:"destination-group" module:"nokia-conf"`
	Encoding             E_NokiaTypesSystem_TelemetryValueEncoding `path:"encoding" module:"nokia-conf"`
	LocalSourceAddress   *string                                   `path:"local-source-address" module:"nokia-conf"`
	Mode                 E_NokiaTypesSystem_TelemetryPathMode      `path:"mode" module:"nokia-conf"`
	Name                 *string                                   `path:"name" module:"nokia-conf"`
	OriginatedQosMarking E_NokiaTypesQos_DscpName                  `path:"originated-qos-marking" module:"nokia-conf"`
	SampleInterval       *uint64                                   `path:"sample-interval" module:"nokia-conf"`
	SensorGroup          *string                                   `path:"sensor-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) IsYANGGoStruct() {
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDestinationGroup retrieves the value of the leaf DestinationGroup from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestinationGroup is set, it can
// safely use t.GetDestinationGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestinationGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetDestinationGroup() string {
	if t == nil || t.DestinationGroup == nil {
		return ""
	}
	return *t.DestinationGroup
}

// GetEncoding retrieves the value of the leaf Encoding from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Encoding is set, it can
// safely use t.GetEncoding() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Encoding == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetEncoding() E_NokiaTypesSystem_TelemetryValueEncoding {
	if t == nil || t.Encoding == 0 {
		return NokiaTypesSystem_TelemetryValueEncoding_json
	}
	return t.Encoding
}

// GetLocalSourceAddress retrieves the value of the leaf LocalSourceAddress from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalSourceAddress is set, it can
// safely use t.GetLocalSourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalSourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetLocalSourceAddress() string {
	if t == nil || t.LocalSourceAddress == nil {
		return ""
	}
	return *t.LocalSourceAddress
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetMode() E_NokiaTypesSystem_TelemetryPathMode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOriginatedQosMarking retrieves the value of the leaf OriginatedQosMarking from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OriginatedQosMarking is set, it can
// safely use t.GetOriginatedQosMarking() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OriginatedQosMarking == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetOriginatedQosMarking() E_NokiaTypesQos_DscpName {
	if t == nil || t.OriginatedQosMarking == 0 {
		return 0
	}
	return t.OriginatedQosMarking
}

// GetSampleInterval retrieves the value of the leaf SampleInterval from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleInterval is set, it can
// safely use t.GetSampleInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetSampleInterval() uint64 {
	if t == nil || t.SampleInterval == nil {
		return 10000
	}
	return *t.SampleInterval
}

// GetSensorGroup retrieves the value of the leaf SensorGroup from the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SensorGroup is set, it can
// safely use t.GetSensorGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SensorGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) GetSensorGroup() string {
	if t == nil || t.SensorGroup == nil {
		return ""
	}
	return *t.SensorGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Encoding == 0 {
		t.Encoding = NokiaTypesSystem_TelemetryValueEncoding_json
	}
	if t.SampleInterval == nil {
		var v uint64 = 10000
		t.SampleInterval = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_PersistentSubscriptions_Subscription) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups represents the /nokia-conf/configure/groups/group/system/telemetry/sensor-groups YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups struct {
	SensorGroup map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup `path:"sensor-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) IsYANGGoStruct() {}

// NewSensorGroup creates a new entry in the SensorGroup list of the
// NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) NewSensorGroup(Name string) (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.SensorGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list SensorGroup", key)
	}

	t.SensorGroup[key] = &NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup{
		Name: &Name,
	}

	return t.SensorGroup[key], nil
}

// RenameSensorGroup renames an entry in the list SensorGroup within
// the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) RenameSensorGroup(oldK, newK string) error {
	if _, ok := t.SensorGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in SensorGroup", newK)
	}

	e, ok := t.SensorGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in SensorGroup", oldK)
	}
	e.Name = &newK

	t.SensorGroup[newK] = e
	delete(t.SensorGroup, oldK)
	return nil
}

// GetOrCreateSensorGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) GetOrCreateSensorGroup(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup {

	key := Name

	if v, ok := t.SensorGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewSensorGroup(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateSensorGroup got unexpected error: %v", err))
	}
	return v
}

// GetSensorGroup retrieves the value with the specified key from
// the SensorGroup map field of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) GetSensorGroup(Name string) *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.SensorGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteSensorGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) DeleteSensorGroup(Name string) {
	key := Name

	delete(t.SensorGroup, key)
}

// AppendSensorGroup appends the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup struct to the
// list SensorGroup of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) AppendSensorGroup(v *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.SensorGroup == nil {
		t.SensorGroup = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup)
	}

	if _, ok := t.SensorGroup[key]; ok {
		return fmt.Errorf("duplicate key for list SensorGroup %v", key)
	}

	t.SensorGroup[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.SensorGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup represents the /nokia-conf/configure/groups/group/system/telemetry/sensor-groups/sensor-group YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup struct {
	Description *string                                                                                     `path:"description" module:"nokia-conf"`
	Name        *string                                                                                     `path:"name" module:"nokia-conf"`
	Path        map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path `path:"path" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) IsYANGGoStruct() {}

// NewPath creates a new entry in the Path list of the
// NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) NewPath(Xpath string) (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path)
	}

	key := Xpath

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Path[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Path", key)
	}

	t.Path[key] = &NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path{
		Xpath: &Xpath,
	}

	return t.Path[key], nil
}

// RenamePath renames an entry in the list Path within
// the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) RenamePath(oldK, newK string) error {
	if _, ok := t.Path[newK]; ok {
		return fmt.Errorf("key %v already exists in Path", newK)
	}

	e, ok := t.Path[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Path", oldK)
	}
	e.Xpath = &newK

	t.Path[newK] = e
	delete(t.Path, oldK)
	return nil
}

// GetOrCreatePath retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) GetOrCreatePath(Xpath string) *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path {

	key := Xpath

	if v, ok := t.Path[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPath(Xpath)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePath got unexpected error: %v", err))
	}
	return v
}

// GetPath retrieves the value with the specified key from
// the Path map field of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) GetPath(Xpath string) *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path {

	if t == nil {
		return nil
	}

	key := Xpath

	if lm, ok := t.Path[key]; ok {
		return lm
	}
	return nil
}

// DeletePath deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) DeletePath(Xpath string) {
	key := Xpath

	delete(t.Path, key)
}

// AppendPath appends the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path struct to the
// list Path of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) AppendPath(v *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) error {
	if v.Xpath == nil {
		return fmt.Errorf("invalid nil key received for Xpath")
	}

	key := *v.Xpath

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Path == nil {
		t.Path = make(map[string]*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path)
	}

	if _, ok := t.Path[key]; ok {
		return fmt.Errorf("duplicate key for list Path %v", key)
	}

	t.Path[key] = v
	return nil
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Path {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path represents the /nokia-conf/configure/groups/group/system/telemetry/sensor-groups/sensor-group/path YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path struct {
	Xpath *string `path:"xpath" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) IsYANGGoStruct() {
}

// GetXpath retrieves the value of the leaf Xpath from the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Xpath is set, it can
// safely use t.GetXpath() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Xpath == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) GetXpath() string {
	if t == nil || t.Xpath == nil {
		return ""
	}
	return *t.Xpath
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Xpath == nil {
		return nil, fmt.Errorf("nil value for key Xpath")
	}

	return map[string]interface{}{
		"xpath": *t.Xpath,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path.
func (*NokiaConf_Configure_Groups_Group_System_Telemetry_SensorGroups_SensorGroup_Path) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds represents the /nokia-conf/configure/groups/group/system/thresholds YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds struct {
	CflashCapAlarmPercent map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent `path:"cflash-cap-alarm-percent" module:"nokia-conf"`
	CflashCapWarnPercent  map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent  `path:"cflash-cap-warn-percent" module:"nokia-conf"`
	KbMemoryUseAlarm      *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm                 `path:"kb-memory-use-alarm" module:"nokia-conf" yangPresence:"true"`
	KbMemoryUseWarn       *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn                  `path:"kb-memory-use-warn" module:"nokia-conf" yangPresence:"true"`
	Rmon                  *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon                             `path:"rmon" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds) IsYANGGoStruct() {}

// NewCflashCapAlarmPercent creates a new entry in the CflashCapAlarmPercent list of the
// NokiaConf_Configure_Groups_Group_System_Thresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) NewCflashCapAlarmPercent(CflashId string) (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapAlarmPercent == nil {
		t.CflashCapAlarmPercent = make(map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent)
	}

	key := CflashId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CflashCapAlarmPercent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CflashCapAlarmPercent", key)
	}

	t.CflashCapAlarmPercent[key] = &NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent{
		CflashId: &CflashId,
	}

	return t.CflashCapAlarmPercent[key], nil
}

// RenameCflashCapAlarmPercent renames an entry in the list CflashCapAlarmPercent within
// the NokiaConf_Configure_Groups_Group_System_Thresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) RenameCflashCapAlarmPercent(oldK, newK string) error {
	if _, ok := t.CflashCapAlarmPercent[newK]; ok {
		return fmt.Errorf("key %v already exists in CflashCapAlarmPercent", newK)
	}

	e, ok := t.CflashCapAlarmPercent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CflashCapAlarmPercent", oldK)
	}
	e.CflashId = &newK

	t.CflashCapAlarmPercent[newK] = e
	delete(t.CflashCapAlarmPercent, oldK)
	return nil
}

// GetOrCreateCflashCapAlarmPercent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetOrCreateCflashCapAlarmPercent(CflashId string) *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent {

	key := CflashId

	if v, ok := t.CflashCapAlarmPercent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCflashCapAlarmPercent(CflashId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCflashCapAlarmPercent got unexpected error: %v", err))
	}
	return v
}

// GetCflashCapAlarmPercent retrieves the value with the specified key from
// the CflashCapAlarmPercent map field of NokiaConf_Configure_Groups_Group_System_Thresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetCflashCapAlarmPercent(CflashId string) *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent {

	if t == nil {
		return nil
	}

	key := CflashId

	if lm, ok := t.CflashCapAlarmPercent[key]; ok {
		return lm
	}
	return nil
}

// DeleteCflashCapAlarmPercent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) DeleteCflashCapAlarmPercent(CflashId string) {
	key := CflashId

	delete(t.CflashCapAlarmPercent, key)
}

// AppendCflashCapAlarmPercent appends the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent struct to the
// list CflashCapAlarmPercent of NokiaConf_Configure_Groups_Group_System_Thresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) AppendCflashCapAlarmPercent(v *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) error {
	if v.CflashId == nil {
		return fmt.Errorf("invalid nil key received for CflashId")
	}

	key := *v.CflashId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapAlarmPercent == nil {
		t.CflashCapAlarmPercent = make(map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent)
	}

	if _, ok := t.CflashCapAlarmPercent[key]; ok {
		return fmt.Errorf("duplicate key for list CflashCapAlarmPercent %v", key)
	}

	t.CflashCapAlarmPercent[key] = v
	return nil
}

// NewCflashCapWarnPercent creates a new entry in the CflashCapWarnPercent list of the
// NokiaConf_Configure_Groups_Group_System_Thresholds struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) NewCflashCapWarnPercent(CflashId string) (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapWarnPercent == nil {
		t.CflashCapWarnPercent = make(map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent)
	}

	key := CflashId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CflashCapWarnPercent[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CflashCapWarnPercent", key)
	}

	t.CflashCapWarnPercent[key] = &NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent{
		CflashId: &CflashId,
	}

	return t.CflashCapWarnPercent[key], nil
}

// RenameCflashCapWarnPercent renames an entry in the list CflashCapWarnPercent within
// the NokiaConf_Configure_Groups_Group_System_Thresholds struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) RenameCflashCapWarnPercent(oldK, newK string) error {
	if _, ok := t.CflashCapWarnPercent[newK]; ok {
		return fmt.Errorf("key %v already exists in CflashCapWarnPercent", newK)
	}

	e, ok := t.CflashCapWarnPercent[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CflashCapWarnPercent", oldK)
	}
	e.CflashId = &newK

	t.CflashCapWarnPercent[newK] = e
	delete(t.CflashCapWarnPercent, oldK)
	return nil
}

// GetOrCreateCflashCapWarnPercent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetOrCreateCflashCapWarnPercent(CflashId string) *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent {

	key := CflashId

	if v, ok := t.CflashCapWarnPercent[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCflashCapWarnPercent(CflashId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCflashCapWarnPercent got unexpected error: %v", err))
	}
	return v
}

// GetCflashCapWarnPercent retrieves the value with the specified key from
// the CflashCapWarnPercent map field of NokiaConf_Configure_Groups_Group_System_Thresholds. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetCflashCapWarnPercent(CflashId string) *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent {

	if t == nil {
		return nil
	}

	key := CflashId

	if lm, ok := t.CflashCapWarnPercent[key]; ok {
		return lm
	}
	return nil
}

// DeleteCflashCapWarnPercent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) DeleteCflashCapWarnPercent(CflashId string) {
	key := CflashId

	delete(t.CflashCapWarnPercent, key)
}

// AppendCflashCapWarnPercent appends the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent struct to the
// list CflashCapWarnPercent of NokiaConf_Configure_Groups_Group_System_Thresholds. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) AppendCflashCapWarnPercent(v *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) error {
	if v.CflashId == nil {
		return fmt.Errorf("invalid nil key received for CflashId")
	}

	key := *v.CflashId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CflashCapWarnPercent == nil {
		t.CflashCapWarnPercent = make(map[string]*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent)
	}

	if _, ok := t.CflashCapWarnPercent[key]; ok {
		return fmt.Errorf("duplicate key for list CflashCapWarnPercent %v", key)
	}

	t.CflashCapWarnPercent[key] = v
	return nil
}

// GetOrCreateKbMemoryUseAlarm retrieves the value of the KbMemoryUseAlarm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetOrCreateKbMemoryUseAlarm() *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm {
	if t.KbMemoryUseAlarm != nil {
		return t.KbMemoryUseAlarm
	}
	t.KbMemoryUseAlarm = &NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm{}
	return t.KbMemoryUseAlarm
}

// GetOrCreateKbMemoryUseWarn retrieves the value of the KbMemoryUseWarn field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetOrCreateKbMemoryUseWarn() *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn {
	if t.KbMemoryUseWarn != nil {
		return t.KbMemoryUseWarn
	}
	t.KbMemoryUseWarn = &NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn{}
	return t.KbMemoryUseWarn
}

// GetOrCreateRmon retrieves the value of the Rmon field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetOrCreateRmon() *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon {
	if t.Rmon != nil {
		return t.Rmon
	}
	t.Rmon = &NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon{}
	return t.Rmon
}

// GetKbMemoryUseAlarm returns the value of the KbMemoryUseAlarm struct pointer
// from NokiaConf_Configure_Groups_Group_System_Thresholds. If the receiver or the field KbMemoryUseAlarm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetKbMemoryUseAlarm() *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm {
	if t != nil && t.KbMemoryUseAlarm != nil {
		return t.KbMemoryUseAlarm
	}
	return nil
}

// GetKbMemoryUseWarn returns the value of the KbMemoryUseWarn struct pointer
// from NokiaConf_Configure_Groups_Group_System_Thresholds. If the receiver or the field KbMemoryUseWarn is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetKbMemoryUseWarn() *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn {
	if t != nil && t.KbMemoryUseWarn != nil {
		return t.KbMemoryUseWarn
	}
	return nil
}

// GetRmon returns the value of the Rmon struct pointer
// from NokiaConf_Configure_Groups_Group_System_Thresholds. If the receiver or the field Rmon is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) GetRmon() *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon {
	if t != nil && t.Rmon != nil {
		return t.Rmon
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.KbMemoryUseAlarm.PopulateDefaults()
	t.KbMemoryUseWarn.PopulateDefaults()
	t.Rmon.PopulateDefaults()
	for _, e := range t.CflashCapAlarmPercent {
		e.PopulateDefaults()
	}
	for _, e := range t.CflashCapWarnPercent {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent represents the /nokia-conf/configure/groups/group/system/thresholds/cflash-cap-alarm-percent YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent struct {
	CflashId         *string                                  `path:"cflash-id" module:"nokia-conf"`
	FallingThreshold *int32                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval         *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold  *int32                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType    E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm     E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) IsYANGGoStruct() {}

// GetCflashId retrieves the value of the leaf CflashId from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CflashId is set, it can
// safely use t.GetCflashId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CflashId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetCflashId() string {
	if t == nil || t.CflashId == nil {
		return ""
	}
	return *t.CflashId
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetFallingThreshold() int32 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetRisingThreshold() int32 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CflashId == nil {
		return nil, fmt.Errorf("nil value for key CflashId")
	}

	return map[string]interface{}{
		"cflash-id": *t.CflashId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapAlarmPercent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent represents the /nokia-conf/configure/groups/group/system/thresholds/cflash-cap-warn-percent YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent struct {
	CflashId         *string                                  `path:"cflash-id" module:"nokia-conf"`
	FallingThreshold *int32                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval         *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold  *int32                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType    E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm     E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) IsYANGGoStruct() {}

// GetCflashId retrieves the value of the leaf CflashId from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CflashId is set, it can
// safely use t.GetCflashId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CflashId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetCflashId() string {
	if t == nil || t.CflashId == nil {
		return ""
	}
	return *t.CflashId
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetFallingThreshold() int32 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetRisingThreshold() int32 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CflashId == nil {
		return nil, fmt.Errorf("nil value for key CflashId")
	}

	return map[string]interface{}{
		"cflash-id": *t.CflashId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_CflashCapWarnPercent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm represents the /nokia-conf/configure/groups/group/system/thresholds/kb-memory-use-alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm struct {
	FallingThreshold *int64                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval         *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold  *int64                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType    E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm     E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) IsYANGGoStruct() {}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseAlarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn represents the /nokia-conf/configure/groups/group/system/thresholds/kb-memory-use-warn YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn struct {
	FallingThreshold *int64                                   `path:"falling-threshold" module:"nokia-conf"`
	Interval         *int32                                   `path:"interval" module:"nokia-conf"`
	RisingThreshold  *int64                                   `path:"rising-threshold" module:"nokia-conf"`
	RmonEventType    E_NokiaTypesSystem_ThresholdEventType    `path:"rmon-event-type" module:"nokia-conf"`
	StartupAlarm     E_NokiaTypesSystem_ThresholdStartupAlarm `path:"startup-alarm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) IsYANGGoStruct() {}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonEventType retrieves the value of the leaf RmonEventType from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventType is set, it can
// safely use t.GetRmonEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) GetRmonEventType() E_NokiaTypesSystem_ThresholdEventType {
	if t == nil || t.RmonEventType == 0 {
		return NokiaTypesSystem_ThresholdEventType_both
	}
	return t.RmonEventType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RmonEventType == 0 {
		t.RmonEventType = NokiaTypesSystem_ThresholdEventType_both
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_KbMemoryUseWarn) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon represents the /nokia-conf/configure/groups/group/system/thresholds/rmon YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon struct {
	Alarm map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm `path:"alarm" module:"nokia-conf"`
	Event map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event `path:"event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) IsYANGGoStruct() {}

// NewAlarm creates a new entry in the Alarm list of the
// NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) NewAlarm(RmonAlarmId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union) (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm)
	}

	key := RmonAlarmId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Alarm[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Alarm", key)
	}

	t.Alarm[key] = &NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm{
		RmonAlarmId: RmonAlarmId,
	}

	return t.Alarm[key], nil
}

// RenameAlarm renames an entry in the list Alarm within
// the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) RenameAlarm(oldK, newK NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union) error {
	if _, ok := t.Alarm[newK]; ok {
		return fmt.Errorf("key %v already exists in Alarm", newK)
	}

	e, ok := t.Alarm[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Alarm", oldK)
	}
	e.RmonAlarmId = newK

	t.Alarm[newK] = e
	delete(t.Alarm, oldK)
	return nil
}

// GetOrCreateAlarm retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) GetOrCreateAlarm(RmonAlarmId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union) *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm {

	key := RmonAlarmId

	if v, ok := t.Alarm[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAlarm(RmonAlarmId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAlarm got unexpected error: %v", err))
	}
	return v
}

// GetAlarm retrieves the value with the specified key from
// the Alarm map field of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) GetAlarm(RmonAlarmId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union) *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm {

	if t == nil {
		return nil
	}

	key := RmonAlarmId

	if lm, ok := t.Alarm[key]; ok {
		return lm
	}
	return nil
}

// DeleteAlarm deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) DeleteAlarm(RmonAlarmId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union) {
	key := RmonAlarmId

	delete(t.Alarm, key)
}

// AppendAlarm appends the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm struct to the
// list Alarm of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) AppendAlarm(v *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) error {
	key := v.RmonAlarmId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Alarm == nil {
		t.Alarm = make(map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm)
	}

	if _, ok := t.Alarm[key]; ok {
		return fmt.Errorf("duplicate key for list Alarm %v", key)
	}

	t.Alarm[key] = v
	return nil
}

// NewEvent creates a new entry in the Event list of the
// NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) NewEvent(RmonEventId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union) (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event)
	}

	key := RmonEventId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Event[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Event", key)
	}

	t.Event[key] = &NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event{
		RmonEventId: RmonEventId,
	}

	return t.Event[key], nil
}

// RenameEvent renames an entry in the list Event within
// the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) RenameEvent(oldK, newK NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union) error {
	if _, ok := t.Event[newK]; ok {
		return fmt.Errorf("key %v already exists in Event", newK)
	}

	e, ok := t.Event[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Event", oldK)
	}
	e.RmonEventId = newK

	t.Event[newK] = e
	delete(t.Event, oldK)
	return nil
}

// GetOrCreateEvent retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) GetOrCreateEvent(RmonEventId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union) *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event {

	key := RmonEventId

	if v, ok := t.Event[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEvent(RmonEventId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEvent got unexpected error: %v", err))
	}
	return v
}

// GetEvent retrieves the value with the specified key from
// the Event map field of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) GetEvent(RmonEventId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union) *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event {

	if t == nil {
		return nil
	}

	key := RmonEventId

	if lm, ok := t.Event[key]; ok {
		return lm
	}
	return nil
}

// DeleteEvent deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) DeleteEvent(RmonEventId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union) {
	key := RmonEventId

	delete(t.Event, key)
}

// AppendEvent appends the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event struct to the
// list Event of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) AppendEvent(v *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) error {
	key := v.RmonEventId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Event == nil {
		t.Event = make(map[NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union]*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event)
	}

	if _, ok := t.Event[key]; ok {
		return fmt.Errorf("duplicate key for list Event %v", key)
	}

	t.Event[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Alarm {
		e.PopulateDefaults()
	}
	for _, e := range t.Event {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm represents the /nokia-conf/configure/groups/group/system/thresholds/rmon/alarm YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm struct {
	FallingEvent     *uint32                                                                         `path:"falling-event" module:"nokia-conf"`
	FallingThreshold *int64                                                                          `path:"falling-threshold" module:"nokia-conf"`
	Interval         *int32                                                                          `path:"interval" module:"nokia-conf"`
	Owner            *string                                                                         `path:"owner" module:"nokia-conf"`
	RisingEvent      *uint32                                                                         `path:"rising-event" module:"nokia-conf"`
	RisingThreshold  *int64                                                                          `path:"rising-threshold" module:"nokia-conf"`
	RmonAlarmId      NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union `path:"rmon-alarm-id" module:"nokia-conf"`
	SampleType       E_NokiaTypesSystem_ThresholdSample                                              `path:"sample-type" module:"nokia-conf"`
	StartupAlarm     E_NokiaTypesSystem_ThresholdStartupAlarm                                        `path:"startup-alarm" module:"nokia-conf"`
	VariableOid      *string                                                                         `path:"variable-oid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) IsYANGGoStruct() {}

// GetFallingEvent retrieves the value of the leaf FallingEvent from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingEvent is set, it can
// safely use t.GetFallingEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetFallingEvent() uint32 {
	if t == nil || t.FallingEvent == nil {
		return 0
	}
	return *t.FallingEvent
}

// GetFallingThreshold retrieves the value of the leaf FallingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FallingThreshold is set, it can
// safely use t.GetFallingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FallingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetFallingThreshold() int64 {
	if t == nil || t.FallingThreshold == nil {
		return 0
	}
	return *t.FallingThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetInterval() int32 {
	if t == nil || t.Interval == nil {
		return 0
	}
	return *t.Interval
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetOwner() string {
	if t == nil || t.Owner == nil {
		return "TiMOS CLI"
	}
	return *t.Owner
}

// GetRisingEvent retrieves the value of the leaf RisingEvent from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingEvent is set, it can
// safely use t.GetRisingEvent() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingEvent == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetRisingEvent() uint32 {
	if t == nil || t.RisingEvent == nil {
		return 0
	}
	return *t.RisingEvent
}

// GetRisingThreshold retrieves the value of the leaf RisingThreshold from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RisingThreshold is set, it can
// safely use t.GetRisingThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RisingThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetRisingThreshold() int64 {
	if t == nil || t.RisingThreshold == nil {
		return 0
	}
	return *t.RisingThreshold
}

// GetRmonAlarmId retrieves the value of the leaf RmonAlarmId from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonAlarmId is set, it can
// safely use t.GetRmonAlarmId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonAlarmId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetRmonAlarmId() NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm_RmonAlarmId_Union {
	if t == nil || t.RmonAlarmId == nil {
		return nil
	}
	return t.RmonAlarmId
}

// GetSampleType retrieves the value of the leaf SampleType from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SampleType is set, it can
// safely use t.GetSampleType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SampleType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetSampleType() E_NokiaTypesSystem_ThresholdSample {
	if t == nil || t.SampleType == 0 {
		return NokiaTypesSystem_ThresholdSample_absolute
	}
	return t.SampleType
}

// GetStartupAlarm retrieves the value of the leaf StartupAlarm from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StartupAlarm is set, it can
// safely use t.GetStartupAlarm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StartupAlarm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetStartupAlarm() E_NokiaTypesSystem_ThresholdStartupAlarm {
	if t == nil || t.StartupAlarm == 0 {
		return NokiaTypesSystem_ThresholdStartupAlarm_either
	}
	return t.StartupAlarm
}

// GetVariableOid retrieves the value of the leaf VariableOid from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VariableOid is set, it can
// safely use t.GetVariableOid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VariableOid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) GetVariableOid() string {
	if t == nil || t.VariableOid == nil {
		return ""
	}
	return *t.VariableOid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Owner == nil {
		var v string = "TiMOS CLI"
		t.Owner = &v
	}
	if t.SampleType == 0 {
		t.SampleType = NokiaTypesSystem_ThresholdSample_absolute
	}
	if t.StartupAlarm == 0 {
		t.StartupAlarm = NokiaTypesSystem_ThresholdStartupAlarm_either
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rmon-alarm-id": t.RmonAlarmId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Alarm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event represents the /nokia-conf/configure/groups/group/system/thresholds/rmon/event YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event struct {
	Description *string                                                                         `path:"description" module:"nokia-conf"`
	EventType   E_NokiaTypesSystem_ThresholdRmonEventType                                       `path:"event-type" module:"nokia-conf"`
	Owner       *string                                                                         `path:"owner" module:"nokia-conf"`
	RmonEventId NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union `path:"rmon-event-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) GetEventType() E_NokiaTypesSystem_ThresholdRmonEventType {
	if t == nil || t.EventType == 0 {
		return NokiaTypesSystem_ThresholdRmonEventType_both
	}
	return t.EventType
}

// GetOwner retrieves the value of the leaf Owner from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Owner is set, it can
// safely use t.GetOwner() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Owner == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) GetOwner() string {
	if t == nil || t.Owner == nil {
		return "TiMOS CLI"
	}
	return *t.Owner
}

// GetRmonEventId retrieves the value of the leaf RmonEventId from the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RmonEventId is set, it can
// safely use t.GetRmonEventId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RmonEventId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) GetRmonEventId() NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event_RmonEventId_Union {
	if t == nil || t.RmonEventId == nil {
		return nil
	}
	return t.RmonEventId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaTypesSystem_ThresholdRmonEventType_both
	}
	if t.Owner == nil {
		var v string = "TiMOS CLI"
		t.Owner = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"rmon-event-id": t.RmonEventId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event.
func (*NokiaConf_Configure_Groups_Group_System_Thresholds_Rmon_Event) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time represents the /nokia-conf/configure/groups/group/system/time YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time struct {
	DstZone         map[string]*NokiaConf_Configure_Groups_Group_System_Time_DstZone `path:"dst-zone" module:"nokia-conf"`
	Ntp             *NokiaConf_Configure_Groups_Group_System_Time_Ntp                `path:"ntp" module:"nokia-conf" yangPresence:"true"`
	PreferLocalTime *bool                                                            `path:"prefer-local-time" module:"nokia-conf"`
	Sntp            *NokiaConf_Configure_Groups_Group_System_Time_Sntp               `path:"sntp" module:"nokia-conf" yangPresence:"true"`
	Zone            *NokiaConf_Configure_Groups_Group_System_Time_Zone               `path:"zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time) IsYANGGoStruct() {}

// NewDstZone creates a new entry in the DstZone list of the
// NokiaConf_Configure_Groups_Group_System_Time struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time) NewDstZone(SummerTimeZone string) (*NokiaConf_Configure_Groups_Group_System_Time_DstZone, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DstZone == nil {
		t.DstZone = make(map[string]*NokiaConf_Configure_Groups_Group_System_Time_DstZone)
	}

	key := SummerTimeZone

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.DstZone[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list DstZone", key)
	}

	t.DstZone[key] = &NokiaConf_Configure_Groups_Group_System_Time_DstZone{
		SummerTimeZone: &SummerTimeZone,
	}

	return t.DstZone[key], nil
}

// RenameDstZone renames an entry in the list DstZone within
// the NokiaConf_Configure_Groups_Group_System_Time struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time) RenameDstZone(oldK, newK string) error {
	if _, ok := t.DstZone[newK]; ok {
		return fmt.Errorf("key %v already exists in DstZone", newK)
	}

	e, ok := t.DstZone[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in DstZone", oldK)
	}
	e.SummerTimeZone = &newK

	t.DstZone[newK] = e
	delete(t.DstZone, oldK)
	return nil
}

// GetOrCreateDstZone retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetOrCreateDstZone(SummerTimeZone string) *NokiaConf_Configure_Groups_Group_System_Time_DstZone {

	key := SummerTimeZone

	if v, ok := t.DstZone[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewDstZone(SummerTimeZone)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateDstZone got unexpected error: %v", err))
	}
	return v
}

// GetDstZone retrieves the value with the specified key from
// the DstZone map field of NokiaConf_Configure_Groups_Group_System_Time. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetDstZone(SummerTimeZone string) *NokiaConf_Configure_Groups_Group_System_Time_DstZone {

	if t == nil {
		return nil
	}

	key := SummerTimeZone

	if lm, ok := t.DstZone[key]; ok {
		return lm
	}
	return nil
}

// DeleteDstZone deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time) DeleteDstZone(SummerTimeZone string) {
	key := SummerTimeZone

	delete(t.DstZone, key)
}

// AppendDstZone appends the supplied NokiaConf_Configure_Groups_Group_System_Time_DstZone struct to the
// list DstZone of NokiaConf_Configure_Groups_Group_System_Time. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_DstZone already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time) AppendDstZone(v *NokiaConf_Configure_Groups_Group_System_Time_DstZone) error {
	if v.SummerTimeZone == nil {
		return fmt.Errorf("invalid nil key received for SummerTimeZone")
	}

	key := *v.SummerTimeZone

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.DstZone == nil {
		t.DstZone = make(map[string]*NokiaConf_Configure_Groups_Group_System_Time_DstZone)
	}

	if _, ok := t.DstZone[key]; ok {
		return fmt.Errorf("duplicate key for list DstZone %v", key)
	}

	t.DstZone[key] = v
	return nil
}

// GetOrCreateNtp retrieves the value of the Ntp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetOrCreateNtp() *NokiaConf_Configure_Groups_Group_System_Time_Ntp {
	if t.Ntp != nil {
		return t.Ntp
	}
	t.Ntp = &NokiaConf_Configure_Groups_Group_System_Time_Ntp{}
	return t.Ntp
}

// GetOrCreateSntp retrieves the value of the Sntp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetOrCreateSntp() *NokiaConf_Configure_Groups_Group_System_Time_Sntp {
	if t.Sntp != nil {
		return t.Sntp
	}
	t.Sntp = &NokiaConf_Configure_Groups_Group_System_Time_Sntp{}
	return t.Sntp
}

// GetOrCreateZone retrieves the value of the Zone field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetOrCreateZone() *NokiaConf_Configure_Groups_Group_System_Time_Zone {
	if t.Zone != nil {
		return t.Zone
	}
	t.Zone = &NokiaConf_Configure_Groups_Group_System_Time_Zone{}
	return t.Zone
}

// GetNtp returns the value of the Ntp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time. If the receiver or the field Ntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetNtp() *NokiaConf_Configure_Groups_Group_System_Time_Ntp {
	if t != nil && t.Ntp != nil {
		return t.Ntp
	}
	return nil
}

// GetSntp returns the value of the Sntp struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time. If the receiver or the field Sntp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetSntp() *NokiaConf_Configure_Groups_Group_System_Time_Sntp {
	if t != nil && t.Sntp != nil {
		return t.Sntp
	}
	return nil
}

// GetZone returns the value of the Zone struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time. If the receiver or the field Zone is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetZone() *NokiaConf_Configure_Groups_Group_System_Time_Zone {
	if t != nil && t.Zone != nil {
		return t.Zone
	}
	return nil
}

// GetPreferLocalTime retrieves the value of the leaf PreferLocalTime from the NokiaConf_Configure_Groups_Group_System_Time
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreferLocalTime is set, it can
// safely use t.GetPreferLocalTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreferLocalTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time) GetPreferLocalTime() bool {
	if t == nil || t.PreferLocalTime == nil {
		return false
	}
	return *t.PreferLocalTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.PreferLocalTime == nil {
		var v bool = false
		t.PreferLocalTime = &v
	}
	t.Ntp.PopulateDefaults()
	t.Sntp.PopulateDefaults()
	t.Zone.PopulateDefaults()
	for _, e := range t.DstZone {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time.
func (*NokiaConf_Configure_Groups_Group_System_Time) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_DstZone represents the /nokia-conf/configure/groups/group/system/time/dst-zone YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_DstZone struct {
	End            *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End   `path:"end" module:"nokia-conf"`
	Offset         *uint32                                                     `path:"offset" module:"nokia-conf"`
	Start          *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start `path:"start" module:"nokia-conf"`
	SummerTimeZone *string                                                     `path:"summer-time-zone" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_DstZone implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone) IsYANGGoStruct() {}

// GetOrCreateEnd retrieves the value of the End field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetOrCreateEnd() *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End {
	if t.End != nil {
		return t.End
	}
	t.End = &NokiaConf_Configure_Groups_Group_System_Time_DstZone_End{}
	return t.End
}

// GetOrCreateStart retrieves the value of the Start field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetOrCreateStart() *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start {
	if t.Start != nil {
		return t.Start
	}
	t.Start = &NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start{}
	return t.Start
}

// GetEnd returns the value of the End struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_DstZone. If the receiver or the field End is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetEnd() *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End {
	if t != nil && t.End != nil {
		return t.End
	}
	return nil
}

// GetStart returns the value of the Start struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_DstZone. If the receiver or the field Start is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetStart() *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start {
	if t != nil && t.Start != nil {
		return t.Start
	}
	return nil
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetOffset() uint32 {
	if t == nil || t.Offset == nil {
		return 60
	}
	return *t.Offset
}

// GetSummerTimeZone retrieves the value of the leaf SummerTimeZone from the NokiaConf_Configure_Groups_Group_System_Time_DstZone
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SummerTimeZone is set, it can
// safely use t.GetSummerTimeZone() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SummerTimeZone == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) GetSummerTimeZone() string {
	if t == nil || t.SummerTimeZone == nil {
		return ""
	}
	return *t.SummerTimeZone
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_DstZone
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Offset == nil {
		var v uint32 = 60
		t.Offset = &v
	}
	t.End.PopulateDefaults()
	t.Start.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_DstZone struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SummerTimeZone == nil {
		return nil, fmt.Errorf("nil value for key SummerTimeZone")
	}

	return map[string]interface{}{
		"summer-time-zone": *t.SummerTimeZone,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_DstZone"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_DstZone.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_DstZone_End represents the /nokia-conf/configure/groups/group/system/time/dst-zone/end YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_DstZone_End struct {
	Day          E_NokiaTypesSystem_DayOfWeekNameLong `path:"day" module:"nokia-conf"`
	HoursMinutes *string                              `path:"hours-minutes" module:"nokia-conf"`
	Month        E_NokiaTypesSystem_MonthNameLong     `path:"month" module:"nokia-conf"`
	Week         E_NokiaTypesSystem_Week              `path:"week" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_DstZone_End implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) IsYANGGoStruct() {}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) GetDay() E_NokiaTypesSystem_DayOfWeekNameLong {
	if t == nil || t.Day == 0 {
		return NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	return t.Day
}

// GetHoursMinutes retrieves the value of the leaf HoursMinutes from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutes is set, it can
// safely use t.GetHoursMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) GetHoursMinutes() string {
	if t == nil || t.HoursMinutes == nil {
		return "00:00"
	}
	return *t.HoursMinutes
}

// GetMonth retrieves the value of the leaf Month from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Month is set, it can
// safely use t.GetMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Month == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) GetMonth() E_NokiaTypesSystem_MonthNameLong {
	if t == nil || t.Month == 0 {
		return NokiaTypesSystem_MonthNameLong_january
	}
	return t.Month
}

// GetWeek retrieves the value of the leaf Week from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_End
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Week is set, it can
// safely use t.GetWeek() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Week == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) GetWeek() E_NokiaTypesSystem_Week {
	if t == nil || t.Week == 0 {
		return NokiaTypesSystem_Week_first
	}
	return t.Week
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_DstZone_End
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Day == 0 {
		t.Day = NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	if t.HoursMinutes == nil {
		var v string = "00:00"
		t.HoursMinutes = &v
	}
	if t.Month == 0 {
		t.Month = NokiaTypesSystem_MonthNameLong_january
	}
	if t.Week == 0 {
		t.Week = NokiaTypesSystem_Week_first
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_DstZone_End"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_DstZone_End.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone_End) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start represents the /nokia-conf/configure/groups/group/system/time/dst-zone/start YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start struct {
	Day          E_NokiaTypesSystem_DayOfWeekNameLong `path:"day" module:"nokia-conf"`
	HoursMinutes *string                              `path:"hours-minutes" module:"nokia-conf"`
	Month        E_NokiaTypesSystem_MonthNameLong     `path:"month" module:"nokia-conf"`
	Week         E_NokiaTypesSystem_Week              `path:"week" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) IsYANGGoStruct() {}

// GetDay retrieves the value of the leaf Day from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Day is set, it can
// safely use t.GetDay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Day == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) GetDay() E_NokiaTypesSystem_DayOfWeekNameLong {
	if t == nil || t.Day == 0 {
		return NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	return t.Day
}

// GetHoursMinutes retrieves the value of the leaf HoursMinutes from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutes is set, it can
// safely use t.GetHoursMinutes() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutes == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) GetHoursMinutes() string {
	if t == nil || t.HoursMinutes == nil {
		return "00:00"
	}
	return *t.HoursMinutes
}

// GetMonth retrieves the value of the leaf Month from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Month is set, it can
// safely use t.GetMonth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Month == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) GetMonth() E_NokiaTypesSystem_MonthNameLong {
	if t == nil || t.Month == 0 {
		return NokiaTypesSystem_MonthNameLong_january
	}
	return t.Month
}

// GetWeek retrieves the value of the leaf Week from the NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Week is set, it can
// safely use t.GetWeek() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Week == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) GetWeek() E_NokiaTypesSystem_Week {
	if t == nil || t.Week == 0 {
		return NokiaTypesSystem_Week_first
	}
	return t.Week
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Day == 0 {
		t.Day = NokiaTypesSystem_DayOfWeekNameLong_sunday
	}
	if t.HoursMinutes == nil {
		var v string = "00:00"
		t.HoursMinutes = &v
	}
	if t.Month == 0 {
		t.Month = NokiaTypesSystem_MonthNameLong_january
	}
	if t.Week == 0 {
		t.Week = NokiaTypesSystem_Week_first
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start.
func (*NokiaConf_Configure_Groups_Group_System_Time_DstZone_Start) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp represents the /nokia-conf/configure/groups/group/system/time/ntp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp struct {
	AdminState          E_NokiaTypesSros_AdminState                                                                                                                            `path:"admin-state" module:"nokia-conf"`
	AuthenticationCheck *bool                                                                                                                                                  `path:"authentication-check" module:"nokia-conf"`
	AuthenticationKey   map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey `path:"authentication-key" module:"nokia-conf"`
	Broadcast           map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast                         `path:"broadcast" module:"nokia-conf"`
	BroadcastClient     map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient             `path:"broadcast-client" module:"nokia-conf"`
	Multicast           *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast                                                                                            `path:"multicast" module:"nokia-conf" yangPresence:"true"`
	MulticastClient     *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient                                                                                      `path:"multicast-client" module:"nokia-conf" yangPresence:"true"`
	NtpServer           *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer                                                                                            `path:"ntp-server" module:"nokia-conf" yangPresence:"true"`
	Peer                map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer                                   `path:"peer" module:"nokia-conf"`
	Server              map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server                               `path:"server" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp) IsYANGGoStruct() {}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key represents the key for list Broadcast of element /nokia-conf/configure/groups/group/system/time/ntp.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key struct {
	RouterInstance string `path:"router-instance"`
	InterfaceName  string `path:"interface-name"`
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key represents the key for list BroadcastClient of element /nokia-conf/configure/groups/group/system/time/ntp.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key struct {
	RouterInstance string `path:"router-instance"`
	InterfaceName  string `path:"interface-name"`
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key represents the key for list Peer of element /nokia-conf/configure/groups/group/system/time/ntp.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key struct {
	IpAddress      string `path:"ip-address"`
	RouterInstance string `path:"router-instance"`
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key represents the key for list Server of element /nokia-conf/configure/groups/group/system/time/ntp.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key struct {
	IpAddress      NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union `path:"ip-address"`
	RouterInstance string                                                                  `path:"router-instance"`
}

// NewAuthenticationKey creates a new entry in the AuthenticationKey list of the
// NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) NewAuthenticationKey(KeyId NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union) (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey)
	}

	key := KeyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AuthenticationKey[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AuthenticationKey", key)
	}

	t.AuthenticationKey[key] = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey{
		KeyId: KeyId,
	}

	return t.AuthenticationKey[key], nil
}

// RenameAuthenticationKey renames an entry in the list AuthenticationKey within
// the NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) RenameAuthenticationKey(oldK, newK NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union) error {
	if _, ok := t.AuthenticationKey[newK]; ok {
		return fmt.Errorf("key %v already exists in AuthenticationKey", newK)
	}

	e, ok := t.AuthenticationKey[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AuthenticationKey", oldK)
	}
	e.KeyId = newK

	t.AuthenticationKey[newK] = e
	delete(t.AuthenticationKey, oldK)
	return nil
}

// GetOrCreateAuthenticationKey retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateAuthenticationKey(KeyId NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey {

	key := KeyId

	if v, ok := t.AuthenticationKey[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAuthenticationKey(KeyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAuthenticationKey got unexpected error: %v", err))
	}
	return v
}

// GetAuthenticationKey retrieves the value with the specified key from
// the AuthenticationKey map field of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetAuthenticationKey(KeyId NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey {

	if t == nil {
		return nil
	}

	key := KeyId

	if lm, ok := t.AuthenticationKey[key]; ok {
		return lm
	}
	return nil
}

// DeleteAuthenticationKey deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) DeleteAuthenticationKey(KeyId NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union) {
	key := KeyId

	delete(t.AuthenticationKey, key)
}

// AppendAuthenticationKey appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey struct to the
// list AuthenticationKey of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) AppendAuthenticationKey(v *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) error {
	key := v.KeyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationKey == nil {
		t.AuthenticationKey = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey)
	}

	if _, ok := t.AuthenticationKey[key]; ok {
		return fmt.Errorf("duplicate key for list AuthenticationKey %v", key)
	}

	t.AuthenticationKey[key] = v
	return nil
}

// NewBroadcast creates a new entry in the Broadcast list of the
// NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) NewBroadcast(RouterInstance string, InterfaceName string) (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast)
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Broadcast[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Broadcast", key)
	}

	t.Broadcast[key] = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast{
		RouterInstance: &RouterInstance,
		InterfaceName:  &InterfaceName,
	}

	return t.Broadcast[key], nil
}

// RenameBroadcast renames an entry in the list Broadcast within
// the NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) RenameBroadcast(oldK, newK NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key) error {
	if _, ok := t.Broadcast[newK]; ok {
		return fmt.Errorf("key %v already exists in Broadcast", newK)
	}

	e, ok := t.Broadcast[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Broadcast", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.InterfaceName = &newK.InterfaceName

	t.Broadcast[newK] = e
	delete(t.Broadcast, oldK)
	return nil
}

// GetOrCreateBroadcast retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateBroadcast(RouterInstance string, InterfaceName string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast {

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if v, ok := t.Broadcast[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBroadcast(RouterInstance, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBroadcast got unexpected error: %v", err))
	}
	return v
}

// GetBroadcast retrieves the value with the specified key from
// the Broadcast map field of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetBroadcast(RouterInstance string, InterfaceName string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if lm, ok := t.Broadcast[key]; ok {
		return lm
	}
	return nil
}

// DeleteBroadcast deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) DeleteBroadcast(RouterInstance string, InterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	delete(t.Broadcast, key)
}

// AppendBroadcast appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast struct to the
// list Broadcast of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) AppendBroadcast(v *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key{
		RouterInstance: *v.RouterInstance,
		InterfaceName:  *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Broadcast == nil {
		t.Broadcast = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast)
	}

	if _, ok := t.Broadcast[key]; ok {
		return fmt.Errorf("duplicate key for list Broadcast %v", key)
	}

	t.Broadcast[key] = v
	return nil
}

// NewBroadcastClient creates a new entry in the BroadcastClient list of the
// NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) NewBroadcastClient(RouterInstance string, InterfaceName string) (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BroadcastClient == nil {
		t.BroadcastClient = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient)
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.BroadcastClient[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list BroadcastClient", key)
	}

	t.BroadcastClient[key] = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient{
		RouterInstance: &RouterInstance,
		InterfaceName:  &InterfaceName,
	}

	return t.BroadcastClient[key], nil
}

// RenameBroadcastClient renames an entry in the list BroadcastClient within
// the NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) RenameBroadcastClient(oldK, newK NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key) error {
	if _, ok := t.BroadcastClient[newK]; ok {
		return fmt.Errorf("key %v already exists in BroadcastClient", newK)
	}

	e, ok := t.BroadcastClient[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in BroadcastClient", oldK)
	}
	e.RouterInstance = &newK.RouterInstance
	e.InterfaceName = &newK.InterfaceName

	t.BroadcastClient[newK] = e
	delete(t.BroadcastClient, oldK)
	return nil
}

// GetOrCreateBroadcastClient retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateBroadcastClient(RouterInstance string, InterfaceName string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient {

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if v, ok := t.BroadcastClient[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewBroadcastClient(RouterInstance, InterfaceName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateBroadcastClient got unexpected error: %v", err))
	}
	return v
}

// GetBroadcastClient retrieves the value with the specified key from
// the BroadcastClient map field of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetBroadcastClient(RouterInstance string, InterfaceName string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	if lm, ok := t.BroadcastClient[key]; ok {
		return lm
	}
	return nil
}

// DeleteBroadcastClient deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) DeleteBroadcastClient(RouterInstance string, InterfaceName string) {
	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: RouterInstance,
		InterfaceName:  InterfaceName,
	}

	delete(t.BroadcastClient, key)
}

// AppendBroadcastClient appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient struct to the
// list BroadcastClient of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) AppendBroadcastClient(v *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	if v.InterfaceName == nil {
		return fmt.Errorf("invalid nil key for InterfaceName")
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key{
		RouterInstance: *v.RouterInstance,
		InterfaceName:  *v.InterfaceName,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.BroadcastClient == nil {
		t.BroadcastClient = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient)
	}

	if _, ok := t.BroadcastClient[key]; ok {
		return fmt.Errorf("duplicate key for list BroadcastClient %v", key)
	}

	t.BroadcastClient[key] = v
	return nil
}

// NewPeer creates a new entry in the Peer list of the
// NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) NewPeer(IpAddress string, RouterInstance string) (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer)
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Peer[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Peer", key)
	}

	t.Peer[key] = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer{
		IpAddress:      &IpAddress,
		RouterInstance: &RouterInstance,
	}

	return t.Peer[key], nil
}

// RenamePeer renames an entry in the list Peer within
// the NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) RenamePeer(oldK, newK NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key) error {
	if _, ok := t.Peer[newK]; ok {
		return fmt.Errorf("key %v already exists in Peer", newK)
	}

	e, ok := t.Peer[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Peer", oldK)
	}
	e.IpAddress = &newK.IpAddress
	e.RouterInstance = &newK.RouterInstance

	t.Peer[newK] = e
	delete(t.Peer, oldK)
	return nil
}

// GetOrCreatePeer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreatePeer(IpAddress string, RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer {

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if v, ok := t.Peer[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPeer(IpAddress, RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePeer got unexpected error: %v", err))
	}
	return v
}

// GetPeer retrieves the value with the specified key from
// the Peer map field of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetPeer(IpAddress string, RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if lm, ok := t.Peer[key]; ok {
		return lm
	}
	return nil
}

// DeletePeer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) DeletePeer(IpAddress string, RouterInstance string) {
	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	delete(t.Peer, key)
}

// AppendPeer appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer struct to the
// list Peer of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) AppendPeer(v *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key for IpAddress")
	}

	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key{
		IpAddress:      *v.IpAddress,
		RouterInstance: *v.RouterInstance,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Peer == nil {
		t.Peer = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer)
	}

	if _, ok := t.Peer[key]; ok {
		return fmt.Errorf("duplicate key for list Peer %v", key)
	}

	t.Peer[key] = v
	return nil
}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) NewServer(IpAddress NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server)
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server{
		IpAddress:      IpAddress,
		RouterInstance: &RouterInstance,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Time_Ntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) RenameServer(oldK, newK NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = newK.IpAddress
	e.RouterInstance = &newK.RouterInstance

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateServer(IpAddress NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server {

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress, RouterInstance)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetServer(IpAddress NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Ntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) DeleteServer(IpAddress NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union, RouterInstance string) {
	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key{
		IpAddress:      IpAddress,
		RouterInstance: RouterInstance,
	}

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) error {
	if v.RouterInstance == nil {
		return fmt.Errorf("invalid nil key for RouterInstance")
	}

	key := NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key{
		IpAddress:      v.IpAddress,
		RouterInstance: *v.RouterInstance,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_Key]*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetOrCreateMulticast retrieves the value of the Multicast field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateMulticast() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast {
	if t.Multicast != nil {
		return t.Multicast
	}
	t.Multicast = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast{}
	return t.Multicast
}

// GetOrCreateMulticastClient retrieves the value of the MulticastClient field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateMulticastClient() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient {
	if t.MulticastClient != nil {
		return t.MulticastClient
	}
	t.MulticastClient = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient{}
	return t.MulticastClient
}

// GetOrCreateNtpServer retrieves the value of the NtpServer field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetOrCreateNtpServer() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer {
	if t.NtpServer != nil {
		return t.NtpServer
	}
	t.NtpServer = &NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer{}
	return t.NtpServer
}

// GetMulticast returns the value of the Multicast struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver or the field Multicast is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetMulticast() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast {
	if t != nil && t.Multicast != nil {
		return t.Multicast
	}
	return nil
}

// GetMulticastClient returns the value of the MulticastClient struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver or the field MulticastClient is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetMulticastClient() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient {
	if t != nil && t.MulticastClient != nil {
		return t.MulticastClient
	}
	return nil
}

// GetNtpServer returns the value of the NtpServer struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_Ntp. If the receiver or the field NtpServer is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetNtpServer() *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer {
	if t != nil && t.NtpServer != nil {
		return t.NtpServer
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAuthenticationCheck retrieves the value of the leaf AuthenticationCheck from the NokiaConf_Configure_Groups_Group_System_Time_Ntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthenticationCheck is set, it can
// safely use t.GetAuthenticationCheck() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthenticationCheck == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) GetAuthenticationCheck() bool {
	if t == nil || t.AuthenticationCheck == nil {
		return true
	}
	return *t.AuthenticationCheck
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AuthenticationCheck == nil {
		var v bool = true
		t.AuthenticationCheck = &v
	}
	t.Multicast.PopulateDefaults()
	t.MulticastClient.PopulateDefaults()
	t.NtpServer.PopulateDefaults()
	for _, e := range t.AuthenticationKey {
		e.PopulateDefaults()
	}
	for _, e := range t.Broadcast {
		e.PopulateDefaults()
	}
	for _, e := range t.BroadcastClient {
		e.PopulateDefaults()
	}
	for _, e := range t.Peer {
		e.PopulateDefaults()
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey represents the /nokia-conf/configure/groups/group/system/time/ntp/authentication-key YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey struct {
	Key   *string                                                                        `path:"key" module:"nokia-conf"`
	KeyId NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union `path:"key-id" module:"nokia-conf"`
	Type  E_NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_Type      `path:"type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) IsYANGGoStruct() {}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) GetKeyId() NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_KeyId_Union {
	if t == nil || t.KeyId == nil {
		return nil
	}
	return t.KeyId
}

// GetType retrieves the value of the leaf Type from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Type is set, it can
// safely use t.GetType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Type == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) GetType() E_NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey_Type {
	if t == nil || t.Type == 0 {
		return 0
	}
	return t.Type
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"key-id": t.KeyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_AuthenticationKey) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast represents the /nokia-conf/configure/groups/group/system/time/ntp/broadcast YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast struct {
	InterfaceName  *string `path:"interface-name" module:"nokia-conf"`
	KeyId          *uint32 `path:"key-id" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	Ttl            *uint32 `path:"ttl" module:"nokia-conf"`
	Version        *uint32 `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) IsYANGGoStruct() {}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 127
	}
	return *t.Ttl
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ttl == nil {
		var v uint32 = 127
		t.Ttl = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"interface-name":  *t.InterfaceName,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Broadcast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient represents the /nokia-conf/configure/groups/group/system/time/ntp/broadcast-client YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient struct {
	Authenticate   *bool   `path:"authenticate" module:"nokia-conf"`
	InterfaceName  *string `path:"interface-name" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) IsYANGGoStruct() {}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// GetInterfaceName retrieves the value of the leaf InterfaceName from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceName is set, it can
// safely use t.GetInterfaceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) GetInterfaceName() string {
	if t == nil || t.InterfaceName == nil {
		return ""
	}
	return *t.InterfaceName
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) ΛListKeyMap() (map[string]interface{}, error) {
	if t.InterfaceName == nil {
		return nil, fmt.Errorf("nil value for key InterfaceName")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"interface-name":  *t.InterfaceName,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_BroadcastClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast represents the /nokia-conf/configure/groups/group/system/time/ntp/multicast YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast struct {
	KeyId   *uint32 `path:"key-id" module:"nokia-conf"`
	Version *uint32 `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) IsYANGGoStruct() {}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Multicast) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient represents the /nokia-conf/configure/groups/group/system/time/ntp/multicast-client YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient struct {
	Authenticate *bool `path:"authenticate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) IsYANGGoStruct() {}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_MulticastClient) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer represents the /nokia-conf/configure/groups/group/system/time/ntp/ntp-server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer struct {
	Authenticate *bool `path:"authenticate" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) IsYANGGoStruct() {}

// GetAuthenticate retrieves the value of the leaf Authenticate from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Authenticate is set, it can
// safely use t.GetAuthenticate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Authenticate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) GetAuthenticate() bool {
	if t == nil || t.Authenticate == nil {
		return false
	}
	return *t.Authenticate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Authenticate == nil {
		var v bool = false
		t.Authenticate = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_NtpServer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer represents the /nokia-conf/configure/groups/group/system/time/ntp/peer YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer struct {
	IpAddress      *string `path:"ip-address" module:"nokia-conf"`
	KeyId          *uint32 `path:"key-id" module:"nokia-conf"`
	Prefer         *bool   `path:"prefer" module:"nokia-conf"`
	RouterInstance *string `path:"router-instance" module:"nokia-conf"`
	Version        *uint32 `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      *t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Peer) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server represents the /nokia-conf/configure/groups/group/system/time/ntp/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server struct {
	IpAddress      NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union `path:"ip-address" module:"nokia-conf"`
	KeyId          *uint32                                                                 `path:"key-id" module:"nokia-conf"`
	Prefer         *bool                                                                   `path:"prefer" module:"nokia-conf"`
	RouterInstance *string                                                                 `path:"router-instance" module:"nokia-conf"`
	Version        *uint32                                                                 `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) IsYANGGoStruct() {}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) GetIpAddress() NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server_IpAddress_Union {
	if t == nil || t.IpAddress == nil {
		return nil
	}
	return t.IpAddress
}

// GetKeyId retrieves the value of the leaf KeyId from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeyId is set, it can
// safely use t.GetKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) GetKeyId() uint32 {
	if t == nil || t.KeyId == nil {
		return 0
	}
	return *t.KeyId
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) GetVersion() uint32 {
	if t == nil || t.Version == nil {
		return 4
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v uint32 = 4
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) ΛListKeyMap() (map[string]interface{}, error) {

	if t.RouterInstance == nil {
		return nil, fmt.Errorf("nil value for key RouterInstance")
	}

	return map[string]interface{}{
		"ip-address":      t.IpAddress,
		"router-instance": *t.RouterInstance,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server.
func (*NokiaConf_Configure_Groups_Group_System_Time_Ntp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Sntp represents the /nokia-conf/configure/groups/group/system/time/sntp YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Sntp struct {
	AdminState E_NokiaTypesSros_AdminState                                          `path:"admin-state" module:"nokia-conf"`
	Server     map[string]*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server `path:"server" module:"nokia-conf"`
	SntpState  E_NokiaTypesRouter_UnicastBroadcast                                  `path:"sntp-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Sntp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Sntp) IsYANGGoStruct() {}

// NewServer creates a new entry in the Server list of the
// NokiaConf_Configure_Groups_Group_System_Time_Sntp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) NewServer(IpAddress string) (*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Server[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Server", key)
	}

	t.Server[key] = &NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server{
		IpAddress: &IpAddress,
	}

	return t.Server[key], nil
}

// RenameServer renames an entry in the list Server within
// the NokiaConf_Configure_Groups_Group_System_Time_Sntp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) RenameServer(oldK, newK string) error {
	if _, ok := t.Server[newK]; ok {
		return fmt.Errorf("key %v already exists in Server", newK)
	}

	e, ok := t.Server[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Server", oldK)
	}
	e.IpAddress = &newK

	t.Server[newK] = e
	delete(t.Server, oldK)
	return nil
}

// GetOrCreateServer retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Sntp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) GetOrCreateServer(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server {

	key := IpAddress

	if v, ok := t.Server[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServer(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServer got unexpected error: %v", err))
	}
	return v
}

// GetServer retrieves the value with the specified key from
// the Server map field of NokiaConf_Configure_Groups_Group_System_Time_Sntp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) GetServer(IpAddress string) *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.Server[key]; ok {
		return lm
	}
	return nil
}

// DeleteServer deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_System_Time_Sntp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) DeleteServer(IpAddress string) {
	key := IpAddress

	delete(t.Server, key)
}

// AppendServer appends the supplied NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server struct to the
// list Server of NokiaConf_Configure_Groups_Group_System_Time_Sntp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) AppendServer(v *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Server == nil {
		t.Server = make(map[string]*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server)
	}

	if _, ok := t.Server[key]; ok {
		return fmt.Errorf("duplicate key for list Server %v", key)
	}

	t.Server[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetSntpState retrieves the value of the leaf SntpState from the NokiaConf_Configure_Groups_Group_System_Time_Sntp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SntpState is set, it can
// safely use t.GetSntpState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SntpState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) GetSntpState() E_NokiaTypesRouter_UnicastBroadcast {
	if t == nil || t.SntpState == 0 {
		return NokiaTypesRouter_UnicastBroadcast_unicast
	}
	return t.SntpState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Sntp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.SntpState == 0 {
		t.SntpState = NokiaTypesRouter_UnicastBroadcast_unicast
	}
	for _, e := range t.Server {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Sntp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Sntp.
func (*NokiaConf_Configure_Groups_Group_System_Time_Sntp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server represents the /nokia-conf/configure/groups/group/system/time/sntp/server YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server struct {
	Interval  *uint32 `path:"interval" module:"nokia-conf"`
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
	Prefer    *bool   `path:"prefer" module:"nokia-conf"`
	Version   *int32  `path:"version" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 64
	}
	return *t.Interval
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPrefer retrieves the value of the leaf Prefer from the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefer is set, it can
// safely use t.GetPrefer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) GetPrefer() bool {
	if t == nil || t.Prefer == nil {
		return false
	}
	return *t.Prefer
}

// GetVersion retrieves the value of the leaf Version from the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Version is set, it can
// safely use t.GetVersion() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Version == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) GetVersion() int32 {
	if t == nil || t.Version == nil {
		return 3
	}
	return *t.Version
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 64
		t.Interval = &v
	}
	if t.Prefer == nil {
		var v bool = false
		t.Prefer = &v
	}
	if t.Version == nil {
		var v int32 = 3
		t.Version = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server.
func (*NokiaConf_Configure_Groups_Group_System_Time_Sntp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Zone represents the /nokia-conf/configure/groups/group/system/time/zone YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Zone struct {
	NonStandard *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard `path:"non-standard" module:"nokia-conf"`
	Standard    *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard    `path:"standard" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Zone implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone) IsYANGGoStruct() {}

// GetOrCreateNonStandard retrieves the value of the NonStandard field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) GetOrCreateNonStandard() *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard {
	if t.NonStandard != nil {
		return t.NonStandard
	}
	t.NonStandard = &NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard{}
	return t.NonStandard
}

// GetOrCreateStandard retrieves the value of the Standard field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) GetOrCreateStandard() *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard {
	if t.Standard != nil {
		return t.Standard
	}
	t.Standard = &NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard{}
	return t.Standard
}

// GetNonStandard returns the value of the NonStandard struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_Zone. If the receiver or the field NonStandard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) GetNonStandard() *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard {
	if t != nil && t.NonStandard != nil {
		return t.NonStandard
	}
	return nil
}

// GetStandard returns the value of the Standard struct pointer
// from NokiaConf_Configure_Groups_Group_System_Time_Zone. If the receiver or the field Standard is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) GetStandard() *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard {
	if t != nil && t.Standard != nil {
		return t.Standard
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Zone
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.NonStandard.PopulateDefaults()
	t.Standard.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Zone"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Zone.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard represents the /nokia-conf/configure/groups/group/system/time/zone/non-standard YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard struct {
	Name   *string `path:"name" module:"nokia-conf"`
	Offset *string `path:"offset" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetOffset retrieves the value of the leaf Offset from the NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Offset is set, it can
// safely use t.GetOffset() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Offset == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) GetOffset() string {
	if t == nil || t.Offset == nil {
		return ""
	}
	return *t.Offset
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone_NonStandard) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard represents the /nokia-conf/configure/groups/group/system/time/zone/standard YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard struct {
	Name E_NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard_Name `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) IsYANGGoStruct() {}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) GetName() E_NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard_Name {
	if t == nil || t.Name == 0 {
		return NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard_Name_utc
	}
	return t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == 0 {
		t.Name = NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard_Name_utc
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard.
func (*NokiaConf_Configure_Groups_Group_System_Time_Zone_Standard) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_TransmissionProfile represents the /nokia-conf/configure/groups/group/system/transmission-profile YANG schema element.
type NokiaConf_Configure_Groups_Group_System_TransmissionProfile struct {
	Ipv4SourceAddress *string `path:"ipv4-source-address" module:"nokia-conf"`
	Ipv6SourceAddress *string `path:"ipv6-source-address" module:"nokia-conf"`
	Name              *string `path:"name" module:"nokia-conf"`
	Redirection       *uint32 `path:"redirection" module:"nokia-conf"`
	Retry             *uint32 `path:"retry" module:"nokia-conf"`
	RouterInstance    *string `path:"router-instance" module:"nokia-conf"`
	Timeout           *uint32 `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_TransmissionProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_TransmissionProfile) IsYANGGoStruct() {}

// GetIpv4SourceAddress retrieves the value of the leaf Ipv4SourceAddress from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4SourceAddress is set, it can
// safely use t.GetIpv4SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetIpv4SourceAddress() string {
	if t == nil || t.Ipv4SourceAddress == nil {
		return ""
	}
	return *t.Ipv4SourceAddress
}

// GetIpv6SourceAddress retrieves the value of the leaf Ipv6SourceAddress from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6SourceAddress is set, it can
// safely use t.GetIpv6SourceAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6SourceAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetIpv6SourceAddress() string {
	if t == nil || t.Ipv6SourceAddress == nil {
		return ""
	}
	return *t.Ipv6SourceAddress
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRedirection retrieves the value of the leaf Redirection from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Redirection is set, it can
// safely use t.GetRedirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Redirection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetRedirection() uint32 {
	if t == nil || t.Redirection == nil {
		return 0
	}
	return *t.Redirection
}

// GetRetry retrieves the value of the leaf Retry from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Retry is set, it can
// safely use t.GetRetry() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Retry == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetRetry() uint32 {
	if t == nil || t.Retry == nil {
		return 0
	}
	return *t.Retry
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return "Base"
	}
	return *t.RouterInstance
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 60
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_TransmissionProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RouterInstance == nil {
		var v string = "Base"
		t.RouterInstance = &v
	}
	if t.Timeout == nil {
		var v uint32 = 60
		t.Timeout = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_TransmissionProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_TransmissionProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_TransmissionProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_TransmissionProfile.
func (*NokiaConf_Configure_Groups_Group_System_TransmissionProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_System_Usb represents the /nokia-conf/configure/groups/group/system/usb YANG schema element.
type NokiaConf_Configure_Groups_Group_System_Usb struct {
	AdminState E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	UsbCflash  NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union `path:"usb-cflash" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_System_Usb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_System_Usb) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetUsbCflash retrieves the value of the leaf UsbCflash from the NokiaConf_Configure_Groups_Group_System_Usb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UsbCflash is set, it can
// safely use t.GetUsbCflash() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UsbCflash == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) GetUsbCflash() NokiaConf_Configure_Groups_Group_System_Usb_UsbCflash_Union {
	if t == nil || t.UsbCflash == nil {
		return nil
	}
	return t.UsbCflash
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_System_Usb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_System_Usb struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"usb-cflash": t.UsbCflash,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_System_Usb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_System_Usb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_System_Usb.
func (*NokiaConf_Configure_Groups_Group_System_Usb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam represents the /nokia-conf/configure/groups/group/test-oam YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam struct {
	Icmp                      *NokiaConf_Configure_Groups_Group_TestOam_Icmp                      `path:"icmp" module:"nokia-conf"`
	LinkMeasurement           *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement           `path:"link-measurement" module:"nokia-conf"`
	MplsDm                    *NokiaConf_Configure_Groups_Group_TestOam_MplsDm                    `path:"mpls-dm" module:"nokia-conf" yangPresence:"true"`
	ServiceActivationTesthead *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead `path:"service-activation-testhead" module:"nokia-conf" yangPresence:"true"`
	Twamp                     *NokiaConf_Configure_Groups_Group_TestOam_Twamp                     `path:"twamp" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam) IsYANGGoStruct() {}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetOrCreateIcmp() *NokiaConf_Configure_Groups_Group_TestOam_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Groups_Group_TestOam_Icmp{}
	return t.Icmp
}

// GetOrCreateLinkMeasurement retrieves the value of the LinkMeasurement field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetOrCreateLinkMeasurement() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement {
	if t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	t.LinkMeasurement = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement{}
	return t.LinkMeasurement
}

// GetOrCreateMplsDm retrieves the value of the MplsDm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetOrCreateMplsDm() *NokiaConf_Configure_Groups_Group_TestOam_MplsDm {
	if t.MplsDm != nil {
		return t.MplsDm
	}
	t.MplsDm = &NokiaConf_Configure_Groups_Group_TestOam_MplsDm{}
	return t.MplsDm
}

// GetOrCreateServiceActivationTesthead retrieves the value of the ServiceActivationTesthead field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetOrCreateServiceActivationTesthead() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead {
	if t.ServiceActivationTesthead != nil {
		return t.ServiceActivationTesthead
	}
	t.ServiceActivationTesthead = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead{}
	return t.ServiceActivationTesthead
}

// GetOrCreateTwamp retrieves the value of the Twamp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetOrCreateTwamp() *NokiaConf_Configure_Groups_Group_TestOam_Twamp {
	if t.Twamp != nil {
		return t.Twamp
	}
	t.Twamp = &NokiaConf_Configure_Groups_Group_TestOam_Twamp{}
	return t.Twamp
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetIcmp() *NokiaConf_Configure_Groups_Group_TestOam_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetLinkMeasurement returns the value of the LinkMeasurement struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam. If the receiver or the field LinkMeasurement is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetLinkMeasurement() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement {
	if t != nil && t.LinkMeasurement != nil {
		return t.LinkMeasurement
	}
	return nil
}

// GetMplsDm returns the value of the MplsDm struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam. If the receiver or the field MplsDm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetMplsDm() *NokiaConf_Configure_Groups_Group_TestOam_MplsDm {
	if t != nil && t.MplsDm != nil {
		return t.MplsDm
	}
	return nil
}

// GetServiceActivationTesthead returns the value of the ServiceActivationTesthead struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam. If the receiver or the field ServiceActivationTesthead is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetServiceActivationTesthead() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead {
	if t != nil && t.ServiceActivationTesthead != nil {
		return t.ServiceActivationTesthead
	}
	return nil
}

// GetTwamp returns the value of the Twamp struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam. If the receiver or the field Twamp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam) GetTwamp() *NokiaConf_Configure_Groups_Group_TestOam_Twamp {
	if t != nil && t.Twamp != nil {
		return t.Twamp
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmp.PopulateDefaults()
	t.LinkMeasurement.PopulateDefaults()
	t.MplsDm.PopulateDefaults()
	t.ServiceActivationTesthead.PopulateDefaults()
	t.Twamp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam.
func (*NokiaConf_Configure_Groups_Group_TestOam) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Icmp represents the /nokia-conf/configure/groups/group/test-oam/icmp YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Icmp struct {
	PingTemplate map[string]*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate `path:"ping-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Icmp) IsYANGGoStruct() {}

// NewPingTemplate creates a new entry in the PingTemplate list of the
// NokiaConf_Configure_Groups_Group_TestOam_Icmp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) NewPingTemplate(Name string) (*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PingTemplate == nil {
		t.PingTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PingTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PingTemplate", key)
	}

	t.PingTemplate[key] = &NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate{
		Name: &Name,
	}

	return t.PingTemplate[key], nil
}

// RenamePingTemplate renames an entry in the list PingTemplate within
// the NokiaConf_Configure_Groups_Group_TestOam_Icmp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) RenamePingTemplate(oldK, newK string) error {
	if _, ok := t.PingTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in PingTemplate", newK)
	}

	e, ok := t.PingTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PingTemplate", oldK)
	}
	e.Name = &newK

	t.PingTemplate[newK] = e
	delete(t.PingTemplate, oldK)
	return nil
}

// GetOrCreatePingTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_Icmp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) GetOrCreatePingTemplate(Name string) *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate {

	key := Name

	if v, ok := t.PingTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPingTemplate(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePingTemplate got unexpected error: %v", err))
	}
	return v
}

// GetPingTemplate retrieves the value with the specified key from
// the PingTemplate map field of NokiaConf_Configure_Groups_Group_TestOam_Icmp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) GetPingTemplate(Name string) *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.PingTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeletePingTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_Icmp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) DeletePingTemplate(Name string) {
	key := Name

	delete(t.PingTemplate, key)
}

// AppendPingTemplate appends the supplied NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate struct to the
// list PingTemplate of NokiaConf_Configure_Groups_Group_TestOam_Icmp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) AppendPingTemplate(v *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PingTemplate == nil {
		t.PingTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate)
	}

	if _, ok := t.PingTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list PingTemplate %v", key)
	}

	t.PingTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.PingTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Icmp.
func (*NokiaConf_Configure_Groups_Group_TestOam_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate represents the /nokia-conf/configure/groups/group/test-oam/icmp/ping-template YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate struct {
	Description                  *string                  `path:"description" module:"nokia-conf"`
	Dot1P                        *int32                   `path:"dot1p" module:"nokia-conf"`
	Dscp                         E_NokiaTypesQos_DscpName `path:"dscp" module:"nokia-conf"`
	FailureThreshold             *uint32                  `path:"failure-threshold" module:"nokia-conf"`
	Interval                     *uint32                  `path:"interval" module:"nokia-conf"`
	Name                         *string                  `path:"name" module:"nokia-conf"`
	ReactivationFailureThreshold *uint32                  `path:"reactivation-failure-threshold" module:"nokia-conf"`
	ReactivationInterval         *uint32                  `path:"reactivation-interval" module:"nokia-conf"`
	ReactivationThreshold        *uint32                  `path:"reactivation-threshold" module:"nokia-conf"`
	ReactivationTimeout          *uint32                  `path:"reactivation-timeout" module:"nokia-conf"`
	Size                         *uint32                  `path:"size" module:"nokia-conf"`
	Timeout                      *uint32                  `path:"timeout" module:"nokia-conf"`
	Ttl                          *uint32                  `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetDot1P() int32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return NokiaTypesQos_DscpName_nc1
	}
	return t.Dscp
}

// GetFailureThreshold retrieves the value of the leaf FailureThreshold from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureThreshold is set, it can
// safely use t.GetFailureThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetFailureThreshold() uint32 {
	if t == nil || t.FailureThreshold == nil {
		return 3
	}
	return *t.FailureThreshold
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 60
	}
	return *t.Interval
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReactivationFailureThreshold retrieves the value of the leaf ReactivationFailureThreshold from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationFailureThreshold is set, it can
// safely use t.GetReactivationFailureThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationFailureThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetReactivationFailureThreshold() uint32 {
	if t == nil || t.ReactivationFailureThreshold == nil {
		return 4
	}
	return *t.ReactivationFailureThreshold
}

// GetReactivationInterval retrieves the value of the leaf ReactivationInterval from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationInterval is set, it can
// safely use t.GetReactivationInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetReactivationInterval() uint32 {
	if t == nil || t.ReactivationInterval == nil {
		return 1
	}
	return *t.ReactivationInterval
}

// GetReactivationThreshold retrieves the value of the leaf ReactivationThreshold from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationThreshold is set, it can
// safely use t.GetReactivationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetReactivationThreshold() uint32 {
	if t == nil || t.ReactivationThreshold == nil {
		return 3
	}
	return *t.ReactivationThreshold
}

// GetReactivationTimeout retrieves the value of the leaf ReactivationTimeout from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReactivationTimeout is set, it can
// safely use t.GetReactivationTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReactivationTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetReactivationTimeout() uint32 {
	if t == nil || t.ReactivationTimeout == nil {
		return 1
	}
	return *t.ReactivationTimeout
}

// GetSize retrieves the value of the leaf Size from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Size is set, it can
// safely use t.GetSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Size == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetSize() uint32 {
	if t == nil || t.Size == nil {
		return 56
	}
	return *t.Size
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 5
	}
	return *t.Timeout
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 1
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dot1P == nil {
		var v int32 = 7
		t.Dot1P = &v
	}
	if t.Dscp == 0 {
		t.Dscp = NokiaTypesQos_DscpName_nc1
	}
	if t.FailureThreshold == nil {
		var v uint32 = 3
		t.FailureThreshold = &v
	}
	if t.Interval == nil {
		var v uint32 = 60
		t.Interval = &v
	}
	if t.ReactivationFailureThreshold == nil {
		var v uint32 = 4
		t.ReactivationFailureThreshold = &v
	}
	if t.ReactivationInterval == nil {
		var v uint32 = 1
		t.ReactivationInterval = &v
	}
	if t.ReactivationThreshold == nil {
		var v uint32 = 3
		t.ReactivationThreshold = &v
	}
	if t.ReactivationTimeout == nil {
		var v uint32 = 1
		t.ReactivationTimeout = &v
	}
	if t.Size == nil {
		var v uint32 = 56
		t.Size = &v
	}
	if t.Timeout == nil {
		var v uint32 = 5
		t.Timeout = &v
	}
	if t.Ttl == nil {
		var v uint32 = 1
		t.Ttl = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate.
func (*NokiaConf_Configure_Groups_Group_TestOam_Icmp_PingTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement represents the /nokia-conf/configure/groups/group/test-oam/link-measurement YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement struct {
	MeasurementTemplate map[string]*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate `path:"measurement-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) IsYANGGoStruct() {}

// NewMeasurementTemplate creates a new entry in the MeasurementTemplate list of the
// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) NewMeasurementTemplate(TemplateName string) (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate)
	}

	key := TemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MeasurementTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MeasurementTemplate", key)
	}

	t.MeasurementTemplate[key] = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate{
		TemplateName: &TemplateName,
	}

	return t.MeasurementTemplate[key], nil
}

// RenameMeasurementTemplate renames an entry in the list MeasurementTemplate within
// the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) RenameMeasurementTemplate(oldK, newK string) error {
	if _, ok := t.MeasurementTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in MeasurementTemplate", newK)
	}

	e, ok := t.MeasurementTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MeasurementTemplate", oldK)
	}
	e.TemplateName = &newK

	t.MeasurementTemplate[newK] = e
	delete(t.MeasurementTemplate, oldK)
	return nil
}

// GetOrCreateMeasurementTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) GetOrCreateMeasurementTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate {

	key := TemplateName

	if v, ok := t.MeasurementTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMeasurementTemplate(TemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMeasurementTemplate got unexpected error: %v", err))
	}
	return v
}

// GetMeasurementTemplate retrieves the value with the specified key from
// the MeasurementTemplate map field of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) GetMeasurementTemplate(TemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate {

	if t == nil {
		return nil
	}

	key := TemplateName

	if lm, ok := t.MeasurementTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteMeasurementTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) DeleteMeasurementTemplate(TemplateName string) {
	key := TemplateName

	delete(t.MeasurementTemplate, key)
}

// AppendMeasurementTemplate appends the supplied NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate struct to the
// list MeasurementTemplate of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) AppendMeasurementTemplate(v *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) error {
	if v.TemplateName == nil {
		return fmt.Errorf("invalid nil key received for TemplateName")
	}

	key := *v.TemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MeasurementTemplate == nil {
		t.MeasurementTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate)
	}

	if _, ok := t.MeasurementTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list MeasurementTemplate %v", key)
	}

	t.MeasurementTemplate[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.MeasurementTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate struct {
	AdminState                E_NokiaTypesSros_AdminState                                                                              `path:"admin-state" module:"nokia-conf"`
	AggregateSampleWindow     *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow      `path:"aggregate-sample-window" module:"nokia-conf"`
	Delay                     E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_Delay                     `path:"delay" module:"nokia-conf"`
	Description               *string                                                                                                  `path:"description" module:"nokia-conf"`
	Interval                  *uint32                                                                                                  `path:"interval" module:"nokia-conf"`
	LastReportedDelayHold     *uint32                                                                                                  `path:"last-reported-delay-hold" module:"nokia-conf"`
	SampleWindow              *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow               `path:"sample-window" module:"nokia-conf"`
	TemplateName              *string                                                                                                  `path:"template-name" module:"nokia-conf"`
	TwampLight                *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight                 `path:"twamp-light" module:"nokia-conf"`
	UnidirectionalMeasurement E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement `path:"unidirectional-measurement" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) IsYANGGoStruct() {
}

// GetOrCreateAggregateSampleWindow retrieves the value of the AggregateSampleWindow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateAggregateSampleWindow() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow {
	if t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	t.AggregateSampleWindow = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow{}
	return t.AggregateSampleWindow
}

// GetOrCreateSampleWindow retrieves the value of the SampleWindow field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateSampleWindow() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow {
	if t.SampleWindow != nil {
		return t.SampleWindow
	}
	t.SampleWindow = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow{}
	return t.SampleWindow
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetOrCreateTwampLight() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight{}
	return t.TwampLight
}

// GetAggregateSampleWindow returns the value of the AggregateSampleWindow struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field AggregateSampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetAggregateSampleWindow() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow {
	if t != nil && t.AggregateSampleWindow != nil {
		return t.AggregateSampleWindow
	}
	return nil
}

// GetSampleWindow returns the value of the SampleWindow struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field SampleWindow is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetSampleWindow() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow {
	if t != nil && t.SampleWindow != nil {
		return t.SampleWindow
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetTwampLight() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDelay retrieves the value of the leaf Delay from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Delay is set, it can
// safely use t.GetDelay() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Delay == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetDelay() E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_Delay {
	if t == nil || t.Delay == 0 {
		return NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_Delay_min
	}
	return t.Delay
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLastReportedDelayHold retrieves the value of the leaf LastReportedDelayHold from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LastReportedDelayHold is set, it can
// safely use t.GetLastReportedDelayHold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LastReportedDelayHold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetLastReportedDelayHold() uint32 {
	if t == nil || t.LastReportedDelayHold == nil {
		return 86400
	}
	return *t.LastReportedDelayHold
}

// GetTemplateName retrieves the value of the leaf TemplateName from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TemplateName is set, it can
// safely use t.GetTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetTemplateName() string {
	if t == nil || t.TemplateName == nil {
		return ""
	}
	return *t.TemplateName
}

// GetUnidirectionalMeasurement retrieves the value of the leaf UnidirectionalMeasurement from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UnidirectionalMeasurement is set, it can
// safely use t.GetUnidirectionalMeasurement() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UnidirectionalMeasurement == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) GetUnidirectionalMeasurement() E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement {
	if t == nil || t.UnidirectionalMeasurement == 0 {
		return NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	return t.UnidirectionalMeasurement
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Delay == 0 {
		t.Delay = NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_Delay_min
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LastReportedDelayHold == nil {
		var v uint32 = 86400
		t.LastReportedDelayHold = &v
	}
	if t.UnidirectionalMeasurement == 0 {
		t.UnidirectionalMeasurement = NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_UnidirectionalMeasurement_derived
	}
	t.AggregateSampleWindow.PopulateDefaults()
	t.SampleWindow.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TemplateName == nil {
		return nil, fmt.Errorf("nil value for key TemplateName")
	}

	return map[string]interface{}{
		"template-name": *t.TemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template/aggregate-sample-window YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow struct {
	Multiplier      *uint32                                                                                                       `path:"multiplier" module:"nokia-conf"`
	Threshold       *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold `path:"threshold" module:"nokia-conf"`
	WindowIntegrity *uint32                                                                                                       `path:"window-integrity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) IsYANGGoStruct() {
}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetOrCreateThreshold() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetThreshold() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 12
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 12
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template/aggregate-sample-window/threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"nokia-conf"`
	Relative *uint32 `path:"relative" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_AggregateSampleWindow_Threshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template/sample-window YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow struct {
	Multiplier      *uint32                                                                                              `path:"multiplier" module:"nokia-conf"`
	Threshold       *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold `path:"threshold" module:"nokia-conf"`
	WindowIntegrity *uint32                                                                                              `path:"window-integrity" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) IsYANGGoStruct() {
}

// GetOrCreateThreshold retrieves the value of the Threshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetOrCreateThreshold() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold {
	if t.Threshold != nil {
		return t.Threshold
	}
	t.Threshold = &NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold{}
	return t.Threshold
}

// GetThreshold returns the value of the Threshold struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow. If the receiver or the field Threshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetThreshold() *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold {
	if t != nil && t.Threshold != nil {
		return t.Threshold
	}
	return nil
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 10
	}
	return *t.Multiplier
}

// GetWindowIntegrity retrieves the value of the leaf WindowIntegrity from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WindowIntegrity is set, it can
// safely use t.GetWindowIntegrity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WindowIntegrity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) GetWindowIntegrity() uint32 {
	if t == nil || t.WindowIntegrity == nil {
		return 0
	}
	return *t.WindowIntegrity
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v uint32 = 10
		t.Multiplier = &v
	}
	t.Threshold.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template/sample-window/threshold YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold struct {
	Absolute *uint32 `path:"absolute" module:"nokia-conf"`
	Relative *uint32 `path:"relative" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) IsYANGGoStruct() {
}

// GetAbsolute retrieves the value of the leaf Absolute from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Absolute is set, it can
// safely use t.GetAbsolute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Absolute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) GetAbsolute() uint32 {
	if t == nil || t.Absolute == nil {
		return 0
	}
	return *t.Absolute
}

// GetRelative retrieves the value of the leaf Relative from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Relative is set, it can
// safely use t.GetRelative() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Relative == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) GetRelative() uint32 {
	if t == nil || t.Relative == nil {
		return 0
	}
	return *t.Relative
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_SampleWindow_Threshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight represents the /nokia-conf/configure/groups/group/test-oam/link-measurement/measurement-template/twamp-light YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight struct {
	AllowEgressRemarkDscp    *bool                                                                                                     `path:"allow-egress-remark-dscp" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                                                                     `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	DestUdpPort              *int32                                                                                                    `path:"dest-udp-port" module:"nokia-conf"`
	Dscp                     E_NokiaTypesQos_DscpName                                                                                  `path:"dscp" module:"nokia-conf"`
	Fc                       E_NokiaTypesSros_FcName                                                                                   `path:"fc" module:"nokia-conf"`
	Profile                  E_NokiaTypesQos_ProfileInOut                                                                              `path:"profile" module:"nokia-conf"`
	TimestampFormat          E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat `path:"timestamp-format" module:"nokia-conf"`
	Ttl                      *uint32                                                                                                   `path:"ttl" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) IsYANGGoStruct() {
}

// GetAllowEgressRemarkDscp retrieves the value of the leaf AllowEgressRemarkDscp from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowEgressRemarkDscp is set, it can
// safely use t.GetAllowEgressRemarkDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowEgressRemarkDscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetAllowEgressRemarkDscp() bool {
	if t == nil || t.AllowEgressRemarkDscp == nil {
		return false
	}
	return *t.AllowEgressRemarkDscp
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetDestUdpPort retrieves the value of the leaf DestUdpPort from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DestUdpPort is set, it can
// safely use t.GetDestUdpPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DestUdpPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetDestUdpPort() int32 {
	if t == nil || t.DestUdpPort == nil {
		return 862
	}
	return *t.DestUdpPort
}

// GetDscp retrieves the value of the leaf Dscp from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dscp is set, it can
// safely use t.GetDscp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dscp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetDscp() E_NokiaTypesQos_DscpName {
	if t == nil || t.Dscp == 0 {
		return NokiaTypesQos_DscpName_nc1
	}
	return t.Dscp
}

// GetFc retrieves the value of the leaf Fc from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fc is set, it can
// safely use t.GetFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetFc() E_NokiaTypesSros_FcName {
	if t == nil || t.Fc == 0 {
		return NokiaTypesSros_FcName_h1
	}
	return t.Fc
}

// GetProfile retrieves the value of the leaf Profile from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Profile is set, it can
// safely use t.GetProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Profile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetProfile() E_NokiaTypesQos_ProfileInOut {
	if t == nil || t.Profile == 0 {
		return NokiaTypesQos_ProfileInOut_in
	}
	return t.Profile
}

// GetTimestampFormat retrieves the value of the leaf TimestampFormat from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TimestampFormat is set, it can
// safely use t.GetTimestampFormat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TimestampFormat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetTimestampFormat() E_NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat {
	if t == nil || t.TimestampFormat == 0 {
		return NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat_ntp
	}
	return t.TimestampFormat
}

// GetTtl retrieves the value of the leaf Ttl from the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ttl is set, it can
// safely use t.GetTtl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ttl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) GetTtl() uint32 {
	if t == nil || t.Ttl == nil {
		return 1
	}
	return *t.Ttl
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowEgressRemarkDscp == nil {
		var v bool = false
		t.AllowEgressRemarkDscp = &v
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.DestUdpPort == nil {
		var v int32 = 862
		t.DestUdpPort = &v
	}
	if t.Dscp == 0 {
		t.Dscp = NokiaTypesQos_DscpName_nc1
	}
	if t.Fc == 0 {
		t.Fc = NokiaTypesSros_FcName_h1
	}
	if t.Profile == 0 {
		t.Profile = NokiaTypesQos_ProfileInOut_in
	}
	if t.TimestampFormat == 0 {
		t.TimestampFormat = NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight_TimestampFormat_ntp
	}
	if t.Ttl == nil {
		var v uint32 = 1
		t.Ttl = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight.
func (*NokiaConf_Configure_Groups_Group_TestOam_LinkMeasurement_MeasurementTemplate_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_MplsDm represents the /nokia-conf/configure/groups/group/test-oam/mpls-dm YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_MplsDm struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_MplsDm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_MplsDm) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_TestOam_MplsDm
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_MplsDm) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_MplsDm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_MplsDm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_MplsDm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_MplsDm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_MplsDm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_MplsDm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_MplsDm.
func (*NokiaConf_Configure_Groups_Group_TestOam_MplsDm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct {
	AcceptanceCriteriaTemplate map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate `path:"acceptance-criteria-template" module:"nokia-conf"`
	FrameSizeTemplate          map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate          `path:"frame-size-template" module:"nokia-conf"`
	ServiceTest                map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest                `path:"service-test" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) IsYANGGoStruct() {}

// NewAcceptanceCriteriaTemplate creates a new entry in the AcceptanceCriteriaTemplate list of the
// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) NewAcceptanceCriteriaTemplate(AcTemplateName string) (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcceptanceCriteriaTemplate == nil {
		t.AcceptanceCriteriaTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate)
	}

	key := AcTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AcceptanceCriteriaTemplate", key)
	}

	t.AcceptanceCriteriaTemplate[key] = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate{
		AcTemplateName: &AcTemplateName,
	}

	return t.AcceptanceCriteriaTemplate[key], nil
}

// RenameAcceptanceCriteriaTemplate renames an entry in the list AcceptanceCriteriaTemplate within
// the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) RenameAcceptanceCriteriaTemplate(oldK, newK string) error {
	if _, ok := t.AcceptanceCriteriaTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in AcceptanceCriteriaTemplate", newK)
	}

	e, ok := t.AcceptanceCriteriaTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AcceptanceCriteriaTemplate", oldK)
	}
	e.AcTemplateName = &newK

	t.AcceptanceCriteriaTemplate[newK] = e
	delete(t.AcceptanceCriteriaTemplate, oldK)
	return nil
}

// GetOrCreateAcceptanceCriteriaTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetOrCreateAcceptanceCriteriaTemplate(AcTemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate {

	key := AcTemplateName

	if v, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAcceptanceCriteriaTemplate(AcTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAcceptanceCriteriaTemplate got unexpected error: %v", err))
	}
	return v
}

// GetAcceptanceCriteriaTemplate retrieves the value with the specified key from
// the AcceptanceCriteriaTemplate map field of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetAcceptanceCriteriaTemplate(AcTemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate {

	if t == nil {
		return nil
	}

	key := AcTemplateName

	if lm, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteAcceptanceCriteriaTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) DeleteAcceptanceCriteriaTemplate(AcTemplateName string) {
	key := AcTemplateName

	delete(t.AcceptanceCriteriaTemplate, key)
}

// AppendAcceptanceCriteriaTemplate appends the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct to the
// list AcceptanceCriteriaTemplate of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) AppendAcceptanceCriteriaTemplate(v *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) error {
	if v.AcTemplateName == nil {
		return fmt.Errorf("invalid nil key received for AcTemplateName")
	}

	key := *v.AcTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AcceptanceCriteriaTemplate == nil {
		t.AcceptanceCriteriaTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate)
	}

	if _, ok := t.AcceptanceCriteriaTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list AcceptanceCriteriaTemplate %v", key)
	}

	t.AcceptanceCriteriaTemplate[key] = v
	return nil
}

// NewFrameSizeTemplate creates a new entry in the FrameSizeTemplate list of the
// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) NewFrameSizeTemplate(FsTemplateName string) (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FrameSizeTemplate == nil {
		t.FrameSizeTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate)
	}

	key := FsTemplateName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FrameSizeTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FrameSizeTemplate", key)
	}

	t.FrameSizeTemplate[key] = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate{
		FsTemplateName: &FsTemplateName,
	}

	return t.FrameSizeTemplate[key], nil
}

// RenameFrameSizeTemplate renames an entry in the list FrameSizeTemplate within
// the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) RenameFrameSizeTemplate(oldK, newK string) error {
	if _, ok := t.FrameSizeTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in FrameSizeTemplate", newK)
	}

	e, ok := t.FrameSizeTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FrameSizeTemplate", oldK)
	}
	e.FsTemplateName = &newK

	t.FrameSizeTemplate[newK] = e
	delete(t.FrameSizeTemplate, oldK)
	return nil
}

// GetOrCreateFrameSizeTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetOrCreateFrameSizeTemplate(FsTemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate {

	key := FsTemplateName

	if v, ok := t.FrameSizeTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFrameSizeTemplate(FsTemplateName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFrameSizeTemplate got unexpected error: %v", err))
	}
	return v
}

// GetFrameSizeTemplate retrieves the value with the specified key from
// the FrameSizeTemplate map field of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetFrameSizeTemplate(FsTemplateName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate {

	if t == nil {
		return nil
	}

	key := FsTemplateName

	if lm, ok := t.FrameSizeTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteFrameSizeTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) DeleteFrameSizeTemplate(FsTemplateName string) {
	key := FsTemplateName

	delete(t.FrameSizeTemplate, key)
}

// AppendFrameSizeTemplate appends the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct to the
// list FrameSizeTemplate of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) AppendFrameSizeTemplate(v *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) error {
	if v.FsTemplateName == nil {
		return fmt.Errorf("invalid nil key received for FsTemplateName")
	}

	key := *v.FsTemplateName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FrameSizeTemplate == nil {
		t.FrameSizeTemplate = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate)
	}

	if _, ok := t.FrameSizeTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list FrameSizeTemplate %v", key)
	}

	t.FrameSizeTemplate[key] = v
	return nil
}

// NewServiceTest creates a new entry in the ServiceTest list of the
// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) NewServiceTest(TestName string) (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceTest == nil {
		t.ServiceTest = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest)
	}

	key := TestName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceTest[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceTest", key)
	}

	t.ServiceTest[key] = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest{
		TestName: &TestName,
	}

	return t.ServiceTest[key], nil
}

// RenameServiceTest renames an entry in the list ServiceTest within
// the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) RenameServiceTest(oldK, newK string) error {
	if _, ok := t.ServiceTest[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceTest", newK)
	}

	e, ok := t.ServiceTest[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceTest", oldK)
	}
	e.TestName = &newK

	t.ServiceTest[newK] = e
	delete(t.ServiceTest, oldK)
	return nil
}

// GetOrCreateServiceTest retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetOrCreateServiceTest(TestName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest {

	key := TestName

	if v, ok := t.ServiceTest[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceTest(TestName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceTest got unexpected error: %v", err))
	}
	return v
}

// GetServiceTest retrieves the value with the specified key from
// the ServiceTest map field of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) GetServiceTest(TestName string) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest {

	if t == nil {
		return nil
	}

	key := TestName

	if lm, ok := t.ServiceTest[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceTest deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) DeleteServiceTest(TestName string) {
	key := TestName

	delete(t.ServiceTest, key)
}

// AppendServiceTest appends the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest struct to the
// list ServiceTest of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) AppendServiceTest(v *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) error {
	if v.TestName == nil {
		return fmt.Errorf("invalid nil key received for TestName")
	}

	key := *v.TestName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceTest == nil {
		t.ServiceTest = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest)
	}

	if _, ok := t.ServiceTest[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceTest %v", key)
	}

	t.ServiceTest[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AcceptanceCriteriaTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.FrameSizeTemplate {
		e.PopulateDefaults()
	}
	for _, e := range t.ServiceTest {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/acceptance-criteria-template YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct {
	AcTemplateName        *string  `path:"ac-template-name" module:"nokia-conf"`
	CirThreshold          *uint32  `path:"cir-threshold" module:"nokia-conf"`
	DelayThreshold        *uint32  `path:"delay-threshold" module:"nokia-conf"`
	DelayVarThreshold     *uint32  `path:"delay-var-threshold" module:"nokia-conf"`
	Description           *string  `path:"description" module:"nokia-conf"`
	LossThreshold         *float64 `path:"loss-threshold" module:"nokia-conf"`
	LossThresholdPolicing *float64 `path:"loss-threshold-policing" module:"nokia-conf"`
	MFactor               *uint32  `path:"m-factor" module:"nokia-conf"`
	PirThreshold          *uint32  `path:"pir-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) IsYANGGoStruct() {
}

// GetAcTemplateName retrieves the value of the leaf AcTemplateName from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcTemplateName is set, it can
// safely use t.GetAcTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetAcTemplateName() string {
	if t == nil || t.AcTemplateName == nil {
		return ""
	}
	return *t.AcTemplateName
}

// GetCirThreshold retrieves the value of the leaf CirThreshold from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirThreshold is set, it can
// safely use t.GetCirThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetCirThreshold() uint32 {
	if t == nil || t.CirThreshold == nil {
		return 0
	}
	return *t.CirThreshold
}

// GetDelayThreshold retrieves the value of the leaf DelayThreshold from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayThreshold is set, it can
// safely use t.GetDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDelayThreshold() uint32 {
	if t == nil || t.DelayThreshold == nil {
		return 0
	}
	return *t.DelayThreshold
}

// GetDelayVarThreshold retrieves the value of the leaf DelayVarThreshold from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DelayVarThreshold is set, it can
// safely use t.GetDelayVarThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DelayVarThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDelayVarThreshold() uint32 {
	if t == nil || t.DelayVarThreshold == nil {
		return 0
	}
	return *t.DelayVarThreshold
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetLossThreshold retrieves the value of the leaf LossThreshold from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossThreshold is set, it can
// safely use t.GetLossThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetLossThreshold() float64 {
	if t == nil || t.LossThreshold == nil {
		return 0.0
	}
	return *t.LossThreshold
}

// GetLossThresholdPolicing retrieves the value of the leaf LossThresholdPolicing from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LossThresholdPolicing is set, it can
// safely use t.GetLossThresholdPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LossThresholdPolicing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetLossThresholdPolicing() float64 {
	if t == nil || t.LossThresholdPolicing == nil {
		return 0.0
	}
	return *t.LossThresholdPolicing
}

// GetMFactor retrieves the value of the leaf MFactor from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MFactor is set, it can
// safely use t.GetMFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetMFactor() uint32 {
	if t == nil || t.MFactor == nil {
		return 0
	}
	return *t.MFactor
}

// GetPirThreshold retrieves the value of the leaf PirThreshold from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PirThreshold is set, it can
// safely use t.GetPirThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PirThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) GetPirThreshold() uint32 {
	if t == nil || t.PirThreshold == nil {
		return 0
	}
	return *t.PirThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AcTemplateName == nil {
		return nil, fmt.Errorf("nil value for key AcTemplateName")
	}

	return map[string]interface{}{
		"ac-template-name": *t.AcTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_AcceptanceCriteriaTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/frame-size-template YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct {
	FsTemplateName *string `path:"fs-template-name" module:"nokia-conf"`
	SizeA          *uint32 `path:"size-a" module:"nokia-conf"`
	SizeB          *uint32 `path:"size-b" module:"nokia-conf"`
	SizeC          *uint32 `path:"size-c" module:"nokia-conf"`
	SizeD          *uint32 `path:"size-d" module:"nokia-conf"`
	SizeE          *uint32 `path:"size-e" module:"nokia-conf"`
	SizeF          *uint32 `path:"size-f" module:"nokia-conf"`
	SizeG          *uint32 `path:"size-g" module:"nokia-conf"`
	SizeH          *uint32 `path:"size-h" module:"nokia-conf"`
	SizeU          *uint32 `path:"size-u" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) IsYANGGoStruct() {
}

// GetFsTemplateName retrieves the value of the leaf FsTemplateName from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FsTemplateName is set, it can
// safely use t.GetFsTemplateName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FsTemplateName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetFsTemplateName() string {
	if t == nil || t.FsTemplateName == nil {
		return ""
	}
	return *t.FsTemplateName
}

// GetSizeA retrieves the value of the leaf SizeA from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeA is set, it can
// safely use t.GetSizeA() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeA == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeA() uint32 {
	if t == nil || t.SizeA == nil {
		return 64
	}
	return *t.SizeA
}

// GetSizeB retrieves the value of the leaf SizeB from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeB is set, it can
// safely use t.GetSizeB() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeB == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeB() uint32 {
	if t == nil || t.SizeB == nil {
		return 128
	}
	return *t.SizeB
}

// GetSizeC retrieves the value of the leaf SizeC from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeC is set, it can
// safely use t.GetSizeC() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeC == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeC() uint32 {
	if t == nil || t.SizeC == nil {
		return 256
	}
	return *t.SizeC
}

// GetSizeD retrieves the value of the leaf SizeD from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeD is set, it can
// safely use t.GetSizeD() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeD == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeD() uint32 {
	if t == nil || t.SizeD == nil {
		return 512
	}
	return *t.SizeD
}

// GetSizeE retrieves the value of the leaf SizeE from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeE is set, it can
// safely use t.GetSizeE() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeE == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeE() uint32 {
	if t == nil || t.SizeE == nil {
		return 1024
	}
	return *t.SizeE
}

// GetSizeF retrieves the value of the leaf SizeF from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeF is set, it can
// safely use t.GetSizeF() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeF == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeF() uint32 {
	if t == nil || t.SizeF == nil {
		return 1280
	}
	return *t.SizeF
}

// GetSizeG retrieves the value of the leaf SizeG from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeG is set, it can
// safely use t.GetSizeG() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeG == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeG() uint32 {
	if t == nil || t.SizeG == nil {
		return 1518
	}
	return *t.SizeG
}

// GetSizeH retrieves the value of the leaf SizeH from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeH is set, it can
// safely use t.GetSizeH() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeH == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeH() uint32 {
	if t == nil || t.SizeH == nil {
		return 9212
	}
	return *t.SizeH
}

// GetSizeU retrieves the value of the leaf SizeU from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SizeU is set, it can
// safely use t.GetSizeU() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SizeU == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) GetSizeU() uint32 {
	if t == nil || t.SizeU == nil {
		return 2000
	}
	return *t.SizeU
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SizeA == nil {
		var v uint32 = 64
		t.SizeA = &v
	}
	if t.SizeB == nil {
		var v uint32 = 128
		t.SizeB = &v
	}
	if t.SizeC == nil {
		var v uint32 = 256
		t.SizeC = &v
	}
	if t.SizeD == nil {
		var v uint32 = 512
		t.SizeD = &v
	}
	if t.SizeE == nil {
		var v uint32 = 1024
		t.SizeE = &v
	}
	if t.SizeF == nil {
		var v uint32 = 1280
		t.SizeF = &v
	}
	if t.SizeG == nil {
		var v uint32 = 1518
		t.SizeG = &v
	}
	if t.SizeH == nil {
		var v uint32 = 9212
		t.SizeH = &v
	}
	if t.SizeU == nil {
		var v uint32 = 2000
		t.SizeU = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FsTemplateName == nil {
		return nil, fmt.Errorf("nil value for key FsTemplateName")
	}

	return map[string]interface{}{
		"fs-template-name": *t.FsTemplateName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_FrameSizeTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest struct {
	AccountingPolicy                  *uint32                                                                                                                                                                                                       `path:"accounting-policy" module:"nokia-conf"`
	AdminState                        E_NokiaTypesSros_AdminState                                                                                                                                                                                   `path:"admin-state" module:"nokia-conf"`
	Description                       *string                                                                                                                                                                                                       `path:"description" module:"nokia-conf"`
	ServiceStream                     map[NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream `path:"service-stream" module:"nokia-conf"`
	ServiceTestCompletionNotification *bool                                                                                                                                                                                                         `path:"service-test-completion-notification" module:"nokia-conf"`
	StreamRunType                     E_NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType                                                                                                                `path:"stream-run-type" module:"nokia-conf"`
	TestDuration                      *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration                                                                                                                  `path:"test-duration" module:"nokia-conf"`
	TestName                          *string                                                                                                                                                                                                       `path:"test-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) IsYANGGoStruct() {
}

// NewServiceStream creates a new entry in the ServiceStream list of the
// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) NewServiceStream(StreamId NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union) (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceStream == nil {
		t.ServiceStream = make(map[NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream)
	}

	key := StreamId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ServiceStream[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ServiceStream", key)
	}

	t.ServiceStream[key] = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream{
		StreamId: StreamId,
	}

	return t.ServiceStream[key], nil
}

// RenameServiceStream renames an entry in the list ServiceStream within
// the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) RenameServiceStream(oldK, newK NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union) error {
	if _, ok := t.ServiceStream[newK]; ok {
		return fmt.Errorf("key %v already exists in ServiceStream", newK)
	}

	e, ok := t.ServiceStream[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ServiceStream", oldK)
	}
	e.StreamId = newK

	t.ServiceStream[newK] = e
	delete(t.ServiceStream, oldK)
	return nil
}

// GetOrCreateServiceStream retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetOrCreateServiceStream(StreamId NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream {

	key := StreamId

	if v, ok := t.ServiceStream[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewServiceStream(StreamId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateServiceStream got unexpected error: %v", err))
	}
	return v
}

// GetServiceStream retrieves the value with the specified key from
// the ServiceStream map field of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetServiceStream(StreamId NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union) *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream {

	if t == nil {
		return nil
	}

	key := StreamId

	if lm, ok := t.ServiceStream[key]; ok {
		return lm
	}
	return nil
}

// DeleteServiceStream deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) DeleteServiceStream(StreamId NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union) {
	key := StreamId

	delete(t.ServiceStream, key)
}

// AppendServiceStream appends the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct to the
// list ServiceStream of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) AppendServiceStream(v *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) error {
	key := v.StreamId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ServiceStream == nil {
		t.ServiceStream = make(map[NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union]*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream)
	}

	if _, ok := t.ServiceStream[key]; ok {
		return fmt.Errorf("duplicate key for list ServiceStream %v", key)
	}

	t.ServiceStream[key] = v
	return nil
}

// GetOrCreateTestDuration retrieves the value of the TestDuration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetOrCreateTestDuration() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration {
	if t.TestDuration != nil {
		return t.TestDuration
	}
	t.TestDuration = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration{}
	return t.TestDuration
}

// GetTestDuration returns the value of the TestDuration struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest. If the receiver or the field TestDuration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetTestDuration() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration {
	if t != nil && t.TestDuration != nil {
		return t.TestDuration
	}
	return nil
}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetServiceTestCompletionNotification retrieves the value of the leaf ServiceTestCompletionNotification from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceTestCompletionNotification is set, it can
// safely use t.GetServiceTestCompletionNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceTestCompletionNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetServiceTestCompletionNotification() bool {
	if t == nil || t.ServiceTestCompletionNotification == nil {
		return false
	}
	return *t.ServiceTestCompletionNotification
}

// GetStreamRunType retrieves the value of the leaf StreamRunType from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StreamRunType is set, it can
// safely use t.GetStreamRunType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StreamRunType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetStreamRunType() E_NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType {
	if t == nil || t.StreamRunType == 0 {
		return NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType_parallel
	}
	return t.StreamRunType
}

// GetTestName retrieves the value of the leaf TestName from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TestName is set, it can
// safely use t.GetTestName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TestName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) GetTestName() string {
	if t == nil || t.TestName == nil {
		return ""
	}
	return *t.TestName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ServiceTestCompletionNotification == nil {
		var v bool = false
		t.ServiceTestCompletionNotification = &v
	}
	if t.StreamRunType == 0 {
		t.StreamRunType = NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_StreamRunType_parallel
	}
	t.TestDuration.PopulateDefaults()
	for _, e := range t.ServiceStream {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) ΛListKeyMap() (map[string]interface{}, error) {
	if t.TestName == nil {
		return nil, fmt.Errorf("nil value for key TestName")
	}

	return map[string]interface{}{
		"test-name": *t.TestName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct {
	AcceptanceCriteriaTemplate          *string                                                                                                     `path:"acceptance-criteria-template" module:"nokia-conf"`
	AdminState                          E_NokiaTypesSros_AdminState                                                                                 `path:"admin-state" module:"nokia-conf"`
	Description                         *string                                                                                                     `path:"description" module:"nokia-conf"`
	FrameMix                            *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix      `path:"frame-mix" module:"nokia-conf"`
	FramePayload                        *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload  `path:"frame-payload" module:"nokia-conf"`
	RateCir                             *uint32                                                                                                     `path:"rate-cir" module:"nokia-conf"`
	RatePir                             *uint32                                                                                                     `path:"rate-pir" module:"nokia-conf"`
	ServiceStreamCompletionNotification *bool                                                                                                       `path:"service-stream-completion-notification" module:"nokia-conf"`
	StreamId                            NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union `path:"stream-id" module:"nokia-conf"`
	TestTypes                           *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes     `path:"test-types" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) IsYANGGoStruct() {
}

// GetOrCreateFrameMix retrieves the value of the FrameMix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateFrameMix() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix {
	if t.FrameMix != nil {
		return t.FrameMix
	}
	t.FrameMix = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix{}
	return t.FrameMix
}

// GetOrCreateFramePayload retrieves the value of the FramePayload field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateFramePayload() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload {
	if t.FramePayload != nil {
		return t.FramePayload
	}
	t.FramePayload = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload{}
	return t.FramePayload
}

// GetOrCreateTestTypes retrieves the value of the TestTypes field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetOrCreateTestTypes() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes {
	if t.TestTypes != nil {
		return t.TestTypes
	}
	t.TestTypes = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes{}
	return t.TestTypes
}

// GetFrameMix returns the value of the FrameMix struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field FrameMix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetFrameMix() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix {
	if t != nil && t.FrameMix != nil {
		return t.FrameMix
	}
	return nil
}

// GetFramePayload returns the value of the FramePayload struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field FramePayload is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetFramePayload() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload {
	if t != nil && t.FramePayload != nil {
		return t.FramePayload
	}
	return nil
}

// GetTestTypes returns the value of the TestTypes struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream. If the receiver or the field TestTypes is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetTestTypes() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes {
	if t != nil && t.TestTypes != nil {
		return t.TestTypes
	}
	return nil
}

// GetAcceptanceCriteriaTemplate retrieves the value of the leaf AcceptanceCriteriaTemplate from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcceptanceCriteriaTemplate is set, it can
// safely use t.GetAcceptanceCriteriaTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcceptanceCriteriaTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetAcceptanceCriteriaTemplate() string {
	if t == nil || t.AcceptanceCriteriaTemplate == nil {
		return ""
	}
	return *t.AcceptanceCriteriaTemplate
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetRateCir retrieves the value of the leaf RateCir from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RateCir is set, it can
// safely use t.GetRateCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RateCir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetRateCir() uint32 {
	if t == nil || t.RateCir == nil {
		return 0
	}
	return *t.RateCir
}

// GetRatePir retrieves the value of the leaf RatePir from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RatePir is set, it can
// safely use t.GetRatePir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RatePir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetRatePir() uint32 {
	if t == nil || t.RatePir == nil {
		return 0
	}
	return *t.RatePir
}

// GetServiceStreamCompletionNotification retrieves the value of the leaf ServiceStreamCompletionNotification from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ServiceStreamCompletionNotification is set, it can
// safely use t.GetServiceStreamCompletionNotification() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ServiceStreamCompletionNotification == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetServiceStreamCompletionNotification() bool {
	if t == nil || t.ServiceStreamCompletionNotification == nil {
		return false
	}
	return *t.ServiceStreamCompletionNotification
}

// GetStreamId retrieves the value of the leaf StreamId from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StreamId is set, it can
// safely use t.GetStreamId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StreamId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) GetStreamId() NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_StreamId_Union {
	if t == nil || t.StreamId == nil {
		return nil
	}
	return t.StreamId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.RateCir == nil {
		var v uint32 = 0
		t.RateCir = &v
	}
	if t.RatePir == nil {
		var v uint32 = 0
		t.RatePir = &v
	}
	if t.ServiceStreamCompletionNotification == nil {
		var v bool = false
		t.ServiceStreamCompletionNotification = &v
	}
	t.FrameMix.PopulateDefaults()
	t.FramePayload.PopulateDefaults()
	t.TestTypes.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"stream-id": t.StreamId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-mix YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix struct {
	FrameSizeTemplate *string `path:"frame-size-template" module:"nokia-conf"`
	Sequence          *string `path:"sequence" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) IsYANGGoStruct() {
}

// GetFrameSizeTemplate retrieves the value of the leaf FrameSizeTemplate from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FrameSizeTemplate is set, it can
// safely use t.GetFrameSizeTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FrameSizeTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) GetFrameSizeTemplate() string {
	if t == nil || t.FrameSizeTemplate == nil {
		return ""
	}
	return *t.FrameSizeTemplate
}

// GetSequence retrieves the value of the leaf Sequence from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Sequence is set, it can
// safely use t.GetSequence() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Sequence == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) GetSequence() string {
	if t == nil || t.Sequence == nil {
		return "a"
	}
	return *t.Sequence
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Sequence == nil {
		var v string = "a"
		t.Sequence = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FrameMix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload struct {
	DataPattern *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern `path:"data-pattern" module:"nokia-conf"`
	Ethernet    *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet    `path:"ethernet" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) IsYANGGoStruct() {
}

// GetOrCreateDataPattern retrieves the value of the DataPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetOrCreateDataPattern() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern {
	if t.DataPattern != nil {
		return t.DataPattern
	}
	t.DataPattern = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern{}
	return t.DataPattern
}

// GetOrCreateEthernet retrieves the value of the Ethernet field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetOrCreateEthernet() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet {
	if t.Ethernet != nil {
		return t.Ethernet
	}
	t.Ethernet = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet{}
	return t.Ethernet
}

// GetDataPattern returns the value of the DataPattern struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload. If the receiver or the field DataPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetDataPattern() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern {
	if t != nil && t.DataPattern != nil {
		return t.DataPattern
	}
	return nil
}

// GetEthernet returns the value of the Ethernet struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload. If the receiver or the field Ethernet is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) GetEthernet() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet {
	if t != nil && t.Ethernet != nil {
		return t.Ethernet
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.DataPattern.PopulateDefaults()
	t.Ethernet.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/data-pattern YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern struct {
	Repeat NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern_Repeat_Union `path:"repeat" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) IsYANGGoStruct() {
}

// GetRepeat retrieves the value of the leaf Repeat from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Repeat is set, it can
// safely use t.GetRepeat() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Repeat == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) GetRepeat() NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern_Repeat_Union {
	if t == nil || t.Repeat == nil {
		return UnionString("0x00000000")
	}
	return t.Repeat
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Repeat == nil {
		t.Repeat = UnionString("0x00000000")
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_DataPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet struct {
	CTag   *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag   `path:"c-tag" module:"nokia-conf"`
	DstMac *string                                                                                                                    `path:"dst-mac" module:"nokia-conf"`
	EthCfm *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm `path:"eth-cfm" module:"nokia-conf"`
	STag   *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag   `path:"s-tag" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) IsYANGGoStruct() {
}

// GetOrCreateCTag retrieves the value of the CTag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateCTag() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag {
	if t.CTag != nil {
		return t.CTag
	}
	t.CTag = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag{}
	return t.CTag
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateEthCfm() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm{}
	return t.EthCfm
}

// GetOrCreateSTag retrieves the value of the STag field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetOrCreateSTag() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag {
	if t.STag != nil {
		return t.STag
	}
	t.STag = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag{}
	return t.STag
}

// GetCTag returns the value of the CTag struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field CTag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetCTag() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag {
	if t != nil && t.CTag != nil {
		return t.CTag
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetEthCfm() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetSTag returns the value of the STag struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet. If the receiver or the field STag is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetSTag() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag {
	if t != nil && t.STag != nil {
		return t.STag
	}
	return nil
}

// GetDstMac retrieves the value of the leaf DstMac from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DstMac is set, it can
// safely use t.GetDstMac() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DstMac == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) GetDstMac() string {
	if t == nil || t.DstMac == nil {
		return ""
	}
	return *t.DstMac
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.CTag.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.STag.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/c-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag struct {
	DiscardEligible *bool   `path:"discard-eligible" module:"nokia-conf"`
	Dot1P           *uint32 `path:"dot1p" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) IsYANGGoStruct() {
}

// GetDiscardEligible retrieves the value of the leaf DiscardEligible from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardEligible is set, it can
// safely use t.GetDiscardEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) GetDiscardEligible() bool {
	if t == nil || t.DiscardEligible == nil {
		return false
	}
	return *t.DiscardEligible
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) GetDot1P() uint32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardEligible == nil {
		var v bool = false
		t.DiscardEligible = &v
	}
	if t.Dot1P == nil {
		var v uint32 = 7
		t.Dot1P = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_CTag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/eth-cfm YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm struct {
	Source *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source `path:"source" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) IsYANGGoStruct() {
}

// GetOrCreateSource retrieves the value of the Source field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) GetOrCreateSource() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source {
	if t.Source != nil {
		return t.Source
	}
	t.Source = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source{}
	return t.Source
}

// GetSource returns the value of the Source struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm. If the receiver or the field Source is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) GetSource() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source {
	if t != nil && t.Source != nil {
		return t.Source
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Source.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/eth-cfm/source YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source struct {
	MaAdminName *string `path:"ma-admin-name" module:"nokia-conf"`
	MdAdminName *string `path:"md-admin-name" module:"nokia-conf"`
	MepId       *uint16 `path:"mep-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) IsYANGGoStruct() {
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_EthCfm_Source) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/frame-payload/ethernet/s-tag YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag struct {
	DiscardEligible *bool   `path:"discard-eligible" module:"nokia-conf"`
	Dot1P           *uint32 `path:"dot1p" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) IsYANGGoStruct() {
}

// GetDiscardEligible retrieves the value of the leaf DiscardEligible from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DiscardEligible is set, it can
// safely use t.GetDiscardEligible() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DiscardEligible == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) GetDiscardEligible() bool {
	if t == nil || t.DiscardEligible == nil {
		return false
	}
	return *t.DiscardEligible
}

// GetDot1P retrieves the value of the leaf Dot1P from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dot1P is set, it can
// safely use t.GetDot1P() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dot1P == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) GetDot1P() uint32 {
	if t == nil || t.Dot1P == nil {
		return 7
	}
	return *t.Dot1P
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DiscardEligible == nil {
		var v bool = false
		t.DiscardEligible = &v
	}
	if t.Dot1P == nil {
		var v uint32 = 7
		t.Dot1P = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_FramePayload_Ethernet_STag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/service-stream/test-types YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes struct {
	Cir         *bool `path:"cir" module:"nokia-conf"`
	CirPir      *bool `path:"cir-pir" module:"nokia-conf"`
	Performance *bool `path:"performance" module:"nokia-conf"`
	Policing    *bool `path:"policing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) IsYANGGoStruct() {
}

// GetCir retrieves the value of the leaf Cir from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cir is set, it can
// safely use t.GetCir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetCir() bool {
	if t == nil || t.Cir == nil {
		return false
	}
	return *t.Cir
}

// GetCirPir retrieves the value of the leaf CirPir from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CirPir is set, it can
// safely use t.GetCirPir() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CirPir == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetCirPir() bool {
	if t == nil || t.CirPir == nil {
		return false
	}
	return *t.CirPir
}

// GetPerformance retrieves the value of the leaf Performance from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Performance is set, it can
// safely use t.GetPerformance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Performance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetPerformance() bool {
	if t == nil || t.Performance == nil {
		return false
	}
	return *t.Performance
}

// GetPolicing retrieves the value of the leaf Policing from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Policing is set, it can
// safely use t.GetPolicing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Policing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) GetPolicing() bool {
	if t == nil || t.Policing == nil {
		return false
	}
	return *t.Policing
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Cir == nil {
		var v bool = false
		t.Cir = &v
	}
	if t.CirPir == nil {
		var v bool = false
		t.CirPir = &v
	}
	if t.Performance == nil {
		var v bool = false
		t.Performance = &v
	}
	if t.Policing == nil {
		var v bool = false
		t.Policing = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_ServiceStream_TestTypes) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/test-duration YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration struct {
	Cir         *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir         `path:"cir" module:"nokia-conf"`
	CirPir      *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir      `path:"cir-pir" module:"nokia-conf"`
	Performance *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance `path:"performance" module:"nokia-conf"`
	Policing    *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing    `path:"policing" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) IsYANGGoStruct() {
}

// GetOrCreateCir retrieves the value of the Cir field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreateCir() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir {
	if t.Cir != nil {
		return t.Cir
	}
	t.Cir = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir{}
	return t.Cir
}

// GetOrCreateCirPir retrieves the value of the CirPir field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreateCirPir() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir {
	if t.CirPir != nil {
		return t.CirPir
	}
	t.CirPir = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir{}
	return t.CirPir
}

// GetOrCreatePerformance retrieves the value of the Performance field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreatePerformance() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance {
	if t.Performance != nil {
		return t.Performance
	}
	t.Performance = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance{}
	return t.Performance
}

// GetOrCreatePolicing retrieves the value of the Policing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetOrCreatePolicing() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing {
	if t.Policing != nil {
		return t.Policing
	}
	t.Policing = &NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing{}
	return t.Policing
}

// GetCir returns the value of the Cir struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Cir is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetCir() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir {
	if t != nil && t.Cir != nil {
		return t.Cir
	}
	return nil
}

// GetCirPir returns the value of the CirPir struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field CirPir is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetCirPir() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir {
	if t != nil && t.CirPir != nil {
		return t.CirPir
	}
	return nil
}

// GetPerformance returns the value of the Performance struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Performance is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetPerformance() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance {
	if t != nil && t.Performance != nil {
		return t.Performance
	}
	return nil
}

// GetPolicing returns the value of the Policing struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration. If the receiver or the field Policing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) GetPolicing() *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing {
	if t != nil && t.Policing != nil {
		return t.Policing
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Cir.PopulateDefaults()
	t.CirPir.PopulateDefaults()
	t.Performance.PopulateDefaults()
	t.Policing.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/test-duration/cir YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "05:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "05:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Cir) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/test-duration/cir-pir YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "10:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "10:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_CirPir) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/test-duration/performance YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance struct {
	HoursMinutesSeconds *string `path:"hours-minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) IsYANGGoStruct() {
}

// GetHoursMinutesSeconds retrieves the value of the leaf HoursMinutesSeconds from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoursMinutesSeconds is set, it can
// safely use t.GetHoursMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoursMinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) GetHoursMinutesSeconds() string {
	if t == nil || t.HoursMinutesSeconds == nil {
		return "00:15:00"
	}
	return *t.HoursMinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HoursMinutesSeconds == nil {
		var v string = "00:15:00"
		t.HoursMinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Performance) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing represents the /nokia-conf/configure/groups/group/test-oam/service-activation-testhead/service-test/test-duration/policing YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing struct {
	MinutesSeconds *string `path:"minutes-seconds" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) IsYANGGoStruct() {
}

// GetMinutesSeconds retrieves the value of the leaf MinutesSeconds from the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinutesSeconds is set, it can
// safely use t.GetMinutesSeconds() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinutesSeconds == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) GetMinutesSeconds() string {
	if t == nil || t.MinutesSeconds == nil {
		return "10:00"
	}
	return *t.MinutesSeconds
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MinutesSeconds == nil {
		var v string = "10:00"
		t.MinutesSeconds = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing.
func (*NokiaConf_Configure_Groups_Group_TestOam_ServiceActivationTesthead_ServiceTest_TestDuration_Policing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Twamp represents the /nokia-conf/configure/groups/group/test-oam/twamp YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Twamp struct {
	Server       *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server       `path:"server" module:"nokia-conf" yangPresence:"true"`
	TwampLight   *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight   `path:"twamp-light" module:"nokia-conf" yangPresence:"true"`
	TwampTestPdu *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu `path:"twamp-test-pdu" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Twamp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp) IsYANGGoStruct() {}

// GetOrCreateServer retrieves the value of the Server field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetOrCreateServer() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server {
	if t.Server != nil {
		return t.Server
	}
	t.Server = &NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server{}
	return t.Server
}

// GetOrCreateTwampLight retrieves the value of the TwampLight field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetOrCreateTwampLight() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight {
	if t.TwampLight != nil {
		return t.TwampLight
	}
	t.TwampLight = &NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight{}
	return t.TwampLight
}

// GetOrCreateTwampTestPdu retrieves the value of the TwampTestPdu field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetOrCreateTwampTestPdu() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu {
	if t.TwampTestPdu != nil {
		return t.TwampTestPdu
	}
	t.TwampTestPdu = &NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu{}
	return t.TwampTestPdu
}

// GetServer returns the value of the Server struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_Twamp. If the receiver or the field Server is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetServer() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server {
	if t != nil && t.Server != nil {
		return t.Server
	}
	return nil
}

// GetTwampLight returns the value of the TwampLight struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_Twamp. If the receiver or the field TwampLight is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetTwampLight() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight {
	if t != nil && t.TwampLight != nil {
		return t.TwampLight
	}
	return nil
}

// GetTwampTestPdu returns the value of the TwampTestPdu struct pointer
// from NokiaConf_Configure_Groups_Group_TestOam_Twamp. If the receiver or the field TwampTestPdu is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) GetTwampTestPdu() *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu {
	if t != nil && t.TwampTestPdu != nil {
		return t.TwampTestPdu
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Twamp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Server.PopulateDefaults()
	t.TwampLight.PopulateDefaults()
	t.TwampTestPdu.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Twamp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Twamp.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server represents the /nokia-conf/configure/groups/group/test-oam/twamp/server YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server struct {
	AdminState               E_NokiaTypesSros_AdminState                                              `path:"admin-state" module:"nokia-conf"`
	AllowIpv6UdpChecksumZero *bool                                                                    `path:"allow-ipv6-udp-checksum-zero" module:"nokia-conf"`
	InactivityTimeout        *uint32                                                                  `path:"inactivity-timeout" module:"nokia-conf"`
	MaxConnections           *uint32                                                                  `path:"max-connections" module:"nokia-conf"`
	MaxSessions              *uint32                                                                  `path:"max-sessions" module:"nokia-conf"`
	Prefix                   map[string]*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix `path:"prefix" module:"nokia-conf"`
	RefInactivityTimeout     *uint32                                                                  `path:"ref-inactivity-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) IsYANGGoStruct() {}

// NewPrefix creates a new entry in the Prefix list of the
// NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) NewPrefix(IpPrefix string) (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Prefix[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Prefix", key)
	}

	t.Prefix[key] = &NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix{
		IpPrefix: &IpPrefix,
	}

	return t.Prefix[key], nil
}

// RenamePrefix renames an entry in the list Prefix within
// the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) RenamePrefix(oldK, newK string) error {
	if _, ok := t.Prefix[newK]; ok {
		return fmt.Errorf("key %v already exists in Prefix", newK)
	}

	e, ok := t.Prefix[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Prefix", oldK)
	}
	e.IpPrefix = &newK

	t.Prefix[newK] = e
	delete(t.Prefix, oldK)
	return nil
}

// GetOrCreatePrefix retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetOrCreatePrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix {

	key := IpPrefix

	if v, ok := t.Prefix[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPrefix(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePrefix got unexpected error: %v", err))
	}
	return v
}

// GetPrefix retrieves the value with the specified key from
// the Prefix map field of NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetPrefix(IpPrefix string) *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.Prefix[key]; ok {
		return lm
	}
	return nil
}

// DeletePrefix deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) DeletePrefix(IpPrefix string) {
	key := IpPrefix

	delete(t.Prefix, key)
}

// AppendPrefix appends the supplied NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix struct to the
// list Prefix of NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) AppendPrefix(v *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Prefix == nil {
		t.Prefix = make(map[string]*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix)
	}

	if _, ok := t.Prefix[key]; ok {
		return fmt.Errorf("duplicate key for list Prefix %v", key)
	}

	t.Prefix[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAllowIpv6UdpChecksumZero retrieves the value of the leaf AllowIpv6UdpChecksumZero from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowIpv6UdpChecksumZero is set, it can
// safely use t.GetAllowIpv6UdpChecksumZero() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowIpv6UdpChecksumZero == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetAllowIpv6UdpChecksumZero() bool {
	if t == nil || t.AllowIpv6UdpChecksumZero == nil {
		return false
	}
	return *t.AllowIpv6UdpChecksumZero
}

// GetInactivityTimeout retrieves the value of the leaf InactivityTimeout from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimeout is set, it can
// safely use t.GetInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetInactivityTimeout() uint32 {
	if t == nil || t.InactivityTimeout == nil {
		return 900
	}
	return *t.InactivityTimeout
}

// GetMaxConnections retrieves the value of the leaf MaxConnections from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxConnections is set, it can
// safely use t.GetMaxConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetMaxConnections() uint32 {
	if t == nil || t.MaxConnections == nil {
		return 32
	}
	return *t.MaxConnections
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetMaxSessions() uint32 {
	if t == nil || t.MaxSessions == nil {
		return 32
	}
	return *t.MaxSessions
}

// GetRefInactivityTimeout retrieves the value of the leaf RefInactivityTimeout from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RefInactivityTimeout is set, it can
// safely use t.GetRefInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RefInactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) GetRefInactivityTimeout() uint32 {
	if t == nil || t.RefInactivityTimeout == nil {
		return 900
	}
	return *t.RefInactivityTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.AllowIpv6UdpChecksumZero == nil {
		var v bool = false
		t.AllowIpv6UdpChecksumZero = &v
	}
	if t.InactivityTimeout == nil {
		var v uint32 = 900
		t.InactivityTimeout = &v
	}
	if t.MaxConnections == nil {
		var v uint32 = 32
		t.MaxConnections = &v
	}
	if t.MaxSessions == nil {
		var v uint32 = 32
		t.MaxSessions = &v
	}
	if t.RefInactivityTimeout == nil {
		var v uint32 = 900
		t.RefInactivityTimeout = &v
	}
	for _, e := range t.Prefix {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix represents the /nokia-conf/configure/groups/group/test-oam/twamp/server/prefix YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix struct {
	Description    *string `path:"description" module:"nokia-conf"`
	IpPrefix       *string `path:"ip-prefix" module:"nokia-conf"`
	MaxConnections *uint32 `path:"max-connections" module:"nokia-conf"`
	MaxSessions    *uint32 `path:"max-sessions" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) IsYANGGoStruct() {}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetMaxConnections retrieves the value of the leaf MaxConnections from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxConnections is set, it can
// safely use t.GetMaxConnections() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxConnections == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) GetMaxConnections() uint32 {
	if t == nil || t.MaxConnections == nil {
		return 32
	}
	return *t.MaxConnections
}

// GetMaxSessions retrieves the value of the leaf MaxSessions from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSessions is set, it can
// safely use t.GetMaxSessions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSessions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) GetMaxSessions() uint32 {
	if t == nil || t.MaxSessions == nil {
		return 32
	}
	return *t.MaxSessions
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.MaxConnections == nil {
		var v uint32 = 32
		t.MaxConnections = &v
	}
	if t.MaxSessions == nil {
		var v uint32 = 32
		t.MaxSessions = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_Server_Prefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight represents the /nokia-conf/configure/groups/group/test-oam/twamp/twamp-light YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight struct {
	InactivityTimeout *uint32 `path:"inactivity-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) IsYANGGoStruct() {}

// GetInactivityTimeout retrieves the value of the leaf InactivityTimeout from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InactivityTimeout is set, it can
// safely use t.GetInactivityTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InactivityTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) GetInactivityTimeout() uint32 {
	if t == nil || t.InactivityTimeout == nil {
		return 100
	}
	return *t.InactivityTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InactivityTimeout == nil {
		var v uint32 = 100
		t.InactivityTimeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampLight) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu represents the /nokia-conf/configure/groups/group/test-oam/twamp/twamp-test-pdu YANG schema element.
type NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu struct {
	Ipv4Timestamping E_NokiaTypesOam_TwampTimestampAuthor `path:"ipv4-timestamping" module:"nokia-conf"`
	Ipv6Timestamping E_NokiaTypesOam_TwampTimestampAuthor `path:"ipv6-timestamping" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) IsYANGGoStruct() {}

// GetIpv4Timestamping retrieves the value of the leaf Ipv4Timestamping from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Timestamping is set, it can
// safely use t.GetIpv4Timestamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Timestamping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) GetIpv4Timestamping() E_NokiaTypesOam_TwampTimestampAuthor {
	if t == nil || t.Ipv4Timestamping == 0 {
		return NokiaTypesOam_TwampTimestampAuthor_central
	}
	return t.Ipv4Timestamping
}

// GetIpv6Timestamping retrieves the value of the leaf Ipv6Timestamping from the NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Timestamping is set, it can
// safely use t.GetIpv6Timestamping() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Timestamping == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) GetIpv6Timestamping() E_NokiaTypesOam_TwampTimestampAuthor {
	if t == nil || t.Ipv6Timestamping == 0 {
		return NokiaTypesOam_TwampTimestampAuthor_central
	}
	return t.Ipv6Timestamping
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Ipv4Timestamping == 0 {
		t.Ipv4Timestamping = NokiaTypesOam_TwampTimestampAuthor_central
	}
	if t.Ipv6Timestamping == 0 {
		t.Ipv6Timestamping = NokiaTypesOam_TwampTimestampAuthor_central
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu.
func (*NokiaConf_Configure_Groups_Group_TestOam_Twamp_TwampTestPdu) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp represents the /nokia-conf/configure/groups/group/vrrp YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp struct {
	Policy map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy `path:"policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp) IsYANGGoStruct() {}

// NewPolicy creates a new entry in the Policy list of the
// NokiaConf_Configure_Groups_Group_Vrrp struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) NewPolicy(PolicyId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy)
	}

	key := PolicyId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Policy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Policy", key)
	}

	t.Policy[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy{
		PolicyId: PolicyId,
	}

	return t.Policy[key], nil
}

// RenamePolicy renames an entry in the list Policy within
// the NokiaConf_Configure_Groups_Group_Vrrp struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) RenamePolicy(oldK, newK NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union) error {
	if _, ok := t.Policy[newK]; ok {
		return fmt.Errorf("key %v already exists in Policy", newK)
	}

	e, ok := t.Policy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Policy", oldK)
	}
	e.PolicyId = newK

	t.Policy[newK] = e
	delete(t.Policy, oldK)
	return nil
}

// GetOrCreatePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) GetOrCreatePolicy(PolicyId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy {

	key := PolicyId

	if v, ok := t.Policy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPolicy(PolicyId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePolicy got unexpected error: %v", err))
	}
	return v
}

// GetPolicy retrieves the value with the specified key from
// the Policy map field of NokiaConf_Configure_Groups_Group_Vrrp. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) GetPolicy(PolicyId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy {

	if t == nil {
		return nil
	}

	key := PolicyId

	if lm, ok := t.Policy[key]; ok {
		return lm
	}
	return nil
}

// DeletePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) DeletePolicy(PolicyId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union) {
	key := PolicyId

	delete(t.Policy, key)
}

// AppendPolicy appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy struct to the
// list Policy of NokiaConf_Configure_Groups_Group_Vrrp. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) AppendPolicy(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy) error {
	key := v.PolicyId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Policy == nil {
		t.Policy = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy)
	}

	if _, ok := t.Policy[key]; ok {
		return fmt.Errorf("duplicate key for list Policy %v", key)
	}

	t.Policy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Policy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp.
func (*NokiaConf_Configure_Groups_Group_Vrrp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy represents the /nokia-conf/configure/groups/group/vrrp/policy YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy struct {
	AdminState      E_NokiaTypesSros_AdminState                                 `path:"admin-state" module:"nokia-conf"`
	Context         *string                                                     `path:"context" module:"nokia-conf"`
	DeltaInUseLimit *uint8                                                      `path:"delta-in-use-limit" module:"nokia-conf"`
	Description     *string                                                     `path:"description" module:"nokia-conf"`
	PolicyId        NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union `path:"policy-id" module:"nokia-conf"`
	PriorityEvent   *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent `path:"priority-event" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy) IsYANGGoStruct() {}

// GetOrCreatePriorityEvent retrieves the value of the PriorityEvent field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetOrCreatePriorityEvent() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent {
	if t.PriorityEvent != nil {
		return t.PriorityEvent
	}
	t.PriorityEvent = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent{}
	return t.PriorityEvent
}

// GetPriorityEvent returns the value of the PriorityEvent struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy. If the receiver or the field PriorityEvent is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetPriorityEvent() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent {
	if t != nil && t.PriorityEvent != nil {
		return t.PriorityEvent
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetContext retrieves the value of the leaf Context from the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Context is set, it can
// safely use t.GetContext() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Context == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetContext() string {
	if t == nil || t.Context == nil {
		return ""
	}
	return *t.Context
}

// GetDeltaInUseLimit retrieves the value of the leaf DeltaInUseLimit from the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DeltaInUseLimit is set, it can
// safely use t.GetDeltaInUseLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DeltaInUseLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetDeltaInUseLimit() uint8 {
	if t == nil || t.DeltaInUseLimit == nil {
		return 1
	}
	return *t.DeltaInUseLimit
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetPolicyId retrieves the value of the leaf PolicyId from the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PolicyId is set, it can
// safely use t.GetPolicyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PolicyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) GetPolicyId() NokiaConf_Configure_Groups_Group_Vrrp_Policy_PolicyId_Union {
	if t == nil || t.PolicyId == nil {
		return nil
	}
	return t.PolicyId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.DeltaInUseLimit == nil {
		var v uint8 = 1
		t.DeltaInUseLimit = &v
	}
	t.PriorityEvent.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"policy-id": t.PolicyId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct {
	HostUnreachable      map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable                                                                                                   `path:"host-unreachable" module:"nokia-conf"`
	LagPortDown          map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown                                                                                                       `path:"lag-port-down" module:"nokia-conf"`
	McIpsecNonForwarding map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding `path:"mc-ipsec-non-forwarding" module:"nokia-conf"`
	PortDown             map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown                                                                                                          `path:"port-down" module:"nokia-conf"`
	RouteUnknown         map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown                                                                                                      `path:"route-unknown" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) IsYANGGoStruct() {}

// NewHostUnreachable creates a new entry in the HostUnreachable list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) NewHostUnreachable(IpAddress string) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostUnreachable == nil {
		t.HostUnreachable = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.HostUnreachable[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list HostUnreachable", key)
	}

	t.HostUnreachable[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable{
		IpAddress: &IpAddress,
	}

	return t.HostUnreachable[key], nil
}

// RenameHostUnreachable renames an entry in the list HostUnreachable within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) RenameHostUnreachable(oldK, newK string) error {
	if _, ok := t.HostUnreachable[newK]; ok {
		return fmt.Errorf("key %v already exists in HostUnreachable", newK)
	}

	e, ok := t.HostUnreachable[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in HostUnreachable", oldK)
	}
	e.IpAddress = &newK

	t.HostUnreachable[newK] = e
	delete(t.HostUnreachable, oldK)
	return nil
}

// GetOrCreateHostUnreachable retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetOrCreateHostUnreachable(IpAddress string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable {

	key := IpAddress

	if v, ok := t.HostUnreachable[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewHostUnreachable(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateHostUnreachable got unexpected error: %v", err))
	}
	return v
}

// GetHostUnreachable retrieves the value with the specified key from
// the HostUnreachable map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetHostUnreachable(IpAddress string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.HostUnreachable[key]; ok {
		return lm
	}
	return nil
}

// DeleteHostUnreachable deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) DeleteHostUnreachable(IpAddress string) {
	key := IpAddress

	delete(t.HostUnreachable, key)
}

// AppendHostUnreachable appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable struct to the
// list HostUnreachable of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) AppendHostUnreachable(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.HostUnreachable == nil {
		t.HostUnreachable = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable)
	}

	if _, ok := t.HostUnreachable[key]; ok {
		return fmt.Errorf("duplicate key for list HostUnreachable %v", key)
	}

	t.HostUnreachable[key] = v
	return nil
}

// NewLagPortDown creates a new entry in the LagPortDown list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) NewLagPortDown(LagName string) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagPortDown == nil {
		t.LagPortDown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown)
	}

	key := LagName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LagPortDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LagPortDown", key)
	}

	t.LagPortDown[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown{
		LagName: &LagName,
	}

	return t.LagPortDown[key], nil
}

// RenameLagPortDown renames an entry in the list LagPortDown within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) RenameLagPortDown(oldK, newK string) error {
	if _, ok := t.LagPortDown[newK]; ok {
		return fmt.Errorf("key %v already exists in LagPortDown", newK)
	}

	e, ok := t.LagPortDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LagPortDown", oldK)
	}
	e.LagName = &newK

	t.LagPortDown[newK] = e
	delete(t.LagPortDown, oldK)
	return nil
}

// GetOrCreateLagPortDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetOrCreateLagPortDown(LagName string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown {

	key := LagName

	if v, ok := t.LagPortDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLagPortDown(LagName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLagPortDown got unexpected error: %v", err))
	}
	return v
}

// GetLagPortDown retrieves the value with the specified key from
// the LagPortDown map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetLagPortDown(LagName string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown {

	if t == nil {
		return nil
	}

	key := LagName

	if lm, ok := t.LagPortDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteLagPortDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) DeleteLagPortDown(LagName string) {
	key := LagName

	delete(t.LagPortDown, key)
}

// AppendLagPortDown appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct to the
// list LagPortDown of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) AppendLagPortDown(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) error {
	if v.LagName == nil {
		return fmt.Errorf("invalid nil key received for LagName")
	}

	key := *v.LagName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LagPortDown == nil {
		t.LagPortDown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown)
	}

	if _, ok := t.LagPortDown[key]; ok {
		return fmt.Errorf("duplicate key for list LagPortDown %v", key)
	}

	t.LagPortDown[key] = v
	return nil
}

// NewMcIpsecNonForwarding creates a new entry in the McIpsecNonForwarding list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) NewMcIpsecNonForwarding(TunnelGroupId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McIpsecNonForwarding == nil {
		t.McIpsecNonForwarding = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding)
	}

	key := TunnelGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.McIpsecNonForwarding[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list McIpsecNonForwarding", key)
	}

	t.McIpsecNonForwarding[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding{
		TunnelGroupId: TunnelGroupId,
	}

	return t.McIpsecNonForwarding[key], nil
}

// RenameMcIpsecNonForwarding renames an entry in the list McIpsecNonForwarding within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) RenameMcIpsecNonForwarding(oldK, newK NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union) error {
	if _, ok := t.McIpsecNonForwarding[newK]; ok {
		return fmt.Errorf("key %v already exists in McIpsecNonForwarding", newK)
	}

	e, ok := t.McIpsecNonForwarding[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in McIpsecNonForwarding", oldK)
	}
	e.TunnelGroupId = newK

	t.McIpsecNonForwarding[newK] = e
	delete(t.McIpsecNonForwarding, oldK)
	return nil
}

// GetOrCreateMcIpsecNonForwarding retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetOrCreateMcIpsecNonForwarding(TunnelGroupId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding {

	key := TunnelGroupId

	if v, ok := t.McIpsecNonForwarding[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMcIpsecNonForwarding(TunnelGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMcIpsecNonForwarding got unexpected error: %v", err))
	}
	return v
}

// GetMcIpsecNonForwarding retrieves the value with the specified key from
// the McIpsecNonForwarding map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetMcIpsecNonForwarding(TunnelGroupId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding {

	if t == nil {
		return nil
	}

	key := TunnelGroupId

	if lm, ok := t.McIpsecNonForwarding[key]; ok {
		return lm
	}
	return nil
}

// DeleteMcIpsecNonForwarding deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) DeleteMcIpsecNonForwarding(TunnelGroupId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union) {
	key := TunnelGroupId

	delete(t.McIpsecNonForwarding, key)
}

// AppendMcIpsecNonForwarding appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct to the
// list McIpsecNonForwarding of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) AppendMcIpsecNonForwarding(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) error {
	key := v.TunnelGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.McIpsecNonForwarding == nil {
		t.McIpsecNonForwarding = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding)
	}

	if _, ok := t.McIpsecNonForwarding[key]; ok {
		return fmt.Errorf("duplicate key for list McIpsecNonForwarding %v", key)
	}

	t.McIpsecNonForwarding[key] = v
	return nil
}

// NewPortDown creates a new entry in the PortDown list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) NewPortDown(PortId string) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortDown == nil {
		t.PortDown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.PortDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list PortDown", key)
	}

	t.PortDown[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown{
		PortId: &PortId,
	}

	return t.PortDown[key], nil
}

// RenamePortDown renames an entry in the list PortDown within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) RenamePortDown(oldK, newK string) error {
	if _, ok := t.PortDown[newK]; ok {
		return fmt.Errorf("key %v already exists in PortDown", newK)
	}

	e, ok := t.PortDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in PortDown", oldK)
	}
	e.PortId = &newK

	t.PortDown[newK] = e
	delete(t.PortDown, oldK)
	return nil
}

// GetOrCreatePortDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetOrCreatePortDown(PortId string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown {

	key := PortId

	if v, ok := t.PortDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPortDown(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePortDown got unexpected error: %v", err))
	}
	return v
}

// GetPortDown retrieves the value with the specified key from
// the PortDown map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetPortDown(PortId string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.PortDown[key]; ok {
		return lm
	}
	return nil
}

// DeletePortDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) DeletePortDown(PortId string) {
	key := PortId

	delete(t.PortDown, key)
}

// AppendPortDown appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown struct to the
// list PortDown of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) AppendPortDown(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.PortDown == nil {
		t.PortDown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown)
	}

	if _, ok := t.PortDown[key]; ok {
		return fmt.Errorf("duplicate key for list PortDown %v", key)
	}

	t.PortDown[key] = v
	return nil
}

// NewRouteUnknown creates a new entry in the RouteUnknown list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) NewRouteUnknown(IpPrefix string) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteUnknown == nil {
		t.RouteUnknown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown)
	}

	key := IpPrefix

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.RouteUnknown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list RouteUnknown", key)
	}

	t.RouteUnknown[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown{
		IpPrefix: &IpPrefix,
	}

	return t.RouteUnknown[key], nil
}

// RenameRouteUnknown renames an entry in the list RouteUnknown within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) RenameRouteUnknown(oldK, newK string) error {
	if _, ok := t.RouteUnknown[newK]; ok {
		return fmt.Errorf("key %v already exists in RouteUnknown", newK)
	}

	e, ok := t.RouteUnknown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in RouteUnknown", oldK)
	}
	e.IpPrefix = &newK

	t.RouteUnknown[newK] = e
	delete(t.RouteUnknown, oldK)
	return nil
}

// GetOrCreateRouteUnknown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetOrCreateRouteUnknown(IpPrefix string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown {

	key := IpPrefix

	if v, ok := t.RouteUnknown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewRouteUnknown(IpPrefix)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateRouteUnknown got unexpected error: %v", err))
	}
	return v
}

// GetRouteUnknown retrieves the value with the specified key from
// the RouteUnknown map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) GetRouteUnknown(IpPrefix string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown {

	if t == nil {
		return nil
	}

	key := IpPrefix

	if lm, ok := t.RouteUnknown[key]; ok {
		return lm
	}
	return nil
}

// DeleteRouteUnknown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) DeleteRouteUnknown(IpPrefix string) {
	key := IpPrefix

	delete(t.RouteUnknown, key)
}

// AppendRouteUnknown appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown struct to the
// list RouteUnknown of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) AppendRouteUnknown(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) error {
	if v.IpPrefix == nil {
		return fmt.Errorf("invalid nil key received for IpPrefix")
	}

	key := *v.IpPrefix

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.RouteUnknown == nil {
		t.RouteUnknown = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown)
	}

	if _, ok := t.RouteUnknown[key]; ok {
		return fmt.Errorf("duplicate key for list RouteUnknown %v", key)
	}

	t.RouteUnknown[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.HostUnreachable {
		e.PopulateDefaults()
	}
	for _, e := range t.LagPortDown {
		e.PopulateDefaults()
	}
	for _, e := range t.McIpsecNonForwarding {
		e.PopulateDefaults()
	}
	for _, e := range t.PortDown {
		e.PopulateDefaults()
	}
	for _, e := range t.RouteUnknown {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/host-unreachable YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable struct {
	DropCount       *uint32                                                                              `path:"drop-count" module:"nokia-conf"`
	HoldClear       *uint32                                                                              `path:"hold-clear" module:"nokia-conf"`
	HoldSet         *uint32                                                                              `path:"hold-set" module:"nokia-conf"`
	IpAddress       *string                                                                              `path:"ip-address" module:"nokia-conf"`
	PaddingSize     *uint32                                                                              `path:"padding-size" module:"nokia-conf"`
	Priority        *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority `path:"priority" module:"nokia-conf"`
	RequestInterval *uint32                                                                              `path:"request-interval" module:"nokia-conf"`
	Timeout         *uint32                                                                              `path:"timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetDropCount retrieves the value of the leaf DropCount from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DropCount is set, it can
// safely use t.GetDropCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DropCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetDropCount() uint32 {
	if t == nil || t.DropCount == nil {
		return 3
	}
	return *t.DropCount
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// GetPaddingSize retrieves the value of the leaf PaddingSize from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PaddingSize is set, it can
// safely use t.GetPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetPaddingSize() uint32 {
	if t == nil || t.PaddingSize == nil {
		return 56
	}
	return *t.PaddingSize
}

// GetRequestInterval retrieves the value of the leaf RequestInterval from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RequestInterval is set, it can
// safely use t.GetRequestInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RequestInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetRequestInterval() uint32 {
	if t == nil || t.RequestInterval == nil {
		return 1
	}
	return *t.RequestInterval
}

// GetTimeout retrieves the value of the leaf Timeout from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Timeout is set, it can
// safely use t.GetTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Timeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) GetTimeout() uint32 {
	if t == nil || t.Timeout == nil {
		return 1
	}
	return *t.Timeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DropCount == nil {
		var v uint32 = 3
		t.DropCount = &v
	}
	if t.PaddingSize == nil {
		var v uint32 = 56
		t.PaddingSize = &v
	}
	if t.RequestInterval == nil {
		var v uint32 = 1
		t.RequestInterval = &v
	}
	if t.Timeout == nil {
		var v uint32 = 1
		t.Timeout = &v
	}
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/host-unreachable/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                          `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_HostUnreachable_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/lag-port-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct {
	HoldClear  *uint32                                                                                                                                                                                             `path:"hold-clear" module:"nokia-conf"`
	HoldSet    *uint32                                                                                                                                                                                             `path:"hold-set" module:"nokia-conf"`
	LagName    *string                                                                                                                                                                                             `path:"lag-name" module:"nokia-conf"`
	NumberDown map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown `path:"number-down" module:"nokia-conf"`
	WeightDown map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown   `path:"weight-down" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) IsYANGGoStruct() {}

// NewNumberDown creates a new entry in the NumberDown list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) NewNumberDown(NumberOfLagPortsDown NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown)
	}

	key := NumberOfLagPortsDown

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NumberDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NumberDown", key)
	}

	t.NumberDown[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown{
		NumberOfLagPortsDown: NumberOfLagPortsDown,
	}

	return t.NumberDown[key], nil
}

// RenameNumberDown renames an entry in the list NumberDown within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) RenameNumberDown(oldK, newK NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union) error {
	if _, ok := t.NumberDown[newK]; ok {
		return fmt.Errorf("key %v already exists in NumberDown", newK)
	}

	e, ok := t.NumberDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NumberDown", oldK)
	}
	e.NumberOfLagPortsDown = newK

	t.NumberDown[newK] = e
	delete(t.NumberDown, oldK)
	return nil
}

// GetOrCreateNumberDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetOrCreateNumberDown(NumberOfLagPortsDown NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown {

	key := NumberOfLagPortsDown

	if v, ok := t.NumberDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNumberDown(NumberOfLagPortsDown)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNumberDown got unexpected error: %v", err))
	}
	return v
}

// GetNumberDown retrieves the value with the specified key from
// the NumberDown map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetNumberDown(NumberOfLagPortsDown NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown {

	if t == nil {
		return nil
	}

	key := NumberOfLagPortsDown

	if lm, ok := t.NumberDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteNumberDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) DeleteNumberDown(NumberOfLagPortsDown NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union) {
	key := NumberOfLagPortsDown

	delete(t.NumberDown, key)
}

// AppendNumberDown appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct to the
// list NumberDown of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) AppendNumberDown(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) error {
	key := v.NumberOfLagPortsDown

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NumberDown == nil {
		t.NumberDown = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown)
	}

	if _, ok := t.NumberDown[key]; ok {
		return fmt.Errorf("duplicate key for list NumberDown %v", key)
	}

	t.NumberDown[key] = v
	return nil
}

// NewWeightDown creates a new entry in the WeightDown list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) NewWeightDown(LagPortsDownWeight NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WeightDown == nil {
		t.WeightDown = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown)
	}

	key := LagPortsDownWeight

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WeightDown[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WeightDown", key)
	}

	t.WeightDown[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown{
		LagPortsDownWeight: LagPortsDownWeight,
	}

	return t.WeightDown[key], nil
}

// RenameWeightDown renames an entry in the list WeightDown within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) RenameWeightDown(oldK, newK NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union) error {
	if _, ok := t.WeightDown[newK]; ok {
		return fmt.Errorf("key %v already exists in WeightDown", newK)
	}

	e, ok := t.WeightDown[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WeightDown", oldK)
	}
	e.LagPortsDownWeight = newK

	t.WeightDown[newK] = e
	delete(t.WeightDown, oldK)
	return nil
}

// GetOrCreateWeightDown retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetOrCreateWeightDown(LagPortsDownWeight NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown {

	key := LagPortsDownWeight

	if v, ok := t.WeightDown[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWeightDown(LagPortsDownWeight)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWeightDown got unexpected error: %v", err))
	}
	return v
}

// GetWeightDown retrieves the value with the specified key from
// the WeightDown map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetWeightDown(LagPortsDownWeight NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown {

	if t == nil {
		return nil
	}

	key := LagPortsDownWeight

	if lm, ok := t.WeightDown[key]; ok {
		return lm
	}
	return nil
}

// DeleteWeightDown deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) DeleteWeightDown(LagPortsDownWeight NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union) {
	key := LagPortsDownWeight

	delete(t.WeightDown, key)
}

// AppendWeightDown appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct to the
// list WeightDown of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) AppendWeightDown(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) error {
	key := v.LagPortsDownWeight

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WeightDown == nil {
		t.WeightDown = make(map[NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown)
	}

	if _, ok := t.WeightDown[key]; ok {
		return fmt.Errorf("duplicate key for list WeightDown %v", key)
	}

	t.WeightDown[key] = v
	return nil
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.NumberDown {
		e.PopulateDefaults()
	}
	for _, e := range t.WeightDown {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/lag-port-down/number-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct {
	NumberOfLagPortsDown NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union `path:"number-of-lag-ports-down" module:"nokia-conf"`
	Priority             *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority                  `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) IsYANGGoStruct() {
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetNumberOfLagPortsDown retrieves the value of the leaf NumberOfLagPortsDown from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NumberOfLagPortsDown is set, it can
// safely use t.GetNumberOfLagPortsDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NumberOfLagPortsDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) GetNumberOfLagPortsDown() NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_NumberOfLagPortsDown_Union {
	if t == nil || t.NumberOfLagPortsDown == nil {
		return nil
	}
	return t.NumberOfLagPortsDown
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"number-of-lag-ports-down": t.NumberOfLagPortsDown,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/lag-port-down/number-down/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                                 `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_NumberDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/lag-port-down/weight-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct {
	LagPortsDownWeight NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union `path:"lag-ports-down-weight" module:"nokia-conf"`
	Priority           *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority                `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) IsYANGGoStruct() {
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetLagPortsDownWeight retrieves the value of the leaf LagPortsDownWeight from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagPortsDownWeight is set, it can
// safely use t.GetLagPortsDownWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagPortsDownWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) GetLagPortsDownWeight() NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_LagPortsDownWeight_Union {
	if t == nil || t.LagPortsDownWeight == nil {
		return nil
	}
	return t.LagPortsDownWeight
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"lag-ports-down-weight": t.LagPortsDownWeight,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/lag-port-down/weight-down/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                                 `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_LagPortDown_WeightDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/mc-ipsec-non-forwarding YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct {
	HoldClear     *uint32                                                                                             `path:"hold-clear" module:"nokia-conf"`
	HoldSet       *uint32                                                                                             `path:"hold-set" module:"nokia-conf"`
	Priority      *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority           `path:"priority" module:"nokia-conf"`
	TunnelGroupId NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union `path:"tunnel-group-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) IsYANGGoStruct() {
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetTunnelGroupId retrieves the value of the leaf TunnelGroupId from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelGroupId is set, it can
// safely use t.GetTunnelGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) GetTunnelGroupId() NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_TunnelGroupId_Union {
	if t == nil || t.TunnelGroupId == nil {
		return nil
	}
	return t.TunnelGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"tunnel-group-id": t.TunnelGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/mc-ipsec-non-forwarding/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                               `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_McIpsecNonForwarding_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/port-down YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown struct {
	HoldClear *uint32                                                                       `path:"hold-clear" module:"nokia-conf"`
	HoldSet   *uint32                                                                       `path:"hold-set" module:"nokia-conf"`
	PortId    *string                                                                       `path:"port-id" module:"nokia-conf"`
	Priority  *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) IsYANGGoStruct() {}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority{}
	return t.Priority
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Priority.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/port-down/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                   `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_PortDown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/route-unknown YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown struct {
	HoldClear    *uint32                                                                                     `path:"hold-clear" module:"nokia-conf"`
	HoldSet      *uint32                                                                                     `path:"hold-set" module:"nokia-conf"`
	IpPrefix     *string                                                                                     `path:"ip-prefix" module:"nokia-conf"`
	LessSpecific *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific       `path:"less-specific" module:"nokia-conf" yangPresence:"true"`
	NextHop      map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop `path:"next-hop" module:"nokia-conf"`
	Priority     *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority           `path:"priority" module:"nokia-conf"`
	Protocol     []E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Protocol        `path:"protocol" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) IsYANGGoStruct() {}

// NewNextHop creates a new entry in the NextHop list of the
// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) NewNextHop(IpAddress string) (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop)
	}

	key := IpAddress

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NextHop[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NextHop", key)
	}

	t.NextHop[key] = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop{
		IpAddress: &IpAddress,
	}

	return t.NextHop[key], nil
}

// RenameNextHop renames an entry in the list NextHop within
// the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) RenameNextHop(oldK, newK string) error {
	if _, ok := t.NextHop[newK]; ok {
		return fmt.Errorf("key %v already exists in NextHop", newK)
	}

	e, ok := t.NextHop[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NextHop", oldK)
	}
	e.IpAddress = &newK

	t.NextHop[newK] = e
	delete(t.NextHop, oldK)
	return nil
}

// GetOrCreateNextHop retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreateNextHop(IpAddress string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop {

	key := IpAddress

	if v, ok := t.NextHop[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNextHop(IpAddress)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNextHop got unexpected error: %v", err))
	}
	return v
}

// GetNextHop retrieves the value with the specified key from
// the NextHop map field of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetNextHop(IpAddress string) *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop {

	if t == nil {
		return nil
	}

	key := IpAddress

	if lm, ok := t.NextHop[key]; ok {
		return lm
	}
	return nil
}

// DeleteNextHop deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) DeleteNextHop(IpAddress string) {
	key := IpAddress

	delete(t.NextHop, key)
}

// AppendNextHop appends the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct to the
// list NextHop of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If the key value(s) specified in
// the supplied NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) AppendNextHop(v *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) error {
	if v.IpAddress == nil {
		return fmt.Errorf("invalid nil key received for IpAddress")
	}

	key := *v.IpAddress

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NextHop == nil {
		t.NextHop = make(map[string]*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop)
	}

	if _, ok := t.NextHop[key]; ok {
		return fmt.Errorf("duplicate key for list NextHop %v", key)
	}

	t.NextHop[key] = v
	return nil
}

// GetOrCreateLessSpecific retrieves the value of the LessSpecific field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreateLessSpecific() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific {
	if t.LessSpecific != nil {
		return t.LessSpecific
	}
	t.LessSpecific = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific{}
	return t.LessSpecific
}

// GetOrCreatePriority retrieves the value of the Priority field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetOrCreatePriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority {
	if t.Priority != nil {
		return t.Priority
	}
	t.Priority = &NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority{}
	return t.Priority
}

// GetLessSpecific returns the value of the LessSpecific struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver or the field LessSpecific is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetLessSpecific() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific {
	if t != nil && t.LessSpecific != nil {
		return t.LessSpecific
	}
	return nil
}

// GetPriority returns the value of the Priority struct pointer
// from NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown. If the receiver or the field Priority is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetPriority() *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority {
	if t != nil && t.Priority != nil {
		return t.Priority
	}
	return nil
}

// GetHoldClear retrieves the value of the leaf HoldClear from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldClear is set, it can
// safely use t.GetHoldClear() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldClear == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetHoldClear() uint32 {
	if t == nil || t.HoldClear == nil {
		return 0
	}
	return *t.HoldClear
}

// GetHoldSet retrieves the value of the leaf HoldSet from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldSet is set, it can
// safely use t.GetHoldSet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldSet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetHoldSet() uint32 {
	if t == nil || t.HoldSet == nil {
		return 0
	}
	return *t.HoldSet
}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) GetProtocol() []E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Protocol {
	if t == nil || t.Protocol == nil {
		return nil
	}
	return t.Protocol
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.LessSpecific.PopulateDefaults()
	t.Priority.PopulateDefaults()
	for _, e := range t.NextHop {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpPrefix == nil {
		return nil, fmt.Errorf("nil value for key IpPrefix")
	}

	return map[string]interface{}{
		"ip-prefix": *t.IpPrefix,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/route-unknown/less-specific YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific struct {
	AllowDefault *bool `path:"allow-default" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) IsYANGGoStruct() {
}

// GetAllowDefault retrieves the value of the leaf AllowDefault from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AllowDefault is set, it can
// safely use t.GetAllowDefault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AllowDefault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) GetAllowDefault() bool {
	if t == nil || t.AllowDefault == nil {
		return false
	}
	return *t.AllowDefault
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AllowDefault == nil {
		var v bool = false
		t.AllowDefault = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_LessSpecific) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/route-unknown/next-hop YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct {
	IpAddress *string `path:"ip-address" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) IsYANGGoStruct() {
}

// GetIpAddress retrieves the value of the leaf IpAddress from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpAddress is set, it can
// safely use t.GetIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) GetIpAddress() string {
	if t == nil || t.IpAddress == nil {
		return ""
	}
	return *t.IpAddress
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IpAddress == nil {
		return nil, fmt.Errorf("nil value for key IpAddress")
	}

	return map[string]interface{}{
		"ip-address": *t.IpAddress,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_NextHop) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority represents the /nokia-conf/configure/groups/group/vrrp/policy/priority-event/route-unknown/priority YANG schema element.
type NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority struct {
	EventType     E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType `path:"event-type" module:"nokia-conf"`
	PriorityLevel *uint8                                                                                       `path:"priority-level" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) IsYANGGoStruct() {
}

// GetEventType retrieves the value of the leaf EventType from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EventType is set, it can
// safely use t.GetEventType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EventType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) GetEventType() E_NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType {
	if t == nil || t.EventType == 0 {
		return NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType_delta
	}
	return t.EventType
}

// GetPriorityLevel retrieves the value of the leaf PriorityLevel from the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PriorityLevel is set, it can
// safely use t.GetPriorityLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PriorityLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) GetPriorityLevel() uint8 {
	if t == nil || t.PriorityLevel == nil {
		return 0
	}
	return *t.PriorityLevel
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EventType == 0 {
		t.EventType = NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority_EventType_delta
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority.
func (*NokiaConf_Configure_Groups_Group_Vrrp_Policy_PriorityEvent_RouteUnknown_Priority) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec represents the /nokia-conf/configure/ipsec YANG schema element.
type NokiaConf_Configure_Ipsec struct {
	ApplyGroups               []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	CertProfile               map[string]*NokiaConf_Configure_Ipsec_CertProfile               `path:"cert-profile" module:"nokia-conf"`
	ClientDb                  map[string]*NokiaConf_Configure_Ipsec_ClientDb                  `path:"client-db" module:"nokia-conf"`
	IkePolicy                 map[uint32]*NokiaConf_Configure_Ipsec_IkePolicy                 `path:"ike-policy" module:"nokia-conf"`
	IkeTransform              map[uint32]*NokiaConf_Configure_Ipsec_IkeTransform              `path:"ike-transform" module:"nokia-conf"`
	IpsecTransform            map[uint32]*NokiaConf_Configure_Ipsec_IpsecTransform            `path:"ipsec-transform" module:"nokia-conf"`
	IpsecTransportModeProfile map[string]*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile `path:"ipsec-transport-mode-profile" module:"nokia-conf"`
	Radius                    *NokiaConf_Configure_Ipsec_Radius                               `path:"radius" module:"nokia-conf"`
	ShowIpsecKeys             *bool                                                           `path:"show-ipsec-keys" module:"nokia-conf"`
	StaticSa                  map[string]*NokiaConf_Configure_Ipsec_StaticSa                  `path:"static-sa" module:"nokia-conf"`
	TrustAnchorProfile        map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile        `path:"trust-anchor-profile" module:"nokia-conf"`
	TsList                    map[string]*NokiaConf_Configure_Ipsec_TsList                    `path:"ts-list" module:"nokia-conf"`
	TunnelTemplate            map[uint32]*NokiaConf_Configure_Ipsec_TunnelTemplate            `path:"tunnel-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec) IsYANGGoStruct() {}

// NewCertProfile creates a new entry in the CertProfile list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewCertProfile(Name string) (*NokiaConf_Configure_Ipsec_CertProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_Ipsec_CertProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.CertProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list CertProfile", key)
	}

	t.CertProfile[key] = &NokiaConf_Configure_Ipsec_CertProfile{
		Name: &Name,
	}

	return t.CertProfile[key], nil
}

// RenameCertProfile renames an entry in the list CertProfile within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameCertProfile(oldK, newK string) error {
	if _, ok := t.CertProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in CertProfile", newK)
	}

	e, ok := t.CertProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in CertProfile", oldK)
	}
	e.Name = &newK

	t.CertProfile[newK] = e
	delete(t.CertProfile, oldK)
	return nil
}

// GetOrCreateCertProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateCertProfile(Name string) *NokiaConf_Configure_Ipsec_CertProfile {

	key := Name

	if v, ok := t.CertProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewCertProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateCertProfile got unexpected error: %v", err))
	}
	return v
}

// GetCertProfile retrieves the value with the specified key from
// the CertProfile map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetCertProfile(Name string) *NokiaConf_Configure_Ipsec_CertProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.CertProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteCertProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteCertProfile(Name string) {
	key := Name

	delete(t.CertProfile, key)
}

// AppendCertProfile appends the supplied NokiaConf_Configure_Ipsec_CertProfile struct to the
// list CertProfile of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_CertProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendCertProfile(v *NokiaConf_Configure_Ipsec_CertProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.CertProfile == nil {
		t.CertProfile = make(map[string]*NokiaConf_Configure_Ipsec_CertProfile)
	}

	if _, ok := t.CertProfile[key]; ok {
		return fmt.Errorf("duplicate key for list CertProfile %v", key)
	}

	t.CertProfile[key] = v
	return nil
}

// NewClientDb creates a new entry in the ClientDb list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewClientDb(Name string) (*NokiaConf_Configure_Ipsec_ClientDb, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientDb == nil {
		t.ClientDb = make(map[string]*NokiaConf_Configure_Ipsec_ClientDb)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ClientDb[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ClientDb", key)
	}

	t.ClientDb[key] = &NokiaConf_Configure_Ipsec_ClientDb{
		Name: &Name,
	}

	return t.ClientDb[key], nil
}

// RenameClientDb renames an entry in the list ClientDb within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameClientDb(oldK, newK string) error {
	if _, ok := t.ClientDb[newK]; ok {
		return fmt.Errorf("key %v already exists in ClientDb", newK)
	}

	e, ok := t.ClientDb[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ClientDb", oldK)
	}
	e.Name = &newK

	t.ClientDb[newK] = e
	delete(t.ClientDb, oldK)
	return nil
}

// GetOrCreateClientDb retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateClientDb(Name string) *NokiaConf_Configure_Ipsec_ClientDb {

	key := Name

	if v, ok := t.ClientDb[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClientDb(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClientDb got unexpected error: %v", err))
	}
	return v
}

// GetClientDb retrieves the value with the specified key from
// the ClientDb map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetClientDb(Name string) *NokiaConf_Configure_Ipsec_ClientDb {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.ClientDb[key]; ok {
		return lm
	}
	return nil
}

// DeleteClientDb deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteClientDb(Name string) {
	key := Name

	delete(t.ClientDb, key)
}

// AppendClientDb appends the supplied NokiaConf_Configure_Ipsec_ClientDb struct to the
// list ClientDb of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_ClientDb already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendClientDb(v *NokiaConf_Configure_Ipsec_ClientDb) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ClientDb == nil {
		t.ClientDb = make(map[string]*NokiaConf_Configure_Ipsec_ClientDb)
	}

	if _, ok := t.ClientDb[key]; ok {
		return fmt.Errorf("duplicate key for list ClientDb %v", key)
	}

	t.ClientDb[key] = v
	return nil
}

// NewIkePolicy creates a new entry in the IkePolicy list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewIkePolicy(Id uint32) (*NokiaConf_Configure_Ipsec_IkePolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IkePolicy == nil {
		t.IkePolicy = make(map[uint32]*NokiaConf_Configure_Ipsec_IkePolicy)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IkePolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IkePolicy", key)
	}

	t.IkePolicy[key] = &NokiaConf_Configure_Ipsec_IkePolicy{
		Id: &Id,
	}

	return t.IkePolicy[key], nil
}

// RenameIkePolicy renames an entry in the list IkePolicy within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameIkePolicy(oldK, newK uint32) error {
	if _, ok := t.IkePolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in IkePolicy", newK)
	}

	e, ok := t.IkePolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IkePolicy", oldK)
	}
	e.Id = &newK

	t.IkePolicy[newK] = e
	delete(t.IkePolicy, oldK)
	return nil
}

// GetOrCreateIkePolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateIkePolicy(Id uint32) *NokiaConf_Configure_Ipsec_IkePolicy {

	key := Id

	if v, ok := t.IkePolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIkePolicy(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIkePolicy got unexpected error: %v", err))
	}
	return v
}

// GetIkePolicy retrieves the value with the specified key from
// the IkePolicy map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetIkePolicy(Id uint32) *NokiaConf_Configure_Ipsec_IkePolicy {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.IkePolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteIkePolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteIkePolicy(Id uint32) {
	key := Id

	delete(t.IkePolicy, key)
}

// AppendIkePolicy appends the supplied NokiaConf_Configure_Ipsec_IkePolicy struct to the
// list IkePolicy of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_IkePolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendIkePolicy(v *NokiaConf_Configure_Ipsec_IkePolicy) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IkePolicy == nil {
		t.IkePolicy = make(map[uint32]*NokiaConf_Configure_Ipsec_IkePolicy)
	}

	if _, ok := t.IkePolicy[key]; ok {
		return fmt.Errorf("duplicate key for list IkePolicy %v", key)
	}

	t.IkePolicy[key] = v
	return nil
}

// NewIkeTransform creates a new entry in the IkeTransform list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewIkeTransform(Id uint32) (*NokiaConf_Configure_Ipsec_IkeTransform, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IkeTransform == nil {
		t.IkeTransform = make(map[uint32]*NokiaConf_Configure_Ipsec_IkeTransform)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IkeTransform[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IkeTransform", key)
	}

	t.IkeTransform[key] = &NokiaConf_Configure_Ipsec_IkeTransform{
		Id: &Id,
	}

	return t.IkeTransform[key], nil
}

// RenameIkeTransform renames an entry in the list IkeTransform within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameIkeTransform(oldK, newK uint32) error {
	if _, ok := t.IkeTransform[newK]; ok {
		return fmt.Errorf("key %v already exists in IkeTransform", newK)
	}

	e, ok := t.IkeTransform[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IkeTransform", oldK)
	}
	e.Id = &newK

	t.IkeTransform[newK] = e
	delete(t.IkeTransform, oldK)
	return nil
}

// GetOrCreateIkeTransform retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateIkeTransform(Id uint32) *NokiaConf_Configure_Ipsec_IkeTransform {

	key := Id

	if v, ok := t.IkeTransform[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIkeTransform(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIkeTransform got unexpected error: %v", err))
	}
	return v
}

// GetIkeTransform retrieves the value with the specified key from
// the IkeTransform map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetIkeTransform(Id uint32) *NokiaConf_Configure_Ipsec_IkeTransform {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.IkeTransform[key]; ok {
		return lm
	}
	return nil
}

// DeleteIkeTransform deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteIkeTransform(Id uint32) {
	key := Id

	delete(t.IkeTransform, key)
}

// AppendIkeTransform appends the supplied NokiaConf_Configure_Ipsec_IkeTransform struct to the
// list IkeTransform of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_IkeTransform already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendIkeTransform(v *NokiaConf_Configure_Ipsec_IkeTransform) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IkeTransform == nil {
		t.IkeTransform = make(map[uint32]*NokiaConf_Configure_Ipsec_IkeTransform)
	}

	if _, ok := t.IkeTransform[key]; ok {
		return fmt.Errorf("duplicate key for list IkeTransform %v", key)
	}

	t.IkeTransform[key] = v
	return nil
}

// NewIpsecTransform creates a new entry in the IpsecTransform list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewIpsecTransform(Id uint32) (*NokiaConf_Configure_Ipsec_IpsecTransform, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTransform == nil {
		t.IpsecTransform = make(map[uint32]*NokiaConf_Configure_Ipsec_IpsecTransform)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecTransform[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecTransform", key)
	}

	t.IpsecTransform[key] = &NokiaConf_Configure_Ipsec_IpsecTransform{
		Id: &Id,
	}

	return t.IpsecTransform[key], nil
}

// RenameIpsecTransform renames an entry in the list IpsecTransform within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameIpsecTransform(oldK, newK uint32) error {
	if _, ok := t.IpsecTransform[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecTransform", newK)
	}

	e, ok := t.IpsecTransform[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecTransform", oldK)
	}
	e.Id = &newK

	t.IpsecTransform[newK] = e
	delete(t.IpsecTransform, oldK)
	return nil
}

// GetOrCreateIpsecTransform retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateIpsecTransform(Id uint32) *NokiaConf_Configure_Ipsec_IpsecTransform {

	key := Id

	if v, ok := t.IpsecTransform[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecTransform(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecTransform got unexpected error: %v", err))
	}
	return v
}

// GetIpsecTransform retrieves the value with the specified key from
// the IpsecTransform map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetIpsecTransform(Id uint32) *NokiaConf_Configure_Ipsec_IpsecTransform {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.IpsecTransform[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecTransform deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteIpsecTransform(Id uint32) {
	key := Id

	delete(t.IpsecTransform, key)
}

// AppendIpsecTransform appends the supplied NokiaConf_Configure_Ipsec_IpsecTransform struct to the
// list IpsecTransform of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_IpsecTransform already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendIpsecTransform(v *NokiaConf_Configure_Ipsec_IpsecTransform) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTransform == nil {
		t.IpsecTransform = make(map[uint32]*NokiaConf_Configure_Ipsec_IpsecTransform)
	}

	if _, ok := t.IpsecTransform[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecTransform %v", key)
	}

	t.IpsecTransform[key] = v
	return nil
}

// NewIpsecTransportModeProfile creates a new entry in the IpsecTransportModeProfile list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewIpsecTransportModeProfile(Name string) (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTransportModeProfile == nil {
		t.IpsecTransportModeProfile = make(map[string]*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.IpsecTransportModeProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list IpsecTransportModeProfile", key)
	}

	t.IpsecTransportModeProfile[key] = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile{
		Name: &Name,
	}

	return t.IpsecTransportModeProfile[key], nil
}

// RenameIpsecTransportModeProfile renames an entry in the list IpsecTransportModeProfile within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameIpsecTransportModeProfile(oldK, newK string) error {
	if _, ok := t.IpsecTransportModeProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in IpsecTransportModeProfile", newK)
	}

	e, ok := t.IpsecTransportModeProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in IpsecTransportModeProfile", oldK)
	}
	e.Name = &newK

	t.IpsecTransportModeProfile[newK] = e
	delete(t.IpsecTransportModeProfile, oldK)
	return nil
}

// GetOrCreateIpsecTransportModeProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateIpsecTransportModeProfile(Name string) *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile {

	key := Name

	if v, ok := t.IpsecTransportModeProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIpsecTransportModeProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIpsecTransportModeProfile got unexpected error: %v", err))
	}
	return v
}

// GetIpsecTransportModeProfile retrieves the value with the specified key from
// the IpsecTransportModeProfile map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetIpsecTransportModeProfile(Name string) *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.IpsecTransportModeProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteIpsecTransportModeProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteIpsecTransportModeProfile(Name string) {
	key := Name

	delete(t.IpsecTransportModeProfile, key)
}

// AppendIpsecTransportModeProfile appends the supplied NokiaConf_Configure_Ipsec_IpsecTransportModeProfile struct to the
// list IpsecTransportModeProfile of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_IpsecTransportModeProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendIpsecTransportModeProfile(v *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.IpsecTransportModeProfile == nil {
		t.IpsecTransportModeProfile = make(map[string]*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile)
	}

	if _, ok := t.IpsecTransportModeProfile[key]; ok {
		return fmt.Errorf("duplicate key for list IpsecTransportModeProfile %v", key)
	}

	t.IpsecTransportModeProfile[key] = v
	return nil
}

// NewStaticSa creates a new entry in the StaticSa list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewStaticSa(Name string) (*NokiaConf_Configure_Ipsec_StaticSa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticSa == nil {
		t.StaticSa = make(map[string]*NokiaConf_Configure_Ipsec_StaticSa)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StaticSa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StaticSa", key)
	}

	t.StaticSa[key] = &NokiaConf_Configure_Ipsec_StaticSa{
		Name: &Name,
	}

	return t.StaticSa[key], nil
}

// RenameStaticSa renames an entry in the list StaticSa within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameStaticSa(oldK, newK string) error {
	if _, ok := t.StaticSa[newK]; ok {
		return fmt.Errorf("key %v already exists in StaticSa", newK)
	}

	e, ok := t.StaticSa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StaticSa", oldK)
	}
	e.Name = &newK

	t.StaticSa[newK] = e
	delete(t.StaticSa, oldK)
	return nil
}

// GetOrCreateStaticSa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateStaticSa(Name string) *NokiaConf_Configure_Ipsec_StaticSa {

	key := Name

	if v, ok := t.StaticSa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStaticSa(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStaticSa got unexpected error: %v", err))
	}
	return v
}

// GetStaticSa retrieves the value with the specified key from
// the StaticSa map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetStaticSa(Name string) *NokiaConf_Configure_Ipsec_StaticSa {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.StaticSa[key]; ok {
		return lm
	}
	return nil
}

// DeleteStaticSa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteStaticSa(Name string) {
	key := Name

	delete(t.StaticSa, key)
}

// AppendStaticSa appends the supplied NokiaConf_Configure_Ipsec_StaticSa struct to the
// list StaticSa of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_StaticSa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendStaticSa(v *NokiaConf_Configure_Ipsec_StaticSa) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StaticSa == nil {
		t.StaticSa = make(map[string]*NokiaConf_Configure_Ipsec_StaticSa)
	}

	if _, ok := t.StaticSa[key]; ok {
		return fmt.Errorf("duplicate key for list StaticSa %v", key)
	}

	t.StaticSa[key] = v
	return nil
}

// NewTrustAnchorProfile creates a new entry in the TrustAnchorProfile list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewTrustAnchorProfile(Name string) (*NokiaConf_Configure_Ipsec_TrustAnchorProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchorProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchorProfile", key)
	}

	t.TrustAnchorProfile[key] = &NokiaConf_Configure_Ipsec_TrustAnchorProfile{
		Name: &Name,
	}

	return t.TrustAnchorProfile[key], nil
}

// RenameTrustAnchorProfile renames an entry in the list TrustAnchorProfile within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameTrustAnchorProfile(oldK, newK string) error {
	if _, ok := t.TrustAnchorProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchorProfile", newK)
	}

	e, ok := t.TrustAnchorProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchorProfile", oldK)
	}
	e.Name = &newK

	t.TrustAnchorProfile[newK] = e
	delete(t.TrustAnchorProfile, oldK)
	return nil
}

// GetOrCreateTrustAnchorProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateTrustAnchorProfile(Name string) *NokiaConf_Configure_Ipsec_TrustAnchorProfile {

	key := Name

	if v, ok := t.TrustAnchorProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchorProfile(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchorProfile got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchorProfile retrieves the value with the specified key from
// the TrustAnchorProfile map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetTrustAnchorProfile(Name string) *NokiaConf_Configure_Ipsec_TrustAnchorProfile {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TrustAnchorProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchorProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteTrustAnchorProfile(Name string) {
	key := Name

	delete(t.TrustAnchorProfile, key)
}

// AppendTrustAnchorProfile appends the supplied NokiaConf_Configure_Ipsec_TrustAnchorProfile struct to the
// list TrustAnchorProfile of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TrustAnchorProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendTrustAnchorProfile(v *NokiaConf_Configure_Ipsec_TrustAnchorProfile) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchorProfile == nil {
		t.TrustAnchorProfile = make(map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile)
	}

	if _, ok := t.TrustAnchorProfile[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchorProfile %v", key)
	}

	t.TrustAnchorProfile[key] = v
	return nil
}

// NewTsList creates a new entry in the TsList list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewTsList(Name string) (*NokiaConf_Configure_Ipsec_TsList, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TsList == nil {
		t.TsList = make(map[string]*NokiaConf_Configure_Ipsec_TsList)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TsList[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TsList", key)
	}

	t.TsList[key] = &NokiaConf_Configure_Ipsec_TsList{
		Name: &Name,
	}

	return t.TsList[key], nil
}

// RenameTsList renames an entry in the list TsList within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameTsList(oldK, newK string) error {
	if _, ok := t.TsList[newK]; ok {
		return fmt.Errorf("key %v already exists in TsList", newK)
	}

	e, ok := t.TsList[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TsList", oldK)
	}
	e.Name = &newK

	t.TsList[newK] = e
	delete(t.TsList, oldK)
	return nil
}

// GetOrCreateTsList retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateTsList(Name string) *NokiaConf_Configure_Ipsec_TsList {

	key := Name

	if v, ok := t.TsList[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTsList(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTsList got unexpected error: %v", err))
	}
	return v
}

// GetTsList retrieves the value with the specified key from
// the TsList map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetTsList(Name string) *NokiaConf_Configure_Ipsec_TsList {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.TsList[key]; ok {
		return lm
	}
	return nil
}

// DeleteTsList deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteTsList(Name string) {
	key := Name

	delete(t.TsList, key)
}

// AppendTsList appends the supplied NokiaConf_Configure_Ipsec_TsList struct to the
// list TsList of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TsList already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendTsList(v *NokiaConf_Configure_Ipsec_TsList) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TsList == nil {
		t.TsList = make(map[string]*NokiaConf_Configure_Ipsec_TsList)
	}

	if _, ok := t.TsList[key]; ok {
		return fmt.Errorf("duplicate key for list TsList %v", key)
	}

	t.TsList[key] = v
	return nil
}

// NewTunnelTemplate creates a new entry in the TunnelTemplate list of the
// NokiaConf_Configure_Ipsec struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec) NewTunnelTemplate(Id uint32) (*NokiaConf_Configure_Ipsec_TunnelTemplate, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTemplate == nil {
		t.TunnelTemplate = make(map[uint32]*NokiaConf_Configure_Ipsec_TunnelTemplate)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelTemplate[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelTemplate", key)
	}

	t.TunnelTemplate[key] = &NokiaConf_Configure_Ipsec_TunnelTemplate{
		Id: &Id,
	}

	return t.TunnelTemplate[key], nil
}

// RenameTunnelTemplate renames an entry in the list TunnelTemplate within
// the NokiaConf_Configure_Ipsec struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec) RenameTunnelTemplate(oldK, newK uint32) error {
	if _, ok := t.TunnelTemplate[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelTemplate", newK)
	}

	e, ok := t.TunnelTemplate[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelTemplate", oldK)
	}
	e.Id = &newK

	t.TunnelTemplate[newK] = e
	delete(t.TunnelTemplate, oldK)
	return nil
}

// GetOrCreateTunnelTemplate retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateTunnelTemplate(Id uint32) *NokiaConf_Configure_Ipsec_TunnelTemplate {

	key := Id

	if v, ok := t.TunnelTemplate[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelTemplate(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelTemplate got unexpected error: %v", err))
	}
	return v
}

// GetTunnelTemplate retrieves the value with the specified key from
// the TunnelTemplate map field of NokiaConf_Configure_Ipsec. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetTunnelTemplate(Id uint32) *NokiaConf_Configure_Ipsec_TunnelTemplate {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TunnelTemplate[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelTemplate deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec) DeleteTunnelTemplate(Id uint32) {
	key := Id

	delete(t.TunnelTemplate, key)
}

// AppendTunnelTemplate appends the supplied NokiaConf_Configure_Ipsec_TunnelTemplate struct to the
// list TunnelTemplate of NokiaConf_Configure_Ipsec. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TunnelTemplate already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec) AppendTunnelTemplate(v *NokiaConf_Configure_Ipsec_TunnelTemplate) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelTemplate == nil {
		t.TunnelTemplate = make(map[uint32]*NokiaConf_Configure_Ipsec_TunnelTemplate)
	}

	if _, ok := t.TunnelTemplate[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelTemplate %v", key)
	}

	t.TunnelTemplate[key] = v
	return nil
}

// GetOrCreateRadius retrieves the value of the Radius field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec) GetOrCreateRadius() *NokiaConf_Configure_Ipsec_Radius {
	if t.Radius != nil {
		return t.Radius
	}
	t.Radius = &NokiaConf_Configure_Ipsec_Radius{}
	return t.Radius
}

// GetRadius returns the value of the Radius struct pointer
// from NokiaConf_Configure_Ipsec. If the receiver or the field Radius is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec) GetRadius() *NokiaConf_Configure_Ipsec_Radius {
	if t != nil && t.Radius != nil {
		return t.Radius
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetShowIpsecKeys retrieves the value of the leaf ShowIpsecKeys from the NokiaConf_Configure_Ipsec
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ShowIpsecKeys is set, it can
// safely use t.GetShowIpsecKeys() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ShowIpsecKeys == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec) GetShowIpsecKeys() bool {
	if t == nil || t.ShowIpsecKeys == nil {
		return false
	}
	return *t.ShowIpsecKeys
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ShowIpsecKeys == nil {
		var v bool = false
		t.ShowIpsecKeys = &v
	}
	t.Radius.PopulateDefaults()
	for _, e := range t.CertProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.ClientDb {
		e.PopulateDefaults()
	}
	for _, e := range t.IkePolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.IkeTransform {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecTransform {
		e.PopulateDefaults()
	}
	for _, e := range t.IpsecTransportModeProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.StaticSa {
		e.PopulateDefaults()
	}
	for _, e := range t.TrustAnchorProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.TsList {
		e.PopulateDefaults()
	}
	for _, e := range t.TunnelTemplate {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec.
func (*NokiaConf_Configure_Ipsec) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_CertProfile represents the /nokia-conf/configure/ipsec/cert-profile YANG schema element.
type NokiaConf_Configure_Ipsec_CertProfile struct {
	AdminState         E_NokiaTypesSros_AdminState                             `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Entry              map[uint32]*NokiaConf_Configure_Ipsec_CertProfile_Entry `path:"entry" module:"nokia-conf"`
	Name               *string                                                 `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_CertProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_CertProfile) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Ipsec_CertProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_CertProfile) NewEntry(Id uint32) (*NokiaConf_Configure_Ipsec_CertProfile_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_CertProfile_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Ipsec_CertProfile_Entry{
		Id: &Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Ipsec_CertProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_CertProfile) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_CertProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetOrCreateEntry(Id uint32) *NokiaConf_Configure_Ipsec_CertProfile_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Ipsec_CertProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetEntry(Id uint32) *NokiaConf_Configure_Ipsec_CertProfile_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_CertProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_CertProfile) DeleteEntry(Id uint32) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Ipsec_CertProfile_Entry struct to the
// list Entry of NokiaConf_Configure_Ipsec_CertProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_CertProfile_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_CertProfile) AppendEntry(v *NokiaConf_Configure_Ipsec_CertProfile_Entry) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_CertProfile_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_CertProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_CertProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_CertProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_CertProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_CertProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_CertProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_CertProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_CertProfile.
func (*NokiaConf_Configure_Ipsec_CertProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_CertProfile_Entry represents the /nokia-conf/configure/ipsec/cert-profile/entry YANG schema element.
type NokiaConf_Configure_Ipsec_CertProfile_Entry struct {
	ApplyGroups        []string                                                   `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                   `path:"apply-groups-exclude" module:"nokia-conf"`
	Cert               *string                                                    `path:"cert" module:"nokia-conf"`
	Id                 *uint32                                                    `path:"id" module:"nokia-conf"`
	Key                *string                                                    `path:"key" module:"nokia-conf"`
	RsaSignature       E_NokiaConf_Configure_Ipsec_CertProfile_Entry_RsaSignature `path:"rsa-signature" module:"nokia-conf"`
	SendChain          *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain     `path:"send-chain" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_CertProfile_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_CertProfile_Entry) IsYANGGoStruct() {}

// GetOrCreateSendChain retrieves the value of the SendChain field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetOrCreateSendChain() *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain {
	if t.SendChain != nil {
		return t.SendChain
	}
	t.SendChain = &NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain{}
	return t.SendChain
}

// GetSendChain returns the value of the SendChain struct pointer
// from NokiaConf_Configure_Ipsec_CertProfile_Entry. If the receiver or the field SendChain is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetSendChain() *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain {
	if t != nil && t.SendChain != nil {
		return t.SendChain
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCert retrieves the value of the leaf Cert from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cert is set, it can
// safely use t.GetCert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetCert() string {
	if t == nil || t.Cert == nil {
		return ""
	}
	return *t.Cert
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// GetRsaSignature retrieves the value of the leaf RsaSignature from the NokiaConf_Configure_Ipsec_CertProfile_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RsaSignature is set, it can
// safely use t.GetRsaSignature() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RsaSignature == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) GetRsaSignature() E_NokiaConf_Configure_Ipsec_CertProfile_Entry_RsaSignature {
	if t == nil || t.RsaSignature == 0 {
		return NokiaConf_Configure_Ipsec_CertProfile_Entry_RsaSignature_pkcs1
	}
	return t.RsaSignature
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_CertProfile_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RsaSignature == 0 {
		t.RsaSignature = NokiaConf_Configure_Ipsec_CertProfile_Entry_RsaSignature_pkcs1
	}
	t.SendChain.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_CertProfile_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_CertProfile_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_CertProfile_Entry.
func (*NokiaConf_Configure_Ipsec_CertProfile_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain represents the /nokia-conf/configure/ipsec/cert-profile/entry/send-chain YANG schema element.
type NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain struct {
	CaProfile []string `path:"ca-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) IsYANGGoStruct() {}

// GetCaProfile retrieves the value of the leaf CaProfile from the NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfile is set, it can
// safely use t.GetCaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) GetCaProfile() []string {
	if t == nil || t.CaProfile == nil {
		return nil
	}
	return t.CaProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain.
func (*NokiaConf_Configure_Ipsec_CertProfile_Entry_SendChain) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb represents the /nokia-conf/configure/ipsec/client-db YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb struct {
	AdminState         E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Client             map[uint32]*NokiaConf_Configure_Ipsec_ClientDb_Client `path:"client" module:"nokia-conf"`
	Description        *string                                               `path:"description" module:"nokia-conf"`
	MatchList          *NokiaConf_Configure_Ipsec_ClientDb_MatchList         `path:"match-list" module:"nokia-conf"`
	Name               *string                                               `path:"name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb) IsYANGGoStruct() {}

// NewClient creates a new entry in the Client list of the
// NokiaConf_Configure_Ipsec_ClientDb struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_ClientDb) NewClient(Id uint32) (*NokiaConf_Configure_Ipsec_ClientDb_Client, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[uint32]*NokiaConf_Configure_Ipsec_ClientDb_Client)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Client[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Client", key)
	}

	t.Client[key] = &NokiaConf_Configure_Ipsec_ClientDb_Client{
		Id: &Id,
	}

	return t.Client[key], nil
}

// RenameClient renames an entry in the list Client within
// the NokiaConf_Configure_Ipsec_ClientDb struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) RenameClient(oldK, newK uint32) error {
	if _, ok := t.Client[newK]; ok {
		return fmt.Errorf("key %v already exists in Client", newK)
	}

	e, ok := t.Client[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Client", oldK)
	}
	e.Id = &newK

	t.Client[newK] = e
	delete(t.Client, oldK)
	return nil
}

// GetOrCreateClient retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_ClientDb. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetOrCreateClient(Id uint32) *NokiaConf_Configure_Ipsec_ClientDb_Client {

	key := Id

	if v, ok := t.Client[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewClient(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateClient got unexpected error: %v", err))
	}
	return v
}

// GetClient retrieves the value with the specified key from
// the Client map field of NokiaConf_Configure_Ipsec_ClientDb. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetClient(Id uint32) *NokiaConf_Configure_Ipsec_ClientDb_Client {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Client[key]; ok {
		return lm
	}
	return nil
}

// DeleteClient deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_ClientDb. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_ClientDb) DeleteClient(Id uint32) {
	key := Id

	delete(t.Client, key)
}

// AppendClient appends the supplied NokiaConf_Configure_Ipsec_ClientDb_Client struct to the
// list Client of NokiaConf_Configure_Ipsec_ClientDb. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_ClientDb_Client already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_ClientDb) AppendClient(v *NokiaConf_Configure_Ipsec_ClientDb_Client) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Client == nil {
		t.Client = make(map[uint32]*NokiaConf_Configure_Ipsec_ClientDb_Client)
	}

	if _, ok := t.Client[key]; ok {
		return fmt.Errorf("duplicate key for list Client %v", key)
	}

	t.Client[key] = v
	return nil
}

// GetOrCreateMatchList retrieves the value of the MatchList field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetOrCreateMatchList() *NokiaConf_Configure_Ipsec_ClientDb_MatchList {
	if t.MatchList != nil {
		return t.MatchList
	}
	t.MatchList = &NokiaConf_Configure_Ipsec_ClientDb_MatchList{}
	return t.MatchList
}

// GetMatchList returns the value of the MatchList struct pointer
// from NokiaConf_Configure_Ipsec_ClientDb. If the receiver or the field MatchList is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetMatchList() *NokiaConf_Configure_Ipsec_ClientDb_MatchList {
	if t != nil && t.MatchList != nil {
		return t.MatchList
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Ipsec_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_ClientDb
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.MatchList.PopulateDefaults()
	for _, e := range t.Client {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_ClientDb struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_ClientDb) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb.
func (*NokiaConf_Configure_Ipsec_ClientDb) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_Client represents the /nokia-conf/configure/ipsec/client-db/client YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_Client struct {
	AdminState         E_NokiaTypesSros_AdminState                               `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	ClientName         *string                                                   `path:"client-name" module:"nokia-conf"`
	Credential         *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential     `path:"credential" module:"nokia-conf"`
	Id                 *uint32                                                   `path:"id" module:"nokia-conf"`
	Identification     *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification `path:"identification" module:"nokia-conf"`
	PrivateInterface   *string                                                   `path:"private-interface" module:"nokia-conf"`
	PrivateServiceName *string                                                   `path:"private-service-name" module:"nokia-conf"`
	TsList             *string                                                   `path:"ts-list" module:"nokia-conf"`
	TunnelTemplate     *uint32                                                   `path:"tunnel-template" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_Client implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client) IsYANGGoStruct() {}

// GetOrCreateCredential retrieves the value of the Credential field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetOrCreateCredential() *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential {
	if t.Credential != nil {
		return t.Credential
	}
	t.Credential = &NokiaConf_Configure_Ipsec_ClientDb_Client_Credential{}
	return t.Credential
}

// GetOrCreateIdentification retrieves the value of the Identification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetOrCreateIdentification() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification {
	if t.Identification != nil {
		return t.Identification
	}
	t.Identification = &NokiaConf_Configure_Ipsec_ClientDb_Client_Identification{}
	return t.Identification
}

// GetCredential returns the value of the Credential struct pointer
// from NokiaConf_Configure_Ipsec_ClientDb_Client. If the receiver or the field Credential is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetCredential() *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential {
	if t != nil && t.Credential != nil {
		return t.Credential
	}
	return nil
}

// GetIdentification returns the value of the Identification struct pointer
// from NokiaConf_Configure_Ipsec_ClientDb_Client. If the receiver or the field Identification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetIdentification() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification {
	if t != nil && t.Identification != nil {
		return t.Identification
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClientName retrieves the value of the leaf ClientName from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientName is set, it can
// safely use t.GetClientName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetClientName() string {
	if t == nil || t.ClientName == nil {
		return ""
	}
	return *t.ClientName
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetPrivateInterface retrieves the value of the leaf PrivateInterface from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateInterface is set, it can
// safely use t.GetPrivateInterface() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateInterface == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetPrivateInterface() string {
	if t == nil || t.PrivateInterface == nil {
		return ""
	}
	return *t.PrivateInterface
}

// GetPrivateServiceName retrieves the value of the leaf PrivateServiceName from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateServiceName is set, it can
// safely use t.GetPrivateServiceName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateServiceName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetPrivateServiceName() string {
	if t == nil || t.PrivateServiceName == nil {
		return ""
	}
	return *t.PrivateServiceName
}

// GetTsList retrieves the value of the leaf TsList from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TsList is set, it can
// safely use t.GetTsList() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TsList == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetTsList() string {
	if t == nil || t.TsList == nil {
		return ""
	}
	return *t.TsList
}

// GetTunnelTemplate retrieves the value of the leaf TunnelTemplate from the NokiaConf_Configure_Ipsec_ClientDb_Client
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelTemplate is set, it can
// safely use t.GetTunnelTemplate() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelTemplate == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) GetTunnelTemplate() uint32 {
	if t == nil || t.TunnelTemplate == nil {
		return 0
	}
	return *t.TunnelTemplate
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_Client
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	t.Credential.PopulateDefaults()
	t.Identification.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_ClientDb_Client struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_Client"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_Client.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_Client_Credential represents the /nokia-conf/configure/ipsec/client-db/client/credential YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_Client_Credential struct {
	PreSharedKey *string `path:"pre-shared-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_Client_Credential implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) IsYANGGoStruct() {}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Ipsec_ClientDb_Client_Credential
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_Client_Credential
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_Client_Credential"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_Client_Credential.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Credential) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_Client_Identification represents the /nokia-conf/configure/ipsec/client-db/client/identification YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_Client_Identification struct {
	Idi          *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi          `path:"idi" module:"nokia-conf" yangPresence:"true"`
	PeerIpPrefix *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix `path:"peer-ip-prefix" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_Client_Identification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) IsYANGGoStruct() {}

// GetOrCreateIdi retrieves the value of the Idi field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) GetOrCreateIdi() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi {
	if t.Idi != nil {
		return t.Idi
	}
	t.Idi = &NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi{}
	return t.Idi
}

// GetOrCreatePeerIpPrefix retrieves the value of the PeerIpPrefix field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) GetOrCreatePeerIpPrefix() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix {
	if t.PeerIpPrefix != nil {
		return t.PeerIpPrefix
	}
	t.PeerIpPrefix = &NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix{}
	return t.PeerIpPrefix
}

// GetIdi returns the value of the Idi struct pointer
// from NokiaConf_Configure_Ipsec_ClientDb_Client_Identification. If the receiver or the field Idi is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) GetIdi() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi {
	if t != nil && t.Idi != nil {
		return t.Idi
	}
	return nil
}

// GetPeerIpPrefix returns the value of the PeerIpPrefix struct pointer
// from NokiaConf_Configure_Ipsec_ClientDb_Client_Identification. If the receiver or the field PeerIpPrefix is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) GetPeerIpPrefix() *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix {
	if t != nil && t.PeerIpPrefix != nil {
		return t.PeerIpPrefix
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Idi.PopulateDefaults()
	t.PeerIpPrefix.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_Client_Identification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_Client_Identification.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi represents the /nokia-conf/configure/ipsec/client-db/client/identification/idi YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi struct {
	Any           *bool   `path:"any" module:"nokia-conf"`
	Fqdn          *string `path:"fqdn" module:"nokia-conf"`
	FqdnSuffix    *string `path:"fqdn-suffix" module:"nokia-conf"`
	Ipv4Prefix    *string `path:"ipv4-prefix" module:"nokia-conf"`
	Ipv4PrefixAny *bool   `path:"ipv4-prefix-any" module:"nokia-conf"`
	Ipv6Prefix    *string `path:"ipv6-prefix" module:"nokia-conf"`
	Ipv6PrefixAny *bool   `path:"ipv6-prefix-any" module:"nokia-conf"`
	Rfc822        *string `path:"rfc822" module:"nokia-conf"`
	Rfc822Suffix  *string `path:"rfc822-suffix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) IsYANGGoStruct() {}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetAny() bool {
	if t == nil || t.Any == nil {
		return false
	}
	return *t.Any
}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetFqdnSuffix retrieves the value of the leaf FqdnSuffix from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FqdnSuffix is set, it can
// safely use t.GetFqdnSuffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FqdnSuffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetFqdnSuffix() string {
	if t == nil || t.FqdnSuffix == nil {
		return ""
	}
	return *t.FqdnSuffix
}

// GetIpv4Prefix retrieves the value of the leaf Ipv4Prefix from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Prefix is set, it can
// safely use t.GetIpv4Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetIpv4Prefix() string {
	if t == nil || t.Ipv4Prefix == nil {
		return ""
	}
	return *t.Ipv4Prefix
}

// GetIpv4PrefixAny retrieves the value of the leaf Ipv4PrefixAny from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4PrefixAny is set, it can
// safely use t.GetIpv4PrefixAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4PrefixAny == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetIpv4PrefixAny() bool {
	if t == nil || t.Ipv4PrefixAny == nil {
		return false
	}
	return *t.Ipv4PrefixAny
}

// GetIpv6Prefix retrieves the value of the leaf Ipv6Prefix from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Prefix is set, it can
// safely use t.GetIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetIpv6Prefix() string {
	if t == nil || t.Ipv6Prefix == nil {
		return ""
	}
	return *t.Ipv6Prefix
}

// GetIpv6PrefixAny retrieves the value of the leaf Ipv6PrefixAny from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6PrefixAny is set, it can
// safely use t.GetIpv6PrefixAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6PrefixAny == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetIpv6PrefixAny() bool {
	if t == nil || t.Ipv6PrefixAny == nil {
		return false
	}
	return *t.Ipv6PrefixAny
}

// GetRfc822 retrieves the value of the leaf Rfc822 from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rfc822 is set, it can
// safely use t.GetRfc822() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rfc822 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetRfc822() string {
	if t == nil || t.Rfc822 == nil {
		return ""
	}
	return *t.Rfc822
}

// GetRfc822Suffix retrieves the value of the leaf Rfc822Suffix from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Rfc822Suffix is set, it can
// safely use t.GetRfc822Suffix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Rfc822Suffix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) GetRfc822Suffix() string {
	if t == nil || t.Rfc822Suffix == nil {
		return ""
	}
	return *t.Rfc822Suffix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_Idi) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix represents the /nokia-conf/configure/ipsec/client-db/client/identification/peer-ip-prefix YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix struct {
	IpPrefix *string `path:"ip-prefix" module:"nokia-conf"`
	Ipv4Only *bool   `path:"ipv4-only" module:"nokia-conf"`
	Ipv6Only *bool   `path:"ipv6-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) IsYANGGoStruct() {}

// GetIpPrefix retrieves the value of the leaf IpPrefix from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpPrefix is set, it can
// safely use t.GetIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) GetIpPrefix() string {
	if t == nil || t.IpPrefix == nil {
		return ""
	}
	return *t.IpPrefix
}

// GetIpv4Only retrieves the value of the leaf Ipv4Only from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Only is set, it can
// safely use t.GetIpv4Only() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Only == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) GetIpv4Only() bool {
	if t == nil || t.Ipv4Only == nil {
		return false
	}
	return *t.Ipv4Only
}

// GetIpv6Only retrieves the value of the leaf Ipv6Only from the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Only is set, it can
// safely use t.GetIpv6Only() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Only == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) GetIpv6Only() bool {
	if t == nil || t.Ipv6Only == nil {
		return false
	}
	return *t.Ipv6Only
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix.
func (*NokiaConf_Configure_Ipsec_ClientDb_Client_Identification_PeerIpPrefix) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_ClientDb_MatchList represents the /nokia-conf/configure/ipsec/client-db/match-list YANG schema element.
type NokiaConf_Configure_Ipsec_ClientDb_MatchList struct {
	Idi          *bool `path:"idi" module:"nokia-conf"`
	PeerIpPrefix *bool `path:"peer-ip-prefix" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_ClientDb_MatchList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_ClientDb_MatchList) IsYANGGoStruct() {}

// GetIdi retrieves the value of the leaf Idi from the NokiaConf_Configure_Ipsec_ClientDb_MatchList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Idi is set, it can
// safely use t.GetIdi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Idi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) GetIdi() bool {
	if t == nil || t.Idi == nil {
		return false
	}
	return *t.Idi
}

// GetPeerIpPrefix retrieves the value of the leaf PeerIpPrefix from the NokiaConf_Configure_Ipsec_ClientDb_MatchList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PeerIpPrefix is set, it can
// safely use t.GetPeerIpPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PeerIpPrefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) GetPeerIpPrefix() bool {
	if t == nil || t.PeerIpPrefix == nil {
		return false
	}
	return *t.PeerIpPrefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_ClientDb_MatchList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Idi == nil {
		var v bool = false
		t.Idi = &v
	}
	if t.PeerIpPrefix == nil {
		var v bool = false
		t.PeerIpPrefix = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_ClientDb_MatchList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_ClientDb_MatchList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_ClientDb_MatchList.
func (*NokiaConf_Configure_Ipsec_ClientDb_MatchList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy represents the /nokia-conf/configure/ipsec/ike-policy YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy struct {
	ApplyGroups                  []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	Description                  *string                                                           `path:"description" module:"nokia-conf"`
	Dpd                          *NokiaConf_Configure_Ipsec_IkePolicy_Dpd                          `path:"dpd" module:"nokia-conf" yangPresence:"true"`
	Id                           *uint32                                                           `path:"id" module:"nokia-conf"`
	IkeTransform                 []uint32                                                          `path:"ike-transform" module:"nokia-conf"`
	IkeVersion_1                 *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1                 `path:"ike-version-1" module:"nokia-conf"`
	IkeVersion_2                 *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2                 `path:"ike-version-2" module:"nokia-conf" yangPresence:"true"`
	IpsecLifetime                *uint32                                                           `path:"ipsec-lifetime" module:"nokia-conf"`
	LimitInitExchange            *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange            `path:"limit-init-exchange" module:"nokia-conf"`
	Lockout                      *NokiaConf_Configure_Ipsec_IkePolicy_Lockout                      `path:"lockout" module:"nokia-conf" yangPresence:"true"`
	MatchPeerIdToCert            *bool                                                             `path:"match-peer-id-to-cert" module:"nokia-conf"`
	NatTraversal                 *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal                 `path:"nat-traversal" module:"nokia-conf" yangPresence:"true"`
	Pfs                          *NokiaConf_Configure_Ipsec_IkePolicy_Pfs                          `path:"pfs" module:"nokia-conf" yangPresence:"true"`
	RelayUnsolicitedCfgAttribute *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute `path:"relay-unsolicited-cfg-attribute" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy) IsYANGGoStruct() {}

// GetOrCreateDpd retrieves the value of the Dpd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateDpd() *NokiaConf_Configure_Ipsec_IkePolicy_Dpd {
	if t.Dpd != nil {
		return t.Dpd
	}
	t.Dpd = &NokiaConf_Configure_Ipsec_IkePolicy_Dpd{}
	return t.Dpd
}

// GetOrCreateIkeVersion_1 retrieves the value of the IkeVersion_1 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateIkeVersion_1() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1 {
	if t.IkeVersion_1 != nil {
		return t.IkeVersion_1
	}
	t.IkeVersion_1 = &NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1{}
	return t.IkeVersion_1
}

// GetOrCreateIkeVersion_2 retrieves the value of the IkeVersion_2 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateIkeVersion_2() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2 {
	if t.IkeVersion_2 != nil {
		return t.IkeVersion_2
	}
	t.IkeVersion_2 = &NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2{}
	return t.IkeVersion_2
}

// GetOrCreateLimitInitExchange retrieves the value of the LimitInitExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateLimitInitExchange() *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange {
	if t.LimitInitExchange != nil {
		return t.LimitInitExchange
	}
	t.LimitInitExchange = &NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange{}
	return t.LimitInitExchange
}

// GetOrCreateLockout retrieves the value of the Lockout field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateLockout() *NokiaConf_Configure_Ipsec_IkePolicy_Lockout {
	if t.Lockout != nil {
		return t.Lockout
	}
	t.Lockout = &NokiaConf_Configure_Ipsec_IkePolicy_Lockout{}
	return t.Lockout
}

// GetOrCreateNatTraversal retrieves the value of the NatTraversal field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateNatTraversal() *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal {
	if t.NatTraversal != nil {
		return t.NatTraversal
	}
	t.NatTraversal = &NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal{}
	return t.NatTraversal
}

// GetOrCreatePfs retrieves the value of the Pfs field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreatePfs() *NokiaConf_Configure_Ipsec_IkePolicy_Pfs {
	if t.Pfs != nil {
		return t.Pfs
	}
	t.Pfs = &NokiaConf_Configure_Ipsec_IkePolicy_Pfs{}
	return t.Pfs
}

// GetOrCreateRelayUnsolicitedCfgAttribute retrieves the value of the RelayUnsolicitedCfgAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetOrCreateRelayUnsolicitedCfgAttribute() *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute {
	if t.RelayUnsolicitedCfgAttribute != nil {
		return t.RelayUnsolicitedCfgAttribute
	}
	t.RelayUnsolicitedCfgAttribute = &NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute{}
	return t.RelayUnsolicitedCfgAttribute
}

// GetDpd returns the value of the Dpd struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field Dpd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetDpd() *NokiaConf_Configure_Ipsec_IkePolicy_Dpd {
	if t != nil && t.Dpd != nil {
		return t.Dpd
	}
	return nil
}

// GetIkeVersion_1 returns the value of the IkeVersion_1 struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field IkeVersion_1 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetIkeVersion_1() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1 {
	if t != nil && t.IkeVersion_1 != nil {
		return t.IkeVersion_1
	}
	return nil
}

// GetIkeVersion_2 returns the value of the IkeVersion_2 struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field IkeVersion_2 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetIkeVersion_2() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2 {
	if t != nil && t.IkeVersion_2 != nil {
		return t.IkeVersion_2
	}
	return nil
}

// GetLimitInitExchange returns the value of the LimitInitExchange struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field LimitInitExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetLimitInitExchange() *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange {
	if t != nil && t.LimitInitExchange != nil {
		return t.LimitInitExchange
	}
	return nil
}

// GetLockout returns the value of the Lockout struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field Lockout is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetLockout() *NokiaConf_Configure_Ipsec_IkePolicy_Lockout {
	if t != nil && t.Lockout != nil {
		return t.Lockout
	}
	return nil
}

// GetNatTraversal returns the value of the NatTraversal struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field NatTraversal is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetNatTraversal() *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal {
	if t != nil && t.NatTraversal != nil {
		return t.NatTraversal
	}
	return nil
}

// GetPfs returns the value of the Pfs struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field Pfs is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetPfs() *NokiaConf_Configure_Ipsec_IkePolicy_Pfs {
	if t != nil && t.Pfs != nil {
		return t.Pfs
	}
	return nil
}

// GetRelayUnsolicitedCfgAttribute returns the value of the RelayUnsolicitedCfgAttribute struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy. If the receiver or the field RelayUnsolicitedCfgAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetRelayUnsolicitedCfgAttribute() *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute {
	if t != nil && t.RelayUnsolicitedCfgAttribute != nil {
		return t.RelayUnsolicitedCfgAttribute
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetIkeTransform retrieves the value of the leaf IkeTransform from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkeTransform is set, it can
// safely use t.GetIkeTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkeTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetIkeTransform() []uint32 {
	if t == nil || t.IkeTransform == nil {
		return nil
	}
	return t.IkeTransform
}

// GetIpsecLifetime retrieves the value of the leaf IpsecLifetime from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecLifetime is set, it can
// safely use t.GetIpsecLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetIpsecLifetime() uint32 {
	if t == nil || t.IpsecLifetime == nil {
		return 3600
	}
	return *t.IpsecLifetime
}

// GetMatchPeerIdToCert retrieves the value of the leaf MatchPeerIdToCert from the NokiaConf_Configure_Ipsec_IkePolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MatchPeerIdToCert is set, it can
// safely use t.GetMatchPeerIdToCert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MatchPeerIdToCert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) GetMatchPeerIdToCert() bool {
	if t == nil || t.MatchPeerIdToCert == nil {
		return false
	}
	return *t.MatchPeerIdToCert
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IpsecLifetime == nil {
		var v uint32 = 3600
		t.IpsecLifetime = &v
	}
	if t.MatchPeerIdToCert == nil {
		var v bool = false
		t.MatchPeerIdToCert = &v
	}
	t.Dpd.PopulateDefaults()
	t.IkeVersion_1.PopulateDefaults()
	t.IkeVersion_2.PopulateDefaults()
	t.LimitInitExchange.PopulateDefaults()
	t.Lockout.PopulateDefaults()
	t.NatTraversal.PopulateDefaults()
	t.Pfs.PopulateDefaults()
	t.RelayUnsolicitedCfgAttribute.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_IkePolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy.
func (*NokiaConf_Configure_Ipsec_IkePolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_Dpd represents the /nokia-conf/configure/ipsec/ike-policy/dpd YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_Dpd struct {
	Interval   *uint32 `path:"interval" module:"nokia-conf"`
	MaxRetries *uint32 `path:"max-retries" module:"nokia-conf"`
	ReplyOnly  *bool   `path:"reply-only" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_Dpd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Dpd) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Ipsec_IkePolicy_Dpd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetMaxRetries retrieves the value of the leaf MaxRetries from the NokiaConf_Configure_Ipsec_IkePolicy_Dpd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRetries is set, it can
// safely use t.GetMaxRetries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRetries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) GetMaxRetries() uint32 {
	if t == nil || t.MaxRetries == nil {
		return 3
	}
	return *t.MaxRetries
}

// GetReplyOnly retrieves the value of the leaf ReplyOnly from the NokiaConf_Configure_Ipsec_IkePolicy_Dpd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplyOnly is set, it can
// safely use t.GetReplyOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplyOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) GetReplyOnly() bool {
	if t == nil || t.ReplyOnly == nil {
		return false
	}
	return *t.ReplyOnly
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_Dpd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.MaxRetries == nil {
		var v uint32 = 3
		t.MaxRetries = &v
	}
	if t.ReplyOnly == nil {
		var v bool = false
		t.ReplyOnly = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_Dpd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Dpd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_Dpd.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Dpd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1 represents the /nokia-conf/configure/ipsec/ike-policy/ike-version-1 YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1 struct {
	AuthMethod               E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_AuthMethod    `path:"auth-method" module:"nokia-conf"`
	IkeMode                  E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_IkeMode       `path:"ike-mode" module:"nokia-conf"`
	OwnAuthMethod            E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_OwnAuthMethod `path:"own-auth-method" module:"nokia-conf"`
	Ph1ResponderDeleteNotify *bool                                                            `path:"ph1-responder-delete-notify" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) IsYANGGoStruct() {}

// GetAuthMethod retrieves the value of the leaf AuthMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMethod is set, it can
// safely use t.GetAuthMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) GetAuthMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_AuthMethod {
	if t == nil || t.AuthMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_AuthMethod_psk
	}
	return t.AuthMethod
}

// GetIkeMode retrieves the value of the leaf IkeMode from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkeMode is set, it can
// safely use t.GetIkeMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkeMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) GetIkeMode() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_IkeMode {
	if t == nil || t.IkeMode == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_IkeMode_main
	}
	return t.IkeMode
}

// GetOwnAuthMethod retrieves the value of the leaf OwnAuthMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OwnAuthMethod is set, it can
// safely use t.GetOwnAuthMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OwnAuthMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) GetOwnAuthMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_OwnAuthMethod {
	if t == nil || t.OwnAuthMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_OwnAuthMethod_symmetric
	}
	return t.OwnAuthMethod
}

// GetPh1ResponderDeleteNotify retrieves the value of the leaf Ph1ResponderDeleteNotify from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ph1ResponderDeleteNotify is set, it can
// safely use t.GetPh1ResponderDeleteNotify() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ph1ResponderDeleteNotify == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) GetPh1ResponderDeleteNotify() bool {
	if t == nil || t.Ph1ResponderDeleteNotify == nil {
		return true
	}
	return *t.Ph1ResponderDeleteNotify
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthMethod == 0 {
		t.AuthMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_AuthMethod_psk
	}
	if t.IkeMode == 0 {
		t.IkeMode = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_IkeMode_main
	}
	if t.OwnAuthMethod == 0 {
		t.OwnAuthMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1_OwnAuthMethod_symmetric
	}
	if t.Ph1ResponderDeleteNotify == nil {
		var v bool = true
		t.Ph1ResponderDeleteNotify = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_1) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2 represents the /nokia-conf/configure/ipsec/ike-policy/ike-version-2 YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2 struct {
	AuthMethod             E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AuthMethod       `path:"auth-method" module:"nokia-conf"`
	AutoEapMethod          E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AutoEapMethod    `path:"auto-eap-method" module:"nokia-conf"`
	Ikev2Fragment          *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment     `path:"ikev2-fragment" module:"nokia-conf" yangPresence:"true"`
	OwnAuthMethod          E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAuthMethod    `path:"own-auth-method" module:"nokia-conf"`
	OwnAutoEapMethod       E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAutoEapMethod `path:"own-auto-eap-method" module:"nokia-conf"`
	SendIdrAfterEapSuccess *bool                                                               `path:"send-idr-after-eap-success" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) IsYANGGoStruct() {}

// GetOrCreateIkev2Fragment retrieves the value of the Ikev2Fragment field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetOrCreateIkev2Fragment() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment {
	if t.Ikev2Fragment != nil {
		return t.Ikev2Fragment
	}
	t.Ikev2Fragment = &NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment{}
	return t.Ikev2Fragment
}

// GetIkev2Fragment returns the value of the Ikev2Fragment struct pointer
// from NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2. If the receiver or the field Ikev2Fragment is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetIkev2Fragment() *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment {
	if t != nil && t.Ikev2Fragment != nil {
		return t.Ikev2Fragment
	}
	return nil
}

// GetAuthMethod retrieves the value of the leaf AuthMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AuthMethod is set, it can
// safely use t.GetAuthMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AuthMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetAuthMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AuthMethod {
	if t == nil || t.AuthMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AuthMethod_psk
	}
	return t.AuthMethod
}

// GetAutoEapMethod retrieves the value of the leaf AutoEapMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEapMethod is set, it can
// safely use t.GetAutoEapMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEapMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetAutoEapMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AutoEapMethod {
	if t == nil || t.AutoEapMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AutoEapMethod_cert
	}
	return t.AutoEapMethod
}

// GetOwnAuthMethod retrieves the value of the leaf OwnAuthMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OwnAuthMethod is set, it can
// safely use t.GetOwnAuthMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OwnAuthMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetOwnAuthMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAuthMethod {
	if t == nil || t.OwnAuthMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAuthMethod_symmetric
	}
	return t.OwnAuthMethod
}

// GetOwnAutoEapMethod retrieves the value of the leaf OwnAutoEapMethod from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OwnAutoEapMethod is set, it can
// safely use t.GetOwnAutoEapMethod() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OwnAutoEapMethod == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetOwnAutoEapMethod() E_NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAutoEapMethod {
	if t == nil || t.OwnAutoEapMethod == 0 {
		return NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAutoEapMethod_cert
	}
	return t.OwnAutoEapMethod
}

// GetSendIdrAfterEapSuccess retrieves the value of the leaf SendIdrAfterEapSuccess from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SendIdrAfterEapSuccess is set, it can
// safely use t.GetSendIdrAfterEapSuccess() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SendIdrAfterEapSuccess == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) GetSendIdrAfterEapSuccess() bool {
	if t == nil || t.SendIdrAfterEapSuccess == nil {
		return true
	}
	return *t.SendIdrAfterEapSuccess
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AuthMethod == 0 {
		t.AuthMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AuthMethod_psk
	}
	if t.AutoEapMethod == 0 {
		t.AutoEapMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_AutoEapMethod_cert
	}
	if t.OwnAuthMethod == 0 {
		t.OwnAuthMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAuthMethod_symmetric
	}
	if t.OwnAutoEapMethod == 0 {
		t.OwnAutoEapMethod = NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_OwnAutoEapMethod_cert
	}
	if t.SendIdrAfterEapSuccess == nil {
		var v bool = true
		t.SendIdrAfterEapSuccess = &v
	}
	t.Ikev2Fragment.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment represents the /nokia-conf/configure/ipsec/ike-policy/ike-version-2/ikev2-fragment YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment struct {
	Mtu               *uint32 `path:"mtu" module:"nokia-conf"`
	ReassemblyTimeout *uint32 `path:"reassembly-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) IsYANGGoStruct() {}

// GetMtu retrieves the value of the leaf Mtu from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mtu is set, it can
// safely use t.GetMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) GetMtu() uint32 {
	if t == nil || t.Mtu == nil {
		return 1500
	}
	return *t.Mtu
}

// GetReassemblyTimeout retrieves the value of the leaf ReassemblyTimeout from the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReassemblyTimeout is set, it can
// safely use t.GetReassemblyTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReassemblyTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) GetReassemblyTimeout() uint32 {
	if t == nil || t.ReassemblyTimeout == nil {
		return 2
	}
	return *t.ReassemblyTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mtu == nil {
		var v uint32 = 1500
		t.Mtu = &v
	}
	if t.ReassemblyTimeout == nil {
		var v uint32 = 2
		t.ReassemblyTimeout = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment.
func (*NokiaConf_Configure_Ipsec_IkePolicy_IkeVersion_2_Ikev2Fragment) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange represents the /nokia-conf/configure/ipsec/ike-policy/limit-init-exchange YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange struct {
	AdminState                E_NokiaTypesSros_AdminState                                                           `path:"admin-state" module:"nokia-conf"`
	ReducedMaxExchangeTimeout NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange_ReducedMaxExchangeTimeout_Union `path:"reduced-max-exchange-timeout" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetReducedMaxExchangeTimeout retrieves the value of the leaf ReducedMaxExchangeTimeout from the NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReducedMaxExchangeTimeout is set, it can
// safely use t.GetReducedMaxExchangeTimeout() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReducedMaxExchangeTimeout == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) GetReducedMaxExchangeTimeout() NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange_ReducedMaxExchangeTimeout_Union {
	if t == nil || t.ReducedMaxExchangeTimeout == nil {
		return UnionUint32(2)
	}
	return t.ReducedMaxExchangeTimeout
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.ReducedMaxExchangeTimeout == nil {
		t.ReducedMaxExchangeTimeout = UnionUint32(2)
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange.
func (*NokiaConf_Configure_Ipsec_IkePolicy_LimitInitExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_Lockout represents the /nokia-conf/configure/ipsec/ike-policy/lockout YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_Lockout struct {
	Block          NokiaConf_Configure_Ipsec_IkePolicy_Lockout_Block_Union `path:"block" module:"nokia-conf"`
	Duration       *uint32                                                 `path:"duration" module:"nokia-conf"`
	FailedAttempts *uint32                                                 `path:"failed-attempts" module:"nokia-conf"`
	MaxPortPerIp   *uint32                                                 `path:"max-port-per-ip" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_Lockout implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Lockout) IsYANGGoStruct() {}

// GetBlock retrieves the value of the leaf Block from the NokiaConf_Configure_Ipsec_IkePolicy_Lockout
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Block is set, it can
// safely use t.GetBlock() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Block == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) GetBlock() NokiaConf_Configure_Ipsec_IkePolicy_Lockout_Block_Union {
	if t == nil || t.Block == nil {
		return UnionUint32(10)
	}
	return t.Block
}

// GetDuration retrieves the value of the leaf Duration from the NokiaConf_Configure_Ipsec_IkePolicy_Lockout
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Duration is set, it can
// safely use t.GetDuration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Duration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) GetDuration() uint32 {
	if t == nil || t.Duration == nil {
		return 5
	}
	return *t.Duration
}

// GetFailedAttempts retrieves the value of the leaf FailedAttempts from the NokiaConf_Configure_Ipsec_IkePolicy_Lockout
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailedAttempts is set, it can
// safely use t.GetFailedAttempts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailedAttempts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) GetFailedAttempts() uint32 {
	if t == nil || t.FailedAttempts == nil {
		return 3
	}
	return *t.FailedAttempts
}

// GetMaxPortPerIp retrieves the value of the leaf MaxPortPerIp from the NokiaConf_Configure_Ipsec_IkePolicy_Lockout
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPortPerIp is set, it can
// safely use t.GetMaxPortPerIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPortPerIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) GetMaxPortPerIp() uint32 {
	if t == nil || t.MaxPortPerIp == nil {
		return 16
	}
	return *t.MaxPortPerIp
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_Lockout
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Block == nil {
		t.Block = UnionUint32(10)
	}
	if t.Duration == nil {
		var v uint32 = 5
		t.Duration = &v
	}
	if t.FailedAttempts == nil {
		var v uint32 = 3
		t.FailedAttempts = &v
	}
	if t.MaxPortPerIp == nil {
		var v uint32 = 16
		t.MaxPortPerIp = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_Lockout"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Lockout) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_Lockout.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Lockout) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal represents the /nokia-conf/configure/ipsec/ike-policy/nat-traversal YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal struct {
	Force             *bool   `path:"force" module:"nokia-conf"`
	ForceKeepAlive    *bool   `path:"force-keep-alive" module:"nokia-conf"`
	KeepAliveInterval *uint32 `path:"keep-alive-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) IsYANGGoStruct() {}

// GetForce retrieves the value of the leaf Force from the NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Force is set, it can
// safely use t.GetForce() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Force == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) GetForce() bool {
	if t == nil || t.Force == nil {
		return false
	}
	return *t.Force
}

// GetForceKeepAlive retrieves the value of the leaf ForceKeepAlive from the NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ForceKeepAlive is set, it can
// safely use t.GetForceKeepAlive() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ForceKeepAlive == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) GetForceKeepAlive() bool {
	if t == nil || t.ForceKeepAlive == nil {
		return true
	}
	return *t.ForceKeepAlive
}

// GetKeepAliveInterval retrieves the value of the leaf KeepAliveInterval from the NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if KeepAliveInterval is set, it can
// safely use t.GetKeepAliveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.KeepAliveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) GetKeepAliveInterval() uint32 {
	if t == nil || t.KeepAliveInterval == nil {
		return 0
	}
	return *t.KeepAliveInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Force == nil {
		var v bool = false
		t.Force = &v
	}
	if t.ForceKeepAlive == nil {
		var v bool = true
		t.ForceKeepAlive = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal.
func (*NokiaConf_Configure_Ipsec_IkePolicy_NatTraversal) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_Pfs represents the /nokia-conf/configure/ipsec/ike-policy/pfs YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_Pfs struct {
	DhGroup E_NokiaTypesIpsec_DhGroup `path:"dh-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_Pfs implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Pfs) IsYANGGoStruct() {}

// GetDhGroup retrieves the value of the leaf DhGroup from the NokiaConf_Configure_Ipsec_IkePolicy_Pfs
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhGroup is set, it can
// safely use t.GetDhGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Pfs) GetDhGroup() E_NokiaTypesIpsec_DhGroup {
	if t == nil || t.DhGroup == 0 {
		return NokiaTypesIpsec_DhGroup_group_2
	}
	return t.DhGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_Pfs
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Pfs) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhGroup == 0 {
		t.DhGroup = NokiaTypesIpsec_DhGroup_group_2
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Pfs) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_Pfs"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Pfs) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_Pfs) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_Pfs.
func (*NokiaConf_Configure_Ipsec_IkePolicy_Pfs) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute represents the /nokia-conf/configure/ipsec/ike-policy/relay-unsolicited-cfg-attribute YANG schema element.
type NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute struct {
	InternalIp4Address *bool `path:"internal-ip4-address" module:"nokia-conf"`
	InternalIp4Dns     *bool `path:"internal-ip4-dns" module:"nokia-conf"`
	InternalIp4Netmask *bool `path:"internal-ip4-netmask" module:"nokia-conf"`
	InternalIp6Address *bool `path:"internal-ip6-address" module:"nokia-conf"`
	InternalIp6Dns     *bool `path:"internal-ip6-dns" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) IsYANGGoStruct() {}

// GetInternalIp4Address retrieves the value of the leaf InternalIp4Address from the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalIp4Address is set, it can
// safely use t.GetInternalIp4Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalIp4Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) GetInternalIp4Address() bool {
	if t == nil || t.InternalIp4Address == nil {
		return false
	}
	return *t.InternalIp4Address
}

// GetInternalIp4Dns retrieves the value of the leaf InternalIp4Dns from the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalIp4Dns is set, it can
// safely use t.GetInternalIp4Dns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalIp4Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) GetInternalIp4Dns() bool {
	if t == nil || t.InternalIp4Dns == nil {
		return false
	}
	return *t.InternalIp4Dns
}

// GetInternalIp4Netmask retrieves the value of the leaf InternalIp4Netmask from the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalIp4Netmask is set, it can
// safely use t.GetInternalIp4Netmask() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalIp4Netmask == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) GetInternalIp4Netmask() bool {
	if t == nil || t.InternalIp4Netmask == nil {
		return false
	}
	return *t.InternalIp4Netmask
}

// GetInternalIp6Address retrieves the value of the leaf InternalIp6Address from the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalIp6Address is set, it can
// safely use t.GetInternalIp6Address() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalIp6Address == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) GetInternalIp6Address() bool {
	if t == nil || t.InternalIp6Address == nil {
		return false
	}
	return *t.InternalIp6Address
}

// GetInternalIp6Dns retrieves the value of the leaf InternalIp6Dns from the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InternalIp6Dns is set, it can
// safely use t.GetInternalIp6Dns() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InternalIp6Dns == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) GetInternalIp6Dns() bool {
	if t == nil || t.InternalIp6Dns == nil {
		return false
	}
	return *t.InternalIp6Dns
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InternalIp4Address == nil {
		var v bool = false
		t.InternalIp4Address = &v
	}
	if t.InternalIp4Dns == nil {
		var v bool = false
		t.InternalIp4Dns = &v
	}
	if t.InternalIp4Netmask == nil {
		var v bool = false
		t.InternalIp4Netmask = &v
	}
	if t.InternalIp6Address == nil {
		var v bool = false
		t.InternalIp6Address = &v
	}
	if t.InternalIp6Dns == nil {
		var v bool = false
		t.InternalIp6Dns = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute.
func (*NokiaConf_Configure_Ipsec_IkePolicy_RelayUnsolicitedCfgAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IkeTransform represents the /nokia-conf/configure/ipsec/ike-transform YANG schema element.
type NokiaConf_Configure_Ipsec_IkeTransform struct {
	ApplyGroups            []string                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	DhGroup                E_NokiaTypesIpsec_DhGroup                 `path:"dh-group" module:"nokia-conf"`
	Id                     *uint32                                   `path:"id" module:"nokia-conf"`
	IkeAuthAlgorithm       E_NokiaTypesIpsec_IkeAuthAlgorithms       `path:"ike-auth-algorithm" module:"nokia-conf"`
	IkeEncryptionAlgorithm E_NokiaTypesIpsec_IkeEncryptionAlgorithms `path:"ike-encryption-algorithm" module:"nokia-conf"`
	IkePrfAlgorithm        E_NokiaTypesIpsec_PrfAlgorithms           `path:"ike-prf-algorithm" module:"nokia-conf"`
	IsakmpLifetime         *uint32                                   `path:"isakmp-lifetime" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IkeTransform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IkeTransform) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDhGroup retrieves the value of the leaf DhGroup from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DhGroup is set, it can
// safely use t.GetDhGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DhGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetDhGroup() E_NokiaTypesIpsec_DhGroup {
	if t == nil || t.DhGroup == 0 {
		return NokiaTypesIpsec_DhGroup_group_2
	}
	return t.DhGroup
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetIkeAuthAlgorithm retrieves the value of the leaf IkeAuthAlgorithm from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkeAuthAlgorithm is set, it can
// safely use t.GetIkeAuthAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkeAuthAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetIkeAuthAlgorithm() E_NokiaTypesIpsec_IkeAuthAlgorithms {
	if t == nil || t.IkeAuthAlgorithm == 0 {
		return NokiaTypesIpsec_IkeAuthAlgorithms_sha_1
	}
	return t.IkeAuthAlgorithm
}

// GetIkeEncryptionAlgorithm retrieves the value of the leaf IkeEncryptionAlgorithm from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkeEncryptionAlgorithm is set, it can
// safely use t.GetIkeEncryptionAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkeEncryptionAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetIkeEncryptionAlgorithm() E_NokiaTypesIpsec_IkeEncryptionAlgorithms {
	if t == nil || t.IkeEncryptionAlgorithm == 0 {
		return NokiaTypesIpsec_IkeEncryptionAlgorithms_aes_128
	}
	return t.IkeEncryptionAlgorithm
}

// GetIkePrfAlgorithm retrieves the value of the leaf IkePrfAlgorithm from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePrfAlgorithm is set, it can
// safely use t.GetIkePrfAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePrfAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetIkePrfAlgorithm() E_NokiaTypesIpsec_PrfAlgorithms {
	if t == nil || t.IkePrfAlgorithm == 0 {
		return NokiaTypesIpsec_PrfAlgorithms_same_as_auth
	}
	return t.IkePrfAlgorithm
}

// GetIsakmpLifetime retrieves the value of the leaf IsakmpLifetime from the NokiaConf_Configure_Ipsec_IkeTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsakmpLifetime is set, it can
// safely use t.GetIsakmpLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsakmpLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) GetIsakmpLifetime() uint32 {
	if t == nil || t.IsakmpLifetime == nil {
		return 86400
	}
	return *t.IsakmpLifetime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IkeTransform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DhGroup == 0 {
		t.DhGroup = NokiaTypesIpsec_DhGroup_group_2
	}
	if t.IkeAuthAlgorithm == 0 {
		t.IkeAuthAlgorithm = NokiaTypesIpsec_IkeAuthAlgorithms_sha_1
	}
	if t.IkeEncryptionAlgorithm == 0 {
		t.IkeEncryptionAlgorithm = NokiaTypesIpsec_IkeEncryptionAlgorithms_aes_128
	}
	if t.IkePrfAlgorithm == 0 {
		t.IkePrfAlgorithm = NokiaTypesIpsec_PrfAlgorithms_same_as_auth
	}
	if t.IsakmpLifetime == nil {
		var v uint32 = 86400
		t.IsakmpLifetime = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_IkeTransform struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IkeTransform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IkeTransform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IkeTransform.
func (*NokiaConf_Configure_Ipsec_IkeTransform) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransform represents the /nokia-conf/configure/ipsec/ipsec-transform YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransform struct {
	ApplyGroups            []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	EspAuthAlgorithm       E_NokiaTypesIpsec_AuthAlgorithms                      `path:"esp-auth-algorithm" module:"nokia-conf"`
	EspEncryptionAlgorithm E_NokiaTypesIpsec_EncryptionAlgorithms                `path:"esp-encryption-algorithm" module:"nokia-conf"`
	ExtendedSequenceNumber *bool                                                 `path:"extended-sequence-number" module:"nokia-conf"`
	Id                     *uint32                                               `path:"id" module:"nokia-conf"`
	IpsecLifetime          *uint32                                               `path:"ipsec-lifetime" module:"nokia-conf"`
	PfsDhGroup             E_NokiaConf_Configure_Ipsec_IpsecTransform_PfsDhGroup `path:"pfs-dh-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransform implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransform) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEspAuthAlgorithm retrieves the value of the leaf EspAuthAlgorithm from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EspAuthAlgorithm is set, it can
// safely use t.GetEspAuthAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EspAuthAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetEspAuthAlgorithm() E_NokiaTypesIpsec_AuthAlgorithms {
	if t == nil || t.EspAuthAlgorithm == 0 {
		return NokiaTypesIpsec_AuthAlgorithms_sha_1
	}
	return t.EspAuthAlgorithm
}

// GetEspEncryptionAlgorithm retrieves the value of the leaf EspEncryptionAlgorithm from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EspEncryptionAlgorithm is set, it can
// safely use t.GetEspEncryptionAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EspEncryptionAlgorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetEspEncryptionAlgorithm() E_NokiaTypesIpsec_EncryptionAlgorithms {
	if t == nil || t.EspEncryptionAlgorithm == 0 {
		return NokiaTypesIpsec_EncryptionAlgorithms_aes_128
	}
	return t.EspEncryptionAlgorithm
}

// GetExtendedSequenceNumber retrieves the value of the leaf ExtendedSequenceNumber from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ExtendedSequenceNumber is set, it can
// safely use t.GetExtendedSequenceNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ExtendedSequenceNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetExtendedSequenceNumber() bool {
	if t == nil || t.ExtendedSequenceNumber == nil {
		return false
	}
	return *t.ExtendedSequenceNumber
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetIpsecLifetime retrieves the value of the leaf IpsecLifetime from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecLifetime is set, it can
// safely use t.GetIpsecLifetime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecLifetime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetIpsecLifetime() uint32 {
	if t == nil || t.IpsecLifetime == nil {
		return 0
	}
	return *t.IpsecLifetime
}

// GetPfsDhGroup retrieves the value of the leaf PfsDhGroup from the NokiaConf_Configure_Ipsec_IpsecTransform
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PfsDhGroup is set, it can
// safely use t.GetPfsDhGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PfsDhGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) GetPfsDhGroup() E_NokiaConf_Configure_Ipsec_IpsecTransform_PfsDhGroup {
	if t == nil || t.PfsDhGroup == 0 {
		return 0
	}
	return t.PfsDhGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransform
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.EspAuthAlgorithm == 0 {
		t.EspAuthAlgorithm = NokiaTypesIpsec_AuthAlgorithms_sha_1
	}
	if t.EspEncryptionAlgorithm == 0 {
		t.EspEncryptionAlgorithm = NokiaTypesIpsec_EncryptionAlgorithms_aes_128
	}
	if t.ExtendedSequenceNumber == nil {
		var v bool = false
		t.ExtendedSequenceNumber = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_IpsecTransform struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransform"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransform) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransform.
func (*NokiaConf_Configure_Ipsec_IpsecTransform) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile struct {
	ApplyGroups          []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	Description          *string                                                                   `path:"description" module:"nokia-conf"`
	KeyExchange          *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange          `path:"key-exchange" module:"nokia-conf"`
	MaxHistoryKeyRecords *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords `path:"max-history-key-records" module:"nokia-conf"`
	Name                 *string                                                                   `path:"name" module:"nokia-conf"`
	ReplayWindow         *uint32                                                                   `path:"replay-window" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) IsYANGGoStruct() {}

// GetOrCreateKeyExchange retrieves the value of the KeyExchange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetOrCreateKeyExchange() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange {
	if t.KeyExchange != nil {
		return t.KeyExchange
	}
	t.KeyExchange = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange{}
	return t.KeyExchange
}

// GetOrCreateMaxHistoryKeyRecords retrieves the value of the MaxHistoryKeyRecords field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetOrCreateMaxHistoryKeyRecords() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords {
	if t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	t.MaxHistoryKeyRecords = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords{}
	return t.MaxHistoryKeyRecords
}

// GetKeyExchange returns the value of the KeyExchange struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile. If the receiver or the field KeyExchange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetKeyExchange() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange {
	if t != nil && t.KeyExchange != nil {
		return t.KeyExchange
	}
	return nil
}

// GetMaxHistoryKeyRecords returns the value of the MaxHistoryKeyRecords struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile. If the receiver or the field MaxHistoryKeyRecords is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetMaxHistoryKeyRecords() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords {
	if t != nil && t.MaxHistoryKeyRecords != nil {
		return t.MaxHistoryKeyRecords
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetReplayWindow retrieves the value of the leaf ReplayWindow from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayWindow is set, it can
// safely use t.GetReplayWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) GetReplayWindow() uint32 {
	if t == nil || t.ReplayWindow == nil {
		return 0
	}
	return *t.ReplayWindow
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.KeyExchange.PopulateDefaults()
	t.MaxHistoryKeyRecords.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/key-exchange YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange struct {
	Dynamic *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic `path:"dynamic" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) IsYANGGoStruct() {}

// GetOrCreateDynamic retrieves the value of the Dynamic field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) GetOrCreateDynamic() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic {
	if t.Dynamic != nil {
		return t.Dynamic
	}
	t.Dynamic = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic{}
	return t.Dynamic
}

// GetDynamic returns the value of the Dynamic struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange. If the receiver or the field Dynamic is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) GetDynamic() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic {
	if t != nil && t.Dynamic != nil {
		return t.Dynamic
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Dynamic.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/key-exchange/dynamic YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic struct {
	AutoEstablish  *bool                                                                         `path:"auto-establish" module:"nokia-conf"`
	Cert           *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert `path:"cert" module:"nokia-conf"`
	Id             *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id   `path:"id" module:"nokia-conf"`
	IkePolicy      *uint32                                                                       `path:"ike-policy" module:"nokia-conf"`
	IpsecTransform []uint32                                                                      `path:"ipsec-transform" module:"nokia-conf"`
	PreSharedKey   *string                                                                       `path:"pre-shared-key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) IsYANGGoStruct() {}

// GetOrCreateCert retrieves the value of the Cert field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetOrCreateCert() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert {
	if t.Cert != nil {
		return t.Cert
	}
	t.Cert = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert{}
	return t.Cert
}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetOrCreateId() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id{}
	return t.Id
}

// GetCert returns the value of the Cert struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic. If the receiver or the field Cert is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetCert() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert {
	if t != nil && t.Cert != nil {
		return t.Cert
	}
	return nil
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetId() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetAutoEstablish retrieves the value of the leaf AutoEstablish from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoEstablish is set, it can
// safely use t.GetAutoEstablish() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoEstablish == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetAutoEstablish() bool {
	if t == nil || t.AutoEstablish == nil {
		return false
	}
	return *t.AutoEstablish
}

// GetIkePolicy retrieves the value of the leaf IkePolicy from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IkePolicy is set, it can
// safely use t.GetIkePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IkePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetIkePolicy() uint32 {
	if t == nil || t.IkePolicy == nil {
		return 0
	}
	return *t.IkePolicy
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetIpsecTransform() []uint32 {
	if t == nil || t.IpsecTransform == nil {
		return nil
	}
	return t.IpsecTransform
}

// GetPreSharedKey retrieves the value of the leaf PreSharedKey from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PreSharedKey is set, it can
// safely use t.GetPreSharedKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PreSharedKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) GetPreSharedKey() string {
	if t == nil || t.PreSharedKey == nil {
		return ""
	}
	return *t.PreSharedKey
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoEstablish == nil {
		var v bool = false
		t.AutoEstablish = &v
	}
	t.Cert.PopulateDefaults()
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/key-exchange/dynamic/cert YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert struct {
	CertProfile        *string                                                                                    `path:"cert-profile" module:"nokia-conf"`
	StatusVerify       *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify `path:"status-verify" module:"nokia-conf"`
	TrustAnchorProfile *string                                                                                    `path:"trust-anchor-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) IsYANGGoStruct() {
}

// GetOrCreateStatusVerify retrieves the value of the StatusVerify field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) GetOrCreateStatusVerify() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify {
	if t.StatusVerify != nil {
		return t.StatusVerify
	}
	t.StatusVerify = &NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify{}
	return t.StatusVerify
}

// GetStatusVerify returns the value of the StatusVerify struct pointer
// from NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert. If the receiver or the field StatusVerify is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) GetStatusVerify() *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify {
	if t != nil && t.StatusVerify != nil {
		return t.StatusVerify
	}
	return nil
}

// GetCertProfile retrieves the value of the leaf CertProfile from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CertProfile is set, it can
// safely use t.GetCertProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CertProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) GetCertProfile() string {
	if t == nil || t.CertProfile == nil {
		return ""
	}
	return *t.CertProfile
}

// GetTrustAnchorProfile retrieves the value of the leaf TrustAnchorProfile from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TrustAnchorProfile is set, it can
// safely use t.GetTrustAnchorProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TrustAnchorProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) GetTrustAnchorProfile() string {
	if t == nil || t.TrustAnchorProfile == nil {
		return ""
	}
	return *t.TrustAnchorProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.StatusVerify.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/key-exchange/dynamic/cert/status-verify YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify struct {
	DefaultResult E_NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult `path:"default-result" module:"nokia-conf"`
	Primary       E_NokiaTypesIpsec_CertRevocationStatus                                                                    `path:"primary" module:"nokia-conf"`
	Secondary     E_NokiaTypesIpsec_CertRevocationStatusWithNone                                                            `path:"secondary" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) IsYANGGoStruct() {
}

// GetDefaultResult retrieves the value of the leaf DefaultResult from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DefaultResult is set, it can
// safely use t.GetDefaultResult() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DefaultResult == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) GetDefaultResult() E_NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult {
	if t == nil || t.DefaultResult == 0 {
		return NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	return t.DefaultResult
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) GetPrimary() E_NokiaTypesIpsec_CertRevocationStatus {
	if t == nil || t.Primary == 0 {
		return NokiaTypesIpsec_CertRevocationStatus_crl
	}
	return t.Primary
}

// GetSecondary retrieves the value of the leaf Secondary from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Secondary is set, it can
// safely use t.GetSecondary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Secondary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) GetSecondary() E_NokiaTypesIpsec_CertRevocationStatusWithNone {
	if t == nil || t.Secondary == 0 {
		return NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
	return t.Secondary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.DefaultResult == 0 {
		t.DefaultResult = NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify_DefaultResult_revoked
	}
	if t.Primary == 0 {
		t.Primary = NokiaTypesIpsec_CertRevocationStatus_crl
	}
	if t.Secondary == 0 {
		t.Secondary = NokiaTypesIpsec_CertRevocationStatusWithNone_none
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Cert_StatusVerify) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/key-exchange/dynamic/id YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id struct {
	Fqdn *string `path:"fqdn" module:"nokia-conf"`
	Ipv4 *string `path:"ipv4" module:"nokia-conf"`
	Ipv6 *string `path:"ipv6" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) IsYANGGoStruct() {}

// GetFqdn retrieves the value of the leaf Fqdn from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fqdn is set, it can
// safely use t.GetFqdn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fqdn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) GetFqdn() string {
	if t == nil || t.Fqdn == nil {
		return ""
	}
	return *t.Fqdn
}

// GetIpv4 retrieves the value of the leaf Ipv4 from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4 is set, it can
// safely use t.GetIpv4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) GetIpv4() string {
	if t == nil || t.Ipv4 == nil {
		return ""
	}
	return *t.Ipv4
}

// GetIpv6 retrieves the value of the leaf Ipv6 from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6 is set, it can
// safely use t.GetIpv6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) GetIpv6() string {
	if t == nil || t.Ipv6 == nil {
		return ""
	}
	return *t.Ipv6
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_KeyExchange_Dynamic_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords represents the /nokia-conf/configure/ipsec/ipsec-transport-mode-profile/max-history-key-records YANG schema element.
type NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords struct {
	Esp *uint32 `path:"esp" module:"nokia-conf"`
	Ike *uint32 `path:"ike" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) IsYANGGoStruct() {}

// GetEsp retrieves the value of the leaf Esp from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Esp is set, it can
// safely use t.GetEsp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Esp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) GetEsp() uint32 {
	if t == nil || t.Esp == nil {
		return 0
	}
	return *t.Esp
}

// GetIke retrieves the value of the leaf Ike from the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ike is set, it can
// safely use t.GetIke() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ike == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) GetIke() uint32 {
	if t == nil || t.Ike == nil {
		return 0
	}
	return *t.Ike
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords.
func (*NokiaConf_Configure_Ipsec_IpsecTransportModeProfile_MaxHistoryKeyRecords) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius represents the /nokia-conf/configure/ipsec/radius YANG schema element.
type NokiaConf_Configure_Ipsec_Radius struct {
	AccountingPolicy     map[string]*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy     `path:"accounting-policy" module:"nokia-conf"`
	AuthenticationPolicy map[string]*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy `path:"authentication-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius) IsYANGGoStruct() {}

// NewAccountingPolicy creates a new entry in the AccountingPolicy list of the
// NokiaConf_Configure_Ipsec_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_Radius) NewAccountingPolicy(Name string) (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccountingPolicy == nil {
		t.AccountingPolicy = make(map[string]*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AccountingPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AccountingPolicy", key)
	}

	t.AccountingPolicy[key] = &NokiaConf_Configure_Ipsec_Radius_AccountingPolicy{
		Name: &Name,
	}

	return t.AccountingPolicy[key], nil
}

// RenameAccountingPolicy renames an entry in the list AccountingPolicy within
// the NokiaConf_Configure_Ipsec_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_Radius) RenameAccountingPolicy(oldK, newK string) error {
	if _, ok := t.AccountingPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AccountingPolicy", newK)
	}

	e, ok := t.AccountingPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AccountingPolicy", oldK)
	}
	e.Name = &newK

	t.AccountingPolicy[newK] = e
	delete(t.AccountingPolicy, oldK)
	return nil
}

// GetOrCreateAccountingPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_Radius) GetOrCreateAccountingPolicy(Name string) *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy {

	key := Name

	if v, ok := t.AccountingPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAccountingPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAccountingPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAccountingPolicy retrieves the value with the specified key from
// the AccountingPolicy map field of NokiaConf_Configure_Ipsec_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_Radius) GetAccountingPolicy(Name string) *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AccountingPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAccountingPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_Radius) DeleteAccountingPolicy(Name string) {
	key := Name

	delete(t.AccountingPolicy, key)
}

// AppendAccountingPolicy appends the supplied NokiaConf_Configure_Ipsec_Radius_AccountingPolicy struct to the
// list AccountingPolicy of NokiaConf_Configure_Ipsec_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_Radius_AccountingPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_Radius) AppendAccountingPolicy(v *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AccountingPolicy == nil {
		t.AccountingPolicy = make(map[string]*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy)
	}

	if _, ok := t.AccountingPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AccountingPolicy %v", key)
	}

	t.AccountingPolicy[key] = v
	return nil
}

// NewAuthenticationPolicy creates a new entry in the AuthenticationPolicy list of the
// NokiaConf_Configure_Ipsec_Radius struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_Radius) NewAuthenticationPolicy(Name string) (*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationPolicy == nil {
		t.AuthenticationPolicy = make(map[string]*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy)
	}

	key := Name

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.AuthenticationPolicy[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list AuthenticationPolicy", key)
	}

	t.AuthenticationPolicy[key] = &NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy{
		Name: &Name,
	}

	return t.AuthenticationPolicy[key], nil
}

// RenameAuthenticationPolicy renames an entry in the list AuthenticationPolicy within
// the NokiaConf_Configure_Ipsec_Radius struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_Radius) RenameAuthenticationPolicy(oldK, newK string) error {
	if _, ok := t.AuthenticationPolicy[newK]; ok {
		return fmt.Errorf("key %v already exists in AuthenticationPolicy", newK)
	}

	e, ok := t.AuthenticationPolicy[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in AuthenticationPolicy", oldK)
	}
	e.Name = &newK

	t.AuthenticationPolicy[newK] = e
	delete(t.AuthenticationPolicy, oldK)
	return nil
}

// GetOrCreateAuthenticationPolicy retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_Radius. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_Radius) GetOrCreateAuthenticationPolicy(Name string) *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy {

	key := Name

	if v, ok := t.AuthenticationPolicy[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewAuthenticationPolicy(Name)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateAuthenticationPolicy got unexpected error: %v", err))
	}
	return v
}

// GetAuthenticationPolicy retrieves the value with the specified key from
// the AuthenticationPolicy map field of NokiaConf_Configure_Ipsec_Radius. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_Radius) GetAuthenticationPolicy(Name string) *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy {

	if t == nil {
		return nil
	}

	key := Name

	if lm, ok := t.AuthenticationPolicy[key]; ok {
		return lm
	}
	return nil
}

// DeleteAuthenticationPolicy deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_Radius. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_Radius) DeleteAuthenticationPolicy(Name string) {
	key := Name

	delete(t.AuthenticationPolicy, key)
}

// AppendAuthenticationPolicy appends the supplied NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy struct to the
// list AuthenticationPolicy of NokiaConf_Configure_Ipsec_Radius. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_Radius) AppendAuthenticationPolicy(v *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) error {
	if v.Name == nil {
		return fmt.Errorf("invalid nil key received for Name")
	}

	key := *v.Name

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.AuthenticationPolicy == nil {
		t.AuthenticationPolicy = make(map[string]*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy)
	}

	if _, ok := t.AuthenticationPolicy[key]; ok {
		return fmt.Errorf("duplicate key for list AuthenticationPolicy %v", key)
	}

	t.AuthenticationPolicy[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.AccountingPolicy {
		e.PopulateDefaults()
	}
	for _, e := range t.AuthenticationPolicy {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius.
func (*NokiaConf_Configure_Ipsec_Radius) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius_AccountingPolicy represents the /nokia-conf/configure/ipsec/radius/accounting-policy YANG schema element.
type NokiaConf_Configure_Ipsec_Radius_AccountingPolicy struct {
	ApplyGroups            []string                                                                  `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                  `path:"apply-groups-exclude" module:"nokia-conf"`
	IncludeRadiusAttribute *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute `path:"include-radius-attribute" module:"nokia-conf"`
	Name                   *string                                                                   `path:"name" module:"nokia-conf"`
	RadiusServerPolicy     *string                                                                   `path:"radius-server-policy" module:"nokia-conf"`
	UpdateInterval         *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval         `path:"update-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius_AccountingPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) IsYANGGoStruct() {}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetOrCreateUpdateInterval retrieves the value of the UpdateInterval field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetOrCreateUpdateInterval() *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval {
	if t.UpdateInterval != nil {
		return t.UpdateInterval
	}
	t.UpdateInterval = &NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval{}
	return t.UpdateInterval
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Ipsec_Radius_AccountingPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetUpdateInterval returns the value of the UpdateInterval struct pointer
// from NokiaConf_Configure_Ipsec_Radius_AccountingPolicy. If the receiver or the field UpdateInterval is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetUpdateInterval() *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval {
	if t != nil && t.UpdateInterval != nil {
		return t.UpdateInterval
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeRadiusAttribute.PopulateDefaults()
	t.UpdateInterval.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius_AccountingPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius_AccountingPolicy.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/ipsec/radius/accounting-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute struct {
	AcctStats        *bool `path:"acct-stats" module:"nokia-conf"`
	CalledStationId  *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId *bool `path:"calling-station-id" module:"nokia-conf"`
	FramedIpAddr     *bool `path:"framed-ip-addr" module:"nokia-conf"`
	FramedIpv6Prefix *bool `path:"framed-ipv6-prefix" module:"nokia-conf"`
	NasIdentifier    *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddr        *bool `path:"nas-ip-addr" module:"nokia-conf"`
	NasPortId        *bool `path:"nas-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {}

// GetAcctStats retrieves the value of the leaf AcctStats from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AcctStats is set, it can
// safely use t.GetAcctStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AcctStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetAcctStats() bool {
	if t == nil || t.AcctStats == nil {
		return false
	}
	return *t.AcctStats
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetFramedIpAddr retrieves the value of the leaf FramedIpAddr from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpAddr is set, it can
// safely use t.GetFramedIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetFramedIpAddr() bool {
	if t == nil || t.FramedIpAddr == nil {
		return false
	}
	return *t.FramedIpAddr
}

// GetFramedIpv6Prefix retrieves the value of the leaf FramedIpv6Prefix from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FramedIpv6Prefix is set, it can
// safely use t.GetFramedIpv6Prefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FramedIpv6Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetFramedIpv6Prefix() bool {
	if t == nil || t.FramedIpv6Prefix == nil {
		return false
	}
	return *t.FramedIpv6Prefix
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddr retrieves the value of the leaf NasIpAddr from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddr is set, it can
// safely use t.GetNasIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetNasIpAddr() bool {
	if t == nil || t.NasIpAddr == nil {
		return false
	}
	return *t.NasIpAddr
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AcctStats == nil {
		var v bool = false
		t.AcctStats = &v
	}
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.FramedIpAddr == nil {
		var v bool = false
		t.FramedIpAddr = &v
	}
	if t.FramedIpv6Prefix == nil {
		var v bool = false
		t.FramedIpv6Prefix = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddr == nil {
		var v bool = false
		t.NasIpAddr = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval represents the /nokia-conf/configure/ipsec/radius/accounting-policy/update-interval YANG schema element.
type NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval struct {
	Jitter *int32 `path:"jitter" module:"nokia-conf"`
	Value  *int32 `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) IsYANGGoStruct() {}

// GetJitter retrieves the value of the leaf Jitter from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Jitter is set, it can
// safely use t.GetJitter() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Jitter == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) GetJitter() int32 {
	if t == nil || t.Jitter == nil {
		return 0
	}
	return *t.Jitter
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 10
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Value == nil {
		var v int32 = 10
		t.Value = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval.
func (*NokiaConf_Configure_Ipsec_Radius_AccountingPolicy_UpdateInterval) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy represents the /nokia-conf/configure/ipsec/radius/authentication-policy YANG schema element.
type NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy struct {
	ApplyGroups            []string                                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	IncludeRadiusAttribute *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute `path:"include-radius-attribute" module:"nokia-conf"`
	Name                   *string                                                                       `path:"name" module:"nokia-conf"`
	Password               *string                                                                       `path:"password" module:"nokia-conf"`
	RadiusServerPolicy     *string                                                                       `path:"radius-server-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) IsYANGGoStruct() {}

// GetOrCreateIncludeRadiusAttribute retrieves the value of the IncludeRadiusAttribute field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetOrCreateIncludeRadiusAttribute() *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute {
	if t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	t.IncludeRadiusAttribute = &NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute{}
	return t.IncludeRadiusAttribute
}

// GetIncludeRadiusAttribute returns the value of the IncludeRadiusAttribute struct pointer
// from NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy. If the receiver or the field IncludeRadiusAttribute is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetIncludeRadiusAttribute() *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute {
	if t != nil && t.IncludeRadiusAttribute != nil {
		return t.IncludeRadiusAttribute
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetPassword retrieves the value of the leaf Password from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Password is set, it can
// safely use t.GetPassword() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Password == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetPassword() string {
	if t == nil || t.Password == nil {
		return ""
	}
	return *t.Password
}

// GetRadiusServerPolicy retrieves the value of the leaf RadiusServerPolicy from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusServerPolicy is set, it can
// safely use t.GetRadiusServerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusServerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) GetRadiusServerPolicy() string {
	if t == nil || t.RadiusServerPolicy == nil {
		return ""
	}
	return *t.RadiusServerPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.IncludeRadiusAttribute.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy.
func (*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute represents the /nokia-conf/configure/ipsec/radius/authentication-policy/include-radius-attribute YANG schema element.
type NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute struct {
	CalledStationId        *bool `path:"called-station-id" module:"nokia-conf"`
	CallingStationId       *bool `path:"calling-station-id" module:"nokia-conf"`
	ClientCertSubjectKeyId *bool `path:"client-cert-subject-key-id" module:"nokia-conf"`
	NasIdentifier          *bool `path:"nas-identifier" module:"nokia-conf"`
	NasIpAddr              *bool `path:"nas-ip-addr" module:"nokia-conf"`
	NasPortId              *bool `path:"nas-port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) IsYANGGoStruct() {
}

// GetCalledStationId retrieves the value of the leaf CalledStationId from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CalledStationId is set, it can
// safely use t.GetCalledStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CalledStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetCalledStationId() bool {
	if t == nil || t.CalledStationId == nil {
		return false
	}
	return *t.CalledStationId
}

// GetCallingStationId retrieves the value of the leaf CallingStationId from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CallingStationId is set, it can
// safely use t.GetCallingStationId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CallingStationId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetCallingStationId() bool {
	if t == nil || t.CallingStationId == nil {
		return false
	}
	return *t.CallingStationId
}

// GetClientCertSubjectKeyId retrieves the value of the leaf ClientCertSubjectKeyId from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientCertSubjectKeyId is set, it can
// safely use t.GetClientCertSubjectKeyId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientCertSubjectKeyId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetClientCertSubjectKeyId() bool {
	if t == nil || t.ClientCertSubjectKeyId == nil {
		return false
	}
	return *t.ClientCertSubjectKeyId
}

// GetNasIdentifier retrieves the value of the leaf NasIdentifier from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIdentifier is set, it can
// safely use t.GetNasIdentifier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIdentifier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetNasIdentifier() bool {
	if t == nil || t.NasIdentifier == nil {
		return false
	}
	return *t.NasIdentifier
}

// GetNasIpAddr retrieves the value of the leaf NasIpAddr from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasIpAddr is set, it can
// safely use t.GetNasIpAddr() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasIpAddr == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetNasIpAddr() bool {
	if t == nil || t.NasIpAddr == nil {
		return false
	}
	return *t.NasIpAddr
}

// GetNasPortId retrieves the value of the leaf NasPortId from the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if NasPortId is set, it can
// safely use t.GetNasPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.NasPortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) GetNasPortId() bool {
	if t == nil || t.NasPortId == nil {
		return false
	}
	return *t.NasPortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CalledStationId == nil {
		var v bool = false
		t.CalledStationId = &v
	}
	if t.CallingStationId == nil {
		var v bool = false
		t.CallingStationId = &v
	}
	if t.ClientCertSubjectKeyId == nil {
		var v bool = false
		t.ClientCertSubjectKeyId = &v
	}
	if t.NasIdentifier == nil {
		var v bool = false
		t.NasIdentifier = &v
	}
	if t.NasIpAddr == nil {
		var v bool = false
		t.NasIpAddr = &v
	}
	if t.NasPortId == nil {
		var v bool = false
		t.NasPortId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute.
func (*NokiaConf_Configure_Ipsec_Radius_AuthenticationPolicy_IncludeRadiusAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_StaticSa represents the /nokia-conf/configure/ipsec/static-sa YANG schema element.
type NokiaConf_Configure_Ipsec_StaticSa struct {
	ApplyGroups        []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Authentication     *NokiaConf_Configure_Ipsec_StaticSa_Authentication `path:"authentication" module:"nokia-conf" yangPresence:"true"`
	Description        *string                                            `path:"description" module:"nokia-conf"`
	Direction          E_NokiaConf_Configure_Ipsec_StaticSa_Direction     `path:"direction" module:"nokia-conf"`
	Name               *string                                            `path:"name" module:"nokia-conf"`
	Protocol           E_NokiaConf_Configure_Ipsec_StaticSa_Protocol      `path:"protocol" module:"nokia-conf"`
	Spi                *uint32                                            `path:"spi" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_StaticSa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_StaticSa) IsYANGGoStruct() {}

// GetOrCreateAuthentication retrieves the value of the Authentication field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetOrCreateAuthentication() *NokiaConf_Configure_Ipsec_StaticSa_Authentication {
	if t.Authentication != nil {
		return t.Authentication
	}
	t.Authentication = &NokiaConf_Configure_Ipsec_StaticSa_Authentication{}
	return t.Authentication
}

// GetAuthentication returns the value of the Authentication struct pointer
// from NokiaConf_Configure_Ipsec_StaticSa. If the receiver or the field Authentication is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetAuthentication() *NokiaConf_Configure_Ipsec_StaticSa_Authentication {
	if t != nil && t.Authentication != nil {
		return t.Authentication
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDirection retrieves the value of the leaf Direction from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Direction is set, it can
// safely use t.GetDirection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Direction == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetDirection() E_NokiaConf_Configure_Ipsec_StaticSa_Direction {
	if t == nil || t.Direction == 0 {
		return NokiaConf_Configure_Ipsec_StaticSa_Direction_bidirectional
	}
	return t.Direction
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// GetProtocol retrieves the value of the leaf Protocol from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Protocol is set, it can
// safely use t.GetProtocol() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Protocol == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetProtocol() E_NokiaConf_Configure_Ipsec_StaticSa_Protocol {
	if t == nil || t.Protocol == 0 {
		return NokiaConf_Configure_Ipsec_StaticSa_Protocol_esp
	}
	return t.Protocol
}

// GetSpi retrieves the value of the leaf Spi from the NokiaConf_Configure_Ipsec_StaticSa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Spi is set, it can
// safely use t.GetSpi() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Spi == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa) GetSpi() uint32 {
	if t == nil || t.Spi == nil {
		return 0
	}
	return *t.Spi
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_StaticSa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_StaticSa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Direction == 0 {
		t.Direction = NokiaConf_Configure_Ipsec_StaticSa_Direction_bidirectional
	}
	if t.Protocol == 0 {
		t.Protocol = NokiaConf_Configure_Ipsec_StaticSa_Protocol_esp
	}
	t.Authentication.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_StaticSa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_StaticSa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_StaticSa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_StaticSa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_StaticSa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_StaticSa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_StaticSa.
func (*NokiaConf_Configure_Ipsec_StaticSa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_StaticSa_Authentication represents the /nokia-conf/configure/ipsec/static-sa/authentication YANG schema element.
type NokiaConf_Configure_Ipsec_StaticSa_Authentication struct {
	Algorithm E_NokiaConf_Configure_Ipsec_StaticSa_Authentication_Algorithm `path:"algorithm" module:"nokia-conf"`
	Key       *string                                                       `path:"key" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_StaticSa_Authentication implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_StaticSa_Authentication) IsYANGGoStruct() {}

// GetAlgorithm retrieves the value of the leaf Algorithm from the NokiaConf_Configure_Ipsec_StaticSa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Algorithm is set, it can
// safely use t.GetAlgorithm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Algorithm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) GetAlgorithm() E_NokiaConf_Configure_Ipsec_StaticSa_Authentication_Algorithm {
	if t == nil || t.Algorithm == 0 {
		return 0
	}
	return t.Algorithm
}

// GetKey retrieves the value of the leaf Key from the NokiaConf_Configure_Ipsec_StaticSa_Authentication
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Key is set, it can
// safely use t.GetKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Key == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) GetKey() string {
	if t == nil || t.Key == nil {
		return ""
	}
	return *t.Key
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_StaticSa_Authentication
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_StaticSa_Authentication"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_StaticSa_Authentication) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_StaticSa_Authentication.
func (*NokiaConf_Configure_Ipsec_StaticSa_Authentication) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TrustAnchorProfile represents the /nokia-conf/configure/ipsec/trust-anchor-profile YANG schema element.
type NokiaConf_Configure_Ipsec_TrustAnchorProfile struct {
	ApplyGroups        []string                                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Name               *string                                                              `path:"name" module:"nokia-conf"`
	TrustAnchor        map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor `path:"trust-anchor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TrustAnchorProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TrustAnchorProfile) IsYANGGoStruct() {}

// NewTrustAnchor creates a new entry in the TrustAnchor list of the
// NokiaConf_Configure_Ipsec_TrustAnchorProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) NewTrustAnchor(CaProfile string) (*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor)
	}

	key := CaProfile

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TrustAnchor[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TrustAnchor", key)
	}

	t.TrustAnchor[key] = &NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor{
		CaProfile: &CaProfile,
	}

	return t.TrustAnchor[key], nil
}

// RenameTrustAnchor renames an entry in the list TrustAnchor within
// the NokiaConf_Configure_Ipsec_TrustAnchorProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) RenameTrustAnchor(oldK, newK string) error {
	if _, ok := t.TrustAnchor[newK]; ok {
		return fmt.Errorf("key %v already exists in TrustAnchor", newK)
	}

	e, ok := t.TrustAnchor[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TrustAnchor", oldK)
	}
	e.CaProfile = &newK

	t.TrustAnchor[newK] = e
	delete(t.TrustAnchor, oldK)
	return nil
}

// GetOrCreateTrustAnchor retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TrustAnchorProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) GetOrCreateTrustAnchor(CaProfile string) *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor {

	key := CaProfile

	if v, ok := t.TrustAnchor[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTrustAnchor(CaProfile)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTrustAnchor got unexpected error: %v", err))
	}
	return v
}

// GetTrustAnchor retrieves the value with the specified key from
// the TrustAnchor map field of NokiaConf_Configure_Ipsec_TrustAnchorProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) GetTrustAnchor(CaProfile string) *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor {

	if t == nil {
		return nil
	}

	key := CaProfile

	if lm, ok := t.TrustAnchor[key]; ok {
		return lm
	}
	return nil
}

// DeleteTrustAnchor deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TrustAnchorProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) DeleteTrustAnchor(CaProfile string) {
	key := CaProfile

	delete(t.TrustAnchor, key)
}

// AppendTrustAnchor appends the supplied NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor struct to the
// list TrustAnchor of NokiaConf_Configure_Ipsec_TrustAnchorProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) AppendTrustAnchor(v *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) error {
	if v.CaProfile == nil {
		return fmt.Errorf("invalid nil key received for CaProfile")
	}

	key := *v.CaProfile

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TrustAnchor == nil {
		t.TrustAnchor = make(map[string]*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor)
	}

	if _, ok := t.TrustAnchor[key]; ok {
		return fmt.Errorf("duplicate key for list TrustAnchor %v", key)
	}

	t.TrustAnchor[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_TrustAnchorProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TrustAnchorProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.TrustAnchor {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TrustAnchorProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TrustAnchorProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TrustAnchorProfile.
func (*NokiaConf_Configure_Ipsec_TrustAnchorProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor represents the /nokia-conf/configure/ipsec/trust-anchor-profile/trust-anchor YANG schema element.
type NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor struct {
	CaProfile *string `path:"ca-profile" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) IsYANGGoStruct() {}

// GetCaProfile retrieves the value of the leaf CaProfile from the NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CaProfile is set, it can
// safely use t.GetCaProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CaProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) GetCaProfile() string {
	if t == nil || t.CaProfile == nil {
		return ""
	}
	return *t.CaProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) ΛListKeyMap() (map[string]interface{}, error) {
	if t.CaProfile == nil {
		return nil, fmt.Errorf("nil value for key CaProfile")
	}

	return map[string]interface{}{
		"ca-profile": *t.CaProfile,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor.
func (*NokiaConf_Configure_Ipsec_TrustAnchorProfile_TrustAnchor) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList represents the /nokia-conf/configure/ipsec/ts-list YANG schema element.
type NokiaConf_Configure_Ipsec_TsList struct {
	ApplyGroups        []string                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Local              *NokiaConf_Configure_Ipsec_TsList_Local  `path:"local" module:"nokia-conf"`
	Name               *string                                  `path:"name" module:"nokia-conf"`
	Remote             *NokiaConf_Configure_Ipsec_TsList_Remote `path:"remote" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList) IsYANGGoStruct() {}

// GetOrCreateLocal retrieves the value of the Local field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList) GetOrCreateLocal() *NokiaConf_Configure_Ipsec_TsList_Local {
	if t.Local != nil {
		return t.Local
	}
	t.Local = &NokiaConf_Configure_Ipsec_TsList_Local{}
	return t.Local
}

// GetOrCreateRemote retrieves the value of the Remote field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList) GetOrCreateRemote() *NokiaConf_Configure_Ipsec_TsList_Remote {
	if t.Remote != nil {
		return t.Remote
	}
	t.Remote = &NokiaConf_Configure_Ipsec_TsList_Remote{}
	return t.Remote
}

// GetLocal returns the value of the Local struct pointer
// from NokiaConf_Configure_Ipsec_TsList. If the receiver or the field Local is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList) GetLocal() *NokiaConf_Configure_Ipsec_TsList_Local {
	if t != nil && t.Local != nil {
		return t.Local
	}
	return nil
}

// GetRemote returns the value of the Remote struct pointer
// from NokiaConf_Configure_Ipsec_TsList. If the receiver or the field Remote is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList) GetRemote() *NokiaConf_Configure_Ipsec_TsList_Remote {
	if t != nil && t.Remote != nil {
		return t.Remote
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_TsList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_TsList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Ipsec_TsList
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList) GetName() string {
	if t == nil || t.Name == nil {
		return ""
	}
	return *t.Name
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Local.PopulateDefaults()
	t.Remote.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TsList struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TsList) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Name == nil {
		return nil, fmt.Errorf("nil value for key Name")
	}

	return map[string]interface{}{
		"name": *t.Name,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList.
func (*NokiaConf_Configure_Ipsec_TsList) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local represents the /nokia-conf/configure/ipsec/ts-list/local YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local struct {
	Entry map[uint32]*NokiaConf_Configure_Ipsec_TsList_Local_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Ipsec_TsList_Local struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) NewEntry(Id uint32) (*NokiaConf_Configure_Ipsec_TsList_Local_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_TsList_Local_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Ipsec_TsList_Local_Entry{
		Id: &Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Ipsec_TsList_Local struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TsList_Local. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) GetOrCreateEntry(Id uint32) *NokiaConf_Configure_Ipsec_TsList_Local_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Ipsec_TsList_Local. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) GetEntry(Id uint32) *NokiaConf_Configure_Ipsec_TsList_Local_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TsList_Local. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) DeleteEntry(Id uint32) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Ipsec_TsList_Local_Entry struct to the
// list Entry of NokiaConf_Configure_Ipsec_TsList_Local. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TsList_Local_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) AppendEntry(v *NokiaConf_Configure_Ipsec_TsList_Local_Entry) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_TsList_Local_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local.
func (*NokiaConf_Configure_Ipsec_TsList_Local) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry represents the /nokia-conf/configure/ipsec/ts-list/local/entry YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry struct {
	Address            *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address  `path:"address" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                `path:"id" module:"nokia-conf"`
	Protocol           *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol `path:"protocol" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry) IsYANGGoStruct() {}

// GetOrCreateAddress retrieves the value of the Address field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetOrCreateAddress() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address {
	if t.Address != nil {
		return t.Address
	}
	t.Address = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address{}
	return t.Address
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetOrCreateProtocol() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol{}
	return t.Protocol
}

// GetAddress returns the value of the Address struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry. If the receiver or the field Address is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetAddress() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address {
	if t != nil && t.Address != nil {
		return t.Address
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetProtocol() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_TsList_Local_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_TsList_Local_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_TsList_Local_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Address.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TsList_Local_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address represents the /nokia-conf/configure/ipsec/ts-list/local/entry/address YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address struct {
	Prefix *string                                                     `path:"prefix" module:"nokia-conf"`
	Range  *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) GetOrCreateRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) GetRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range represents the /nokia-conf/configure/ipsec/ts-list/local/entry/address/range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range struct {
	Begin *string `path:"begin" module:"nokia-conf"`
	End   *string `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) GetBegin() string {
	if t == nil || t.Begin == nil {
		return ""
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Address_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol struct {
	Any YANGEmpty                                                 `path:"any" module:"nokia-conf"`
	Id  *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id `path:"id" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) IsYANGGoStruct() {}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) GetOrCreateId() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id{}
	return t.Id
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) GetId() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) GetAny() YANGEmpty {
	if t == nil || t.Any == false {
		return false
	}
	return t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id struct {
	Icmp                  *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp                       `path:"icmp" module:"nokia-conf"`
	Icmp6                 *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6                      `path:"icmp6" module:"nokia-conf"`
	Mipv6                 *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6                      `path:"mipv6" module:"nokia-conf"`
	ProtocolIdWithAnyPort NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_ProtocolIdWithAnyPort_Union `path:"protocol-id-with-any-port" module:"nokia-conf"`
	Sctp                  *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp                       `path:"sctp" module:"nokia-conf"`
	Tcp                   *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp                        `path:"tcp" module:"nokia-conf"`
	Udp                   *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp                        `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) IsYANGGoStruct() {}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateIcmp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp{}
	return t.Icmp
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateIcmp6() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6{}
	return t.Icmp6
}

// GetOrCreateMipv6 retrieves the value of the Mipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateMipv6() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6 {
	if t.Mipv6 != nil {
		return t.Mipv6
	}
	t.Mipv6 = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6{}
	return t.Mipv6
}

// GetOrCreateSctp retrieves the value of the Sctp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateSctp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp {
	if t.Sctp != nil {
		return t.Sctp
	}
	t.Sctp = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp{}
	return t.Sctp
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateTcp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetOrCreateUdp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp{}
	return t.Udp
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetIcmp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetIcmp6() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetMipv6 returns the value of the Mipv6 struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Mipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetMipv6() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6 {
	if t != nil && t.Mipv6 != nil {
		return t.Mipv6
	}
	return nil
}

// GetSctp returns the value of the Sctp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Sctp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetSctp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp {
	if t != nil && t.Sctp != nil {
		return t.Sctp
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetTcp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetUdp() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetProtocolIdWithAnyPort retrieves the value of the leaf ProtocolIdWithAnyPort from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolIdWithAnyPort is set, it can
// safely use t.GetProtocolIdWithAnyPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolIdWithAnyPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) GetProtocolIdWithAnyPort() NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_ProtocolIdWithAnyPort_Union {
	if t == nil || t.ProtocolIdWithAnyPort == nil {
		return nil
	}
	return t.ProtocolIdWithAnyPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmp.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.Mipv6.PopulateDefaults()
	t.Sctp.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/icmp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp struct {
	Opaque    YANGEmpty                                                                `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6 represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/icmp6 YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6 struct {
	Opaque    YANGEmpty                                                                 `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/icmp6/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange struct {
	BeginIcmpCode *uint16 `path:"begin-icmp-code" module:"nokia-conf"`
	BeginIcmpType *uint16 `path:"begin-icmp-type" module:"nokia-conf"`
	EndIcmpCode   *uint16 `path:"end-icmp-code" module:"nokia-conf"`
	EndIcmpType   *uint16 `path:"end-icmp-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) IsYANGGoStruct() {}

// GetBeginIcmpCode retrieves the value of the leaf BeginIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpCode is set, it can
// safely use t.GetBeginIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) GetBeginIcmpCode() uint16 {
	if t == nil || t.BeginIcmpCode == nil {
		return 0
	}
	return *t.BeginIcmpCode
}

// GetBeginIcmpType retrieves the value of the leaf BeginIcmpType from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpType is set, it can
// safely use t.GetBeginIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) GetBeginIcmpType() uint16 {
	if t == nil || t.BeginIcmpType == nil {
		return 0
	}
	return *t.BeginIcmpType
}

// GetEndIcmpCode retrieves the value of the leaf EndIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpCode is set, it can
// safely use t.GetEndIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) GetEndIcmpCode() uint16 {
	if t == nil || t.EndIcmpCode == nil {
		return 0
	}
	return *t.EndIcmpCode
}

// GetEndIcmpType retrieves the value of the leaf EndIcmpType from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpType is set, it can
// safely use t.GetEndIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) GetEndIcmpType() uint16 {
	if t == nil || t.EndIcmpType == nil {
		return 0
	}
	return *t.EndIcmpType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp6_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/icmp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange struct {
	BeginIcmpCode *uint16 `path:"begin-icmp-code" module:"nokia-conf"`
	BeginIcmpType *uint16 `path:"begin-icmp-type" module:"nokia-conf"`
	EndIcmpCode   *uint16 `path:"end-icmp-code" module:"nokia-conf"`
	EndIcmpType   *uint16 `path:"end-icmp-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) IsYANGGoStruct() {}

// GetBeginIcmpCode retrieves the value of the leaf BeginIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpCode is set, it can
// safely use t.GetBeginIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) GetBeginIcmpCode() uint16 {
	if t == nil || t.BeginIcmpCode == nil {
		return 0
	}
	return *t.BeginIcmpCode
}

// GetBeginIcmpType retrieves the value of the leaf BeginIcmpType from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpType is set, it can
// safely use t.GetBeginIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) GetBeginIcmpType() uint16 {
	if t == nil || t.BeginIcmpType == nil {
		return 0
	}
	return *t.BeginIcmpType
}

// GetEndIcmpCode retrieves the value of the leaf EndIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpCode is set, it can
// safely use t.GetEndIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) GetEndIcmpCode() uint16 {
	if t == nil || t.EndIcmpCode == nil {
		return 0
	}
	return *t.EndIcmpCode
}

// GetEndIcmpType retrieves the value of the leaf EndIcmpType from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpType is set, it can
// safely use t.GetEndIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) GetEndIcmpType() uint16 {
	if t == nil || t.EndIcmpType == nil {
		return 0
	}
	return *t.EndIcmpType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Icmp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6 represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/mipv6 YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6 struct {
	Opaque    YANGEmpty                                                                 `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/mipv6/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange struct {
	Begin *uint16 `path:"begin" module:"nokia-conf"`
	End   *uint16 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) GetBegin() uint16 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Mipv6_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/sctp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp struct {
	Opaque    YANGEmpty                                                                `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/sctp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Sctp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/tcp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp struct {
	Opaque    YANGEmpty                                                               `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/tcp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Tcp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/udp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp struct {
	Opaque    YANGEmpty                                                               `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/local/entry/protocol/id/udp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Local_Entry_Protocol_Id_Udp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote represents the /nokia-conf/configure/ipsec/ts-list/remote YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote struct {
	Entry map[uint32]*NokiaConf_Configure_Ipsec_TsList_Remote_Entry `path:"entry" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote) IsYANGGoStruct() {}

// NewEntry creates a new entry in the Entry list of the
// NokiaConf_Configure_Ipsec_TsList_Remote struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) NewEntry(Id uint32) (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_TsList_Remote_Entry)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Entry[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Entry", key)
	}

	t.Entry[key] = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry{
		Id: &Id,
	}

	return t.Entry[key], nil
}

// RenameEntry renames an entry in the list Entry within
// the NokiaConf_Configure_Ipsec_TsList_Remote struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) RenameEntry(oldK, newK uint32) error {
	if _, ok := t.Entry[newK]; ok {
		return fmt.Errorf("key %v already exists in Entry", newK)
	}

	e, ok := t.Entry[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Entry", oldK)
	}
	e.Id = &newK

	t.Entry[newK] = e
	delete(t.Entry, oldK)
	return nil
}

// GetOrCreateEntry retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TsList_Remote. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) GetOrCreateEntry(Id uint32) *NokiaConf_Configure_Ipsec_TsList_Remote_Entry {

	key := Id

	if v, ok := t.Entry[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEntry(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEntry got unexpected error: %v", err))
	}
	return v
}

// GetEntry retrieves the value with the specified key from
// the Entry map field of NokiaConf_Configure_Ipsec_TsList_Remote. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) GetEntry(Id uint32) *NokiaConf_Configure_Ipsec_TsList_Remote_Entry {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.Entry[key]; ok {
		return lm
	}
	return nil
}

// DeleteEntry deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Ipsec_TsList_Remote. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) DeleteEntry(Id uint32) {
	key := Id

	delete(t.Entry, key)
}

// AppendEntry appends the supplied NokiaConf_Configure_Ipsec_TsList_Remote_Entry struct to the
// list Entry of NokiaConf_Configure_Ipsec_TsList_Remote. If the key value(s) specified in
// the supplied NokiaConf_Configure_Ipsec_TsList_Remote_Entry already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) AppendEntry(v *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Entry == nil {
		t.Entry = make(map[uint32]*NokiaConf_Configure_Ipsec_TsList_Remote_Entry)
	}

	if _, ok := t.Entry[key]; ok {
		return fmt.Errorf("duplicate key for list Entry %v", key)
	}

	t.Entry[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Entry {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote.
func (*NokiaConf_Configure_Ipsec_TsList_Remote) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry represents the /nokia-conf/configure/ipsec/ts-list/remote/entry YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry struct {
	Address            *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address  `path:"address" module:"nokia-conf" yangPresence:"true"`
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Id                 *uint32                                                 `path:"id" module:"nokia-conf"`
	Protocol           *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol `path:"protocol" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry) IsYANGGoStruct() {}

// GetOrCreateAddress retrieves the value of the Address field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetOrCreateAddress() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address {
	if t.Address != nil {
		return t.Address
	}
	t.Address = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address{}
	return t.Address
}

// GetOrCreateProtocol retrieves the value of the Protocol field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetOrCreateProtocol() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol {
	if t.Protocol != nil {
		return t.Protocol
	}
	t.Protocol = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol{}
	return t.Protocol
}

// GetAddress returns the value of the Address struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry. If the receiver or the field Address is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetAddress() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address {
	if t != nil && t.Address != nil {
		return t.Address
	}
	return nil
}

// GetProtocol returns the value of the Protocol struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry. If the receiver or the field Protocol is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetProtocol() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol {
	if t != nil && t.Protocol != nil {
		return t.Protocol
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Address.PopulateDefaults()
	t.Protocol.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TsList_Remote_Entry struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/address YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address struct {
	Prefix *string                                                      `path:"prefix" module:"nokia-conf"`
	Range  *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range `path:"range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) IsYANGGoStruct() {}

// GetOrCreateRange retrieves the value of the Range field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) GetOrCreateRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range {
	if t.Range != nil {
		return t.Range
	}
	t.Range = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range{}
	return t.Range
}

// GetRange returns the value of the Range struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address. If the receiver or the field Range is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) GetRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range {
	if t != nil && t.Range != nil {
		return t.Range
	}
	return nil
}

// GetPrefix retrieves the value of the leaf Prefix from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Prefix is set, it can
// safely use t.GetPrefix() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Prefix == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) GetPrefix() string {
	if t == nil || t.Prefix == nil {
		return ""
	}
	return *t.Prefix
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Range.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/address/range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range struct {
	Begin *string `path:"begin" module:"nokia-conf"`
	End   *string `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) GetBegin() string {
	if t == nil || t.Begin == nil {
		return ""
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) GetEnd() string {
	if t == nil || t.End == nil {
		return ""
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Address_Range) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol struct {
	Any YANGEmpty                                                  `path:"any" module:"nokia-conf"`
	Id  *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id `path:"id" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) IsYANGGoStruct() {}

// GetOrCreateId retrieves the value of the Id field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) GetOrCreateId() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id {
	if t.Id != nil {
		return t.Id
	}
	t.Id = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id{}
	return t.Id
}

// GetId returns the value of the Id struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol. If the receiver or the field Id is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) GetId() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id {
	if t != nil && t.Id != nil {
		return t.Id
	}
	return nil
}

// GetAny retrieves the value of the leaf Any from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Any is set, it can
// safely use t.GetAny() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Any == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) GetAny() YANGEmpty {
	if t == nil || t.Any == false {
		return false
	}
	return t.Any
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Id.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id struct {
	Icmp                  *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp                       `path:"icmp" module:"nokia-conf"`
	Icmp6                 *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6                      `path:"icmp6" module:"nokia-conf"`
	Mipv6                 *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6                      `path:"mipv6" module:"nokia-conf"`
	ProtocolIdWithAnyPort NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_ProtocolIdWithAnyPort_Union `path:"protocol-id-with-any-port" module:"nokia-conf"`
	Sctp                  *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp                       `path:"sctp" module:"nokia-conf"`
	Tcp                   *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp                        `path:"tcp" module:"nokia-conf"`
	Udp                   *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp                        `path:"udp" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) IsYANGGoStruct() {}

// GetOrCreateIcmp retrieves the value of the Icmp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateIcmp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp {
	if t.Icmp != nil {
		return t.Icmp
	}
	t.Icmp = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp{}
	return t.Icmp
}

// GetOrCreateIcmp6 retrieves the value of the Icmp6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateIcmp6() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6 {
	if t.Icmp6 != nil {
		return t.Icmp6
	}
	t.Icmp6 = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6{}
	return t.Icmp6
}

// GetOrCreateMipv6 retrieves the value of the Mipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateMipv6() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6 {
	if t.Mipv6 != nil {
		return t.Mipv6
	}
	t.Mipv6 = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6{}
	return t.Mipv6
}

// GetOrCreateSctp retrieves the value of the Sctp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateSctp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp {
	if t.Sctp != nil {
		return t.Sctp
	}
	t.Sctp = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp{}
	return t.Sctp
}

// GetOrCreateTcp retrieves the value of the Tcp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateTcp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp {
	if t.Tcp != nil {
		return t.Tcp
	}
	t.Tcp = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp{}
	return t.Tcp
}

// GetOrCreateUdp retrieves the value of the Udp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetOrCreateUdp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp {
	if t.Udp != nil {
		return t.Udp
	}
	t.Udp = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp{}
	return t.Udp
}

// GetIcmp returns the value of the Icmp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Icmp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetIcmp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp {
	if t != nil && t.Icmp != nil {
		return t.Icmp
	}
	return nil
}

// GetIcmp6 returns the value of the Icmp6 struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Icmp6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetIcmp6() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6 {
	if t != nil && t.Icmp6 != nil {
		return t.Icmp6
	}
	return nil
}

// GetMipv6 returns the value of the Mipv6 struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Mipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetMipv6() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6 {
	if t != nil && t.Mipv6 != nil {
		return t.Mipv6
	}
	return nil
}

// GetSctp returns the value of the Sctp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Sctp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetSctp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp {
	if t != nil && t.Sctp != nil {
		return t.Sctp
	}
	return nil
}

// GetTcp returns the value of the Tcp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Tcp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetTcp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp {
	if t != nil && t.Tcp != nil {
		return t.Tcp
	}
	return nil
}

// GetUdp returns the value of the Udp struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id. If the receiver or the field Udp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetUdp() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp {
	if t != nil && t.Udp != nil {
		return t.Udp
	}
	return nil
}

// GetProtocolIdWithAnyPort retrieves the value of the leaf ProtocolIdWithAnyPort from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ProtocolIdWithAnyPort is set, it can
// safely use t.GetProtocolIdWithAnyPort() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ProtocolIdWithAnyPort == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) GetProtocolIdWithAnyPort() NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_ProtocolIdWithAnyPort_Union {
	if t == nil || t.ProtocolIdWithAnyPort == nil {
		return nil
	}
	return t.ProtocolIdWithAnyPort
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Icmp.PopulateDefaults()
	t.Icmp6.PopulateDefaults()
	t.Mipv6.PopulateDefaults()
	t.Sctp.PopulateDefaults()
	t.Tcp.PopulateDefaults()
	t.Udp.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/icmp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp struct {
	Opaque    YANGEmpty                                                                 `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6 represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/icmp6 YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6 struct {
	Opaque    YANGEmpty                                                                  `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/icmp6/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange struct {
	BeginIcmpCode *uint16 `path:"begin-icmp-code" module:"nokia-conf"`
	BeginIcmpType *uint16 `path:"begin-icmp-type" module:"nokia-conf"`
	EndIcmpCode   *uint16 `path:"end-icmp-code" module:"nokia-conf"`
	EndIcmpType   *uint16 `path:"end-icmp-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) IsYANGGoStruct() {}

// GetBeginIcmpCode retrieves the value of the leaf BeginIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpCode is set, it can
// safely use t.GetBeginIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) GetBeginIcmpCode() uint16 {
	if t == nil || t.BeginIcmpCode == nil {
		return 0
	}
	return *t.BeginIcmpCode
}

// GetBeginIcmpType retrieves the value of the leaf BeginIcmpType from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpType is set, it can
// safely use t.GetBeginIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) GetBeginIcmpType() uint16 {
	if t == nil || t.BeginIcmpType == nil {
		return 0
	}
	return *t.BeginIcmpType
}

// GetEndIcmpCode retrieves the value of the leaf EndIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpCode is set, it can
// safely use t.GetEndIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) GetEndIcmpCode() uint16 {
	if t == nil || t.EndIcmpCode == nil {
		return 0
	}
	return *t.EndIcmpCode
}

// GetEndIcmpType retrieves the value of the leaf EndIcmpType from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpType is set, it can
// safely use t.GetEndIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) GetEndIcmpType() uint16 {
	if t == nil || t.EndIcmpType == nil {
		return 0
	}
	return *t.EndIcmpType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp6_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/icmp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange struct {
	BeginIcmpCode *uint16 `path:"begin-icmp-code" module:"nokia-conf"`
	BeginIcmpType *uint16 `path:"begin-icmp-type" module:"nokia-conf"`
	EndIcmpCode   *uint16 `path:"end-icmp-code" module:"nokia-conf"`
	EndIcmpType   *uint16 `path:"end-icmp-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) IsYANGGoStruct() {}

// GetBeginIcmpCode retrieves the value of the leaf BeginIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpCode is set, it can
// safely use t.GetBeginIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) GetBeginIcmpCode() uint16 {
	if t == nil || t.BeginIcmpCode == nil {
		return 0
	}
	return *t.BeginIcmpCode
}

// GetBeginIcmpType retrieves the value of the leaf BeginIcmpType from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BeginIcmpType is set, it can
// safely use t.GetBeginIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BeginIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) GetBeginIcmpType() uint16 {
	if t == nil || t.BeginIcmpType == nil {
		return 0
	}
	return *t.BeginIcmpType
}

// GetEndIcmpCode retrieves the value of the leaf EndIcmpCode from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpCode is set, it can
// safely use t.GetEndIcmpCode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpCode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) GetEndIcmpCode() uint16 {
	if t == nil || t.EndIcmpCode == nil {
		return 0
	}
	return *t.EndIcmpCode
}

// GetEndIcmpType retrieves the value of the leaf EndIcmpType from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EndIcmpType is set, it can
// safely use t.GetEndIcmpType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EndIcmpType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) GetEndIcmpType() uint16 {
	if t == nil || t.EndIcmpType == nil {
		return 0
	}
	return *t.EndIcmpType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Icmp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6 represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/mipv6 YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6 struct {
	Opaque    YANGEmpty                                                                  `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/mipv6/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange struct {
	Begin *uint16 `path:"begin" module:"nokia-conf"`
	End   *uint16 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) GetBegin() uint16 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) GetEnd() uint16 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Mipv6_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/sctp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp struct {
	Opaque    YANGEmpty                                                                 `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/sctp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Sctp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/tcp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp struct {
	Opaque    YANGEmpty                                                                `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/tcp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Tcp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/udp YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp struct {
	Opaque    YANGEmpty                                                                `path:"opaque" module:"nokia-conf"`
	PortRange *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange `path:"port-range" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) IsYANGGoStruct() {}

// GetOrCreatePortRange retrieves the value of the PortRange field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) GetOrCreatePortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange {
	if t.PortRange != nil {
		return t.PortRange
	}
	t.PortRange = &NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange{}
	return t.PortRange
}

// GetPortRange returns the value of the PortRange struct pointer
// from NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp. If the receiver or the field PortRange is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) GetPortRange() *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange {
	if t != nil && t.PortRange != nil {
		return t.PortRange
	}
	return nil
}

// GetOpaque retrieves the value of the leaf Opaque from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Opaque is set, it can
// safely use t.GetOpaque() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Opaque == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) GetOpaque() YANGEmpty {
	if t == nil || t.Opaque == false {
		return false
	}
	return t.Opaque
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PortRange.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange represents the /nokia-conf/configure/ipsec/ts-list/remote/entry/protocol/id/udp/port-range YANG schema element.
type NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange struct {
	Begin *uint32 `path:"begin" module:"nokia-conf"`
	End   *uint32 `path:"end" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) IsYANGGoStruct() {}

// GetBegin retrieves the value of the leaf Begin from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Begin is set, it can
// safely use t.GetBegin() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Begin == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) GetBegin() uint32 {
	if t == nil || t.Begin == nil {
		return 0
	}
	return *t.Begin
}

// GetEnd retrieves the value of the leaf End from the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if End is set, it can
// safely use t.GetEnd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.End == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) GetEnd() uint32 {
	if t == nil || t.End == nil {
		return 0
	}
	return *t.End
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange.
func (*NokiaConf_Configure_Ipsec_TsList_Remote_Entry_Protocol_Id_Udp_PortRange) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TunnelTemplate represents the /nokia-conf/configure/ipsec/tunnel-template YANG schema element.
type NokiaConf_Configure_Ipsec_TunnelTemplate struct {
	ApplyGroups                       []string                                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude                []string                                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	ClearDfBit                        *bool                                                             `path:"clear-df-bit" module:"nokia-conf"`
	CopyTrafficClassUponDecapsulation *bool                                                             `path:"copy-traffic-class-upon-decapsulation" module:"nokia-conf"`
	Description                       *string                                                           `path:"description" module:"nokia-conf"`
	EncapsulatedIpMtu                 *uint32                                                           `path:"encapsulated-ip-mtu" module:"nokia-conf"`
	IcmpGeneration                    *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration          `path:"icmp-generation" module:"nokia-conf"`
	Icmp6Generation                   *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation         `path:"icmp6-generation" module:"nokia-conf"`
	Id                                *uint32                                                           `path:"id" module:"nokia-conf"`
	IgnoreDefaultRoute                *bool                                                             `path:"ignore-default-route" module:"nokia-conf"`
	IpMtu                             *uint32                                                           `path:"ip-mtu" module:"nokia-conf"`
	IpsecTransform                    []uint32                                                          `path:"ipsec-transform" module:"nokia-conf"`
	PmtuDiscoveryAging                *uint32                                                           `path:"pmtu-discovery-aging" module:"nokia-conf"`
	PrivateTcpMssAdjust               *int32                                                            `path:"private-tcp-mss-adjust" module:"nokia-conf"`
	PropagatePmtuV4                   *bool                                                             `path:"propagate-pmtu-v4" module:"nokia-conf"`
	PropagatePmtuV6                   *bool                                                             `path:"propagate-pmtu-v6" module:"nokia-conf"`
	PublicTcpMssAdjust                NokiaConf_Configure_Ipsec_TunnelTemplate_PublicTcpMssAdjust_Union `path:"public-tcp-mss-adjust" module:"nokia-conf"`
	ReplayWindow                      *uint32                                                           `path:"replay-window" module:"nokia-conf"`
	SpReverseRoute                    E_NokiaConf_Configure_Ipsec_TunnelTemplate_SpReverseRoute         `path:"sp-reverse-route" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TunnelTemplate implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate) IsYANGGoStruct() {}

// GetOrCreateIcmpGeneration retrieves the value of the IcmpGeneration field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetOrCreateIcmpGeneration() *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration {
	if t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	t.IcmpGeneration = &NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration{}
	return t.IcmpGeneration
}

// GetOrCreateIcmp6Generation retrieves the value of the Icmp6Generation field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetOrCreateIcmp6Generation() *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation {
	if t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	t.Icmp6Generation = &NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation{}
	return t.Icmp6Generation
}

// GetIcmpGeneration returns the value of the IcmpGeneration struct pointer
// from NokiaConf_Configure_Ipsec_TunnelTemplate. If the receiver or the field IcmpGeneration is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetIcmpGeneration() *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration {
	if t != nil && t.IcmpGeneration != nil {
		return t.IcmpGeneration
	}
	return nil
}

// GetIcmp6Generation returns the value of the Icmp6Generation struct pointer
// from NokiaConf_Configure_Ipsec_TunnelTemplate. If the receiver or the field Icmp6Generation is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetIcmp6Generation() *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation {
	if t != nil && t.Icmp6Generation != nil {
		return t.Icmp6Generation
	}
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetClearDfBit retrieves the value of the leaf ClearDfBit from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClearDfBit is set, it can
// safely use t.GetClearDfBit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClearDfBit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetClearDfBit() bool {
	if t == nil || t.ClearDfBit == nil {
		return false
	}
	return *t.ClearDfBit
}

// GetCopyTrafficClassUponDecapsulation retrieves the value of the leaf CopyTrafficClassUponDecapsulation from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CopyTrafficClassUponDecapsulation is set, it can
// safely use t.GetCopyTrafficClassUponDecapsulation() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CopyTrafficClassUponDecapsulation == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetCopyTrafficClassUponDecapsulation() bool {
	if t == nil || t.CopyTrafficClassUponDecapsulation == nil {
		return false
	}
	return *t.CopyTrafficClassUponDecapsulation
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetEncapsulatedIpMtu retrieves the value of the leaf EncapsulatedIpMtu from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapsulatedIpMtu is set, it can
// safely use t.GetEncapsulatedIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapsulatedIpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetEncapsulatedIpMtu() uint32 {
	if t == nil || t.EncapsulatedIpMtu == nil {
		return 0
	}
	return *t.EncapsulatedIpMtu
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetIgnoreDefaultRoute retrieves the value of the leaf IgnoreDefaultRoute from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IgnoreDefaultRoute is set, it can
// safely use t.GetIgnoreDefaultRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IgnoreDefaultRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetIgnoreDefaultRoute() bool {
	if t == nil || t.IgnoreDefaultRoute == nil {
		return false
	}
	return *t.IgnoreDefaultRoute
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 0
	}
	return *t.IpMtu
}

// GetIpsecTransform retrieves the value of the leaf IpsecTransform from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecTransform is set, it can
// safely use t.GetIpsecTransform() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecTransform == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetIpsecTransform() []uint32 {
	if t == nil || t.IpsecTransform == nil {
		return nil
	}
	return t.IpsecTransform
}

// GetPmtuDiscoveryAging retrieves the value of the leaf PmtuDiscoveryAging from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PmtuDiscoveryAging is set, it can
// safely use t.GetPmtuDiscoveryAging() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PmtuDiscoveryAging == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetPmtuDiscoveryAging() uint32 {
	if t == nil || t.PmtuDiscoveryAging == nil {
		return 900
	}
	return *t.PmtuDiscoveryAging
}

// GetPrivateTcpMssAdjust retrieves the value of the leaf PrivateTcpMssAdjust from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PrivateTcpMssAdjust is set, it can
// safely use t.GetPrivateTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PrivateTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetPrivateTcpMssAdjust() int32 {
	if t == nil || t.PrivateTcpMssAdjust == nil {
		return 0
	}
	return *t.PrivateTcpMssAdjust
}

// GetPropagatePmtuV4 retrieves the value of the leaf PropagatePmtuV4 from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV4 is set, it can
// safely use t.GetPropagatePmtuV4() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV4 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetPropagatePmtuV4() bool {
	if t == nil || t.PropagatePmtuV4 == nil {
		return true
	}
	return *t.PropagatePmtuV4
}

// GetPropagatePmtuV6 retrieves the value of the leaf PropagatePmtuV6 from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PropagatePmtuV6 is set, it can
// safely use t.GetPropagatePmtuV6() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PropagatePmtuV6 == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetPropagatePmtuV6() bool {
	if t == nil || t.PropagatePmtuV6 == nil {
		return true
	}
	return *t.PropagatePmtuV6
}

// GetPublicTcpMssAdjust retrieves the value of the leaf PublicTcpMssAdjust from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PublicTcpMssAdjust is set, it can
// safely use t.GetPublicTcpMssAdjust() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PublicTcpMssAdjust == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetPublicTcpMssAdjust() NokiaConf_Configure_Ipsec_TunnelTemplate_PublicTcpMssAdjust_Union {
	if t == nil || t.PublicTcpMssAdjust == nil {
		return nil
	}
	return t.PublicTcpMssAdjust
}

// GetReplayWindow retrieves the value of the leaf ReplayWindow from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplayWindow is set, it can
// safely use t.GetReplayWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplayWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetReplayWindow() uint32 {
	if t == nil || t.ReplayWindow == nil {
		return 0
	}
	return *t.ReplayWindow
}

// GetSpReverseRoute retrieves the value of the leaf SpReverseRoute from the NokiaConf_Configure_Ipsec_TunnelTemplate
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SpReverseRoute is set, it can
// safely use t.GetSpReverseRoute() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SpReverseRoute == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) GetSpReverseRoute() E_NokiaConf_Configure_Ipsec_TunnelTemplate_SpReverseRoute {
	if t == nil || t.SpReverseRoute == 0 {
		return NokiaConf_Configure_Ipsec_TunnelTemplate_SpReverseRoute_none
	}
	return t.SpReverseRoute
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TunnelTemplate
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ClearDfBit == nil {
		var v bool = false
		t.ClearDfBit = &v
	}
	if t.CopyTrafficClassUponDecapsulation == nil {
		var v bool = false
		t.CopyTrafficClassUponDecapsulation = &v
	}
	if t.IgnoreDefaultRoute == nil {
		var v bool = false
		t.IgnoreDefaultRoute = &v
	}
	if t.PmtuDiscoveryAging == nil {
		var v uint32 = 900
		t.PmtuDiscoveryAging = &v
	}
	if t.PropagatePmtuV4 == nil {
		var v bool = true
		t.PropagatePmtuV4 = &v
	}
	if t.PropagatePmtuV6 == nil {
		var v bool = true
		t.PropagatePmtuV6 = &v
	}
	if t.SpReverseRoute == 0 {
		t.SpReverseRoute = NokiaConf_Configure_Ipsec_TunnelTemplate_SpReverseRoute_none
	}
	t.IcmpGeneration.PopulateDefaults()
	t.Icmp6Generation.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Ipsec_TunnelTemplate struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TunnelTemplate"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TunnelTemplate.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation represents the /nokia-conf/configure/ipsec/tunnel-template/icmp6-generation YANG schema element.
type NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation struct {
	PktTooBig *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig `path:"pkt-too-big" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) IsYANGGoStruct() {}

// GetOrCreatePktTooBig retrieves the value of the PktTooBig field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) GetOrCreatePktTooBig() *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig {
	if t.PktTooBig != nil {
		return t.PktTooBig
	}
	t.PktTooBig = &NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig{}
	return t.PktTooBig
}

// GetPktTooBig returns the value of the PktTooBig struct pointer
// from NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation. If the receiver or the field PktTooBig is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) GetPktTooBig() *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig {
	if t != nil && t.PktTooBig != nil {
		return t.PktTooBig
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.PktTooBig.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig represents the /nokia-conf/configure/ipsec/tunnel-template/icmp6-generation/pkt-too-big YANG schema element.
type NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_Icmp6Generation_PktTooBig) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration represents the /nokia-conf/configure/ipsec/tunnel-template/icmp-generation YANG schema element.
type NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration struct {
	FragRequired *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired `path:"frag-required" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) IsYANGGoStruct() {}

// GetOrCreateFragRequired retrieves the value of the FragRequired field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) GetOrCreateFragRequired() *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired {
	if t.FragRequired != nil {
		return t.FragRequired
	}
	t.FragRequired = &NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired{}
	return t.FragRequired
}

// GetFragRequired returns the value of the FragRequired struct pointer
// from NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration. If the receiver or the field FragRequired is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) GetFragRequired() *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired {
	if t != nil && t.FragRequired != nil {
		return t.FragRequired
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FragRequired.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired represents the /nokia-conf/configure/ipsec/tunnel-template/icmp-generation/frag-required YANG schema element.
type NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired struct {
	AdminState   E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
	Interval     *uint32                     `path:"interval" module:"nokia-conf"`
	MessageCount *uint32                     `path:"message-count" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_enable
	}
	return t.AdminState
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 10
	}
	return *t.Interval
}

// GetMessageCount retrieves the value of the leaf MessageCount from the NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MessageCount is set, it can
// safely use t.GetMessageCount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MessageCount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) GetMessageCount() uint32 {
	if t == nil || t.MessageCount == nil {
		return 100
	}
	return *t.MessageCount
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_enable
	}
	if t.Interval == nil {
		var v uint32 = 10
		t.Interval = &v
	}
	if t.MessageCount == nil {
		var v uint32 = 100
		t.MessageCount = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired.
func (*NokiaConf_Configure_Ipsec_TunnelTemplate_IcmpGeneration_FragRequired) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa represents the /nokia-conf/configure/isa YANG schema element.
type NokiaConf_Configure_Isa struct {
	ApplicationAssuranceGroup map[uint32]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup `path:"application-assurance-group" module:"nokia-conf"`
	ApplyGroups               []string                                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude        []string                                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	LnsGroup                  map[uint32]*NokiaConf_Configure_Isa_LnsGroup                  `path:"lns-group" module:"nokia-conf"`
	NatGroup                  map[uint32]*NokiaConf_Configure_Isa_NatGroup                  `path:"nat-group" module:"nokia-conf"`
	TunnelGroup               map[uint32]*NokiaConf_Configure_Isa_TunnelGroup               `path:"tunnel-group" module:"nokia-conf"`
	VideoGroup                map[uint32]*NokiaConf_Configure_Isa_VideoGroup                `path:"video-group" module:"nokia-conf"`
	WlanGwGroup               map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup               `path:"wlan-gw-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa) IsYANGGoStruct() {}

// NewApplicationAssuranceGroup creates a new entry in the ApplicationAssuranceGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewApplicationAssuranceGroup(AaGroupId uint32) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApplicationAssuranceGroup == nil {
		t.ApplicationAssuranceGroup = make(map[uint32]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup)
	}

	key := AaGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.ApplicationAssuranceGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list ApplicationAssuranceGroup", key)
	}

	t.ApplicationAssuranceGroup[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup{
		AaGroupId: &AaGroupId,
	}

	return t.ApplicationAssuranceGroup[key], nil
}

// RenameApplicationAssuranceGroup renames an entry in the list ApplicationAssuranceGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameApplicationAssuranceGroup(oldK, newK uint32) error {
	if _, ok := t.ApplicationAssuranceGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in ApplicationAssuranceGroup", newK)
	}

	e, ok := t.ApplicationAssuranceGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in ApplicationAssuranceGroup", oldK)
	}
	e.AaGroupId = &newK

	t.ApplicationAssuranceGroup[newK] = e
	delete(t.ApplicationAssuranceGroup, oldK)
	return nil
}

// GetOrCreateApplicationAssuranceGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateApplicationAssuranceGroup(AaGroupId uint32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup {

	key := AaGroupId

	if v, ok := t.ApplicationAssuranceGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewApplicationAssuranceGroup(AaGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateApplicationAssuranceGroup got unexpected error: %v", err))
	}
	return v
}

// GetApplicationAssuranceGroup retrieves the value with the specified key from
// the ApplicationAssuranceGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetApplicationAssuranceGroup(AaGroupId uint32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup {

	if t == nil {
		return nil
	}

	key := AaGroupId

	if lm, ok := t.ApplicationAssuranceGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteApplicationAssuranceGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteApplicationAssuranceGroup(AaGroupId uint32) {
	key := AaGroupId

	delete(t.ApplicationAssuranceGroup, key)
}

// AppendApplicationAssuranceGroup appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup struct to the
// list ApplicationAssuranceGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendApplicationAssuranceGroup(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) error {
	if v.AaGroupId == nil {
		return fmt.Errorf("invalid nil key received for AaGroupId")
	}

	key := *v.AaGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.ApplicationAssuranceGroup == nil {
		t.ApplicationAssuranceGroup = make(map[uint32]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup)
	}

	if _, ok := t.ApplicationAssuranceGroup[key]; ok {
		return fmt.Errorf("duplicate key for list ApplicationAssuranceGroup %v", key)
	}

	t.ApplicationAssuranceGroup[key] = v
	return nil
}

// NewLnsGroup creates a new entry in the LnsGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewLnsGroup(Id uint32) (*NokiaConf_Configure_Isa_LnsGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LnsGroup == nil {
		t.LnsGroup = make(map[uint32]*NokiaConf_Configure_Isa_LnsGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LnsGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LnsGroup", key)
	}

	t.LnsGroup[key] = &NokiaConf_Configure_Isa_LnsGroup{
		Id: &Id,
	}

	return t.LnsGroup[key], nil
}

// RenameLnsGroup renames an entry in the list LnsGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameLnsGroup(oldK, newK uint32) error {
	if _, ok := t.LnsGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in LnsGroup", newK)
	}

	e, ok := t.LnsGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LnsGroup", oldK)
	}
	e.Id = &newK

	t.LnsGroup[newK] = e
	delete(t.LnsGroup, oldK)
	return nil
}

// GetOrCreateLnsGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateLnsGroup(Id uint32) *NokiaConf_Configure_Isa_LnsGroup {

	key := Id

	if v, ok := t.LnsGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLnsGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLnsGroup got unexpected error: %v", err))
	}
	return v
}

// GetLnsGroup retrieves the value with the specified key from
// the LnsGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetLnsGroup(Id uint32) *NokiaConf_Configure_Isa_LnsGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.LnsGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteLnsGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteLnsGroup(Id uint32) {
	key := Id

	delete(t.LnsGroup, key)
}

// AppendLnsGroup appends the supplied NokiaConf_Configure_Isa_LnsGroup struct to the
// list LnsGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_LnsGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendLnsGroup(v *NokiaConf_Configure_Isa_LnsGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LnsGroup == nil {
		t.LnsGroup = make(map[uint32]*NokiaConf_Configure_Isa_LnsGroup)
	}

	if _, ok := t.LnsGroup[key]; ok {
		return fmt.Errorf("duplicate key for list LnsGroup %v", key)
	}

	t.LnsGroup[key] = v
	return nil
}

// NewNatGroup creates a new entry in the NatGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewNatGroup(Id uint32) (*NokiaConf_Configure_Isa_NatGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[uint32]*NokiaConf_Configure_Isa_NatGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.NatGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list NatGroup", key)
	}

	t.NatGroup[key] = &NokiaConf_Configure_Isa_NatGroup{
		Id: &Id,
	}

	return t.NatGroup[key], nil
}

// RenameNatGroup renames an entry in the list NatGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameNatGroup(oldK, newK uint32) error {
	if _, ok := t.NatGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in NatGroup", newK)
	}

	e, ok := t.NatGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in NatGroup", oldK)
	}
	e.Id = &newK

	t.NatGroup[newK] = e
	delete(t.NatGroup, oldK)
	return nil
}

// GetOrCreateNatGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateNatGroup(Id uint32) *NokiaConf_Configure_Isa_NatGroup {

	key := Id

	if v, ok := t.NatGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewNatGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateNatGroup got unexpected error: %v", err))
	}
	return v
}

// GetNatGroup retrieves the value with the specified key from
// the NatGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetNatGroup(Id uint32) *NokiaConf_Configure_Isa_NatGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.NatGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteNatGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteNatGroup(Id uint32) {
	key := Id

	delete(t.NatGroup, key)
}

// AppendNatGroup appends the supplied NokiaConf_Configure_Isa_NatGroup struct to the
// list NatGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_NatGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendNatGroup(v *NokiaConf_Configure_Isa_NatGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.NatGroup == nil {
		t.NatGroup = make(map[uint32]*NokiaConf_Configure_Isa_NatGroup)
	}

	if _, ok := t.NatGroup[key]; ok {
		return fmt.Errorf("duplicate key for list NatGroup %v", key)
	}

	t.NatGroup[key] = v
	return nil
}

// NewTunnelGroup creates a new entry in the TunnelGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewTunnelGroup(Id uint32) (*NokiaConf_Configure_Isa_TunnelGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Isa_TunnelGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.TunnelGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list TunnelGroup", key)
	}

	t.TunnelGroup[key] = &NokiaConf_Configure_Isa_TunnelGroup{
		Id: &Id,
	}

	return t.TunnelGroup[key], nil
}

// RenameTunnelGroup renames an entry in the list TunnelGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameTunnelGroup(oldK, newK uint32) error {
	if _, ok := t.TunnelGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in TunnelGroup", newK)
	}

	e, ok := t.TunnelGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in TunnelGroup", oldK)
	}
	e.Id = &newK

	t.TunnelGroup[newK] = e
	delete(t.TunnelGroup, oldK)
	return nil
}

// GetOrCreateTunnelGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateTunnelGroup(Id uint32) *NokiaConf_Configure_Isa_TunnelGroup {

	key := Id

	if v, ok := t.TunnelGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewTunnelGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateTunnelGroup got unexpected error: %v", err))
	}
	return v
}

// GetTunnelGroup retrieves the value with the specified key from
// the TunnelGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetTunnelGroup(Id uint32) *NokiaConf_Configure_Isa_TunnelGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.TunnelGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteTunnelGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteTunnelGroup(Id uint32) {
	key := Id

	delete(t.TunnelGroup, key)
}

// AppendTunnelGroup appends the supplied NokiaConf_Configure_Isa_TunnelGroup struct to the
// list TunnelGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_TunnelGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendTunnelGroup(v *NokiaConf_Configure_Isa_TunnelGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.TunnelGroup == nil {
		t.TunnelGroup = make(map[uint32]*NokiaConf_Configure_Isa_TunnelGroup)
	}

	if _, ok := t.TunnelGroup[key]; ok {
		return fmt.Errorf("duplicate key for list TunnelGroup %v", key)
	}

	t.TunnelGroup[key] = v
	return nil
}

// NewVideoGroup creates a new entry in the VideoGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewVideoGroup(VideoGroupId uint32) (*NokiaConf_Configure_Isa_VideoGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoGroup == nil {
		t.VideoGroup = make(map[uint32]*NokiaConf_Configure_Isa_VideoGroup)
	}

	key := VideoGroupId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.VideoGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list VideoGroup", key)
	}

	t.VideoGroup[key] = &NokiaConf_Configure_Isa_VideoGroup{
		VideoGroupId: &VideoGroupId,
	}

	return t.VideoGroup[key], nil
}

// RenameVideoGroup renames an entry in the list VideoGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameVideoGroup(oldK, newK uint32) error {
	if _, ok := t.VideoGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in VideoGroup", newK)
	}

	e, ok := t.VideoGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in VideoGroup", oldK)
	}
	e.VideoGroupId = &newK

	t.VideoGroup[newK] = e
	delete(t.VideoGroup, oldK)
	return nil
}

// GetOrCreateVideoGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateVideoGroup(VideoGroupId uint32) *NokiaConf_Configure_Isa_VideoGroup {

	key := VideoGroupId

	if v, ok := t.VideoGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVideoGroup(VideoGroupId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVideoGroup got unexpected error: %v", err))
	}
	return v
}

// GetVideoGroup retrieves the value with the specified key from
// the VideoGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetVideoGroup(VideoGroupId uint32) *NokiaConf_Configure_Isa_VideoGroup {

	if t == nil {
		return nil
	}

	key := VideoGroupId

	if lm, ok := t.VideoGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteVideoGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteVideoGroup(VideoGroupId uint32) {
	key := VideoGroupId

	delete(t.VideoGroup, key)
}

// AppendVideoGroup appends the supplied NokiaConf_Configure_Isa_VideoGroup struct to the
// list VideoGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_VideoGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendVideoGroup(v *NokiaConf_Configure_Isa_VideoGroup) error {
	if v.VideoGroupId == nil {
		return fmt.Errorf("invalid nil key received for VideoGroupId")
	}

	key := *v.VideoGroupId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.VideoGroup == nil {
		t.VideoGroup = make(map[uint32]*NokiaConf_Configure_Isa_VideoGroup)
	}

	if _, ok := t.VideoGroup[key]; ok {
		return fmt.Errorf("duplicate key for list VideoGroup %v", key)
	}

	t.VideoGroup[key] = v
	return nil
}

// NewWlanGwGroup creates a new entry in the WlanGwGroup list of the
// NokiaConf_Configure_Isa struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa) NewWlanGwGroup(Id uint32) (*NokiaConf_Configure_Isa_WlanGwGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WlanGwGroup == nil {
		t.WlanGwGroup = make(map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup)
	}

	key := Id

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.WlanGwGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list WlanGwGroup", key)
	}

	t.WlanGwGroup[key] = &NokiaConf_Configure_Isa_WlanGwGroup{
		Id: &Id,
	}

	return t.WlanGwGroup[key], nil
}

// RenameWlanGwGroup renames an entry in the list WlanGwGroup within
// the NokiaConf_Configure_Isa struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa) RenameWlanGwGroup(oldK, newK uint32) error {
	if _, ok := t.WlanGwGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in WlanGwGroup", newK)
	}

	e, ok := t.WlanGwGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in WlanGwGroup", oldK)
	}
	e.Id = &newK

	t.WlanGwGroup[newK] = e
	delete(t.WlanGwGroup, oldK)
	return nil
}

// GetOrCreateWlanGwGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa) GetOrCreateWlanGwGroup(Id uint32) *NokiaConf_Configure_Isa_WlanGwGroup {

	key := Id

	if v, ok := t.WlanGwGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewWlanGwGroup(Id)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateWlanGwGroup got unexpected error: %v", err))
	}
	return v
}

// GetWlanGwGroup retrieves the value with the specified key from
// the WlanGwGroup map field of NokiaConf_Configure_Isa. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa) GetWlanGwGroup(Id uint32) *NokiaConf_Configure_Isa_WlanGwGroup {

	if t == nil {
		return nil
	}

	key := Id

	if lm, ok := t.WlanGwGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteWlanGwGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa) DeleteWlanGwGroup(Id uint32) {
	key := Id

	delete(t.WlanGwGroup, key)
}

// AppendWlanGwGroup appends the supplied NokiaConf_Configure_Isa_WlanGwGroup struct to the
// list WlanGwGroup of NokiaConf_Configure_Isa. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_WlanGwGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa) AppendWlanGwGroup(v *NokiaConf_Configure_Isa_WlanGwGroup) error {
	if v.Id == nil {
		return fmt.Errorf("invalid nil key received for Id")
	}

	key := *v.Id

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.WlanGwGroup == nil {
		t.WlanGwGroup = make(map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup)
	}

	if _, ok := t.WlanGwGroup[key]; ok {
		return fmt.Errorf("duplicate key for list WlanGwGroup %v", key)
	}

	t.WlanGwGroup[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.ApplicationAssuranceGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.LnsGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.NatGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.TunnelGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.VideoGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.WlanGwGroup {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa.
func (*NokiaConf_Configure_Isa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup represents the /nokia-conf/configure/isa/application-assurance-group YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup struct {
	AaGroupId                    *uint32                                                                     `path:"aa-group-id" module:"nokia-conf"`
	AaSubScale                   E_NokiaTypesApplicationAssurance_IsaAaGroupSubscale                         `path:"aa-sub-scale" module:"nokia-conf"`
	AdminState                   E_NokiaTypesSros_AdminState                                                 `path:"admin-state" module:"nokia-conf"`
	ApplyGroups                  []string                                                                    `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude           []string                                                                    `path:"apply-groups-exclude" module:"nokia-conf"`
	Backup                       *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup                   `path:"backup" module:"nokia-conf"`
	Description                  *string                                                                     `path:"description" module:"nokia-conf"`
	DivertFc                     []E_NokiaTypesSros_FcName                                                   `path:"divert-fc" module:"nokia-conf"`
	FailureMode                  E_NokiaTypesApplicationAssurance_IsaFailToMode                              `path:"failure-mode" module:"nokia-conf"`
	FlowAttribute                map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute `path:"flow-attribute" module:"nokia-conf"`
	HttpEnrichMaxPacketSize      *uint32                                                                     `path:"http-enrich-max-packet-size" module:"nokia-conf"`
	IsaCapacityCostHighThreshold *uint32                                                                     `path:"isa-capacity-cost-high-threshold" module:"nokia-conf"`
	IsaCapacityCostLowThreshold  *uint32                                                                     `path:"isa-capacity-cost-low-threshold" module:"nokia-conf"`
	MinimumIsaGeneration         *uint32                                                                     `path:"minimum-isa-generation" module:"nokia-conf"`
	OverloadCutThrough           *bool                                                                       `path:"overload-cut-through" module:"nokia-conf"`
	OverloadSubQuarantine        *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine    `path:"overload-sub-quarantine" module:"nokia-conf"`
	Primary                      *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary                  `path:"primary" module:"nokia-conf"`
	Qos                          *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos                      `path:"qos" module:"nokia-conf"`
	SharedResources              *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources          `path:"shared-resources" module:"nokia-conf"`
	Statistics                   *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics               `path:"statistics" module:"nokia-conf"`
	TransitPrefixLimits          *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits      `path:"transit-prefix-limits" module:"nokia-conf"`
	VmTrafficDistributeByIp      *bool                                                                       `path:"vm-traffic-distribute-by-ip" module:"nokia-conf"`
	VmTrafficDistributeByTeid    *bool                                                                       `path:"vm-traffic-distribute-by-teid" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup) IsYANGGoStruct() {}

// NewFlowAttribute creates a new entry in the FlowAttribute list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) NewFlowAttribute(FlowAttributeName string) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute)
	}

	key := FlowAttributeName

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.FlowAttribute[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list FlowAttribute", key)
	}

	t.FlowAttribute[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute{
		FlowAttributeName: &FlowAttributeName,
	}

	return t.FlowAttribute[key], nil
}

// RenameFlowAttribute renames an entry in the list FlowAttribute within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) RenameFlowAttribute(oldK, newK string) error {
	if _, ok := t.FlowAttribute[newK]; ok {
		return fmt.Errorf("key %v already exists in FlowAttribute", newK)
	}

	e, ok := t.FlowAttribute[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in FlowAttribute", oldK)
	}
	e.FlowAttributeName = &newK

	t.FlowAttribute[newK] = e
	delete(t.FlowAttribute, oldK)
	return nil
}

// GetOrCreateFlowAttribute retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute {

	key := FlowAttributeName

	if v, ok := t.FlowAttribute[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewFlowAttribute(FlowAttributeName)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateFlowAttribute got unexpected error: %v", err))
	}
	return v
}

// GetFlowAttribute retrieves the value with the specified key from
// the FlowAttribute map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetFlowAttribute(FlowAttributeName string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute {

	if t == nil {
		return nil
	}

	key := FlowAttributeName

	if lm, ok := t.FlowAttribute[key]; ok {
		return lm
	}
	return nil
}

// DeleteFlowAttribute deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) DeleteFlowAttribute(FlowAttributeName string) {
	key := FlowAttributeName

	delete(t.FlowAttribute, key)
}

// AppendFlowAttribute appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute struct to the
// list FlowAttribute of NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) AppendFlowAttribute(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) error {
	if v.FlowAttributeName == nil {
		return fmt.Errorf("invalid nil key received for FlowAttributeName")
	}

	key := *v.FlowAttributeName

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.FlowAttribute == nil {
		t.FlowAttribute = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute)
	}

	if _, ok := t.FlowAttribute[key]; ok {
		return fmt.Errorf("duplicate key for list FlowAttribute %v", key)
	}

	t.FlowAttribute[key] = v
	return nil
}

// GetOrCreateBackup retrieves the value of the Backup field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateBackup() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup {
	if t.Backup != nil {
		return t.Backup
	}
	t.Backup = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup{}
	return t.Backup
}

// GetOrCreateOverloadSubQuarantine retrieves the value of the OverloadSubQuarantine field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateOverloadSubQuarantine() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine {
	if t.OverloadSubQuarantine != nil {
		return t.OverloadSubQuarantine
	}
	t.OverloadSubQuarantine = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine{}
	return t.OverloadSubQuarantine
}

// GetOrCreatePrimary retrieves the value of the Primary field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreatePrimary() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary {
	if t.Primary != nil {
		return t.Primary
	}
	t.Primary = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary{}
	return t.Primary
}

// GetOrCreateQos retrieves the value of the Qos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateQos() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos {
	if t.Qos != nil {
		return t.Qos
	}
	t.Qos = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos{}
	return t.Qos
}

// GetOrCreateSharedResources retrieves the value of the SharedResources field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateSharedResources() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources {
	if t.SharedResources != nil {
		return t.SharedResources
	}
	t.SharedResources = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources{}
	return t.SharedResources
}

// GetOrCreateStatistics retrieves the value of the Statistics field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateStatistics() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics {
	if t.Statistics != nil {
		return t.Statistics
	}
	t.Statistics = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics{}
	return t.Statistics
}

// GetOrCreateTransitPrefixLimits retrieves the value of the TransitPrefixLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOrCreateTransitPrefixLimits() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits {
	if t.TransitPrefixLimits != nil {
		return t.TransitPrefixLimits
	}
	t.TransitPrefixLimits = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits{}
	return t.TransitPrefixLimits
}

// GetBackup returns the value of the Backup struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field Backup is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetBackup() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup {
	if t != nil && t.Backup != nil {
		return t.Backup
	}
	return nil
}

// GetOverloadSubQuarantine returns the value of the OverloadSubQuarantine struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field OverloadSubQuarantine is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOverloadSubQuarantine() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine {
	if t != nil && t.OverloadSubQuarantine != nil {
		return t.OverloadSubQuarantine
	}
	return nil
}

// GetPrimary returns the value of the Primary struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field Primary is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetPrimary() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary {
	if t != nil && t.Primary != nil {
		return t.Primary
	}
	return nil
}

// GetQos returns the value of the Qos struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field Qos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetQos() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos {
	if t != nil && t.Qos != nil {
		return t.Qos
	}
	return nil
}

// GetSharedResources returns the value of the SharedResources struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field SharedResources is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetSharedResources() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources {
	if t != nil && t.SharedResources != nil {
		return t.SharedResources
	}
	return nil
}

// GetStatistics returns the value of the Statistics struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field Statistics is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetStatistics() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics {
	if t != nil && t.Statistics != nil {
		return t.Statistics
	}
	return nil
}

// GetTransitPrefixLimits returns the value of the TransitPrefixLimits struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup. If the receiver or the field TransitPrefixLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetTransitPrefixLimits() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits {
	if t != nil && t.TransitPrefixLimits != nil {
		return t.TransitPrefixLimits
	}
	return nil
}

// GetAaGroupId retrieves the value of the leaf AaGroupId from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaGroupId is set, it can
// safely use t.GetAaGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetAaGroupId() uint32 {
	if t == nil || t.AaGroupId == nil {
		return 0
	}
	return *t.AaGroupId
}

// GetAaSubScale retrieves the value of the leaf AaSubScale from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AaSubScale is set, it can
// safely use t.GetAaSubScale() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AaSubScale == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetAaSubScale() E_NokiaTypesApplicationAssurance_IsaAaGroupSubscale {
	if t == nil || t.AaSubScale == 0 {
		return NokiaTypesApplicationAssurance_IsaAaGroupSubscale_residential
	}
	return t.AaSubScale
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDivertFc retrieves the value of the leaf DivertFc from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DivertFc is set, it can
// safely use t.GetDivertFc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DivertFc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetDivertFc() []E_NokiaTypesSros_FcName {
	if t == nil || t.DivertFc == nil {
		return nil
	}
	return t.DivertFc
}

// GetFailureMode retrieves the value of the leaf FailureMode from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureMode is set, it can
// safely use t.GetFailureMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetFailureMode() E_NokiaTypesApplicationAssurance_IsaFailToMode {
	if t == nil || t.FailureMode == 0 {
		return 0
	}
	return t.FailureMode
}

// GetHttpEnrichMaxPacketSize retrieves the value of the leaf HttpEnrichMaxPacketSize from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HttpEnrichMaxPacketSize is set, it can
// safely use t.GetHttpEnrichMaxPacketSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HttpEnrichMaxPacketSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetHttpEnrichMaxPacketSize() uint32 {
	if t == nil || t.HttpEnrichMaxPacketSize == nil {
		return 1500
	}
	return *t.HttpEnrichMaxPacketSize
}

// GetIsaCapacityCostHighThreshold retrieves the value of the leaf IsaCapacityCostHighThreshold from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaCapacityCostHighThreshold is set, it can
// safely use t.GetIsaCapacityCostHighThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaCapacityCostHighThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetIsaCapacityCostHighThreshold() uint32 {
	if t == nil || t.IsaCapacityCostHighThreshold == nil {
		return 0
	}
	return *t.IsaCapacityCostHighThreshold
}

// GetIsaCapacityCostLowThreshold retrieves the value of the leaf IsaCapacityCostLowThreshold from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaCapacityCostLowThreshold is set, it can
// safely use t.GetIsaCapacityCostLowThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaCapacityCostLowThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetIsaCapacityCostLowThreshold() uint32 {
	if t == nil || t.IsaCapacityCostLowThreshold == nil {
		return 0
	}
	return *t.IsaCapacityCostLowThreshold
}

// GetMinimumIsaGeneration retrieves the value of the leaf MinimumIsaGeneration from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MinimumIsaGeneration is set, it can
// safely use t.GetMinimumIsaGeneration() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MinimumIsaGeneration == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetMinimumIsaGeneration() uint32 {
	if t == nil || t.MinimumIsaGeneration == nil {
		return 0
	}
	return *t.MinimumIsaGeneration
}

// GetOverloadCutThrough retrieves the value of the leaf OverloadCutThrough from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OverloadCutThrough is set, it can
// safely use t.GetOverloadCutThrough() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OverloadCutThrough == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetOverloadCutThrough() bool {
	if t == nil || t.OverloadCutThrough == nil {
		return false
	}
	return *t.OverloadCutThrough
}

// GetVmTrafficDistributeByIp retrieves the value of the leaf VmTrafficDistributeByIp from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmTrafficDistributeByIp is set, it can
// safely use t.GetVmTrafficDistributeByIp() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmTrafficDistributeByIp == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetVmTrafficDistributeByIp() bool {
	if t == nil || t.VmTrafficDistributeByIp == nil {
		return false
	}
	return *t.VmTrafficDistributeByIp
}

// GetVmTrafficDistributeByTeid retrieves the value of the leaf VmTrafficDistributeByTeid from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VmTrafficDistributeByTeid is set, it can
// safely use t.GetVmTrafficDistributeByTeid() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VmTrafficDistributeByTeid == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) GetVmTrafficDistributeByTeid() bool {
	if t == nil || t.VmTrafficDistributeByTeid == nil {
		return false
	}
	return *t.VmTrafficDistributeByTeid
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AaSubScale == 0 {
		t.AaSubScale = NokiaTypesApplicationAssurance_IsaAaGroupSubscale_residential
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.HttpEnrichMaxPacketSize == nil {
		var v uint32 = 1500
		t.HttpEnrichMaxPacketSize = &v
	}
	if t.OverloadCutThrough == nil {
		var v bool = false
		t.OverloadCutThrough = &v
	}
	if t.VmTrafficDistributeByIp == nil {
		var v bool = false
		t.VmTrafficDistributeByIp = &v
	}
	if t.VmTrafficDistributeByTeid == nil {
		var v bool = false
		t.VmTrafficDistributeByTeid = &v
	}
	t.Backup.PopulateDefaults()
	t.OverloadSubQuarantine.PopulateDefaults()
	t.Primary.PopulateDefaults()
	t.Qos.PopulateDefaults()
	t.SharedResources.PopulateDefaults()
	t.Statistics.PopulateDefaults()
	t.TransitPrefixLimits.PopulateDefaults()
	for _, e := range t.FlowAttribute {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.AaGroupId == nil {
		return nil, fmt.Errorf("nil value for key AaGroupId")
	}

	return map[string]interface{}{
		"aa-group-id": *t.AaGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup represents the /nokia-conf/configure/isa/application-assurance-group/backup YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup struct {
	Esa map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa `path:"esa" module:"nokia-conf"`
	Isa map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa                                                           `path:"isa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/application-assurance-group/backup.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa)
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) RenameEsa(oldK, newK NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa {

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) AppendEsa(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewIsa creates a new entry in the Isa list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) NewIsa(MdaId string) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isa", key)
	}

	t.Isa[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa{
		MdaId: &MdaId,
	}

	return t.Isa[key], nil
}

// RenameIsa renames an entry in the list Isa within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) RenameIsa(oldK, newK string) error {
	if _, ok := t.Isa[newK]; ok {
		return fmt.Errorf("key %v already exists in Isa", newK)
	}

	e, ok := t.Isa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isa", oldK)
	}
	e.MdaId = &newK

	t.Isa[newK] = e
	delete(t.Isa, oldK)
	return nil
}

// GetOrCreateIsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) GetOrCreateIsa(MdaId string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa {

	key := MdaId

	if v, ok := t.Isa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsa(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsa got unexpected error: %v", err))
	}
	return v
}

// GetIsa retrieves the value with the specified key from
// the Isa map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) GetIsa(MdaId string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Isa[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) DeleteIsa(MdaId string) {
	key := MdaId

	delete(t.Isa, key)
}

// AppendIsa appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa struct to the
// list Isa of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) AppendIsa(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa)
	}

	if _, ok := t.Isa[key]; ok {
		return fmt.Errorf("duplicate key for list Isa %v", key)
	}

	t.Isa[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Isa {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa represents the /nokia-conf/configure/isa/application-assurance-group/backup/esa YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa struct {
	EsaId *int32 `path:"esa-id" module:"nokia-conf"`
	Vm    *int32 `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa represents the /nokia-conf/configure/isa/application-assurance-group/backup/isa YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) IsYANGGoStruct() {}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Backup_Isa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute represents the /nokia-conf/configure/isa/application-assurance-group/flow-attribute YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute struct {
	FlowAttributeName *string `path:"flow-attribute-name" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) IsYANGGoStruct() {}

// GetFlowAttributeName retrieves the value of the leaf FlowAttributeName from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowAttributeName is set, it can
// safely use t.GetFlowAttributeName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowAttributeName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) GetFlowAttributeName() string {
	if t == nil || t.FlowAttributeName == nil {
		return ""
	}
	return *t.FlowAttributeName
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) ΛListKeyMap() (map[string]interface{}, error) {
	if t.FlowAttributeName == nil {
		return nil, fmt.Errorf("nil value for key FlowAttributeName")
	}

	return map[string]interface{}{
		"flow-attribute-name": *t.FlowAttributeName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_FlowAttribute) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine represents the /nokia-conf/configure/isa/application-assurance-group/overload-sub-quarantine YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine struct {
	AdminState E_NokiaTypesSros_AdminState `path:"admin-state" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_OverloadSubQuarantine) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary represents the /nokia-conf/configure/isa/application-assurance-group/primary YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary struct {
	Esa map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa `path:"esa" module:"nokia-conf"`
	Isa map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa                                                            `path:"isa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/application-assurance-group/primary.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa)
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) RenameEsa(oldK, newK NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa {

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) AppendEsa(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa_Key]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewIsa creates a new entry in the Isa list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) NewIsa(MdaId string) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isa", key)
	}

	t.Isa[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa{
		MdaId: &MdaId,
	}

	return t.Isa[key], nil
}

// RenameIsa renames an entry in the list Isa within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) RenameIsa(oldK, newK string) error {
	if _, ok := t.Isa[newK]; ok {
		return fmt.Errorf("key %v already exists in Isa", newK)
	}

	e, ok := t.Isa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isa", oldK)
	}
	e.MdaId = &newK

	t.Isa[newK] = e
	delete(t.Isa, oldK)
	return nil
}

// GetOrCreateIsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) GetOrCreateIsa(MdaId string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa {

	key := MdaId

	if v, ok := t.Isa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsa(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsa got unexpected error: %v", err))
	}
	return v
}

// GetIsa retrieves the value with the specified key from
// the Isa map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) GetIsa(MdaId string) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Isa[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) DeleteIsa(MdaId string) {
	key := MdaId

	delete(t.Isa, key)
}

// AppendIsa appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa struct to the
// list Isa of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) AppendIsa(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa)
	}

	if _, ok := t.Isa[key]; ok {
		return fmt.Errorf("duplicate key for list Isa %v", key)
	}

	t.Isa[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Isa {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa represents the /nokia-conf/configure/isa/application-assurance-group/primary/esa YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa struct {
	EsaId *int32 `path:"esa-id" module:"nokia-conf"`
	Vm    *int32 `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa represents the /nokia-conf/configure/isa/application-assurance-group/primary/isa YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) IsYANGGoStruct() {}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Primary_Isa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos represents the /nokia-conf/configure/isa/application-assurance-group/qos YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos struct {
	Egress *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress `path:"egress" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) IsYANGGoStruct() {}

// GetOrCreateEgress retrieves the value of the Egress field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) GetOrCreateEgress() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress {
	if t.Egress != nil {
		return t.Egress
	}
	t.Egress = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress{}
	return t.Egress
}

// GetEgress returns the value of the Egress struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos. If the receiver or the field Egress is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) GetEgress() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress {
	if t != nil && t.Egress != nil {
		return t.Egress
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Egress.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress represents the /nokia-conf/configure/isa/application-assurance-group/qos/egress YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress struct {
	FromSubscriber *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber `path:"from-subscriber" module:"nokia-conf"`
	ToSubscriber   *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber   `path:"to-subscriber" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) IsYANGGoStruct() {}

// GetOrCreateFromSubscriber retrieves the value of the FromSubscriber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) GetOrCreateFromSubscriber() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber {
	if t.FromSubscriber != nil {
		return t.FromSubscriber
	}
	t.FromSubscriber = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber{}
	return t.FromSubscriber
}

// GetOrCreateToSubscriber retrieves the value of the ToSubscriber field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) GetOrCreateToSubscriber() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber {
	if t.ToSubscriber != nil {
		return t.ToSubscriber
	}
	t.ToSubscriber = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber{}
	return t.ToSubscriber
}

// GetFromSubscriber returns the value of the FromSubscriber struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress. If the receiver or the field FromSubscriber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) GetFromSubscriber() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber {
	if t != nil && t.FromSubscriber != nil {
		return t.FromSubscriber
	}
	return nil
}

// GetToSubscriber returns the value of the ToSubscriber struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress. If the receiver or the field ToSubscriber is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) GetToSubscriber() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber {
	if t != nil && t.ToSubscriber != nil {
		return t.ToSubscriber
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.FromSubscriber.PopulateDefaults()
	t.ToSubscriber.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber represents the /nokia-conf/configure/isa/application-assurance-group/qos/egress/from-subscriber YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber struct {
	BufferPool          *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool             `path:"buffer-pool" module:"nokia-conf"`
	PortSchedulerPolicy *string                                                                                             `path:"port-scheduler-policy" module:"nokia-conf"`
	QueuePolicy         *string                                                                                             `path:"queue-policy" module:"nokia-conf"`
	WaSharedHighWmark   NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_WaSharedHighWmark_Union `path:"wa-shared-high-wmark" module:"nokia-conf"`
	WaSharedLowWmark    *int32                                                                                              `path:"wa-shared-low-wmark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) IsYANGGoStruct() {
}

// GetOrCreateBufferPool retrieves the value of the BufferPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetOrCreateBufferPool() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool {
	if t.BufferPool != nil {
		return t.BufferPool
	}
	t.BufferPool = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool{}
	return t.BufferPool
}

// GetBufferPool returns the value of the BufferPool struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber. If the receiver or the field BufferPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetBufferPool() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool {
	if t != nil && t.BufferPool != nil {
		return t.BufferPool
	}
	return nil
}

// GetPortSchedulerPolicy retrieves the value of the leaf PortSchedulerPolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSchedulerPolicy is set, it can
// safely use t.GetPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetPortSchedulerPolicy() string {
	if t == nil || t.PortSchedulerPolicy == nil {
		return ""
	}
	return *t.PortSchedulerPolicy
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// GetWaSharedHighWmark retrieves the value of the leaf WaSharedHighWmark from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaSharedHighWmark is set, it can
// safely use t.GetWaSharedHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaSharedHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetWaSharedHighWmark() NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_WaSharedHighWmark_Union {
	if t == nil || t.WaSharedHighWmark == nil {
		return NokiaTypesApplicationAssurance_WaSharedBufferUtilizationHigh_Enum_max
	}
	return t.WaSharedHighWmark
}

// GetWaSharedLowWmark retrieves the value of the leaf WaSharedLowWmark from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaSharedLowWmark is set, it can
// safely use t.GetWaSharedLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaSharedLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) GetWaSharedLowWmark() int32 {
	if t == nil || t.WaSharedLowWmark == nil {
		return 0
	}
	return *t.WaSharedLowWmark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WaSharedHighWmark == nil {
		t.WaSharedHighWmark = NokiaTypesApplicationAssurance_WaSharedBufferUtilizationHigh_Enum_max
	}
	if t.WaSharedLowWmark == nil {
		var v int32 = 0
		t.WaSharedLowWmark = &v
	}
	t.BufferPool.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool represents the /nokia-conf/configure/isa/application-assurance-group/qos/egress/from-subscriber/buffer-pool YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool struct {
	Name        *string `path:"name" module:"nokia-conf"`
	ResvCbs     *int32  `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy *string `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) GetName() string {
	if t == nil || t.Name == nil {
		return "default"
	}
	return *t.Name
}

// GetResvCbs retrieves the value of the leaf ResvCbs from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResvCbs is set, it can
// safely use t.GetResvCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResvCbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) GetResvCbs() int32 {
	if t == nil || t.ResvCbs == nil {
		return 0
	}
	return *t.ResvCbs
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "default"
		t.Name = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_FromSubscriber_BufferPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber represents the /nokia-conf/configure/isa/application-assurance-group/qos/egress/to-subscriber YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber struct {
	BufferPool          *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool             `path:"buffer-pool" module:"nokia-conf"`
	PortSchedulerPolicy *string                                                                                           `path:"port-scheduler-policy" module:"nokia-conf"`
	QueuePolicy         *string                                                                                           `path:"queue-policy" module:"nokia-conf"`
	WaSharedHighWmark   NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_WaSharedHighWmark_Union `path:"wa-shared-high-wmark" module:"nokia-conf"`
	WaSharedLowWmark    *int32                                                                                            `path:"wa-shared-low-wmark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) IsYANGGoStruct() {}

// GetOrCreateBufferPool retrieves the value of the BufferPool field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetOrCreateBufferPool() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool {
	if t.BufferPool != nil {
		return t.BufferPool
	}
	t.BufferPool = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool{}
	return t.BufferPool
}

// GetBufferPool returns the value of the BufferPool struct pointer
// from NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber. If the receiver or the field BufferPool is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetBufferPool() *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool {
	if t != nil && t.BufferPool != nil {
		return t.BufferPool
	}
	return nil
}

// GetPortSchedulerPolicy retrieves the value of the leaf PortSchedulerPolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortSchedulerPolicy is set, it can
// safely use t.GetPortSchedulerPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortSchedulerPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetPortSchedulerPolicy() string {
	if t == nil || t.PortSchedulerPolicy == nil {
		return ""
	}
	return *t.PortSchedulerPolicy
}

// GetQueuePolicy retrieves the value of the leaf QueuePolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if QueuePolicy is set, it can
// safely use t.GetQueuePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.QueuePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetQueuePolicy() string {
	if t == nil || t.QueuePolicy == nil {
		return ""
	}
	return *t.QueuePolicy
}

// GetWaSharedHighWmark retrieves the value of the leaf WaSharedHighWmark from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaSharedHighWmark is set, it can
// safely use t.GetWaSharedHighWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaSharedHighWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetWaSharedHighWmark() NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_WaSharedHighWmark_Union {
	if t == nil || t.WaSharedHighWmark == nil {
		return NokiaTypesApplicationAssurance_WaSharedBufferUtilizationHigh_Enum_max
	}
	return t.WaSharedHighWmark
}

// GetWaSharedLowWmark retrieves the value of the leaf WaSharedLowWmark from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if WaSharedLowWmark is set, it can
// safely use t.GetWaSharedLowWmark() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.WaSharedLowWmark == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) GetWaSharedLowWmark() int32 {
	if t == nil || t.WaSharedLowWmark == nil {
		return 0
	}
	return *t.WaSharedLowWmark
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.WaSharedHighWmark == nil {
		t.WaSharedHighWmark = NokiaTypesApplicationAssurance_WaSharedBufferUtilizationHigh_Enum_max
	}
	if t.WaSharedLowWmark == nil {
		var v int32 = 0
		t.WaSharedLowWmark = &v
	}
	t.BufferPool.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool represents the /nokia-conf/configure/isa/application-assurance-group/qos/egress/to-subscriber/buffer-pool YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool struct {
	Name        *string `path:"name" module:"nokia-conf"`
	ResvCbs     *int32  `path:"resv-cbs" module:"nokia-conf"`
	SlopePolicy *string `path:"slope-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) IsYANGGoStruct() {
}

// GetName retrieves the value of the leaf Name from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Name is set, it can
// safely use t.GetName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Name == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) GetName() string {
	if t == nil || t.Name == nil {
		return "default"
	}
	return *t.Name
}

// GetResvCbs retrieves the value of the leaf ResvCbs from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResvCbs is set, it can
// safely use t.GetResvCbs() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResvCbs == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) GetResvCbs() int32 {
	if t == nil || t.ResvCbs == nil {
		return 0
	}
	return *t.ResvCbs
}

// GetSlopePolicy retrieves the value of the leaf SlopePolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlopePolicy is set, it can
// safely use t.GetSlopePolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlopePolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) GetSlopePolicy() string {
	if t == nil || t.SlopePolicy == nil {
		return ""
	}
	return *t.SlopePolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Name == nil {
		var v string = "default"
		t.Name = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Qos_Egress_ToSubscriber_BufferPool) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources represents the /nokia-conf/configure/isa/application-assurance-group/shared-resources YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources struct {
	GtpTunnelDatabase        *uint32 `path:"gtp-tunnel-database" module:"nokia-conf"`
	TcpAdvancedFunctions     *uint32 `path:"tcp-advanced-functions" module:"nokia-conf"`
	UrlFilterWebServiceCache *uint32 `path:"url-filter-web-service-cache" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) IsYANGGoStruct() {}

// GetGtpTunnelDatabase retrieves the value of the leaf GtpTunnelDatabase from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if GtpTunnelDatabase is set, it can
// safely use t.GetGtpTunnelDatabase() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.GtpTunnelDatabase == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) GetGtpTunnelDatabase() uint32 {
	if t == nil || t.GtpTunnelDatabase == nil {
		return 0
	}
	return *t.GtpTunnelDatabase
}

// GetTcpAdvancedFunctions retrieves the value of the leaf TcpAdvancedFunctions from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TcpAdvancedFunctions is set, it can
// safely use t.GetTcpAdvancedFunctions() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TcpAdvancedFunctions == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) GetTcpAdvancedFunctions() uint32 {
	if t == nil || t.TcpAdvancedFunctions == nil {
		return 0
	}
	return *t.TcpAdvancedFunctions
}

// GetUrlFilterWebServiceCache retrieves the value of the leaf UrlFilterWebServiceCache from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UrlFilterWebServiceCache is set, it can
// safely use t.GetUrlFilterWebServiceCache() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UrlFilterWebServiceCache == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) GetUrlFilterWebServiceCache() uint32 {
	if t == nil || t.UrlFilterWebServiceCache == nil {
		return 0
	}
	return *t.UrlFilterWebServiceCache
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_SharedResources) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics represents the /nokia-conf/configure/isa/application-assurance-group/statistics YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics struct {
	StatsType map[E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType `path:"stats-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) IsYANGGoStruct() {}

// NewStatsType creates a new entry in the StatsType list of the
// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) NewStatsType(IsaAaGroupStatsType E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType) (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatsType == nil {
		t.StatsType = make(map[E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType)
	}

	key := IsaAaGroupStatsType

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.StatsType[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list StatsType", key)
	}

	t.StatsType[key] = &NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType{
		IsaAaGroupStatsType: IsaAaGroupStatsType,
	}

	return t.StatsType[key], nil
}

// RenameStatsType renames an entry in the list StatsType within
// the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) RenameStatsType(oldK, newK E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType) error {
	if _, ok := t.StatsType[newK]; ok {
		return fmt.Errorf("key %v already exists in StatsType", newK)
	}

	e, ok := t.StatsType[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in StatsType", oldK)
	}
	e.IsaAaGroupStatsType = newK

	t.StatsType[newK] = e
	delete(t.StatsType, oldK)
	return nil
}

// GetOrCreateStatsType retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) GetOrCreateStatsType(IsaAaGroupStatsType E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType {

	key := IsaAaGroupStatsType

	if v, ok := t.StatsType[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewStatsType(IsaAaGroupStatsType)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateStatsType got unexpected error: %v", err))
	}
	return v
}

// GetStatsType retrieves the value with the specified key from
// the StatsType map field of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) GetStatsType(IsaAaGroupStatsType E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType) *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType {

	if t == nil {
		return nil
	}

	key := IsaAaGroupStatsType

	if lm, ok := t.StatsType[key]; ok {
		return lm
	}
	return nil
}

// DeleteStatsType deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) DeleteStatsType(IsaAaGroupStatsType E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType) {
	key := IsaAaGroupStatsType

	delete(t.StatsType, key)
}

// AppendStatsType appends the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType struct to the
// list StatsType of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) AppendStatsType(v *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) error {
	key := v.IsaAaGroupStatsType

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.StatsType == nil {
		t.StatsType = make(map[E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType]*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType)
	}

	if _, ok := t.StatsType[key]; ok {
		return fmt.Errorf("duplicate key for list StatsType %v", key)
	}

	t.StatsType[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.StatsType {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType represents the /nokia-conf/configure/isa/application-assurance-group/statistics/stats-type YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType struct {
	AccountingPolicy    *uint32                                            `path:"accounting-policy" module:"nokia-conf"`
	ApplyGroups         []string                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude  []string                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	CollectStats        *bool                                              `path:"collect-stats" module:"nokia-conf"`
	IsaAaGroupStatsType E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType `path:"isa-aa-group-stats-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) IsYANGGoStruct() {}

// GetAccountingPolicy retrieves the value of the leaf AccountingPolicy from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AccountingPolicy is set, it can
// safely use t.GetAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) GetAccountingPolicy() uint32 {
	if t == nil || t.AccountingPolicy == nil {
		return 0
	}
	return *t.AccountingPolicy
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCollectStats retrieves the value of the leaf CollectStats from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectStats is set, it can
// safely use t.GetCollectStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) GetCollectStats() bool {
	if t == nil || t.CollectStats == nil {
		return false
	}
	return *t.CollectStats
}

// GetIsaAaGroupStatsType retrieves the value of the leaf IsaAaGroupStatsType from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaAaGroupStatsType is set, it can
// safely use t.GetIsaAaGroupStatsType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaAaGroupStatsType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) GetIsaAaGroupStatsType() E_NokiaTypesApplicationAssurance_IsaAaGrpStatsType {
	if t == nil || t.IsaAaGroupStatsType == 0 {
		return 0
	}
	return t.IsaAaGroupStatsType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CollectStats == nil {
		var v bool = false
		t.CollectStats = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"isa-aa-group-stats-type": t.IsaAaGroupStatsType,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_Statistics_StatsType) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits represents the /nokia-conf/configure/isa/application-assurance-group/transit-prefix-limits YANG schema element.
type NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits struct {
	Ipv4Entries       *uint32 `path:"ipv4-entries" module:"nokia-conf"`
	Ipv4RemoteEntries *uint32 `path:"ipv4-remote-entries" module:"nokia-conf"`
	Ipv6Entries       *uint32 `path:"ipv6-entries" module:"nokia-conf"`
	Ipv6RemoteEntries *uint32 `path:"ipv6-remote-entries" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) IsYANGGoStruct() {}

// GetIpv4Entries retrieves the value of the leaf Ipv4Entries from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4Entries is set, it can
// safely use t.GetIpv4Entries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4Entries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) GetIpv4Entries() uint32 {
	if t == nil || t.Ipv4Entries == nil {
		return 0
	}
	return *t.Ipv4Entries
}

// GetIpv4RemoteEntries retrieves the value of the leaf Ipv4RemoteEntries from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv4RemoteEntries is set, it can
// safely use t.GetIpv4RemoteEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv4RemoteEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) GetIpv4RemoteEntries() uint32 {
	if t == nil || t.Ipv4RemoteEntries == nil {
		return 0
	}
	return *t.Ipv4RemoteEntries
}

// GetIpv6Entries retrieves the value of the leaf Ipv6Entries from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6Entries is set, it can
// safely use t.GetIpv6Entries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6Entries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) GetIpv6Entries() uint32 {
	if t == nil || t.Ipv6Entries == nil {
		return 0
	}
	return *t.Ipv6Entries
}

// GetIpv6RemoteEntries retrieves the value of the leaf Ipv6RemoteEntries from the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ipv6RemoteEntries is set, it can
// safely use t.GetIpv6RemoteEntries() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ipv6RemoteEntries == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) GetIpv6RemoteEntries() uint32 {
	if t == nil || t.Ipv6RemoteEntries == nil {
		return 0
	}
	return *t.Ipv6RemoteEntries
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits.
func (*NokiaConf_Configure_Isa_ApplicationAssuranceGroup_TransitPrefixLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_LnsGroup represents the /nokia-conf/configure/isa/lns-group YANG schema element.
type NokiaConf_Configure_Isa_LnsGroup struct {
	AdminState         E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                            `path:"description" module:"nokia-conf"`
	Esa                map[NokiaConf_Configure_Isa_LnsGroup_Esa_Key]*NokiaConf_Configure_Isa_LnsGroup_Esa `path:"esa" module:"nokia-conf"`
	Id                 *uint32                                                                            `path:"id" module:"nokia-conf"`
	Mda                map[string]*NokiaConf_Configure_Isa_LnsGroup_Mda                                   `path:"mda" module:"nokia-conf"`
	PortPolicy         *string                                                                            `path:"port-policy" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_LnsGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_LnsGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_LnsGroup_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/lns-group.
type NokiaConf_Configure_Isa_LnsGroup_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_LnsGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_LnsGroup) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_LnsGroup_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_LnsGroup_Esa_Key]*NokiaConf_Configure_Isa_LnsGroup_Esa)
	}

	key := NokiaConf_Configure_Isa_LnsGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_LnsGroup_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_LnsGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_LnsGroup) RenameEsa(oldK, newK NokiaConf_Configure_Isa_LnsGroup_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_LnsGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_LnsGroup_Esa {

	key := NokiaConf_Configure_Isa_LnsGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_LnsGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_LnsGroup_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_LnsGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_LnsGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_LnsGroup) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_LnsGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_LnsGroup_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_LnsGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_LnsGroup_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_LnsGroup) AppendEsa(v *NokiaConf_Configure_Isa_LnsGroup_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_LnsGroup_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_LnsGroup_Esa_Key]*NokiaConf_Configure_Isa_LnsGroup_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Isa_LnsGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_LnsGroup) NewMda(MdaId string) (*NokiaConf_Configure_Isa_LnsGroup_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_LnsGroup_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Isa_LnsGroup_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Isa_LnsGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_LnsGroup) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_LnsGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Isa_LnsGroup_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Isa_LnsGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetMda(MdaId string) *NokiaConf_Configure_Isa_LnsGroup_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_LnsGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_LnsGroup) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Isa_LnsGroup_Mda struct to the
// list Mda of NokiaConf_Configure_Isa_LnsGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_LnsGroup_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_LnsGroup) AppendMda(v *NokiaConf_Configure_Isa_LnsGroup_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_LnsGroup_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetPortPolicy retrieves the value of the leaf PortPolicy from the NokiaConf_Configure_Isa_LnsGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPolicy is set, it can
// safely use t.GetPortPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup) GetPortPolicy() string {
	if t == nil || t.PortPolicy == nil {
		return ""
	}
	return *t.PortPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_LnsGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_LnsGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_LnsGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_LnsGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_LnsGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_LnsGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_LnsGroup.
func (*NokiaConf_Configure_Isa_LnsGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_LnsGroup_Esa represents the /nokia-conf/configure/isa/lns-group/esa YANG schema element.
type NokiaConf_Configure_Isa_LnsGroup_Esa struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain              *bool    `path:"drain" module:"nokia-conf"`
	EsaId              *int32   `path:"esa-id" module:"nokia-conf"`
	Vm                 *int32   `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_LnsGroup_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_LnsGroup_Esa) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_LnsGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_LnsGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Isa_LnsGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_LnsGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_LnsGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_LnsGroup_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_LnsGroup_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_LnsGroup_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_LnsGroup_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_LnsGroup_Esa.
func (*NokiaConf_Configure_Isa_LnsGroup_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_LnsGroup_Mda represents the /nokia-conf/configure/isa/lns-group/mda YANG schema element.
type NokiaConf_Configure_Isa_LnsGroup_Mda struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	Drain              *bool    `path:"drain" module:"nokia-conf"`
	MdaId              *string  `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_LnsGroup_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_LnsGroup_Mda) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_LnsGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_LnsGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDrain retrieves the value of the leaf Drain from the NokiaConf_Configure_Isa_LnsGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Drain is set, it can
// safely use t.GetDrain() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Drain == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) GetDrain() bool {
	if t == nil || t.Drain == nil {
		return false
	}
	return *t.Drain
}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_LnsGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_LnsGroup_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Drain == nil {
		var v bool = false
		t.Drain = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_LnsGroup_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_LnsGroup_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_LnsGroup_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_LnsGroup_Mda.
func (*NokiaConf_Configure_Isa_LnsGroup_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup represents the /nokia-conf/configure/isa/nat-group YANG schema element.
type NokiaConf_Configure_Isa_NatGroup struct {
	AdminState             E_NokiaTypesSros_AdminState                                                        `path:"admin-state" module:"nokia-conf"`
	ApplyGroups            []string                                                                           `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude     []string                                                                           `path:"apply-groups-exclude" module:"nokia-conf"`
	Description            *string                                                                            `path:"description" module:"nokia-conf"`
	Esa                    map[NokiaConf_Configure_Isa_NatGroup_Esa_Key]*NokiaConf_Configure_Isa_NatGroup_Esa `path:"esa" module:"nokia-conf"`
	Id                     *uint32                                                                            `path:"id" module:"nokia-conf"`
	Log                    *NokiaConf_Configure_Isa_NatGroup_Log                                              `path:"log" module:"nokia-conf"`
	Mda                    map[string]*NokiaConf_Configure_Isa_NatGroup_Mda                                   `path:"mda" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                                            `path:"radius-accounting-policy" module:"nokia-conf"`
	Redundancy             *NokiaConf_Configure_Isa_NatGroup_Redundancy                                       `path:"redundancy" module:"nokia-conf"`
	ScalingProfile         E_NokiaTypesSros_IsaScalingProfile                                                 `path:"scaling-profile" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Isa_NatGroup_SessionLimits                                    `path:"session-limits" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_NatGroup_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/nat-group.
type NokiaConf_Configure_Isa_NatGroup_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_NatGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_NatGroup) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_NatGroup_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_NatGroup_Esa_Key]*NokiaConf_Configure_Isa_NatGroup_Esa)
	}

	key := NokiaConf_Configure_Isa_NatGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_NatGroup_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_NatGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_NatGroup) RenameEsa(oldK, newK NokiaConf_Configure_Isa_NatGroup_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_NatGroup) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_NatGroup_Esa {

	key := NokiaConf_Configure_Isa_NatGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_NatGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_NatGroup_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_NatGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_NatGroup) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_NatGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_NatGroup_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_NatGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_NatGroup_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_NatGroup) AppendEsa(v *NokiaConf_Configure_Isa_NatGroup_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_NatGroup_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_NatGroup_Esa_Key]*NokiaConf_Configure_Isa_NatGroup_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Isa_NatGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_NatGroup) NewMda(MdaId string) (*NokiaConf_Configure_Isa_NatGroup_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Isa_NatGroup_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Isa_NatGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_NatGroup) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_NatGroup) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Isa_NatGroup_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Isa_NatGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup) GetMda(MdaId string) *NokiaConf_Configure_Isa_NatGroup_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_NatGroup) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Isa_NatGroup_Mda struct to the
// list Mda of NokiaConf_Configure_Isa_NatGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_NatGroup_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_NatGroup) AppendMda(v *NokiaConf_Configure_Isa_NatGroup_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup) GetOrCreateLog() *NokiaConf_Configure_Isa_NatGroup_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Isa_NatGroup_Log{}
	return t.Log
}

// GetOrCreateRedundancy retrieves the value of the Redundancy field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup) GetOrCreateRedundancy() *NokiaConf_Configure_Isa_NatGroup_Redundancy {
	if t.Redundancy != nil {
		return t.Redundancy
	}
	t.Redundancy = &NokiaConf_Configure_Isa_NatGroup_Redundancy{}
	return t.Redundancy
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup) GetOrCreateSessionLimits() *NokiaConf_Configure_Isa_NatGroup_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Isa_NatGroup_SessionLimits{}
	return t.SessionLimits
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Isa_NatGroup. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup) GetLog() *NokiaConf_Configure_Isa_NatGroup_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetRedundancy returns the value of the Redundancy struct pointer
// from NokiaConf_Configure_Isa_NatGroup. If the receiver or the field Redundancy is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup) GetRedundancy() *NokiaConf_Configure_Isa_NatGroup_Redundancy {
	if t != nil && t.Redundancy != nil {
		return t.Redundancy
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Isa_NatGroup. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup) GetSessionLimits() *NokiaConf_Configure_Isa_NatGroup_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// GetScalingProfile retrieves the value of the leaf ScalingProfile from the NokiaConf_Configure_Isa_NatGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScalingProfile is set, it can
// safely use t.GetScalingProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScalingProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup) GetScalingProfile() E_NokiaTypesSros_IsaScalingProfile {
	if t == nil || t.ScalingProfile == 0 {
		return NokiaTypesSros_IsaScalingProfile_profile1
	}
	return t.ScalingProfile
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.ScalingProfile == 0 {
		t.ScalingProfile = NokiaTypesSros_IsaScalingProfile_profile1
	}
	t.Log.PopulateDefaults()
	t.Redundancy.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_NatGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_NatGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup.
func (*NokiaConf_Configure_Isa_NatGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Esa represents the /nokia-conf/configure/isa/nat-group/esa YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Esa struct {
	EsaId *int32 `path:"esa-id" module:"nokia-conf"`
	Vm    *int32 `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Esa) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_NatGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_NatGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_NatGroup_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Esa.
func (*NokiaConf_Configure_Isa_NatGroup_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Log represents the /nokia-conf/configure/isa/nat-group/log YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Log struct {
	SuppressLsnEvents        *bool `path:"suppress-lsn-events" module:"nokia-conf"`
	SuppressLsnSubBlocksFree *bool `path:"suppress-lsn-sub-blocks-free" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Log) IsYANGGoStruct() {}

// GetSuppressLsnEvents retrieves the value of the leaf SuppressLsnEvents from the NokiaConf_Configure_Isa_NatGroup_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLsnEvents is set, it can
// safely use t.GetSuppressLsnEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLsnEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) GetSuppressLsnEvents() bool {
	if t == nil || t.SuppressLsnEvents == nil {
		return true
	}
	return *t.SuppressLsnEvents
}

// GetSuppressLsnSubBlocksFree retrieves the value of the leaf SuppressLsnSubBlocksFree from the NokiaConf_Configure_Isa_NatGroup_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLsnSubBlocksFree is set, it can
// safely use t.GetSuppressLsnSubBlocksFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLsnSubBlocksFree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) GetSuppressLsnSubBlocksFree() bool {
	if t == nil || t.SuppressLsnSubBlocksFree == nil {
		return false
	}
	return *t.SuppressLsnSubBlocksFree
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SuppressLsnEvents == nil {
		var v bool = true
		t.SuppressLsnEvents = &v
	}
	if t.SuppressLsnSubBlocksFree == nil {
		var v bool = false
		t.SuppressLsnSubBlocksFree = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Log.
func (*NokiaConf_Configure_Isa_NatGroup_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Mda represents the /nokia-conf/configure/isa/nat-group/mda YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Mda) IsYANGGoStruct() {}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_NatGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_NatGroup_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Mda.
func (*NokiaConf_Configure_Isa_NatGroup_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy represents the /nokia-conf/configure/isa/nat-group/redundancy YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy struct {
	ActiveMdaLimit *uint32                                                   `path:"active-mda-limit" module:"nokia-conf"`
	InterChassis   *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis `path:"inter-chassis" module:"nokia-conf" yangPresence:"true"`
	IntraChassis   *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis `path:"intra-chassis" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy) IsYANGGoStruct() {}

// GetOrCreateInterChassis retrieves the value of the InterChassis field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) GetOrCreateInterChassis() *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis {
	if t.InterChassis != nil {
		return t.InterChassis
	}
	t.InterChassis = &NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis{}
	return t.InterChassis
}

// GetOrCreateIntraChassis retrieves the value of the IntraChassis field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) GetOrCreateIntraChassis() *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis {
	if t.IntraChassis != nil {
		return t.IntraChassis
	}
	t.IntraChassis = &NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis{}
	return t.IntraChassis
}

// GetInterChassis returns the value of the InterChassis struct pointer
// from NokiaConf_Configure_Isa_NatGroup_Redundancy. If the receiver or the field InterChassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) GetInterChassis() *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis {
	if t != nil && t.InterChassis != nil {
		return t.InterChassis
	}
	return nil
}

// GetIntraChassis returns the value of the IntraChassis struct pointer
// from NokiaConf_Configure_Isa_NatGroup_Redundancy. If the receiver or the field IntraChassis is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) GetIntraChassis() *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis {
	if t != nil && t.IntraChassis != nil {
		return t.IntraChassis
	}
	return nil
}

// GetActiveMdaLimit retrieves the value of the leaf ActiveMdaLimit from the NokiaConf_Configure_Isa_NatGroup_Redundancy
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMdaLimit is set, it can
// safely use t.GetActiveMdaLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMdaLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) GetActiveMdaLimit() uint32 {
	if t == nil || t.ActiveMdaLimit == nil {
		return 0
	}
	return *t.ActiveMdaLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.InterChassis.PopulateDefaults()
	t.IntraChassis.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis represents the /nokia-conf/configure/isa/nat-group/redundancy/inter-chassis YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis struct {
	FlowTimeoutOnSwitchover *uint32                                                                               `path:"flow-timeout-on-switchover" module:"nokia-conf"`
	IpMtu                   *uint32                                                                               `path:"ip-mtu" module:"nokia-conf"`
	Keepalive               *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive                   `path:"keepalive" module:"nokia-conf"`
	LocalIpRangeStart       *string                                                                               `path:"local-ip-range-start" module:"nokia-conf"`
	MonitorOperGroup        map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup `path:"monitor-oper-group" module:"nokia-conf"`
	MonitorPort             map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort      `path:"monitor-port" module:"nokia-conf"`
	Preferred               *bool                                                                                 `path:"preferred" module:"nokia-conf"`
	RemoteIpRangeStart      *string                                                                               `path:"remote-ip-range-start" module:"nokia-conf"`
	ReplicationThreshold    *uint32                                                                               `path:"replication-threshold" module:"nokia-conf"`
	RouterInstance          *string                                                                               `path:"router-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) IsYANGGoStruct() {}

// NewMonitorOperGroup creates a new entry in the MonitorOperGroup list of the
// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) NewMonitorOperGroup(OperGroup string) (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup)
	}

	key := OperGroup

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorOperGroup[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorOperGroup", key)
	}

	t.MonitorOperGroup[key] = &NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup{
		OperGroup: &OperGroup,
	}

	return t.MonitorOperGroup[key], nil
}

// RenameMonitorOperGroup renames an entry in the list MonitorOperGroup within
// the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) RenameMonitorOperGroup(oldK, newK string) error {
	if _, ok := t.MonitorOperGroup[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorOperGroup", newK)
	}

	e, ok := t.MonitorOperGroup[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorOperGroup", oldK)
	}
	e.OperGroup = &newK

	t.MonitorOperGroup[newK] = e
	delete(t.MonitorOperGroup, oldK)
	return nil
}

// GetOrCreateMonitorOperGroup retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetOrCreateMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup {

	key := OperGroup

	if v, ok := t.MonitorOperGroup[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorOperGroup(OperGroup)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorOperGroup got unexpected error: %v", err))
	}
	return v
}

// GetMonitorOperGroup retrieves the value with the specified key from
// the MonitorOperGroup map field of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetMonitorOperGroup(OperGroup string) *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup {

	if t == nil {
		return nil
	}

	key := OperGroup

	if lm, ok := t.MonitorOperGroup[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorOperGroup deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) DeleteMonitorOperGroup(OperGroup string) {
	key := OperGroup

	delete(t.MonitorOperGroup, key)
}

// AppendMonitorOperGroup appends the supplied NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup struct to the
// list MonitorOperGroup of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) AppendMonitorOperGroup(v *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) error {
	if v.OperGroup == nil {
		return fmt.Errorf("invalid nil key received for OperGroup")
	}

	key := *v.OperGroup

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorOperGroup == nil {
		t.MonitorOperGroup = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup)
	}

	if _, ok := t.MonitorOperGroup[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorOperGroup %v", key)
	}

	t.MonitorOperGroup[key] = v
	return nil
}

// NewMonitorPort creates a new entry in the MonitorPort list of the
// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) NewMonitorPort(PortId string) (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorPort == nil {
		t.MonitorPort = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.MonitorPort[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list MonitorPort", key)
	}

	t.MonitorPort[key] = &NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort{
		PortId: &PortId,
	}

	return t.MonitorPort[key], nil
}

// RenameMonitorPort renames an entry in the list MonitorPort within
// the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) RenameMonitorPort(oldK, newK string) error {
	if _, ok := t.MonitorPort[newK]; ok {
		return fmt.Errorf("key %v already exists in MonitorPort", newK)
	}

	e, ok := t.MonitorPort[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in MonitorPort", oldK)
	}
	e.PortId = &newK

	t.MonitorPort[newK] = e
	delete(t.MonitorPort, oldK)
	return nil
}

// GetOrCreateMonitorPort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetOrCreateMonitorPort(PortId string) *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort {

	key := PortId

	if v, ok := t.MonitorPort[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMonitorPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMonitorPort got unexpected error: %v", err))
	}
	return v
}

// GetMonitorPort retrieves the value with the specified key from
// the MonitorPort map field of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetMonitorPort(PortId string) *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.MonitorPort[key]; ok {
		return lm
	}
	return nil
}

// DeleteMonitorPort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) DeleteMonitorPort(PortId string) {
	key := PortId

	delete(t.MonitorPort, key)
}

// AppendMonitorPort appends the supplied NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort struct to the
// list MonitorPort of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) AppendMonitorPort(v *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.MonitorPort == nil {
		t.MonitorPort = make(map[string]*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort)
	}

	if _, ok := t.MonitorPort[key]; ok {
		return fmt.Errorf("duplicate key for list MonitorPort %v", key)
	}

	t.MonitorPort[key] = v
	return nil
}

// GetOrCreateKeepalive retrieves the value of the Keepalive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetOrCreateKeepalive() *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive {
	if t.Keepalive != nil {
		return t.Keepalive
	}
	t.Keepalive = &NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive{}
	return t.Keepalive
}

// GetKeepalive returns the value of the Keepalive struct pointer
// from NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis. If the receiver or the field Keepalive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetKeepalive() *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive {
	if t != nil && t.Keepalive != nil {
		return t.Keepalive
	}
	return nil
}

// GetFlowTimeoutOnSwitchover retrieves the value of the leaf FlowTimeoutOnSwitchover from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FlowTimeoutOnSwitchover is set, it can
// safely use t.GetFlowTimeoutOnSwitchover() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FlowTimeoutOnSwitchover == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetFlowTimeoutOnSwitchover() uint32 {
	if t == nil || t.FlowTimeoutOnSwitchover == nil {
		return 50
	}
	return *t.FlowTimeoutOnSwitchover
}

// GetIpMtu retrieves the value of the leaf IpMtu from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpMtu is set, it can
// safely use t.GetIpMtu() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpMtu == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetIpMtu() uint32 {
	if t == nil || t.IpMtu == nil {
		return 1500
	}
	return *t.IpMtu
}

// GetLocalIpRangeStart retrieves the value of the leaf LocalIpRangeStart from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpRangeStart is set, it can
// safely use t.GetLocalIpRangeStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpRangeStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetLocalIpRangeStart() string {
	if t == nil || t.LocalIpRangeStart == nil {
		return ""
	}
	return *t.LocalIpRangeStart
}

// GetPreferred retrieves the value of the leaf Preferred from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Preferred is set, it can
// safely use t.GetPreferred() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Preferred == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetPreferred() bool {
	if t == nil || t.Preferred == nil {
		return false
	}
	return *t.Preferred
}

// GetRemoteIpRangeStart retrieves the value of the leaf RemoteIpRangeStart from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpRangeStart is set, it can
// safely use t.GetRemoteIpRangeStart() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpRangeStart == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetRemoteIpRangeStart() string {
	if t == nil || t.RemoteIpRangeStart == nil {
		return ""
	}
	return *t.RemoteIpRangeStart
}

// GetReplicationThreshold retrieves the value of the leaf ReplicationThreshold from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReplicationThreshold is set, it can
// safely use t.GetReplicationThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReplicationThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetReplicationThreshold() uint32 {
	if t == nil || t.ReplicationThreshold == nil {
		return 20
	}
	return *t.ReplicationThreshold
}

// GetRouterInstance retrieves the value of the leaf RouterInstance from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RouterInstance is set, it can
// safely use t.GetRouterInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RouterInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) GetRouterInstance() string {
	if t == nil || t.RouterInstance == nil {
		return ""
	}
	return *t.RouterInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FlowTimeoutOnSwitchover == nil {
		var v uint32 = 50
		t.FlowTimeoutOnSwitchover = &v
	}
	if t.IpMtu == nil {
		var v uint32 = 1500
		t.IpMtu = &v
	}
	if t.Preferred == nil {
		var v bool = false
		t.Preferred = &v
	}
	if t.ReplicationThreshold == nil {
		var v uint32 = 20
		t.ReplicationThreshold = &v
	}
	t.Keepalive.PopulateDefaults()
	for _, e := range t.MonitorOperGroup {
		e.PopulateDefaults()
	}
	for _, e := range t.MonitorPort {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive represents the /nokia-conf/configure/isa/nat-group/redundancy/inter-chassis/keepalive YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive struct {
	Dropcount *uint32 `path:"dropcount" module:"nokia-conf"`
	Interval  *uint32 `path:"interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) IsYANGGoStruct() {}

// GetDropcount retrieves the value of the leaf Dropcount from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Dropcount is set, it can
// safely use t.GetDropcount() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Dropcount == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) GetDropcount() uint32 {
	if t == nil || t.Dropcount == nil {
		return 2
	}
	return *t.Dropcount
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Dropcount == nil {
		var v uint32 = 2
		t.Dropcount = &v
	}
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_Keepalive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup represents the /nokia-conf/configure/isa/nat-group/redundancy/inter-chassis/monitor-oper-group YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HealthDrop         *uint32  `path:"health-drop" module:"nokia-conf"`
	OperGroup          *string  `path:"oper-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetOperGroup retrieves the value of the leaf OperGroup from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OperGroup is set, it can
// safely use t.GetOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) GetOperGroup() string {
	if t == nil || t.OperGroup == nil {
		return ""
	}
	return *t.OperGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.OperGroup == nil {
		return nil, fmt.Errorf("nil value for key OperGroup")
	}

	return map[string]interface{}{
		"oper-group": *t.OperGroup,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorOperGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort represents the /nokia-conf/configure/isa/nat-group/redundancy/inter-chassis/monitor-port YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort struct {
	ApplyGroups        []string `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string `path:"apply-groups-exclude" module:"nokia-conf"`
	HealthDrop         *uint32  `path:"health-drop" module:"nokia-conf"`
	PortId             *string  `path:"port-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHealthDrop retrieves the value of the leaf HealthDrop from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HealthDrop is set, it can
// safely use t.GetHealthDrop() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HealthDrop == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) GetHealthDrop() uint32 {
	if t == nil || t.HealthDrop == nil {
		return 1
	}
	return *t.HealthDrop
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.HealthDrop == nil {
		var v uint32 = 1
		t.HealthDrop = &v
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_InterChassis_MonitorPort) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis represents the /nokia-conf/configure/isa/nat-group/redundancy/intra-chassis YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis struct {
	ActiveActive  *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive `path:"active-active" module:"nokia-conf"`
	ActiveStandby YANGEmpty                                                              `path:"active-standby" module:"nokia-conf"`
	L2AwareBypass YANGEmpty                                                              `path:"l2aware-bypass" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) IsYANGGoStruct() {}

// GetOrCreateActiveActive retrieves the value of the ActiveActive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) GetOrCreateActiveActive() *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive {
	if t.ActiveActive != nil {
		return t.ActiveActive
	}
	t.ActiveActive = &NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive{}
	return t.ActiveActive
}

// GetActiveActive returns the value of the ActiveActive struct pointer
// from NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis. If the receiver or the field ActiveActive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) GetActiveActive() *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive {
	if t != nil && t.ActiveActive != nil {
		return t.ActiveActive
	}
	return nil
}

// GetActiveStandby retrieves the value of the leaf ActiveStandby from the NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveStandby is set, it can
// safely use t.GetActiveStandby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveStandby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) GetActiveStandby() YANGEmpty {
	if t == nil || t.ActiveStandby == false {
		return false
	}
	return t.ActiveStandby
}

// GetL2AwareBypass retrieves the value of the leaf L2AwareBypass from the NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if L2AwareBypass is set, it can
// safely use t.GetL2AwareBypass() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.L2AwareBypass == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) GetL2AwareBypass() YANGEmpty {
	if t == nil || t.L2AwareBypass == false {
		return false
	}
	return t.L2AwareBypass
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.ActiveActive.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive represents the /nokia-conf/configure/isa/nat-group/redundancy/intra-chassis/active-active YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive struct {
	FailedMdaLimit *uint32 `path:"failed-mda-limit" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) IsYANGGoStruct() {}

// GetFailedMdaLimit retrieves the value of the leaf FailedMdaLimit from the NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailedMdaLimit is set, it can
// safely use t.GetFailedMdaLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailedMdaLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) GetFailedMdaLimit() uint32 {
	if t == nil || t.FailedMdaLimit == nil {
		return 0
	}
	return *t.FailedMdaLimit
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive.
func (*NokiaConf_Configure_Isa_NatGroup_Redundancy_IntraChassis_ActiveActive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_SessionLimits represents the /nokia-conf/configure/isa/nat-group/session-limits YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_SessionLimits struct {
	Reserved     *uint32                                                    `path:"reserved" module:"nokia-conf"`
	UpnpMappings *uint32                                                    `path:"upnp-mappings" module:"nokia-conf"`
	Watermarks   *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Isa_NatGroup_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) GetWatermarks() *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Isa_NatGroup_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) GetReserved() uint32 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUpnpMappings retrieves the value of the leaf UpnpMappings from the NokiaConf_Configure_Isa_NatGroup_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpnpMappings is set, it can
// safely use t.GetUpnpMappings() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpnpMappings == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) GetUpnpMappings() uint32 {
	if t == nil || t.UpnpMappings == nil {
		return 524288
	}
	return *t.UpnpMappings
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UpnpMappings == nil {
		var v uint32 = 524288
		t.UpnpMappings = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_SessionLimits.
func (*NokiaConf_Configure_Isa_NatGroup_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks represents the /nokia-conf/configure/isa/nat-group/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Isa_NatGroup_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup represents the /nokia-conf/configure/isa/tunnel-group YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup struct {
	AdminState         E_NokiaTypesSros_AdminState                          `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                             `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                             `path:"apply-groups-exclude" module:"nokia-conf"`
	Backup             *string                                              `path:"backup" module:"nokia-conf"`
	Description        *string                                              `path:"description" module:"nokia-conf"`
	Id                 *uint32                                              `path:"id" module:"nokia-conf"`
	IpsecResponderOnly *bool                                                `path:"ipsec-responder-only" module:"nokia-conf"`
	IsaScaleMode       E_NokiaConf_Configure_Isa_TunnelGroup_IsaScaleMode   `path:"isa-scale-mode" module:"nokia-conf"`
	MultiActive        *NokiaConf_Configure_Isa_TunnelGroup_MultiActive     `path:"multi-active" module:"nokia-conf" yangPresence:"true"`
	Primary            *string                                              `path:"primary" module:"nokia-conf"`
	Reassembly         *NokiaConf_Configure_Isa_TunnelGroup_Reassembly      `path:"reassembly" module:"nokia-conf"`
	StatsCollection    *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection `path:"stats-collection" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup) IsYANGGoStruct() {}

// GetOrCreateMultiActive retrieves the value of the MultiActive field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetOrCreateMultiActive() *NokiaConf_Configure_Isa_TunnelGroup_MultiActive {
	if t.MultiActive != nil {
		return t.MultiActive
	}
	t.MultiActive = &NokiaConf_Configure_Isa_TunnelGroup_MultiActive{}
	return t.MultiActive
}

// GetOrCreateReassembly retrieves the value of the Reassembly field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetOrCreateReassembly() *NokiaConf_Configure_Isa_TunnelGroup_Reassembly {
	if t.Reassembly != nil {
		return t.Reassembly
	}
	t.Reassembly = &NokiaConf_Configure_Isa_TunnelGroup_Reassembly{}
	return t.Reassembly
}

// GetOrCreateStatsCollection retrieves the value of the StatsCollection field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetOrCreateStatsCollection() *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection {
	if t.StatsCollection != nil {
		return t.StatsCollection
	}
	t.StatsCollection = &NokiaConf_Configure_Isa_TunnelGroup_StatsCollection{}
	return t.StatsCollection
}

// GetMultiActive returns the value of the MultiActive struct pointer
// from NokiaConf_Configure_Isa_TunnelGroup. If the receiver or the field MultiActive is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetMultiActive() *NokiaConf_Configure_Isa_TunnelGroup_MultiActive {
	if t != nil && t.MultiActive != nil {
		return t.MultiActive
	}
	return nil
}

// GetReassembly returns the value of the Reassembly struct pointer
// from NokiaConf_Configure_Isa_TunnelGroup. If the receiver or the field Reassembly is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetReassembly() *NokiaConf_Configure_Isa_TunnelGroup_Reassembly {
	if t != nil && t.Reassembly != nil {
		return t.Reassembly
	}
	return nil
}

// GetStatsCollection returns the value of the StatsCollection struct pointer
// from NokiaConf_Configure_Isa_TunnelGroup. If the receiver or the field StatsCollection is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetStatsCollection() *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection {
	if t != nil && t.StatsCollection != nil {
		return t.StatsCollection
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBackup retrieves the value of the leaf Backup from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Backup is set, it can
// safely use t.GetBackup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Backup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetBackup() string {
	if t == nil || t.Backup == nil {
		return ""
	}
	return *t.Backup
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetIpsecResponderOnly retrieves the value of the leaf IpsecResponderOnly from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IpsecResponderOnly is set, it can
// safely use t.GetIpsecResponderOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IpsecResponderOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetIpsecResponderOnly() bool {
	if t == nil || t.IpsecResponderOnly == nil {
		return false
	}
	return *t.IpsecResponderOnly
}

// GetIsaScaleMode retrieves the value of the leaf IsaScaleMode from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaScaleMode is set, it can
// safely use t.GetIsaScaleMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaScaleMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetIsaScaleMode() E_NokiaConf_Configure_Isa_TunnelGroup_IsaScaleMode {
	if t == nil || t.IsaScaleMode == 0 {
		return 0
	}
	return t.IsaScaleMode
}

// GetPrimary retrieves the value of the leaf Primary from the NokiaConf_Configure_Isa_TunnelGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Primary is set, it can
// safely use t.GetPrimary() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Primary == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup) GetPrimary() string {
	if t == nil || t.Primary == nil {
		return ""
	}
	return *t.Primary
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.IpsecResponderOnly == nil {
		var v bool = false
		t.IpsecResponderOnly = &v
	}
	t.MultiActive.PopulateDefaults()
	t.Reassembly.PopulateDefaults()
	t.StatsCollection.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_TunnelGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_TunnelGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup.
func (*NokiaConf_Configure_Isa_TunnelGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup_MultiActive represents the /nokia-conf/configure/isa/tunnel-group/multi-active YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup_MultiActive struct {
	ActiveIsaNumber *uint32                                                                                                          `path:"active-isa-number" module:"nokia-conf"`
	Esa             map[NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa `path:"esa" module:"nokia-conf"`
	Isa             map[string]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa                                                  `path:"isa" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup_MultiActive implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/tunnel-group/multi-active.
type NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_TunnelGroup_MultiActive struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa)
	}

	key := NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_TunnelGroup_MultiActive struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) RenameEsa(oldK, newK NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa {

	key := NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) AppendEsa(v *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa_Key]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewIsa creates a new entry in the Isa list of the
// NokiaConf_Configure_Isa_TunnelGroup_MultiActive struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) NewIsa(IsaId string) (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa)
	}

	key := IsaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Isa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Isa", key)
	}

	t.Isa[key] = &NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa{
		IsaId: &IsaId,
	}

	return t.Isa[key], nil
}

// RenameIsa renames an entry in the list Isa within
// the NokiaConf_Configure_Isa_TunnelGroup_MultiActive struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) RenameIsa(oldK, newK string) error {
	if _, ok := t.Isa[newK]; ok {
		return fmt.Errorf("key %v already exists in Isa", newK)
	}

	e, ok := t.Isa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Isa", oldK)
	}
	e.IsaId = &newK

	t.Isa[newK] = e
	delete(t.Isa, oldK)
	return nil
}

// GetOrCreateIsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) GetOrCreateIsa(IsaId string) *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa {

	key := IsaId

	if v, ok := t.Isa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIsa(IsaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIsa got unexpected error: %v", err))
	}
	return v
}

// GetIsa retrieves the value with the specified key from
// the Isa map field of NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) GetIsa(IsaId string) *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa {

	if t == nil {
		return nil
	}

	key := IsaId

	if lm, ok := t.Isa[key]; ok {
		return lm
	}
	return nil
}

// DeleteIsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) DeleteIsa(IsaId string) {
	key := IsaId

	delete(t.Isa, key)
}

// AppendIsa appends the supplied NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa struct to the
// list Isa of NokiaConf_Configure_Isa_TunnelGroup_MultiActive. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) AppendIsa(v *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) error {
	if v.IsaId == nil {
		return fmt.Errorf("invalid nil key received for IsaId")
	}

	key := *v.IsaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Isa == nil {
		t.Isa = make(map[string]*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa)
	}

	if _, ok := t.Isa[key]; ok {
		return fmt.Errorf("duplicate key for list Isa %v", key)
	}

	t.Isa[key] = v
	return nil
}

// GetActiveIsaNumber retrieves the value of the leaf ActiveIsaNumber from the NokiaConf_Configure_Isa_TunnelGroup_MultiActive
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveIsaNumber is set, it can
// safely use t.GetActiveIsaNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveIsaNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) GetActiveIsaNumber() uint32 {
	if t == nil || t.ActiveIsaNumber == nil {
		return 1
	}
	return *t.ActiveIsaNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup_MultiActive
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.ActiveIsaNumber == nil {
		var v uint32 = 1
		t.ActiveIsaNumber = &v
	}
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Isa {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup_MultiActive"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup_MultiActive.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa represents the /nokia-conf/configure/isa/tunnel-group/multi-active/esa YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa struct {
	EsaId *int32 `path:"esa-id" module:"nokia-conf"`
	Vm    *int32 `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa represents the /nokia-conf/configure/isa/tunnel-group/multi-active/isa YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa struct {
	IsaId *string `path:"isa-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) IsYANGGoStruct() {}

// GetIsaId retrieves the value of the leaf IsaId from the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaId is set, it can
// safely use t.GetIsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) GetIsaId() string {
	if t == nil || t.IsaId == nil {
		return ""
	}
	return *t.IsaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.IsaId == nil {
		return nil, fmt.Errorf("nil value for key IsaId")
	}

	return map[string]interface{}{
		"isa-id": *t.IsaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa.
func (*NokiaConf_Configure_Isa_TunnelGroup_MultiActive_Isa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup_Reassembly represents the /nokia-conf/configure/isa/tunnel-group/reassembly YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup_Reassembly struct {
	MaxWaitTime *int32 `path:"max-wait-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup_Reassembly implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup_Reassembly) IsYANGGoStruct() {}

// GetMaxWaitTime retrieves the value of the leaf MaxWaitTime from the NokiaConf_Configure_Isa_TunnelGroup_Reassembly
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxWaitTime is set, it can
// safely use t.GetMaxWaitTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxWaitTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_Reassembly) GetMaxWaitTime() int32 {
	if t == nil || t.MaxWaitTime == nil {
		return 0
	}
	return *t.MaxWaitTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup_Reassembly
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup_Reassembly) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_Reassembly) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup_Reassembly"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_Reassembly) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup_Reassembly) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup_Reassembly.
func (*NokiaConf_Configure_Isa_TunnelGroup_Reassembly) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_TunnelGroup_StatsCollection represents the /nokia-conf/configure/isa/tunnel-group/stats-collection YANG schema element.
type NokiaConf_Configure_Isa_TunnelGroup_StatsCollection struct {
	IsaDpCpuUsage *bool `path:"isa-dp-cpu-usage" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_TunnelGroup_StatsCollection implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) IsYANGGoStruct() {}

// GetIsaDpCpuUsage retrieves the value of the leaf IsaDpCpuUsage from the NokiaConf_Configure_Isa_TunnelGroup_StatsCollection
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaDpCpuUsage is set, it can
// safely use t.GetIsaDpCpuUsage() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaDpCpuUsage == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) GetIsaDpCpuUsage() bool {
	if t == nil || t.IsaDpCpuUsage == nil {
		return false
	}
	return *t.IsaDpCpuUsage
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_TunnelGroup_StatsCollection
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IsaDpCpuUsage == nil {
		var v bool = false
		t.IsaDpCpuUsage = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_TunnelGroup_StatsCollection"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_TunnelGroup_StatsCollection.
func (*NokiaConf_Configure_Isa_TunnelGroup_StatsCollection) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup represents the /nokia-conf/configure/isa/video-group YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup struct {
	AdInsert           *bool                                                                                    `path:"ad-insert" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	Analyzer           *bool                                                                                    `path:"analyzer" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	FccServer          *bool                                                                                    `path:"fcc-server" module:"nokia-conf"`
	LocalRtServer      *bool                                                                                    `path:"local-rt-server" module:"nokia-conf"`
	Mda                map[string]*NokiaConf_Configure_Isa_VideoGroup_Mda                                       `path:"mda" module:"nokia-conf"`
	ResvRet            *uint32                                                                                  `path:"resv-ret" module:"nokia-conf"`
	RtClient           *bool                                                                                    `path:"rt-client" module:"nokia-conf"`
	StreamSelection    *bool                                                                                    `path:"stream-selection" module:"nokia-conf"`
	Vapp               map[NokiaConf_Configure_Isa_VideoGroup_Vapp_Key]*NokiaConf_Configure_Isa_VideoGroup_Vapp `path:"vapp" module:"nokia-conf"`
	VideoGroupId       *uint32                                                                                  `path:"video-group-id" module:"nokia-conf"`
	Watermark          *NokiaConf_Configure_Isa_VideoGroup_Watermark                                            `path:"watermark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_VideoGroup_Vapp_Key represents the key for list Vapp of element /nokia-conf/configure/isa/video-group.
type NokiaConf_Configure_Isa_VideoGroup_Vapp_Key struct {
	EsaId  int32 `path:"esa-id"`
	VappId int32 `path:"vapp-id"`
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Isa_VideoGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_VideoGroup) NewMda(MdaId string) (*NokiaConf_Configure_Isa_VideoGroup_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_VideoGroup_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Isa_VideoGroup_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Isa_VideoGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_VideoGroup) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_VideoGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Isa_VideoGroup_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Isa_VideoGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetMda(MdaId string) *NokiaConf_Configure_Isa_VideoGroup_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_VideoGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_VideoGroup) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Isa_VideoGroup_Mda struct to the
// list Mda of NokiaConf_Configure_Isa_VideoGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_VideoGroup_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_VideoGroup) AppendMda(v *NokiaConf_Configure_Isa_VideoGroup_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_VideoGroup_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// NewVapp creates a new entry in the Vapp list of the
// NokiaConf_Configure_Isa_VideoGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_VideoGroup) NewVapp(EsaId int32, VappId int32) (*NokiaConf_Configure_Isa_VideoGroup_Vapp, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vapp == nil {
		t.Vapp = make(map[NokiaConf_Configure_Isa_VideoGroup_Vapp_Key]*NokiaConf_Configure_Isa_VideoGroup_Vapp)
	}

	key := NokiaConf_Configure_Isa_VideoGroup_Vapp_Key{
		EsaId:  EsaId,
		VappId: VappId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Vapp[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Vapp", key)
	}

	t.Vapp[key] = &NokiaConf_Configure_Isa_VideoGroup_Vapp{
		EsaId:  &EsaId,
		VappId: &VappId,
	}

	return t.Vapp[key], nil
}

// RenameVapp renames an entry in the list Vapp within
// the NokiaConf_Configure_Isa_VideoGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_VideoGroup) RenameVapp(oldK, newK NokiaConf_Configure_Isa_VideoGroup_Vapp_Key) error {
	if _, ok := t.Vapp[newK]; ok {
		return fmt.Errorf("key %v already exists in Vapp", newK)
	}

	e, ok := t.Vapp[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Vapp", oldK)
	}
	e.EsaId = &newK.EsaId
	e.VappId = &newK.VappId

	t.Vapp[newK] = e
	delete(t.Vapp, oldK)
	return nil
}

// GetOrCreateVapp retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_VideoGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetOrCreateVapp(EsaId int32, VappId int32) *NokiaConf_Configure_Isa_VideoGroup_Vapp {

	key := NokiaConf_Configure_Isa_VideoGroup_Vapp_Key{
		EsaId:  EsaId,
		VappId: VappId,
	}

	if v, ok := t.Vapp[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewVapp(EsaId, VappId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateVapp got unexpected error: %v", err))
	}
	return v
}

// GetVapp retrieves the value with the specified key from
// the Vapp map field of NokiaConf_Configure_Isa_VideoGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetVapp(EsaId int32, VappId int32) *NokiaConf_Configure_Isa_VideoGroup_Vapp {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_VideoGroup_Vapp_Key{
		EsaId:  EsaId,
		VappId: VappId,
	}

	if lm, ok := t.Vapp[key]; ok {
		return lm
	}
	return nil
}

// DeleteVapp deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_VideoGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_VideoGroup) DeleteVapp(EsaId int32, VappId int32) {
	key := NokiaConf_Configure_Isa_VideoGroup_Vapp_Key{
		EsaId:  EsaId,
		VappId: VappId,
	}

	delete(t.Vapp, key)
}

// AppendVapp appends the supplied NokiaConf_Configure_Isa_VideoGroup_Vapp struct to the
// list Vapp of NokiaConf_Configure_Isa_VideoGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_VideoGroup_Vapp already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_VideoGroup) AppendVapp(v *NokiaConf_Configure_Isa_VideoGroup_Vapp) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.VappId == nil {
		return fmt.Errorf("invalid nil key for VappId")
	}

	key := NokiaConf_Configure_Isa_VideoGroup_Vapp_Key{
		EsaId:  *v.EsaId,
		VappId: *v.VappId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Vapp == nil {
		t.Vapp = make(map[NokiaConf_Configure_Isa_VideoGroup_Vapp_Key]*NokiaConf_Configure_Isa_VideoGroup_Vapp)
	}

	if _, ok := t.Vapp[key]; ok {
		return fmt.Errorf("duplicate key for list Vapp %v", key)
	}

	t.Vapp[key] = v
	return nil
}

// GetOrCreateWatermark retrieves the value of the Watermark field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetOrCreateWatermark() *NokiaConf_Configure_Isa_VideoGroup_Watermark {
	if t.Watermark != nil {
		return t.Watermark
	}
	t.Watermark = &NokiaConf_Configure_Isa_VideoGroup_Watermark{}
	return t.Watermark
}

// GetWatermark returns the value of the Watermark struct pointer
// from NokiaConf_Configure_Isa_VideoGroup. If the receiver or the field Watermark is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetWatermark() *NokiaConf_Configure_Isa_VideoGroup_Watermark {
	if t != nil && t.Watermark != nil {
		return t.Watermark
	}
	return nil
}

// GetAdInsert retrieves the value of the leaf AdInsert from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdInsert is set, it can
// safely use t.GetAdInsert() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdInsert == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetAdInsert() bool {
	if t == nil || t.AdInsert == nil {
		return false
	}
	return *t.AdInsert
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetAnalyzer retrieves the value of the leaf Analyzer from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Analyzer is set, it can
// safely use t.GetAnalyzer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Analyzer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetAnalyzer() bool {
	if t == nil || t.Analyzer == nil {
		return false
	}
	return *t.Analyzer
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFccServer retrieves the value of the leaf FccServer from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FccServer is set, it can
// safely use t.GetFccServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FccServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetFccServer() bool {
	if t == nil || t.FccServer == nil {
		return false
	}
	return *t.FccServer
}

// GetLocalRtServer retrieves the value of the leaf LocalRtServer from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalRtServer is set, it can
// safely use t.GetLocalRtServer() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalRtServer == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetLocalRtServer() bool {
	if t == nil || t.LocalRtServer == nil {
		return false
	}
	return *t.LocalRtServer
}

// GetResvRet retrieves the value of the leaf ResvRet from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ResvRet is set, it can
// safely use t.GetResvRet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ResvRet == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetResvRet() uint32 {
	if t == nil || t.ResvRet == nil {
		return 0
	}
	return *t.ResvRet
}

// GetRtClient retrieves the value of the leaf RtClient from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RtClient is set, it can
// safely use t.GetRtClient() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RtClient == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetRtClient() bool {
	if t == nil || t.RtClient == nil {
		return true
	}
	return *t.RtClient
}

// GetStreamSelection retrieves the value of the leaf StreamSelection from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StreamSelection is set, it can
// safely use t.GetStreamSelection() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StreamSelection == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetStreamSelection() bool {
	if t == nil || t.StreamSelection == nil {
		return false
	}
	return *t.StreamSelection
}

// GetVideoGroupId retrieves the value of the leaf VideoGroupId from the NokiaConf_Configure_Isa_VideoGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VideoGroupId is set, it can
// safely use t.GetVideoGroupId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VideoGroupId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup) GetVideoGroupId() uint32 {
	if t == nil || t.VideoGroupId == nil {
		return 0
	}
	return *t.VideoGroupId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdInsert == nil {
		var v bool = false
		t.AdInsert = &v
	}
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Analyzer == nil {
		var v bool = false
		t.Analyzer = &v
	}
	if t.FccServer == nil {
		var v bool = false
		t.FccServer = &v
	}
	if t.LocalRtServer == nil {
		var v bool = false
		t.LocalRtServer = &v
	}
	if t.RtClient == nil {
		var v bool = true
		t.RtClient = &v
	}
	if t.StreamSelection == nil {
		var v bool = false
		t.StreamSelection = &v
	}
	t.Watermark.PopulateDefaults()
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
	for _, e := range t.Vapp {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_VideoGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_VideoGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.VideoGroupId == nil {
		return nil, fmt.Errorf("nil value for key VideoGroupId")
	}

	return map[string]interface{}{
		"video-group-id": *t.VideoGroupId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup.
func (*NokiaConf_Configure_Isa_VideoGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup_Mda represents the /nokia-conf/configure/isa/video-group/mda YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup_Mda) IsYANGGoStruct() {}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_VideoGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_VideoGroup_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup_Mda.
func (*NokiaConf_Configure_Isa_VideoGroup_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup_Vapp represents the /nokia-conf/configure/isa/video-group/vapp YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup_Vapp struct {
	EsaId  *int32 `path:"esa-id" module:"nokia-conf"`
	VappId *int32 `path:"vapp-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup_Vapp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup_Vapp) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_VideoGroup_Vapp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVappId retrieves the value of the leaf VappId from the NokiaConf_Configure_Isa_VideoGroup_Vapp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if VappId is set, it can
// safely use t.GetVappId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.VappId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) GetVappId() int32 {
	if t == nil || t.VappId == nil {
		return 0
	}
	return *t.VappId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup_Vapp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_VideoGroup_Vapp struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.VappId == nil {
		return nil, fmt.Errorf("nil value for key VappId")
	}

	return map[string]interface{}{
		"esa-id":  *t.EsaId,
		"vapp-id": *t.VappId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup_Vapp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup_Vapp) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup_Vapp.
func (*NokiaConf_Configure_Isa_VideoGroup_Vapp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup_Watermark represents the /nokia-conf/configure/isa/video-group/watermark YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup_Watermark struct {
	Bandwidth *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth `path:"bandwidth" module:"nokia-conf"`
	Session   *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session   `path:"session" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup_Watermark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark) IsYANGGoStruct() {}

// GetOrCreateBandwidth retrieves the value of the Bandwidth field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) GetOrCreateBandwidth() *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth {
	if t.Bandwidth != nil {
		return t.Bandwidth
	}
	t.Bandwidth = &NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth{}
	return t.Bandwidth
}

// GetOrCreateSession retrieves the value of the Session field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) GetOrCreateSession() *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session {
	if t.Session != nil {
		return t.Session
	}
	t.Session = &NokiaConf_Configure_Isa_VideoGroup_Watermark_Session{}
	return t.Session
}

// GetBandwidth returns the value of the Bandwidth struct pointer
// from NokiaConf_Configure_Isa_VideoGroup_Watermark. If the receiver or the field Bandwidth is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) GetBandwidth() *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth {
	if t != nil && t.Bandwidth != nil {
		return t.Bandwidth
	}
	return nil
}

// GetSession returns the value of the Session struct pointer
// from NokiaConf_Configure_Isa_VideoGroup_Watermark. If the receiver or the field Session is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) GetSession() *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session {
	if t != nil && t.Session != nil {
		return t.Session
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup_Watermark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Bandwidth.PopulateDefaults()
	t.Session.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup_Watermark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup_Watermark.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth represents the /nokia-conf/configure/isa/video-group/watermark/bandwidth YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth struct {
	Fcc   *uint32 `path:"fcc" module:"nokia-conf"`
	Ret   *uint32 `path:"ret" module:"nokia-conf"`
	Total *uint32 `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) IsYANGGoStruct() {}

// GetFcc retrieves the value of the leaf Fcc from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fcc is set, it can
// safely use t.GetFcc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fcc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) GetFcc() uint32 {
	if t == nil || t.Fcc == nil {
		return 90
	}
	return *t.Fcc
}

// GetRet retrieves the value of the leaf Ret from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ret is set, it can
// safely use t.GetRet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) GetRet() uint32 {
	if t == nil || t.Ret == nil {
		return 90
	}
	return *t.Ret
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) GetTotal() uint32 {
	if t == nil || t.Total == nil {
		return 90
	}
	return *t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fcc == nil {
		var v uint32 = 90
		t.Fcc = &v
	}
	if t.Ret == nil {
		var v uint32 = 90
		t.Ret = &v
	}
	if t.Total == nil {
		var v uint32 = 90
		t.Total = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark_Bandwidth) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_VideoGroup_Watermark_Session represents the /nokia-conf/configure/isa/video-group/watermark/session YANG schema element.
type NokiaConf_Configure_Isa_VideoGroup_Watermark_Session struct {
	Fcc   *uint32 `path:"fcc" module:"nokia-conf"`
	Ret   *uint32 `path:"ret" module:"nokia-conf"`
	Total *uint32 `path:"total" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_VideoGroup_Watermark_Session implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) IsYANGGoStruct() {}

// GetFcc retrieves the value of the leaf Fcc from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Fcc is set, it can
// safely use t.GetFcc() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Fcc == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) GetFcc() uint32 {
	if t == nil || t.Fcc == nil {
		return 90
	}
	return *t.Fcc
}

// GetRet retrieves the value of the leaf Ret from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ret is set, it can
// safely use t.GetRet() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ret == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) GetRet() uint32 {
	if t == nil || t.Ret == nil {
		return 90
	}
	return *t.Ret
}

// GetTotal retrieves the value of the leaf Total from the NokiaConf_Configure_Isa_VideoGroup_Watermark_Session
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Total is set, it can
// safely use t.GetTotal() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Total == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) GetTotal() uint32 {
	if t == nil || t.Total == nil {
		return 90
	}
	return *t.Total
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_VideoGroup_Watermark_Session
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Fcc == nil {
		var v uint32 = 90
		t.Fcc = &v
	}
	if t.Ret == nil {
		var v uint32 = 90
		t.Ret = &v
	}
	if t.Total == nil {
		var v uint32 = 90
		t.Total = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_VideoGroup_Watermark_Session"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_VideoGroup_Watermark_Session.
func (*NokiaConf_Configure_Isa_VideoGroup_Watermark_Session) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup represents the /nokia-conf/configure/isa/wlan-gw-group YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup struct {
	ActiveIomLimit     *uint32                                                                                  `path:"active-iom-limit" module:"nokia-conf"`
	ActiveMdaLimit     *uint32                                                                                  `path:"active-mda-limit" module:"nokia-conf"`
	AdminState         E_NokiaTypesSros_AdminState                                                              `path:"admin-state" module:"nokia-conf"`
	ApplyGroups        []string                                                                                 `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                                                 `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                                                  `path:"description" module:"nokia-conf"`
	DistributedSubMgmt *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt                                  `path:"distributed-sub-mgmt" module:"nokia-conf"`
	Esa                map[NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key]*NokiaConf_Configure_Isa_WlanGwGroup_Esa `path:"esa" module:"nokia-conf"`
	Id                 *uint32                                                                                  `path:"id" module:"nokia-conf"`
	Iom                map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup_Iom                                      `path:"iom" module:"nokia-conf"`
	Mda                map[string]*NokiaConf_Configure_Isa_WlanGwGroup_Mda                                      `path:"mda" module:"nokia-conf"`
	Nat                *NokiaConf_Configure_Isa_WlanGwGroup_Nat                                                 `path:"nat" module:"nokia-conf"`
	PortPolicy         *string                                                                                  `path:"port-policy" module:"nokia-conf"`
	Redundancy         E_NokiaConf_Configure_Isa_WlanGwGroup_Redundancy                                         `path:"redundancy" module:"nokia-conf"`
	ScalingProfile     E_NokiaTypesSros_IsaScalingProfile                                                       `path:"scaling-profile" module:"nokia-conf"`
	TunnelPortPolicy   *string                                                                                  `path:"tunnel-port-policy" module:"nokia-conf"`
	Watermarks         *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks                                          `path:"watermarks" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup) IsYANGGoStruct() {}

// NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key represents the key for list Esa of element /nokia-conf/configure/isa/wlan-gw-group.
type NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key struct {
	EsaId int32 `path:"esa-id"`
	Vm    int32 `path:"vm"`
}

// NewEsa creates a new entry in the Esa list of the
// NokiaConf_Configure_Isa_WlanGwGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) NewEsa(EsaId int32, Vm int32) (*NokiaConf_Configure_Isa_WlanGwGroup_Esa, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key]*NokiaConf_Configure_Isa_WlanGwGroup_Esa)
	}

	key := NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Esa[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Esa", key)
	}

	t.Esa[key] = &NokiaConf_Configure_Isa_WlanGwGroup_Esa{
		EsaId: &EsaId,
		Vm:    &Vm,
	}

	return t.Esa[key], nil
}

// RenameEsa renames an entry in the list Esa within
// the NokiaConf_Configure_Isa_WlanGwGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) RenameEsa(oldK, newK NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key) error {
	if _, ok := t.Esa[newK]; ok {
		return fmt.Errorf("key %v already exists in Esa", newK)
	}

	e, ok := t.Esa[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Esa", oldK)
	}
	e.EsaId = &newK.EsaId
	e.Vm = &newK.Vm

	t.Esa[newK] = e
	delete(t.Esa, oldK)
	return nil
}

// GetOrCreateEsa retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_WlanGwGroup_Esa {

	key := NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if v, ok := t.Esa[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewEsa(EsaId, Vm)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateEsa got unexpected error: %v", err))
	}
	return v
}

// GetEsa retrieves the value with the specified key from
// the Esa map field of NokiaConf_Configure_Isa_WlanGwGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetEsa(EsaId int32, Vm int32) *NokiaConf_Configure_Isa_WlanGwGroup_Esa {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	if lm, ok := t.Esa[key]; ok {
		return lm
	}
	return nil
}

// DeleteEsa deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) DeleteEsa(EsaId int32, Vm int32) {
	key := NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key{
		EsaId: EsaId,
		Vm:    Vm,
	}

	delete(t.Esa, key)
}

// AppendEsa appends the supplied NokiaConf_Configure_Isa_WlanGwGroup_Esa struct to the
// list Esa of NokiaConf_Configure_Isa_WlanGwGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_WlanGwGroup_Esa already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) AppendEsa(v *NokiaConf_Configure_Isa_WlanGwGroup_Esa) error {
	if v.EsaId == nil {
		return fmt.Errorf("invalid nil key for EsaId")
	}

	if v.Vm == nil {
		return fmt.Errorf("invalid nil key for Vm")
	}

	key := NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key{
		EsaId: *v.EsaId,
		Vm:    *v.Vm,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Esa == nil {
		t.Esa = make(map[NokiaConf_Configure_Isa_WlanGwGroup_Esa_Key]*NokiaConf_Configure_Isa_WlanGwGroup_Esa)
	}

	if _, ok := t.Esa[key]; ok {
		return fmt.Errorf("duplicate key for list Esa %v", key)
	}

	t.Esa[key] = v
	return nil
}

// NewIom creates a new entry in the Iom list of the
// NokiaConf_Configure_Isa_WlanGwGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) NewIom(SlotNumber uint32) (*NokiaConf_Configure_Isa_WlanGwGroup_Iom, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Iom == nil {
		t.Iom = make(map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup_Iom)
	}

	key := SlotNumber

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Iom[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Iom", key)
	}

	t.Iom[key] = &NokiaConf_Configure_Isa_WlanGwGroup_Iom{
		SlotNumber: &SlotNumber,
	}

	return t.Iom[key], nil
}

// RenameIom renames an entry in the list Iom within
// the NokiaConf_Configure_Isa_WlanGwGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) RenameIom(oldK, newK uint32) error {
	if _, ok := t.Iom[newK]; ok {
		return fmt.Errorf("key %v already exists in Iom", newK)
	}

	e, ok := t.Iom[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Iom", oldK)
	}
	e.SlotNumber = &newK

	t.Iom[newK] = e
	delete(t.Iom, oldK)
	return nil
}

// GetOrCreateIom retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateIom(SlotNumber uint32) *NokiaConf_Configure_Isa_WlanGwGroup_Iom {

	key := SlotNumber

	if v, ok := t.Iom[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewIom(SlotNumber)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateIom got unexpected error: %v", err))
	}
	return v
}

// GetIom retrieves the value with the specified key from
// the Iom map field of NokiaConf_Configure_Isa_WlanGwGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetIom(SlotNumber uint32) *NokiaConf_Configure_Isa_WlanGwGroup_Iom {

	if t == nil {
		return nil
	}

	key := SlotNumber

	if lm, ok := t.Iom[key]; ok {
		return lm
	}
	return nil
}

// DeleteIom deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) DeleteIom(SlotNumber uint32) {
	key := SlotNumber

	delete(t.Iom, key)
}

// AppendIom appends the supplied NokiaConf_Configure_Isa_WlanGwGroup_Iom struct to the
// list Iom of NokiaConf_Configure_Isa_WlanGwGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_WlanGwGroup_Iom already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) AppendIom(v *NokiaConf_Configure_Isa_WlanGwGroup_Iom) error {
	if v.SlotNumber == nil {
		return fmt.Errorf("invalid nil key received for SlotNumber")
	}

	key := *v.SlotNumber

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Iom == nil {
		t.Iom = make(map[uint32]*NokiaConf_Configure_Isa_WlanGwGroup_Iom)
	}

	if _, ok := t.Iom[key]; ok {
		return fmt.Errorf("duplicate key for list Iom %v", key)
	}

	t.Iom[key] = v
	return nil
}

// NewMda creates a new entry in the Mda list of the
// NokiaConf_Configure_Isa_WlanGwGroup struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) NewMda(MdaId string) (*NokiaConf_Configure_Isa_WlanGwGroup_Mda, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_WlanGwGroup_Mda)
	}

	key := MdaId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mda[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mda", key)
	}

	t.Mda[key] = &NokiaConf_Configure_Isa_WlanGwGroup_Mda{
		MdaId: &MdaId,
	}

	return t.Mda[key], nil
}

// RenameMda renames an entry in the list Mda within
// the NokiaConf_Configure_Isa_WlanGwGroup struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) RenameMda(oldK, newK string) error {
	if _, ok := t.Mda[newK]; ok {
		return fmt.Errorf("key %v already exists in Mda", newK)
	}

	e, ok := t.Mda[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mda", oldK)
	}
	e.MdaId = &newK

	t.Mda[newK] = e
	delete(t.Mda, oldK)
	return nil
}

// GetOrCreateMda retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateMda(MdaId string) *NokiaConf_Configure_Isa_WlanGwGroup_Mda {

	key := MdaId

	if v, ok := t.Mda[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMda(MdaId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMda got unexpected error: %v", err))
	}
	return v
}

// GetMda retrieves the value with the specified key from
// the Mda map field of NokiaConf_Configure_Isa_WlanGwGroup. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetMda(MdaId string) *NokiaConf_Configure_Isa_WlanGwGroup_Mda {

	if t == nil {
		return nil
	}

	key := MdaId

	if lm, ok := t.Mda[key]; ok {
		return lm
	}
	return nil
}

// DeleteMda deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) DeleteMda(MdaId string) {
	key := MdaId

	delete(t.Mda, key)
}

// AppendMda appends the supplied NokiaConf_Configure_Isa_WlanGwGroup_Mda struct to the
// list Mda of NokiaConf_Configure_Isa_WlanGwGroup. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_WlanGwGroup_Mda already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) AppendMda(v *NokiaConf_Configure_Isa_WlanGwGroup_Mda) error {
	if v.MdaId == nil {
		return fmt.Errorf("invalid nil key received for MdaId")
	}

	key := *v.MdaId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mda == nil {
		t.Mda = make(map[string]*NokiaConf_Configure_Isa_WlanGwGroup_Mda)
	}

	if _, ok := t.Mda[key]; ok {
		return fmt.Errorf("duplicate key for list Mda %v", key)
	}

	t.Mda[key] = v
	return nil
}

// GetOrCreateDistributedSubMgmt retrieves the value of the DistributedSubMgmt field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateDistributedSubMgmt() *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt {
	if t.DistributedSubMgmt != nil {
		return t.DistributedSubMgmt
	}
	t.DistributedSubMgmt = &NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt{}
	return t.DistributedSubMgmt
}

// GetOrCreateNat retrieves the value of the Nat field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateNat() *NokiaConf_Configure_Isa_WlanGwGroup_Nat {
	if t.Nat != nil {
		return t.Nat
	}
	t.Nat = &NokiaConf_Configure_Isa_WlanGwGroup_Nat{}
	return t.Nat
}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetOrCreateWatermarks() *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Isa_WlanGwGroup_Watermarks{}
	return t.Watermarks
}

// GetDistributedSubMgmt returns the value of the DistributedSubMgmt struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup. If the receiver or the field DistributedSubMgmt is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetDistributedSubMgmt() *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt {
	if t != nil && t.DistributedSubMgmt != nil {
		return t.DistributedSubMgmt
	}
	return nil
}

// GetNat returns the value of the Nat struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup. If the receiver or the field Nat is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetNat() *NokiaConf_Configure_Isa_WlanGwGroup_Nat {
	if t != nil && t.Nat != nil {
		return t.Nat
	}
	return nil
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetWatermarks() *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetActiveIomLimit retrieves the value of the leaf ActiveIomLimit from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveIomLimit is set, it can
// safely use t.GetActiveIomLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveIomLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetActiveIomLimit() uint32 {
	if t == nil || t.ActiveIomLimit == nil {
		return 0
	}
	return *t.ActiveIomLimit
}

// GetActiveMdaLimit retrieves the value of the leaf ActiveMdaLimit from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ActiveMdaLimit is set, it can
// safely use t.GetActiveMdaLimit() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ActiveMdaLimit == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetActiveMdaLimit() uint32 {
	if t == nil || t.ActiveMdaLimit == nil {
		return 0
	}
	return *t.ActiveMdaLimit
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetId retrieves the value of the leaf Id from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Id is set, it can
// safely use t.GetId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Id == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetId() uint32 {
	if t == nil || t.Id == nil {
		return 0
	}
	return *t.Id
}

// GetPortPolicy retrieves the value of the leaf PortPolicy from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortPolicy is set, it can
// safely use t.GetPortPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetPortPolicy() string {
	if t == nil || t.PortPolicy == nil {
		return ""
	}
	return *t.PortPolicy
}

// GetRedundancy retrieves the value of the leaf Redundancy from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Redundancy is set, it can
// safely use t.GetRedundancy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Redundancy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetRedundancy() E_NokiaConf_Configure_Isa_WlanGwGroup_Redundancy {
	if t == nil || t.Redundancy == 0 {
		return NokiaConf_Configure_Isa_WlanGwGroup_Redundancy_iom
	}
	return t.Redundancy
}

// GetScalingProfile retrieves the value of the leaf ScalingProfile from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ScalingProfile is set, it can
// safely use t.GetScalingProfile() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ScalingProfile == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetScalingProfile() E_NokiaTypesSros_IsaScalingProfile {
	if t == nil || t.ScalingProfile == 0 {
		return NokiaTypesSros_IsaScalingProfile_profile1
	}
	return t.ScalingProfile
}

// GetTunnelPortPolicy retrieves the value of the leaf TunnelPortPolicy from the NokiaConf_Configure_Isa_WlanGwGroup
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TunnelPortPolicy is set, it can
// safely use t.GetTunnelPortPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TunnelPortPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) GetTunnelPortPolicy() string {
	if t == nil || t.TunnelPortPolicy == nil {
		return ""
	}
	return *t.TunnelPortPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Redundancy == 0 {
		t.Redundancy = NokiaConf_Configure_Isa_WlanGwGroup_Redundancy_iom
	}
	if t.ScalingProfile == 0 {
		t.ScalingProfile = NokiaTypesSros_IsaScalingProfile_profile1
	}
	t.DistributedSubMgmt.PopulateDefaults()
	t.Nat.PopulateDefaults()
	t.Watermarks.PopulateDefaults()
	for _, e := range t.Esa {
		e.PopulateDefaults()
	}
	for _, e := range t.Iom {
		e.PopulateDefaults()
	}
	for _, e := range t.Mda {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_WlanGwGroup struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) ΛListKeyMap() (map[string]interface{}, error) {
	if t.Id == nil {
		return nil, fmt.Errorf("nil value for key Id")
	}

	return map[string]interface{}{
		"id": *t.Id,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup.
func (*NokiaConf_Configure_Isa_WlanGwGroup) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt represents the /nokia-conf/configure/isa/wlan-gw-group/distributed-sub-mgmt YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt struct {
	IsaAaGroup                  *uint32 `path:"isa-aa-group" module:"nokia-conf"`
	IsaAaOversubscriptionFactor *uint32 `path:"isa-aa-oversubscription-factor" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) IsYANGGoStruct() {}

// GetIsaAaGroup retrieves the value of the leaf IsaAaGroup from the NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaAaGroup is set, it can
// safely use t.GetIsaAaGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaAaGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) GetIsaAaGroup() uint32 {
	if t == nil || t.IsaAaGroup == nil {
		return 0
	}
	return *t.IsaAaGroup
}

// GetIsaAaOversubscriptionFactor retrieves the value of the leaf IsaAaOversubscriptionFactor from the NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IsaAaOversubscriptionFactor is set, it can
// safely use t.GetIsaAaOversubscriptionFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IsaAaOversubscriptionFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) GetIsaAaOversubscriptionFactor() uint32 {
	if t == nil || t.IsaAaOversubscriptionFactor == nil {
		return 1
	}
	return *t.IsaAaOversubscriptionFactor
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IsaAaOversubscriptionFactor == nil {
		var v uint32 = 1
		t.IsaAaOversubscriptionFactor = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt.
func (*NokiaConf_Configure_Isa_WlanGwGroup_DistributedSubMgmt) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Esa represents the /nokia-conf/configure/isa/wlan-gw-group/esa YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Esa struct {
	EsaId *int32 `path:"esa-id" module:"nokia-conf"`
	Vm    *int32 `path:"vm" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Esa implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Esa) IsYANGGoStruct() {}

// GetEsaId retrieves the value of the leaf EsaId from the NokiaConf_Configure_Isa_WlanGwGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EsaId is set, it can
// safely use t.GetEsaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EsaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) GetEsaId() int32 {
	if t == nil || t.EsaId == nil {
		return 0
	}
	return *t.EsaId
}

// GetVm retrieves the value of the leaf Vm from the NokiaConf_Configure_Isa_WlanGwGroup_Esa
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vm is set, it can
// safely use t.GetVm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) GetVm() int32 {
	if t == nil || t.Vm == nil {
		return 0
	}
	return *t.Vm
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Esa
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_WlanGwGroup_Esa struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) ΛListKeyMap() (map[string]interface{}, error) {
	if t.EsaId == nil {
		return nil, fmt.Errorf("nil value for key EsaId")
	}

	if t.Vm == nil {
		return nil, fmt.Errorf("nil value for key Vm")
	}

	return map[string]interface{}{
		"esa-id": *t.EsaId,
		"vm":     *t.Vm,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Esa"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Esa) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Esa.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Esa) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Iom represents the /nokia-conf/configure/isa/wlan-gw-group/iom YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Iom struct {
	SlotNumber *uint32 `path:"slot-number" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Iom implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Iom) IsYANGGoStruct() {}

// GetSlotNumber retrieves the value of the leaf SlotNumber from the NokiaConf_Configure_Isa_WlanGwGroup_Iom
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SlotNumber is set, it can
// safely use t.GetSlotNumber() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SlotNumber == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) GetSlotNumber() uint32 {
	if t == nil || t.SlotNumber == nil {
		return 0
	}
	return *t.SlotNumber
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Iom
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_WlanGwGroup_Iom struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) ΛListKeyMap() (map[string]interface{}, error) {
	if t.SlotNumber == nil {
		return nil, fmt.Errorf("nil value for key SlotNumber")
	}

	return map[string]interface{}{
		"slot-number": *t.SlotNumber,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Iom"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Iom) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Iom.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Iom) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Mda represents the /nokia-conf/configure/isa/wlan-gw-group/mda YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Mda struct {
	MdaId *string `path:"mda-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Mda implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Mda) IsYANGGoStruct() {}

// GetMdaId retrieves the value of the leaf MdaId from the NokiaConf_Configure_Isa_WlanGwGroup_Mda
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdaId is set, it can
// safely use t.GetMdaId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdaId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) GetMdaId() string {
	if t == nil || t.MdaId == nil {
		return ""
	}
	return *t.MdaId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Mda
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_WlanGwGroup_Mda struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MdaId == nil {
		return nil, fmt.Errorf("nil value for key MdaId")
	}

	return map[string]interface{}{
		"mda-id": *t.MdaId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Mda"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Mda) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Mda.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Mda) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Nat represents the /nokia-conf/configure/isa/wlan-gw-group/nat YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Nat struct {
	Log                    *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log           `path:"log" module:"nokia-conf"`
	Lsn                    *bool                                                  `path:"lsn" module:"nokia-conf"`
	RadiusAccountingPolicy *string                                                `path:"radius-accounting-policy" module:"nokia-conf"`
	SessionLimits          *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits `path:"session-limits" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Nat implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat) IsYANGGoStruct() {}

// GetOrCreateLog retrieves the value of the Log field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetOrCreateLog() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log {
	if t.Log != nil {
		return t.Log
	}
	t.Log = &NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log{}
	return t.Log
}

// GetOrCreateSessionLimits retrieves the value of the SessionLimits field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetOrCreateSessionLimits() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits {
	if t.SessionLimits != nil {
		return t.SessionLimits
	}
	t.SessionLimits = &NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits{}
	return t.SessionLimits
}

// GetLog returns the value of the Log struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup_Nat. If the receiver or the field Log is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetLog() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log {
	if t != nil && t.Log != nil {
		return t.Log
	}
	return nil
}

// GetSessionLimits returns the value of the SessionLimits struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup_Nat. If the receiver or the field SessionLimits is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetSessionLimits() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits {
	if t != nil && t.SessionLimits != nil {
		return t.SessionLimits
	}
	return nil
}

// GetLsn retrieves the value of the leaf Lsn from the NokiaConf_Configure_Isa_WlanGwGroup_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Lsn is set, it can
// safely use t.GetLsn() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Lsn == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetLsn() bool {
	if t == nil || t.Lsn == nil {
		return true
	}
	return *t.Lsn
}

// GetRadiusAccountingPolicy retrieves the value of the leaf RadiusAccountingPolicy from the NokiaConf_Configure_Isa_WlanGwGroup_Nat
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RadiusAccountingPolicy is set, it can
// safely use t.GetRadiusAccountingPolicy() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RadiusAccountingPolicy == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) GetRadiusAccountingPolicy() string {
	if t == nil || t.RadiusAccountingPolicy == nil {
		return ""
	}
	return *t.RadiusAccountingPolicy
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Nat
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Lsn == nil {
		var v bool = true
		t.Lsn = &v
	}
	t.Log.PopulateDefaults()
	t.SessionLimits.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Nat"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Nat.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log represents the /nokia-conf/configure/isa/wlan-gw-group/nat/log YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log struct {
	SuppressLsnEvents        *bool `path:"suppress-lsn-events" module:"nokia-conf"`
	SuppressLsnSubBlocksFree *bool `path:"suppress-lsn-sub-blocks-free" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) IsYANGGoStruct() {}

// GetSuppressLsnEvents retrieves the value of the leaf SuppressLsnEvents from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLsnEvents is set, it can
// safely use t.GetSuppressLsnEvents() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLsnEvents == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) GetSuppressLsnEvents() bool {
	if t == nil || t.SuppressLsnEvents == nil {
		return true
	}
	return *t.SuppressLsnEvents
}

// GetSuppressLsnSubBlocksFree retrieves the value of the leaf SuppressLsnSubBlocksFree from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SuppressLsnSubBlocksFree is set, it can
// safely use t.GetSuppressLsnSubBlocksFree() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SuppressLsnSubBlocksFree == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) GetSuppressLsnSubBlocksFree() bool {
	if t == nil || t.SuppressLsnSubBlocksFree == nil {
		return false
	}
	return *t.SuppressLsnSubBlocksFree
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SuppressLsnEvents == nil {
		var v bool = true
		t.SuppressLsnEvents = &v
	}
	if t.SuppressLsnSubBlocksFree == nil {
		var v bool = false
		t.SuppressLsnSubBlocksFree = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_Log) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits represents the /nokia-conf/configure/isa/wlan-gw-group/nat/session-limits YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits struct {
	Reserved     *uint32                                                           `path:"reserved" module:"nokia-conf"`
	UpnpMappings *uint32                                                           `path:"upnp-mappings" module:"nokia-conf"`
	Watermarks   *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks `path:"watermarks" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) IsYANGGoStruct() {}

// GetOrCreateWatermarks retrieves the value of the Watermarks field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) GetOrCreateWatermarks() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks {
	if t.Watermarks != nil {
		return t.Watermarks
	}
	t.Watermarks = &NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks{}
	return t.Watermarks
}

// GetWatermarks returns the value of the Watermarks struct pointer
// from NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits. If the receiver or the field Watermarks is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) GetWatermarks() *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks {
	if t != nil && t.Watermarks != nil {
		return t.Watermarks
	}
	return nil
}

// GetReserved retrieves the value of the leaf Reserved from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Reserved is set, it can
// safely use t.GetReserved() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Reserved == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) GetReserved() uint32 {
	if t == nil || t.Reserved == nil {
		return 0
	}
	return *t.Reserved
}

// GetUpnpMappings retrieves the value of the leaf UpnpMappings from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if UpnpMappings is set, it can
// safely use t.GetUpnpMappings() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.UpnpMappings == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) GetUpnpMappings() uint32 {
	if t == nil || t.UpnpMappings == nil {
		return 524288
	}
	return *t.UpnpMappings
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.UpnpMappings == nil {
		var v uint32 = 524288
		t.UpnpMappings = &v
	}
	t.Watermarks.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks represents the /nokia-conf/configure/isa/wlan-gw-group/nat/session-limits/watermarks YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks struct {
	High *uint32 `path:"high" module:"nokia-conf"`
	Low  *uint32 `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) IsYANGGoStruct() {}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Nat_SessionLimits_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Watermarks represents the /nokia-conf/configure/isa/wlan-gw-group/watermarks YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Watermarks struct {
	Mark map[E_NokiaTypesIsa_WlanGwWatermarkEntity]*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark `path:"mark" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Watermarks implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) IsYANGGoStruct() {}

// NewMark creates a new entry in the Mark list of the
// NokiaConf_Configure_Isa_WlanGwGroup_Watermarks struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) NewMark(Entity E_NokiaTypesIsa_WlanGwWatermarkEntity) (*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mark == nil {
		t.Mark = make(map[E_NokiaTypesIsa_WlanGwWatermarkEntity]*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark)
	}

	key := Entity

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mark[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mark", key)
	}

	t.Mark[key] = &NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark{
		Entity: Entity,
	}

	return t.Mark[key], nil
}

// RenameMark renames an entry in the list Mark within
// the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) RenameMark(oldK, newK E_NokiaTypesIsa_WlanGwWatermarkEntity) error {
	if _, ok := t.Mark[newK]; ok {
		return fmt.Errorf("key %v already exists in Mark", newK)
	}

	e, ok := t.Mark[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mark", oldK)
	}
	e.Entity = newK

	t.Mark[newK] = e
	delete(t.Mark, oldK)
	return nil
}

// GetOrCreateMark retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup_Watermarks. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) GetOrCreateMark(Entity E_NokiaTypesIsa_WlanGwWatermarkEntity) *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark {

	key := Entity

	if v, ok := t.Mark[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMark(Entity)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMark got unexpected error: %v", err))
	}
	return v
}

// GetMark retrieves the value with the specified key from
// the Mark map field of NokiaConf_Configure_Isa_WlanGwGroup_Watermarks. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) GetMark(Entity E_NokiaTypesIsa_WlanGwWatermarkEntity) *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark {

	if t == nil {
		return nil
	}

	key := Entity

	if lm, ok := t.Mark[key]; ok {
		return lm
	}
	return nil
}

// DeleteMark deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Isa_WlanGwGroup_Watermarks. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) DeleteMark(Entity E_NokiaTypesIsa_WlanGwWatermarkEntity) {
	key := Entity

	delete(t.Mark, key)
}

// AppendMark appends the supplied NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark struct to the
// list Mark of NokiaConf_Configure_Isa_WlanGwGroup_Watermarks. If the key value(s) specified in
// the supplied NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) AppendMark(v *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) error {
	key := v.Entity

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mark == nil {
		t.Mark = make(map[E_NokiaTypesIsa_WlanGwWatermarkEntity]*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark)
	}

	if _, ok := t.Mark[key]; ok {
		return fmt.Errorf("duplicate key for list Mark %v", key)
	}

	t.Mark[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mark {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Watermarks"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Watermarks.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark represents the /nokia-conf/configure/isa/wlan-gw-group/watermarks/mark YANG schema element.
type NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark struct {
	ApplyGroups        []string                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Entity             E_NokiaTypesIsa_WlanGwWatermarkEntity `path:"entity" module:"nokia-conf"`
	High               *uint32                               `path:"high" module:"nokia-conf"`
	Low                *uint32                               `path:"low" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetEntity retrieves the value of the leaf Entity from the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Entity is set, it can
// safely use t.GetEntity() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Entity == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) GetEntity() E_NokiaTypesIsa_WlanGwWatermarkEntity {
	if t == nil || t.Entity == 0 {
		return 0
	}
	return t.Entity
}

// GetHigh retrieves the value of the leaf High from the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if High is set, it can
// safely use t.GetHigh() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.High == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) GetHigh() uint32 {
	if t == nil || t.High == nil {
		return 0
	}
	return *t.High
}

// GetLow retrieves the value of the leaf Low from the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Low is set, it can
// safely use t.GetLow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Low == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) GetLow() uint32 {
	if t == nil || t.Low == nil {
		return 0
	}
	return *t.Low
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) ΛListKeyMap() (map[string]interface{}, error) {

	return map[string]interface{}{
		"entity": t.Entity,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark.
func (*NokiaConf_Configure_Isa_WlanGwGroup_Watermarks_Mark) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag represents the /nokia-conf/configure/lag YANG schema element.
type NokiaConf_Configure_Lag struct {
	Access                *NokiaConf_Configure_Lag_Access                   `path:"access" module:"nokia-conf"`
	AdaptiveLoadBalancing *NokiaConf_Configure_Lag_AdaptiveLoadBalancing    `path:"adaptive-load-balancing" module:"nokia-conf" yangPresence:"true"`
	AdminState            E_NokiaTypesSros_AdminState                       `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                          `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                          `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdLiveness           *NokiaConf_Configure_Lag_BfdLiveness              `path:"bfd-liveness" module:"nokia-conf"`
	Description           *string                                           `path:"description" module:"nokia-conf"`
	DynamicCost           *bool                                             `path:"dynamic-cost" module:"nokia-conf"`
	EncapType             E_NokiaConf_Configure_Lag_EncapType               `path:"encap-type" module:"nokia-conf"`
	EthCfm                *NokiaConf_Configure_Lag_EthCfm                   `path:"eth-cfm" module:"nokia-conf"`
	HashWeightThreshold   *NokiaConf_Configure_Lag_HashWeightThreshold      `path:"hash-weight-threshold" module:"nokia-conf"`
	HoldTimeDown          *uint32                                           `path:"hold-time-down" module:"nokia-conf"`
	Lacp                  *NokiaConf_Configure_Lag_Lacp                     `path:"lacp" module:"nokia-conf" yangPresence:"true"`
	LacpMuxControl        E_NokiaConf_Configure_Lag_LacpMuxControl          `path:"lacp-mux-control" module:"nokia-conf"`
	LacpXmitInterval      E_NokiaConf_Configure_Lag_LacpXmitInterval        `path:"lacp-xmit-interval" module:"nokia-conf"`
	LacpXmitStdby         *bool                                             `path:"lacp-xmit-stdby" module:"nokia-conf"`
	LagBundlePool         *uint32                                           `path:"lag-bundle-pool" module:"nokia-conf"`
	LagName               *string                                           `path:"lag-name" module:"nokia-conf"`
	LinkMapProfile        map[int32]*NokiaConf_Configure_Lag_LinkMapProfile `path:"link-map-profile" module:"nokia-conf"`
	MacAddress            *string                                           `path:"mac-address" module:"nokia-conf"`
	MaxPorts              *uint32                                           `path:"max-ports" module:"nokia-conf"`
	Mode                  E_NokiaTypesPort_Mode                             `path:"mode" module:"nokia-conf"`
	MonitorOperGroup      *string                                           `path:"monitor-oper-group" module:"nokia-conf"`
	PerLinkHash           *NokiaConf_Configure_Lag_PerLinkHash              `path:"per-link-hash" module:"nokia-conf" yangPresence:"true"`
	Port                  map[string]*NokiaConf_Configure_Lag_Port          `path:"port" module:"nokia-conf"`
	PortThreshold         *NokiaConf_Configure_Lag_PortThreshold            `path:"port-threshold" module:"nokia-conf"`
	PortType              E_NokiaConf_Configure_Lag_PortType                `path:"port-type" module:"nokia-conf"`
	PortWeightSpeed       *uint32                                           `path:"port-weight-speed" module:"nokia-conf"`
	Scheduler             *NokiaConf_Configure_Lag_Scheduler                `path:"scheduler" module:"nokia-conf"`
	SelectionCriteria     *NokiaConf_Configure_Lag_SelectionCriteria        `path:"selection-criteria" module:"nokia-conf"`
	StandbySignaling      E_NokiaConf_Configure_Lag_StandbySignaling        `path:"standby-signaling" module:"nokia-conf"`
	WeightThreshold       *NokiaConf_Configure_Lag_WeightThreshold          `path:"weight-threshold" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag) IsYANGGoStruct() {}

// NewLinkMapProfile creates a new entry in the LinkMapProfile list of the
// NokiaConf_Configure_Lag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Lag) NewLinkMapProfile(LinkMapProfileId int32) (*NokiaConf_Configure_Lag_LinkMapProfile, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkMapProfile == nil {
		t.LinkMapProfile = make(map[int32]*NokiaConf_Configure_Lag_LinkMapProfile)
	}

	key := LinkMapProfileId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.LinkMapProfile[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list LinkMapProfile", key)
	}

	t.LinkMapProfile[key] = &NokiaConf_Configure_Lag_LinkMapProfile{
		LinkMapProfileId: &LinkMapProfileId,
	}

	return t.LinkMapProfile[key], nil
}

// RenameLinkMapProfile renames an entry in the list LinkMapProfile within
// the NokiaConf_Configure_Lag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Lag) RenameLinkMapProfile(oldK, newK int32) error {
	if _, ok := t.LinkMapProfile[newK]; ok {
		return fmt.Errorf("key %v already exists in LinkMapProfile", newK)
	}

	e, ok := t.LinkMapProfile[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in LinkMapProfile", oldK)
	}
	e.LinkMapProfileId = &newK

	t.LinkMapProfile[newK] = e
	delete(t.LinkMapProfile, oldK)
	return nil
}

// GetOrCreateLinkMapProfile retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Lag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Lag) GetOrCreateLinkMapProfile(LinkMapProfileId int32) *NokiaConf_Configure_Lag_LinkMapProfile {

	key := LinkMapProfileId

	if v, ok := t.LinkMapProfile[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLinkMapProfile(LinkMapProfileId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLinkMapProfile got unexpected error: %v", err))
	}
	return v
}

// GetLinkMapProfile retrieves the value with the specified key from
// the LinkMapProfile map field of NokiaConf_Configure_Lag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Lag) GetLinkMapProfile(LinkMapProfileId int32) *NokiaConf_Configure_Lag_LinkMapProfile {

	if t == nil {
		return nil
	}

	key := LinkMapProfileId

	if lm, ok := t.LinkMapProfile[key]; ok {
		return lm
	}
	return nil
}

// DeleteLinkMapProfile deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Lag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Lag) DeleteLinkMapProfile(LinkMapProfileId int32) {
	key := LinkMapProfileId

	delete(t.LinkMapProfile, key)
}

// AppendLinkMapProfile appends the supplied NokiaConf_Configure_Lag_LinkMapProfile struct to the
// list LinkMapProfile of NokiaConf_Configure_Lag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Lag_LinkMapProfile already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Lag) AppendLinkMapProfile(v *NokiaConf_Configure_Lag_LinkMapProfile) error {
	if v.LinkMapProfileId == nil {
		return fmt.Errorf("invalid nil key received for LinkMapProfileId")
	}

	key := *v.LinkMapProfileId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.LinkMapProfile == nil {
		t.LinkMapProfile = make(map[int32]*NokiaConf_Configure_Lag_LinkMapProfile)
	}

	if _, ok := t.LinkMapProfile[key]; ok {
		return fmt.Errorf("duplicate key for list LinkMapProfile %v", key)
	}

	t.LinkMapProfile[key] = v
	return nil
}

// NewPort creates a new entry in the Port list of the
// NokiaConf_Configure_Lag struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Lag) NewPort(PortId string) (*NokiaConf_Configure_Lag_Port, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Lag_Port)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Port[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Port", key)
	}

	t.Port[key] = &NokiaConf_Configure_Lag_Port{
		PortId: &PortId,
	}

	return t.Port[key], nil
}

// RenamePort renames an entry in the list Port within
// the NokiaConf_Configure_Lag struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Lag) RenamePort(oldK, newK string) error {
	if _, ok := t.Port[newK]; ok {
		return fmt.Errorf("key %v already exists in Port", newK)
	}

	e, ok := t.Port[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Port", oldK)
	}
	e.PortId = &newK

	t.Port[newK] = e
	delete(t.Port, oldK)
	return nil
}

// GetOrCreatePort retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Lag. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Lag) GetOrCreatePort(PortId string) *NokiaConf_Configure_Lag_Port {

	key := PortId

	if v, ok := t.Port[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewPort(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreatePort got unexpected error: %v", err))
	}
	return v
}

// GetPort retrieves the value with the specified key from
// the Port map field of NokiaConf_Configure_Lag. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Lag) GetPort(PortId string) *NokiaConf_Configure_Lag_Port {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Port[key]; ok {
		return lm
	}
	return nil
}

// DeletePort deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Lag. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Lag) DeletePort(PortId string) {
	key := PortId

	delete(t.Port, key)
}

// AppendPort appends the supplied NokiaConf_Configure_Lag_Port struct to the
// list Port of NokiaConf_Configure_Lag. If the key value(s) specified in
// the supplied NokiaConf_Configure_Lag_Port already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Lag) AppendPort(v *NokiaConf_Configure_Lag_Port) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Port == nil {
		t.Port = make(map[string]*NokiaConf_Configure_Lag_Port)
	}

	if _, ok := t.Port[key]; ok {
		return fmt.Errorf("duplicate key for list Port %v", key)
	}

	t.Port[key] = v
	return nil
}

// GetOrCreateAccess retrieves the value of the Access field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateAccess() *NokiaConf_Configure_Lag_Access {
	if t.Access != nil {
		return t.Access
	}
	t.Access = &NokiaConf_Configure_Lag_Access{}
	return t.Access
}

// GetOrCreateAdaptiveLoadBalancing retrieves the value of the AdaptiveLoadBalancing field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateAdaptiveLoadBalancing() *NokiaConf_Configure_Lag_AdaptiveLoadBalancing {
	if t.AdaptiveLoadBalancing != nil {
		return t.AdaptiveLoadBalancing
	}
	t.AdaptiveLoadBalancing = &NokiaConf_Configure_Lag_AdaptiveLoadBalancing{}
	return t.AdaptiveLoadBalancing
}

// GetOrCreateBfdLiveness retrieves the value of the BfdLiveness field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateBfdLiveness() *NokiaConf_Configure_Lag_BfdLiveness {
	if t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	t.BfdLiveness = &NokiaConf_Configure_Lag_BfdLiveness{}
	return t.BfdLiveness
}

// GetOrCreateEthCfm retrieves the value of the EthCfm field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateEthCfm() *NokiaConf_Configure_Lag_EthCfm {
	if t.EthCfm != nil {
		return t.EthCfm
	}
	t.EthCfm = &NokiaConf_Configure_Lag_EthCfm{}
	return t.EthCfm
}

// GetOrCreateHashWeightThreshold retrieves the value of the HashWeightThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateHashWeightThreshold() *NokiaConf_Configure_Lag_HashWeightThreshold {
	if t.HashWeightThreshold != nil {
		return t.HashWeightThreshold
	}
	t.HashWeightThreshold = &NokiaConf_Configure_Lag_HashWeightThreshold{}
	return t.HashWeightThreshold
}

// GetOrCreateLacp retrieves the value of the Lacp field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateLacp() *NokiaConf_Configure_Lag_Lacp {
	if t.Lacp != nil {
		return t.Lacp
	}
	t.Lacp = &NokiaConf_Configure_Lag_Lacp{}
	return t.Lacp
}

// GetOrCreatePerLinkHash retrieves the value of the PerLinkHash field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreatePerLinkHash() *NokiaConf_Configure_Lag_PerLinkHash {
	if t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	t.PerLinkHash = &NokiaConf_Configure_Lag_PerLinkHash{}
	return t.PerLinkHash
}

// GetOrCreatePortThreshold retrieves the value of the PortThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreatePortThreshold() *NokiaConf_Configure_Lag_PortThreshold {
	if t.PortThreshold != nil {
		return t.PortThreshold
	}
	t.PortThreshold = &NokiaConf_Configure_Lag_PortThreshold{}
	return t.PortThreshold
}

// GetOrCreateScheduler retrieves the value of the Scheduler field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateScheduler() *NokiaConf_Configure_Lag_Scheduler {
	if t.Scheduler != nil {
		return t.Scheduler
	}
	t.Scheduler = &NokiaConf_Configure_Lag_Scheduler{}
	return t.Scheduler
}

// GetOrCreateSelectionCriteria retrieves the value of the SelectionCriteria field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateSelectionCriteria() *NokiaConf_Configure_Lag_SelectionCriteria {
	if t.SelectionCriteria != nil {
		return t.SelectionCriteria
	}
	t.SelectionCriteria = &NokiaConf_Configure_Lag_SelectionCriteria{}
	return t.SelectionCriteria
}

// GetOrCreateWeightThreshold retrieves the value of the WeightThreshold field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag) GetOrCreateWeightThreshold() *NokiaConf_Configure_Lag_WeightThreshold {
	if t.WeightThreshold != nil {
		return t.WeightThreshold
	}
	t.WeightThreshold = &NokiaConf_Configure_Lag_WeightThreshold{}
	return t.WeightThreshold
}

// GetAccess returns the value of the Access struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field Access is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetAccess() *NokiaConf_Configure_Lag_Access {
	if t != nil && t.Access != nil {
		return t.Access
	}
	return nil
}

// GetAdaptiveLoadBalancing returns the value of the AdaptiveLoadBalancing struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field AdaptiveLoadBalancing is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetAdaptiveLoadBalancing() *NokiaConf_Configure_Lag_AdaptiveLoadBalancing {
	if t != nil && t.AdaptiveLoadBalancing != nil {
		return t.AdaptiveLoadBalancing
	}
	return nil
}

// GetBfdLiveness returns the value of the BfdLiveness struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field BfdLiveness is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetBfdLiveness() *NokiaConf_Configure_Lag_BfdLiveness {
	if t != nil && t.BfdLiveness != nil {
		return t.BfdLiveness
	}
	return nil
}

// GetEthCfm returns the value of the EthCfm struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field EthCfm is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetEthCfm() *NokiaConf_Configure_Lag_EthCfm {
	if t != nil && t.EthCfm != nil {
		return t.EthCfm
	}
	return nil
}

// GetHashWeightThreshold returns the value of the HashWeightThreshold struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field HashWeightThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetHashWeightThreshold() *NokiaConf_Configure_Lag_HashWeightThreshold {
	if t != nil && t.HashWeightThreshold != nil {
		return t.HashWeightThreshold
	}
	return nil
}

// GetLacp returns the value of the Lacp struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field Lacp is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetLacp() *NokiaConf_Configure_Lag_Lacp {
	if t != nil && t.Lacp != nil {
		return t.Lacp
	}
	return nil
}

// GetPerLinkHash returns the value of the PerLinkHash struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field PerLinkHash is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetPerLinkHash() *NokiaConf_Configure_Lag_PerLinkHash {
	if t != nil && t.PerLinkHash != nil {
		return t.PerLinkHash
	}
	return nil
}

// GetPortThreshold returns the value of the PortThreshold struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field PortThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetPortThreshold() *NokiaConf_Configure_Lag_PortThreshold {
	if t != nil && t.PortThreshold != nil {
		return t.PortThreshold
	}
	return nil
}

// GetScheduler returns the value of the Scheduler struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field Scheduler is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetScheduler() *NokiaConf_Configure_Lag_Scheduler {
	if t != nil && t.Scheduler != nil {
		return t.Scheduler
	}
	return nil
}

// GetSelectionCriteria returns the value of the SelectionCriteria struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field SelectionCriteria is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetSelectionCriteria() *NokiaConf_Configure_Lag_SelectionCriteria {
	if t != nil && t.SelectionCriteria != nil {
		return t.SelectionCriteria
	}
	return nil
}

// GetWeightThreshold returns the value of the WeightThreshold struct pointer
// from NokiaConf_Configure_Lag. If the receiver or the field WeightThreshold is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag) GetWeightThreshold() *NokiaConf_Configure_Lag_WeightThreshold {
	if t != nil && t.WeightThreshold != nil {
		return t.WeightThreshold
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetDynamicCost retrieves the value of the leaf DynamicCost from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if DynamicCost is set, it can
// safely use t.GetDynamicCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.DynamicCost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetDynamicCost() bool {
	if t == nil || t.DynamicCost == nil {
		return false
	}
	return *t.DynamicCost
}

// GetEncapType retrieves the value of the leaf EncapType from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if EncapType is set, it can
// safely use t.GetEncapType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.EncapType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetEncapType() E_NokiaConf_Configure_Lag_EncapType {
	if t == nil || t.EncapType == 0 {
		return 0
	}
	return t.EncapType
}

// GetHoldTimeDown retrieves the value of the leaf HoldTimeDown from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HoldTimeDown is set, it can
// safely use t.GetHoldTimeDown() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HoldTimeDown == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetHoldTimeDown() uint32 {
	if t == nil || t.HoldTimeDown == nil {
		return 0
	}
	return *t.HoldTimeDown
}

// GetLacpMuxControl retrieves the value of the leaf LacpMuxControl from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpMuxControl is set, it can
// safely use t.GetLacpMuxControl() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpMuxControl == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetLacpMuxControl() E_NokiaConf_Configure_Lag_LacpMuxControl {
	if t == nil || t.LacpMuxControl == 0 {
		return NokiaConf_Configure_Lag_LacpMuxControl_coupled
	}
	return t.LacpMuxControl
}

// GetLacpXmitInterval retrieves the value of the leaf LacpXmitInterval from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpXmitInterval is set, it can
// safely use t.GetLacpXmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpXmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetLacpXmitInterval() E_NokiaConf_Configure_Lag_LacpXmitInterval {
	if t == nil || t.LacpXmitInterval == 0 {
		return NokiaConf_Configure_Lag_LacpXmitInterval_fast
	}
	return t.LacpXmitInterval
}

// GetLacpXmitStdby retrieves the value of the leaf LacpXmitStdby from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LacpXmitStdby is set, it can
// safely use t.GetLacpXmitStdby() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LacpXmitStdby == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetLacpXmitStdby() bool {
	if t == nil || t.LacpXmitStdby == nil {
		return true
	}
	return *t.LacpXmitStdby
}

// GetLagBundlePool retrieves the value of the leaf LagBundlePool from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagBundlePool is set, it can
// safely use t.GetLagBundlePool() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagBundlePool == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetLagBundlePool() uint32 {
	if t == nil || t.LagBundlePool == nil {
		return 1
	}
	return *t.LagBundlePool
}

// GetLagName retrieves the value of the leaf LagName from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LagName is set, it can
// safely use t.GetLagName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LagName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetLagName() string {
	if t == nil || t.LagName == nil {
		return ""
	}
	return *t.LagName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return "00:00:00:00:00:00"
	}
	return *t.MacAddress
}

// GetMaxPorts retrieves the value of the leaf MaxPorts from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxPorts is set, it can
// safely use t.GetMaxPorts() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxPorts == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetMaxPorts() uint32 {
	if t == nil || t.MaxPorts == nil {
		return 32
	}
	return *t.MaxPorts
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetMode() E_NokiaTypesPort_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaTypesPort_Mode_network
	}
	return t.Mode
}

// GetMonitorOperGroup retrieves the value of the leaf MonitorOperGroup from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MonitorOperGroup is set, it can
// safely use t.GetMonitorOperGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MonitorOperGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetMonitorOperGroup() string {
	if t == nil || t.MonitorOperGroup == nil {
		return ""
	}
	return *t.MonitorOperGroup
}

// GetPortType retrieves the value of the leaf PortType from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortType is set, it can
// safely use t.GetPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetPortType() E_NokiaConf_Configure_Lag_PortType {
	if t == nil || t.PortType == 0 {
		return NokiaConf_Configure_Lag_PortType_standard
	}
	return t.PortType
}

// GetPortWeightSpeed retrieves the value of the leaf PortWeightSpeed from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortWeightSpeed is set, it can
// safely use t.GetPortWeightSpeed() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortWeightSpeed == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetPortWeightSpeed() uint32 {
	if t == nil || t.PortWeightSpeed == nil {
		return 0
	}
	return *t.PortWeightSpeed
}

// GetStandbySignaling retrieves the value of the leaf StandbySignaling from the NokiaConf_Configure_Lag
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if StandbySignaling is set, it can
// safely use t.GetStandbySignaling() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.StandbySignaling == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag) GetStandbySignaling() E_NokiaConf_Configure_Lag_StandbySignaling {
	if t == nil || t.StandbySignaling == 0 {
		return NokiaConf_Configure_Lag_StandbySignaling_lacp
	}
	return t.StandbySignaling
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.DynamicCost == nil {
		var v bool = false
		t.DynamicCost = &v
	}
	if t.LacpMuxControl == 0 {
		t.LacpMuxControl = NokiaConf_Configure_Lag_LacpMuxControl_coupled
	}
	if t.LacpXmitInterval == 0 {
		t.LacpXmitInterval = NokiaConf_Configure_Lag_LacpXmitInterval_fast
	}
	if t.LacpXmitStdby == nil {
		var v bool = true
		t.LacpXmitStdby = &v
	}
	if t.LagBundlePool == nil {
		var v uint32 = 1
		t.LagBundlePool = &v
	}
	if t.MacAddress == nil {
		var v string = "00:00:00:00:00:00"
		t.MacAddress = &v
	}
	if t.MaxPorts == nil {
		var v uint32 = 32
		t.MaxPorts = &v
	}
	if t.Mode == 0 {
		t.Mode = NokiaTypesPort_Mode_network
	}
	if t.PortType == 0 {
		t.PortType = NokiaConf_Configure_Lag_PortType_standard
	}
	if t.StandbySignaling == 0 {
		t.StandbySignaling = NokiaConf_Configure_Lag_StandbySignaling_lacp
	}
	t.Access.PopulateDefaults()
	t.AdaptiveLoadBalancing.PopulateDefaults()
	t.BfdLiveness.PopulateDefaults()
	t.EthCfm.PopulateDefaults()
	t.HashWeightThreshold.PopulateDefaults()
	t.Lacp.PopulateDefaults()
	t.PerLinkHash.PopulateDefaults()
	t.PortThreshold.PopulateDefaults()
	t.Scheduler.PopulateDefaults()
	t.SelectionCriteria.PopulateDefaults()
	t.WeightThreshold.PopulateDefaults()
	for _, e := range t.LinkMapProfile {
		e.PopulateDefaults()
	}
	for _, e := range t.Port {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Lag struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Lag) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LagName == nil {
		return nil, fmt.Errorf("nil value for key LagName")
	}

	return map[string]interface{}{
		"lag-name": *t.LagName,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag.
func (*NokiaConf_Configure_Lag) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_Access represents the /nokia-conf/configure/lag/access YANG schema element.
type NokiaConf_Configure_Lag_Access struct {
	AdaptQos         *NokiaConf_Configure_Lag_Access_AdaptQos `path:"adapt-qos" module:"nokia-conf"`
	Bandwidth        *uint64                                  `path:"bandwidth" module:"nokia-conf"`
	BookingFactor    *uint32                                  `path:"booking-factor" module:"nokia-conf"`
	PerFpEgrQueuing  *bool                                    `path:"per-fp-egr-queuing" module:"nokia-conf"`
	PerFpIngQueuing  *bool                                    `path:"per-fp-ing-queuing" module:"nokia-conf"`
	PerFpSapInstance *bool                                    `path:"per-fp-sap-instance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_Access implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_Access) IsYANGGoStruct() {}

// GetOrCreateAdaptQos retrieves the value of the AdaptQos field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_Access) GetOrCreateAdaptQos() *NokiaConf_Configure_Lag_Access_AdaptQos {
	if t.AdaptQos != nil {
		return t.AdaptQos
	}
	t.AdaptQos = &NokiaConf_Configure_Lag_Access_AdaptQos{}
	return t.AdaptQos
}

// GetAdaptQos returns the value of the AdaptQos struct pointer
// from NokiaConf_Configure_Lag_Access. If the receiver or the field AdaptQos is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_Access) GetAdaptQos() *NokiaConf_Configure_Lag_Access_AdaptQos {
	if t != nil && t.AdaptQos != nil {
		return t.AdaptQos
	}
	return nil
}

// GetBandwidth retrieves the value of the leaf Bandwidth from the NokiaConf_Configure_Lag_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Bandwidth is set, it can
// safely use t.GetBandwidth() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Bandwidth == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access) GetBandwidth() uint64 {
	if t == nil || t.Bandwidth == nil {
		return 0
	}
	return *t.Bandwidth
}

// GetBookingFactor retrieves the value of the leaf BookingFactor from the NokiaConf_Configure_Lag_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BookingFactor is set, it can
// safely use t.GetBookingFactor() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BookingFactor == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access) GetBookingFactor() uint32 {
	if t == nil || t.BookingFactor == nil {
		return 100
	}
	return *t.BookingFactor
}

// GetPerFpEgrQueuing retrieves the value of the leaf PerFpEgrQueuing from the NokiaConf_Configure_Lag_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerFpEgrQueuing is set, it can
// safely use t.GetPerFpEgrQueuing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerFpEgrQueuing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access) GetPerFpEgrQueuing() bool {
	if t == nil || t.PerFpEgrQueuing == nil {
		return false
	}
	return *t.PerFpEgrQueuing
}

// GetPerFpIngQueuing retrieves the value of the leaf PerFpIngQueuing from the NokiaConf_Configure_Lag_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerFpIngQueuing is set, it can
// safely use t.GetPerFpIngQueuing() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerFpIngQueuing == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access) GetPerFpIngQueuing() bool {
	if t == nil || t.PerFpIngQueuing == nil {
		return false
	}
	return *t.PerFpIngQueuing
}

// GetPerFpSapInstance retrieves the value of the leaf PerFpSapInstance from the NokiaConf_Configure_Lag_Access
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PerFpSapInstance is set, it can
// safely use t.GetPerFpSapInstance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PerFpSapInstance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access) GetPerFpSapInstance() bool {
	if t == nil || t.PerFpSapInstance == nil {
		return false
	}
	return *t.PerFpSapInstance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_Access
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_Access) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BookingFactor == nil {
		var v uint32 = 100
		t.BookingFactor = &v
	}
	if t.PerFpEgrQueuing == nil {
		var v bool = false
		t.PerFpEgrQueuing = &v
	}
	if t.PerFpIngQueuing == nil {
		var v bool = false
		t.PerFpIngQueuing = &v
	}
	if t.PerFpSapInstance == nil {
		var v bool = false
		t.PerFpSapInstance = &v
	}
	t.AdaptQos.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Access) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_Access"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Access) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_Access) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_Access.
func (*NokiaConf_Configure_Lag_Access) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_Access_AdaptQos represents the /nokia-conf/configure/lag/access/adapt-qos YANG schema element.
type NokiaConf_Configure_Lag_Access_AdaptQos struct {
	IncludeEgrHashCfg *bool                                          `path:"include-egr-hash-cfg" module:"nokia-conf"`
	Mode              E_NokiaConf_Configure_Lag_Access_AdaptQos_Mode `path:"mode" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_Access_AdaptQos implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_Access_AdaptQos) IsYANGGoStruct() {}

// GetIncludeEgrHashCfg retrieves the value of the leaf IncludeEgrHashCfg from the NokiaConf_Configure_Lag_Access_AdaptQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if IncludeEgrHashCfg is set, it can
// safely use t.GetIncludeEgrHashCfg() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.IncludeEgrHashCfg == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) GetIncludeEgrHashCfg() bool {
	if t == nil || t.IncludeEgrHashCfg == nil {
		return false
	}
	return *t.IncludeEgrHashCfg
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Lag_Access_AdaptQos
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) GetMode() E_NokiaConf_Configure_Lag_Access_AdaptQos_Mode {
	if t == nil || t.Mode == 0 {
		return 0
	}
	return t.Mode
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_Access_AdaptQos
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.IncludeEgrHashCfg == nil {
		var v bool = false
		t.IncludeEgrHashCfg = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_Access_AdaptQos"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_Access_AdaptQos) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_Access_AdaptQos.
func (*NokiaConf_Configure_Lag_Access_AdaptQos) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_AdaptiveLoadBalancing represents the /nokia-conf/configure/lag/adaptive-load-balancing YANG schema element.
type NokiaConf_Configure_Lag_AdaptiveLoadBalancing struct {
	Interval  *uint32 `path:"interval" module:"nokia-conf"`
	Tolerance *uint32 `path:"tolerance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_AdaptiveLoadBalancing implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_AdaptiveLoadBalancing) IsYANGGoStruct() {}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Lag_AdaptiveLoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 30
	}
	return *t.Interval
}

// GetTolerance retrieves the value of the leaf Tolerance from the NokiaConf_Configure_Lag_AdaptiveLoadBalancing
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Tolerance is set, it can
// safely use t.GetTolerance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Tolerance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) GetTolerance() uint32 {
	if t == nil || t.Tolerance == nil {
		return 20
	}
	return *t.Tolerance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_AdaptiveLoadBalancing
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Interval == nil {
		var v uint32 = 30
		t.Interval = &v
	}
	if t.Tolerance == nil {
		var v uint32 = 20
		t.Tolerance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_AdaptiveLoadBalancing"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_AdaptiveLoadBalancing) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_AdaptiveLoadBalancing.
func (*NokiaConf_Configure_Lag_AdaptiveLoadBalancing) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_BfdLiveness represents the /nokia-conf/configure/lag/bfd-liveness YANG schema element.
type NokiaConf_Configure_Lag_BfdLiveness struct {
	Ipv4               *NokiaConf_Configure_Lag_BfdLiveness_Ipv4 `path:"ipv4" module:"nokia-conf"`
	Ipv6               *NokiaConf_Configure_Lag_BfdLiveness_Ipv6 `path:"ipv6" module:"nokia-conf"`
	SoftResetExtension *bool                                     `path:"soft-reset-extension" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_BfdLiveness implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_BfdLiveness) IsYANGGoStruct() {}

// GetOrCreateIpv4 retrieves the value of the Ipv4 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_BfdLiveness) GetOrCreateIpv4() *NokiaConf_Configure_Lag_BfdLiveness_Ipv4 {
	if t.Ipv4 != nil {
		return t.Ipv4
	}
	t.Ipv4 = &NokiaConf_Configure_Lag_BfdLiveness_Ipv4{}
	return t.Ipv4
}

// GetOrCreateIpv6 retrieves the value of the Ipv6 field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_BfdLiveness) GetOrCreateIpv6() *NokiaConf_Configure_Lag_BfdLiveness_Ipv6 {
	if t.Ipv6 != nil {
		return t.Ipv6
	}
	t.Ipv6 = &NokiaConf_Configure_Lag_BfdLiveness_Ipv6{}
	return t.Ipv6
}

// GetIpv4 returns the value of the Ipv4 struct pointer
// from NokiaConf_Configure_Lag_BfdLiveness. If the receiver or the field Ipv4 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_BfdLiveness) GetIpv4() *NokiaConf_Configure_Lag_BfdLiveness_Ipv4 {
	if t != nil && t.Ipv4 != nil {
		return t.Ipv4
	}
	return nil
}

// GetIpv6 returns the value of the Ipv6 struct pointer
// from NokiaConf_Configure_Lag_BfdLiveness. If the receiver or the field Ipv6 is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_BfdLiveness) GetIpv6() *NokiaConf_Configure_Lag_BfdLiveness_Ipv6 {
	if t != nil && t.Ipv6 != nil {
		return t.Ipv6
	}
	return nil
}

// GetSoftResetExtension retrieves the value of the leaf SoftResetExtension from the NokiaConf_Configure_Lag_BfdLiveness
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SoftResetExtension is set, it can
// safely use t.GetSoftResetExtension() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SoftResetExtension == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness) GetSoftResetExtension() bool {
	if t == nil || t.SoftResetExtension == nil {
		return true
	}
	return *t.SoftResetExtension
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_BfdLiveness
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_BfdLiveness) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.SoftResetExtension == nil {
		var v bool = true
		t.SoftResetExtension = &v
	}
	t.Ipv4.PopulateDefaults()
	t.Ipv6.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_BfdLiveness"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_BfdLiveness) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_BfdLiveness.
func (*NokiaConf_Configure_Lag_BfdLiveness) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_BfdLiveness_Ipv4 represents the /nokia-conf/configure/lag/bfd-liveness/ipv4 YANG schema element.
type NokiaConf_Configure_Lag_BfdLiveness_Ipv4 struct {
	AdminState            E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdOnDistributingOnly *bool                                                           `path:"bfd-on-distributing-only" module:"nokia-conf"`
	LocalIpAddress        *string                                                         `path:"local-ip-address" module:"nokia-conf"`
	MaxAdminDownTime      NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxAdminDownTime_Union `path:"max-admin-down-time" module:"nokia-conf"`
	MaxSetupTime          NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxSetupTime_Union     `path:"max-setup-time" module:"nokia-conf"`
	Multiplier            *uint32                                                         `path:"multiplier" module:"nokia-conf"`
	ReceiveInterval       *uint32                                                         `path:"receive-interval" module:"nokia-conf"`
	RemoteIpAddress       *string                                                         `path:"remote-ip-address" module:"nokia-conf"`
	TransmitInterval      *uint32                                                         `path:"transmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_BfdLiveness_Ipv4 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_BfdLiveness_Ipv4) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdOnDistributingOnly retrieves the value of the leaf BfdOnDistributingOnly from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdOnDistributingOnly is set, it can
// safely use t.GetBfdOnDistributingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdOnDistributingOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetBfdOnDistributingOnly() bool {
	if t == nil || t.BfdOnDistributingOnly == nil {
		return false
	}
	return *t.BfdOnDistributingOnly
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetLocalIpAddress() string {
	if t == nil || t.LocalIpAddress == nil {
		return ""
	}
	return *t.LocalIpAddress
}

// GetMaxAdminDownTime retrieves the value of the leaf MaxAdminDownTime from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdminDownTime is set, it can
// safely use t.GetMaxAdminDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdminDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetMaxAdminDownTime() NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxAdminDownTime_Union {
	if t == nil || t.MaxAdminDownTime == nil {
		return UnionInt32(0)
	}
	return t.MaxAdminDownTime
}

// GetMaxSetupTime retrieves the value of the leaf MaxSetupTime from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSetupTime is set, it can
// safely use t.GetMaxSetupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSetupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetMaxSetupTime() NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxSetupTime_Union {
	if t == nil || t.MaxSetupTime == nil {
		return NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxSetupTime_Enum_infinite
	}
	return t.MaxSetupTime
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceiveInterval retrieves the value of the leaf ReceiveInterval from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveInterval is set, it can
// safely use t.GetReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetReceiveInterval() uint32 {
	if t == nil || t.ReceiveInterval == nil {
		return 100
	}
	return *t.ReceiveInterval
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_BfdLiveness_Ipv4
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdOnDistributingOnly == nil {
		var v bool = false
		t.BfdOnDistributingOnly = &v
	}
	if t.MaxAdminDownTime == nil {
		t.MaxAdminDownTime = UnionInt32(0)
	}
	if t.MaxSetupTime == nil {
		t.MaxSetupTime = NokiaConf_Configure_Lag_BfdLiveness_Ipv4_MaxSetupTime_Enum_infinite
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.ReceiveInterval == nil {
		var v uint32 = 100
		t.ReceiveInterval = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_BfdLiveness_Ipv4"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv4) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_BfdLiveness_Ipv4.
func (*NokiaConf_Configure_Lag_BfdLiveness_Ipv4) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_BfdLiveness_Ipv6 represents the /nokia-conf/configure/lag/bfd-liveness/ipv6 YANG schema element.
type NokiaConf_Configure_Lag_BfdLiveness_Ipv6 struct {
	AdminState            E_NokiaTypesSros_AdminState                                     `path:"admin-state" module:"nokia-conf"`
	ApplyGroups           []string                                                        `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude    []string                                                        `path:"apply-groups-exclude" module:"nokia-conf"`
	BfdOnDistributingOnly *bool                                                           `path:"bfd-on-distributing-only" module:"nokia-conf"`
	LocalIpAddress        *string                                                         `path:"local-ip-address" module:"nokia-conf"`
	MaxAdminDownTime      NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxAdminDownTime_Union `path:"max-admin-down-time" module:"nokia-conf"`
	MaxSetupTime          NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxSetupTime_Union     `path:"max-setup-time" module:"nokia-conf"`
	Multiplier            *uint32                                                         `path:"multiplier" module:"nokia-conf"`
	ReceiveInterval       *uint32                                                         `path:"receive-interval" module:"nokia-conf"`
	RemoteIpAddress       *string                                                         `path:"remote-ip-address" module:"nokia-conf"`
	TransmitInterval      *uint32                                                         `path:"transmit-interval" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_BfdLiveness_Ipv6 implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_BfdLiveness_Ipv6) IsYANGGoStruct() {}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetBfdOnDistributingOnly retrieves the value of the leaf BfdOnDistributingOnly from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BfdOnDistributingOnly is set, it can
// safely use t.GetBfdOnDistributingOnly() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BfdOnDistributingOnly == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetBfdOnDistributingOnly() bool {
	if t == nil || t.BfdOnDistributingOnly == nil {
		return false
	}
	return *t.BfdOnDistributingOnly
}

// GetLocalIpAddress retrieves the value of the leaf LocalIpAddress from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LocalIpAddress is set, it can
// safely use t.GetLocalIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LocalIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetLocalIpAddress() string {
	if t == nil || t.LocalIpAddress == nil {
		return ""
	}
	return *t.LocalIpAddress
}

// GetMaxAdminDownTime retrieves the value of the leaf MaxAdminDownTime from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxAdminDownTime is set, it can
// safely use t.GetMaxAdminDownTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxAdminDownTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetMaxAdminDownTime() NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxAdminDownTime_Union {
	if t == nil || t.MaxAdminDownTime == nil {
		return UnionInt32(0)
	}
	return t.MaxAdminDownTime
}

// GetMaxSetupTime retrieves the value of the leaf MaxSetupTime from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxSetupTime is set, it can
// safely use t.GetMaxSetupTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxSetupTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetMaxSetupTime() NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxSetupTime_Union {
	if t == nil || t.MaxSetupTime == nil {
		return NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxSetupTime_Enum_infinite
	}
	return t.MaxSetupTime
}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetMultiplier() uint32 {
	if t == nil || t.Multiplier == nil {
		return 3
	}
	return *t.Multiplier
}

// GetReceiveInterval retrieves the value of the leaf ReceiveInterval from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ReceiveInterval is set, it can
// safely use t.GetReceiveInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ReceiveInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetReceiveInterval() uint32 {
	if t == nil || t.ReceiveInterval == nil {
		return 100
	}
	return *t.ReceiveInterval
}

// GetRemoteIpAddress retrieves the value of the leaf RemoteIpAddress from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RemoteIpAddress is set, it can
// safely use t.GetRemoteIpAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RemoteIpAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetRemoteIpAddress() string {
	if t == nil || t.RemoteIpAddress == nil {
		return ""
	}
	return *t.RemoteIpAddress
}

// GetTransmitInterval retrieves the value of the leaf TransmitInterval from the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TransmitInterval is set, it can
// safely use t.GetTransmitInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TransmitInterval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) GetTransmitInterval() uint32 {
	if t == nil || t.TransmitInterval == nil {
		return 100
	}
	return *t.TransmitInterval
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_BfdLiveness_Ipv6
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.BfdOnDistributingOnly == nil {
		var v bool = false
		t.BfdOnDistributingOnly = &v
	}
	if t.MaxAdminDownTime == nil {
		t.MaxAdminDownTime = UnionInt32(0)
	}
	if t.MaxSetupTime == nil {
		t.MaxSetupTime = NokiaConf_Configure_Lag_BfdLiveness_Ipv6_MaxSetupTime_Enum_infinite
	}
	if t.Multiplier == nil {
		var v uint32 = 3
		t.Multiplier = &v
	}
	if t.ReceiveInterval == nil {
		var v uint32 = 100
		t.ReceiveInterval = &v
	}
	if t.TransmitInterval == nil {
		var v uint32 = 100
		t.TransmitInterval = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_BfdLiveness_Ipv6"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_BfdLiveness_Ipv6) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_BfdLiveness_Ipv6.
func (*NokiaConf_Configure_Lag_BfdLiveness_Ipv6) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm represents the /nokia-conf/configure/lag/eth-cfm YANG schema element.
type NokiaConf_Configure_Lag_EthCfm struct {
	Mep map[NokiaConf_Configure_Lag_EthCfm_Mep_Key]*NokiaConf_Configure_Lag_EthCfm_Mep `path:"mep" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm) IsYANGGoStruct() {}

// NokiaConf_Configure_Lag_EthCfm_Mep_Key represents the key for list Mep of element /nokia-conf/configure/lag/eth-cfm.
type NokiaConf_Configure_Lag_EthCfm_Mep_Key struct {
	MdAdminName string `path:"md-admin-name"`
	MaAdminName string `path:"ma-admin-name"`
	MepId       uint16 `path:"mep-id"`
}

// NewMep creates a new entry in the Mep list of the
// NokiaConf_Configure_Lag_EthCfm struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Lag_EthCfm) NewMep(MdAdminName string, MaAdminName string, MepId uint16) (*NokiaConf_Configure_Lag_EthCfm_Mep, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Lag_EthCfm_Mep_Key]*NokiaConf_Configure_Lag_EthCfm_Mep)
	}

	key := NokiaConf_Configure_Lag_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Mep[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Mep", key)
	}

	t.Mep[key] = &NokiaConf_Configure_Lag_EthCfm_Mep{
		MdAdminName: &MdAdminName,
		MaAdminName: &MaAdminName,
		MepId:       &MepId,
	}

	return t.Mep[key], nil
}

// RenameMep renames an entry in the list Mep within
// the NokiaConf_Configure_Lag_EthCfm struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Lag_EthCfm) RenameMep(oldK, newK NokiaConf_Configure_Lag_EthCfm_Mep_Key) error {
	if _, ok := t.Mep[newK]; ok {
		return fmt.Errorf("key %v already exists in Mep", newK)
	}

	e, ok := t.Mep[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Mep", oldK)
	}
	e.MdAdminName = &newK.MdAdminName
	e.MaAdminName = &newK.MaAdminName
	e.MepId = &newK.MepId

	t.Mep[newK] = e
	delete(t.Mep, oldK)
	return nil
}

// GetOrCreateMep retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Lag_EthCfm. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Lag_EthCfm) GetOrCreateMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Lag_EthCfm_Mep {

	key := NokiaConf_Configure_Lag_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if v, ok := t.Mep[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewMep(MdAdminName, MaAdminName, MepId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateMep got unexpected error: %v", err))
	}
	return v
}

// GetMep retrieves the value with the specified key from
// the Mep map field of NokiaConf_Configure_Lag_EthCfm. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm) GetMep(MdAdminName string, MaAdminName string, MepId uint16) *NokiaConf_Configure_Lag_EthCfm_Mep {

	if t == nil {
		return nil
	}

	key := NokiaConf_Configure_Lag_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	if lm, ok := t.Mep[key]; ok {
		return lm
	}
	return nil
}

// DeleteMep deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Lag_EthCfm. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Lag_EthCfm) DeleteMep(MdAdminName string, MaAdminName string, MepId uint16) {
	key := NokiaConf_Configure_Lag_EthCfm_Mep_Key{
		MdAdminName: MdAdminName,
		MaAdminName: MaAdminName,
		MepId:       MepId,
	}

	delete(t.Mep, key)
}

// AppendMep appends the supplied NokiaConf_Configure_Lag_EthCfm_Mep struct to the
// list Mep of NokiaConf_Configure_Lag_EthCfm. If the key value(s) specified in
// the supplied NokiaConf_Configure_Lag_EthCfm_Mep already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Lag_EthCfm) AppendMep(v *NokiaConf_Configure_Lag_EthCfm_Mep) error {
	if v.MdAdminName == nil {
		return fmt.Errorf("invalid nil key for MdAdminName")
	}

	if v.MaAdminName == nil {
		return fmt.Errorf("invalid nil key for MaAdminName")
	}

	if v.MepId == nil {
		return fmt.Errorf("invalid nil key for MepId")
	}

	key := NokiaConf_Configure_Lag_EthCfm_Mep_Key{
		MdAdminName: *v.MdAdminName,
		MaAdminName: *v.MaAdminName,
		MepId:       *v.MepId,
	}

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Mep == nil {
		t.Mep = make(map[NokiaConf_Configure_Lag_EthCfm_Mep_Key]*NokiaConf_Configure_Lag_EthCfm_Mep)
	}

	if _, ok := t.Mep[key]; ok {
		return fmt.Errorf("duplicate key for list Mep %v", key)
	}

	t.Mep[key] = v
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	for _, e := range t.Mep {
		e.PopulateDefaults()
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm.
func (*NokiaConf_Configure_Lag_EthCfm) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep represents the /nokia-conf/configure/lag/eth-cfm/mep YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep struct {
	AdminState           E_NokiaTypesSros_AdminState                           `path:"admin-state" module:"nokia-conf"`
	Ais                  *NokiaConf_Configure_Lag_EthCfm_Mep_Ais               `path:"ais" module:"nokia-conf" yangPresence:"true"`
	AlarmNotification    *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification `path:"alarm-notification" module:"nokia-conf"`
	ApplyGroups          []string                                              `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude   []string                                              `path:"apply-groups-exclude" module:"nokia-conf"`
	Ccm                  *bool                                                 `path:"ccm" module:"nokia-conf"`
	CcmLtmPriority       *uint8                                                `path:"ccm-ltm-priority" module:"nokia-conf"`
	CcmPaddingSize       *uint32                                               `path:"ccm-padding-size" module:"nokia-conf"`
	CcmTlvIgnore         []E_NokiaTypesEthCfm_CcmTlvIgnoreType                 `path:"ccm-tlv-ignore" module:"nokia-conf"`
	CollectLmmStats      *bool                                                 `path:"collect-lmm-stats" module:"nokia-conf"`
	Csf                  *NokiaConf_Configure_Lag_EthCfm_Mep_Csf               `path:"csf" module:"nokia-conf" yangPresence:"true"`
	Description          *string                                               `path:"description" module:"nokia-conf"`
	EthTest              *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest           `path:"eth-test" module:"nokia-conf" yangPresence:"true"`
	FacilityFault        *bool                                                 `path:"facility-fault" module:"nokia-conf"`
	Grace                *NokiaConf_Configure_Lag_EthCfm_Mep_Grace             `path:"grace" module:"nokia-conf"`
	LowPriorityDefect    E_NokiaTypesEthCfm_LowestAlarmPriority                `path:"low-priority-defect" module:"nokia-conf"`
	MaAdminName          *string                                               `path:"ma-admin-name" module:"nokia-conf"`
	MacAddress           *string                                               `path:"mac-address" module:"nokia-conf"`
	MdAdminName          *string                                               `path:"md-admin-name" module:"nokia-conf"`
	MepId                *uint16                                               `path:"mep-id" module:"nokia-conf"`
	OneWayDelayThreshold *uint32                                               `path:"one-way-delay-threshold" module:"nokia-conf"`
	Vlan                 NokiaConf_Configure_Lag_EthCfm_Mep_Vlan_Union         `path:"vlan" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep) IsYANGGoStruct() {}

// GetOrCreateAis retrieves the value of the Ais field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOrCreateAis() *NokiaConf_Configure_Lag_EthCfm_Mep_Ais {
	if t.Ais != nil {
		return t.Ais
	}
	t.Ais = &NokiaConf_Configure_Lag_EthCfm_Mep_Ais{}
	return t.Ais
}

// GetOrCreateAlarmNotification retrieves the value of the AlarmNotification field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOrCreateAlarmNotification() *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification {
	if t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	t.AlarmNotification = &NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification{}
	return t.AlarmNotification
}

// GetOrCreateCsf retrieves the value of the Csf field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOrCreateCsf() *NokiaConf_Configure_Lag_EthCfm_Mep_Csf {
	if t.Csf != nil {
		return t.Csf
	}
	t.Csf = &NokiaConf_Configure_Lag_EthCfm_Mep_Csf{}
	return t.Csf
}

// GetOrCreateEthTest retrieves the value of the EthTest field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOrCreateEthTest() *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest {
	if t.EthTest != nil {
		return t.EthTest
	}
	t.EthTest = &NokiaConf_Configure_Lag_EthCfm_Mep_EthTest{}
	return t.EthTest
}

// GetOrCreateGrace retrieves the value of the Grace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOrCreateGrace() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace {
	if t.Grace != nil {
		return t.Grace
	}
	t.Grace = &NokiaConf_Configure_Lag_EthCfm_Mep_Grace{}
	return t.Grace
}

// GetAis returns the value of the Ais struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep. If the receiver or the field Ais is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetAis() *NokiaConf_Configure_Lag_EthCfm_Mep_Ais {
	if t != nil && t.Ais != nil {
		return t.Ais
	}
	return nil
}

// GetAlarmNotification returns the value of the AlarmNotification struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep. If the receiver or the field AlarmNotification is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetAlarmNotification() *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification {
	if t != nil && t.AlarmNotification != nil {
		return t.AlarmNotification
	}
	return nil
}

// GetCsf returns the value of the Csf struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep. If the receiver or the field Csf is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCsf() *NokiaConf_Configure_Lag_EthCfm_Mep_Csf {
	if t != nil && t.Csf != nil {
		return t.Csf
	}
	return nil
}

// GetEthTest returns the value of the EthTest struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep. If the receiver or the field EthTest is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetEthTest() *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest {
	if t != nil && t.EthTest != nil {
		return t.EthTest
	}
	return nil
}

// GetGrace returns the value of the Grace struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep. If the receiver or the field Grace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetGrace() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace {
	if t != nil && t.Grace != nil {
		return t.Grace
	}
	return nil
}

// GetAdminState retrieves the value of the leaf AdminState from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdminState is set, it can
// safely use t.GetAdminState() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdminState == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetAdminState() E_NokiaTypesSros_AdminState {
	if t == nil || t.AdminState == 0 {
		return NokiaTypesSros_AdminState_disable
	}
	return t.AdminState
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetCcm retrieves the value of the leaf Ccm from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Ccm is set, it can
// safely use t.GetCcm() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Ccm == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCcm() bool {
	if t == nil || t.Ccm == nil {
		return false
	}
	return *t.Ccm
}

// GetCcmLtmPriority retrieves the value of the leaf CcmLtmPriority from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmLtmPriority is set, it can
// safely use t.GetCcmLtmPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmLtmPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCcmLtmPriority() uint8 {
	if t == nil || t.CcmLtmPriority == nil {
		return 7
	}
	return *t.CcmLtmPriority
}

// GetCcmPaddingSize retrieves the value of the leaf CcmPaddingSize from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmPaddingSize is set, it can
// safely use t.GetCcmPaddingSize() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmPaddingSize == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCcmPaddingSize() uint32 {
	if t == nil || t.CcmPaddingSize == nil {
		return 0
	}
	return *t.CcmPaddingSize
}

// GetCcmTlvIgnore retrieves the value of the leaf CcmTlvIgnore from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CcmTlvIgnore is set, it can
// safely use t.GetCcmTlvIgnore() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CcmTlvIgnore == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCcmTlvIgnore() []E_NokiaTypesEthCfm_CcmTlvIgnoreType {
	if t == nil || t.CcmTlvIgnore == nil {
		return nil
	}
	return t.CcmTlvIgnore
}

// GetCollectLmmStats retrieves the value of the leaf CollectLmmStats from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CollectLmmStats is set, it can
// safely use t.GetCollectLmmStats() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CollectLmmStats == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetCollectLmmStats() bool {
	if t == nil || t.CollectLmmStats == nil {
		return false
	}
	return *t.CollectLmmStats
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFacilityFault retrieves the value of the leaf FacilityFault from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FacilityFault is set, it can
// safely use t.GetFacilityFault() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FacilityFault == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetFacilityFault() bool {
	if t == nil || t.FacilityFault == nil {
		return false
	}
	return *t.FacilityFault
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetLowPriorityDefect() E_NokiaTypesEthCfm_LowestAlarmPriority {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	return t.LowPriorityDefect
}

// GetMaAdminName retrieves the value of the leaf MaAdminName from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaAdminName is set, it can
// safely use t.GetMaAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetMaAdminName() string {
	if t == nil || t.MaAdminName == nil {
		return ""
	}
	return *t.MaAdminName
}

// GetMacAddress retrieves the value of the leaf MacAddress from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MacAddress is set, it can
// safely use t.GetMacAddress() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MacAddress == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetMacAddress() string {
	if t == nil || t.MacAddress == nil {
		return ""
	}
	return *t.MacAddress
}

// GetMdAdminName retrieves the value of the leaf MdAdminName from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MdAdminName is set, it can
// safely use t.GetMdAdminName() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MdAdminName == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetMdAdminName() string {
	if t == nil || t.MdAdminName == nil {
		return ""
	}
	return *t.MdAdminName
}

// GetMepId retrieves the value of the leaf MepId from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MepId is set, it can
// safely use t.GetMepId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MepId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetMepId() uint16 {
	if t == nil || t.MepId == nil {
		return 0
	}
	return *t.MepId
}

// GetOneWayDelayThreshold retrieves the value of the leaf OneWayDelayThreshold from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if OneWayDelayThreshold is set, it can
// safely use t.GetOneWayDelayThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.OneWayDelayThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetOneWayDelayThreshold() uint32 {
	if t == nil || t.OneWayDelayThreshold == nil {
		return 3
	}
	return *t.OneWayDelayThreshold
}

// GetVlan retrieves the value of the leaf Vlan from the NokiaConf_Configure_Lag_EthCfm_Mep
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Vlan is set, it can
// safely use t.GetVlan() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Vlan == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) GetVlan() NokiaConf_Configure_Lag_EthCfm_Mep_Vlan_Union {
	if t == nil || t.Vlan == nil {
		return NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	return t.Vlan
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AdminState == 0 {
		t.AdminState = NokiaTypesSros_AdminState_disable
	}
	if t.Ccm == nil {
		var v bool = false
		t.Ccm = &v
	}
	if t.CcmLtmPriority == nil {
		var v uint8 = 7
		t.CcmLtmPriority = &v
	}
	if t.CollectLmmStats == nil {
		var v bool = false
		t.CollectLmmStats = &v
	}
	if t.FacilityFault == nil {
		var v bool = false
		t.FacilityFault = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaTypesEthCfm_LowestAlarmPriority_mac_rem_err_xcon
	}
	if t.OneWayDelayThreshold == nil {
		var v uint32 = 3
		t.OneWayDelayThreshold = &v
	}
	if t.Vlan == nil {
		t.Vlan = NokiaTypesEthCfm_VlanIdOrNone_Enum_none
	}
	t.Ais.PopulateDefaults()
	t.AlarmNotification.PopulateDefaults()
	t.Csf.PopulateDefaults()
	t.EthTest.PopulateDefaults()
	t.Grace.PopulateDefaults()
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Lag_EthCfm_Mep struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) ΛListKeyMap() (map[string]interface{}, error) {
	if t.MaAdminName == nil {
		return nil, fmt.Errorf("nil value for key MaAdminName")
	}

	if t.MdAdminName == nil {
		return nil, fmt.Errorf("nil value for key MdAdminName")
	}

	if t.MepId == nil {
		return nil, fmt.Errorf("nil value for key MepId")
	}

	return map[string]interface{}{
		"ma-admin-name": *t.MaAdminName,
		"md-admin-name": *t.MdAdminName,
		"mep-id":        *t.MepId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep.
func (*NokiaConf_Configure_Lag_EthCfm_Mep) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_Ais represents the /nokia-conf/configure/lag/eth-cfm/mep/ais YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_Ais struct {
	ClientMegLevel    []uint32                                                   `path:"client-meg-level" module:"nokia-conf"`
	InterfaceSupport  *bool                                                      `path:"interface-support" module:"nokia-conf"`
	Interval          *uint32                                                    `path:"interval" module:"nokia-conf"`
	LowPriorityDefect E_NokiaConf_Configure_Lag_EthCfm_Mep_Ais_LowPriorityDefect `path:"low-priority-defect" module:"nokia-conf"`
	Priority          *uint8                                                     `path:"priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_Ais implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Ais) IsYANGGoStruct() {}

// GetClientMegLevel retrieves the value of the leaf ClientMegLevel from the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ClientMegLevel is set, it can
// safely use t.GetClientMegLevel() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ClientMegLevel == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) GetClientMegLevel() []uint32 {
	if t == nil || t.ClientMegLevel == nil {
		return nil
	}
	return t.ClientMegLevel
}

// GetInterfaceSupport retrieves the value of the leaf InterfaceSupport from the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if InterfaceSupport is set, it can
// safely use t.GetInterfaceSupport() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.InterfaceSupport == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) GetInterfaceSupport() bool {
	if t == nil || t.InterfaceSupport == nil {
		return false
	}
	return *t.InterfaceSupport
}

// GetInterval retrieves the value of the leaf Interval from the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Interval is set, it can
// safely use t.GetInterval() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Interval == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) GetInterval() uint32 {
	if t == nil || t.Interval == nil {
		return 1
	}
	return *t.Interval
}

// GetLowPriorityDefect retrieves the value of the leaf LowPriorityDefect from the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LowPriorityDefect is set, it can
// safely use t.GetLowPriorityDefect() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LowPriorityDefect == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) GetLowPriorityDefect() E_NokiaConf_Configure_Lag_EthCfm_Mep_Ais_LowPriorityDefect {
	if t == nil || t.LowPriorityDefect == 0 {
		return NokiaConf_Configure_Lag_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	return t.LowPriorityDefect
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) GetPriority() uint8 {
	if t == nil || t.Priority == nil {
		return 7
	}
	return *t.Priority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_Ais
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.InterfaceSupport == nil {
		var v bool = false
		t.InterfaceSupport = &v
	}
	if t.Interval == nil {
		var v uint32 = 1
		t.Interval = &v
	}
	if t.LowPriorityDefect == 0 {
		t.LowPriorityDefect = NokiaConf_Configure_Lag_EthCfm_Mep_Ais_LowPriorityDefect_all_def
	}
	if t.Priority == nil {
		var v uint8 = 7
		t.Priority = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_Ais"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Ais) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_Ais.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Ais) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification represents the /nokia-conf/configure/lag/eth-cfm/mep/alarm-notification YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification struct {
	FngAlarmTime *int32 `path:"fng-alarm-time" module:"nokia-conf"`
	FngResetTime *int32 `path:"fng-reset-time" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) IsYANGGoStruct() {}

// GetFngAlarmTime retrieves the value of the leaf FngAlarmTime from the NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngAlarmTime is set, it can
// safely use t.GetFngAlarmTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngAlarmTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) GetFngAlarmTime() int32 {
	if t == nil || t.FngAlarmTime == nil {
		return 0
	}
	return *t.FngAlarmTime
}

// GetFngResetTime retrieves the value of the leaf FngResetTime from the NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FngResetTime is set, it can
// safely use t.GetFngResetTime() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FngResetTime == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) GetFngResetTime() int32 {
	if t == nil || t.FngResetTime == nil {
		return 0
	}
	return *t.FngResetTime
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_AlarmNotification) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_Csf represents the /nokia-conf/configure/lag/eth-cfm/mep/csf YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_Csf struct {
	Multiplier *float64 `path:"multiplier" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_Csf implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Csf) IsYANGGoStruct() {}

// GetMultiplier retrieves the value of the leaf Multiplier from the NokiaConf_Configure_Lag_EthCfm_Mep_Csf
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Multiplier is set, it can
// safely use t.GetMultiplier() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Multiplier == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Csf) GetMultiplier() float64 {
	if t == nil || t.Multiplier == nil {
		return 3.5
	}
	return *t.Multiplier
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_Csf
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Csf) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Multiplier == nil {
		var v float64 = 3.5
		t.Multiplier = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Csf) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_Csf"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Csf) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Csf) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_Csf.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Csf) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_EthTest represents the /nokia-conf/configure/lag/eth-cfm/mep/eth-test YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_EthTest struct {
	BitErrorThreshold *uint32                                                 `path:"bit-error-threshold" module:"nokia-conf"`
	TestPattern       *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern `path:"test-pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_EthTest implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) IsYANGGoStruct() {}

// GetOrCreateTestPattern retrieves the value of the TestPattern field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) GetOrCreateTestPattern() *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern {
	if t.TestPattern != nil {
		return t.TestPattern
	}
	t.TestPattern = &NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern{}
	return t.TestPattern
}

// GetTestPattern returns the value of the TestPattern struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep_EthTest. If the receiver or the field TestPattern is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) GetTestPattern() *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern {
	if t != nil && t.TestPattern != nil {
		return t.TestPattern
	}
	return nil
}

// GetBitErrorThreshold retrieves the value of the leaf BitErrorThreshold from the NokiaConf_Configure_Lag_EthCfm_Mep_EthTest
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if BitErrorThreshold is set, it can
// safely use t.GetBitErrorThreshold() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.BitErrorThreshold == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) GetBitErrorThreshold() uint32 {
	if t == nil || t.BitErrorThreshold == nil {
		return 1
	}
	return *t.BitErrorThreshold
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_EthTest
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.BitErrorThreshold == nil {
		var v uint32 = 1
		t.BitErrorThreshold = &v
	}
	t.TestPattern.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_EthTest"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_EthTest.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_EthTest) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern represents the /nokia-conf/configure/lag/eth-cfm/mep/eth-test/test-pattern YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern struct {
	CrcTlv  *bool                                                            `path:"crc-tlv" module:"nokia-conf"`
	Pattern E_NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern_Pattern `path:"pattern" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) IsYANGGoStruct() {}

// GetCrcTlv retrieves the value of the leaf CrcTlv from the NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if CrcTlv is set, it can
// safely use t.GetCrcTlv() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.CrcTlv == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) GetCrcTlv() bool {
	if t == nil || t.CrcTlv == nil {
		return false
	}
	return *t.CrcTlv
}

// GetPattern retrieves the value of the leaf Pattern from the NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Pattern is set, it can
// safely use t.GetPattern() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Pattern == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) GetPattern() E_NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern_Pattern {
	if t == nil || t.Pattern == 0 {
		return NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
	return t.Pattern
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.CrcTlv == nil {
		var v bool = false
		t.CrcTlv = &v
	}
	if t.Pattern == 0 {
		t.Pattern = NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern_Pattern_all_zeros
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_EthTest_TestPattern) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_Grace represents the /nokia-conf/configure/lag/eth-cfm/mep/grace YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_Grace struct {
	EthEd       *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd       `path:"eth-ed" module:"nokia-conf"`
	EthVsmGrace *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace `path:"eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_Grace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace) IsYANGGoStruct() {}

// GetOrCreateEthEd retrieves the value of the EthEd field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) GetOrCreateEthEd() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd {
	if t.EthEd != nil {
		return t.EthEd
	}
	t.EthEd = &NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd{}
	return t.EthEd
}

// GetOrCreateEthVsmGrace retrieves the value of the EthVsmGrace field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) GetOrCreateEthVsmGrace() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace {
	if t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	t.EthVsmGrace = &NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace{}
	return t.EthVsmGrace
}

// GetEthEd returns the value of the EthEd struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep_Grace. If the receiver or the field EthEd is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) GetEthEd() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd {
	if t != nil && t.EthEd != nil {
		return t.EthEd
	}
	return nil
}

// GetEthVsmGrace returns the value of the EthVsmGrace struct pointer
// from NokiaConf_Configure_Lag_EthCfm_Mep_Grace. If the receiver or the field EthVsmGrace is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) GetEthVsmGrace() *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace {
	if t != nil && t.EthVsmGrace != nil {
		return t.EthVsmGrace
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_Grace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.EthEd.PopulateDefaults()
	t.EthVsmGrace.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_Grace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_Grace.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd represents the /nokia-conf/configure/lag/eth-cfm/mep/grace/eth-ed YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd struct {
	MaxRxDefectWindow *uint32 `path:"max-rx-defect-window" module:"nokia-conf"`
	Priority          *int32  `path:"priority" module:"nokia-conf"`
	RxEthEd           *bool   `path:"rx-eth-ed" module:"nokia-conf"`
	TxEthEd           *bool   `path:"tx-eth-ed" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) IsYANGGoStruct() {}

// GetMaxRxDefectWindow retrieves the value of the leaf MaxRxDefectWindow from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if MaxRxDefectWindow is set, it can
// safely use t.GetMaxRxDefectWindow() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.MaxRxDefectWindow == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) GetMaxRxDefectWindow() uint32 {
	if t == nil || t.MaxRxDefectWindow == nil {
		return 0
	}
	return *t.MaxRxDefectWindow
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) GetPriority() int32 {
	if t == nil || t.Priority == nil {
		return 0
	}
	return *t.Priority
}

// GetRxEthEd retrieves the value of the leaf RxEthEd from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthEd is set, it can
// safely use t.GetRxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) GetRxEthEd() bool {
	if t == nil || t.RxEthEd == nil {
		return true
	}
	return *t.RxEthEd
}

// GetTxEthEd retrieves the value of the leaf TxEthEd from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthEd is set, it can
// safely use t.GetTxEthEd() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthEd == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) GetTxEthEd() bool {
	if t == nil || t.TxEthEd == nil {
		return false
	}
	return *t.TxEthEd
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthEd == nil {
		var v bool = true
		t.RxEthEd = &v
	}
	if t.TxEthEd == nil {
		var v bool = false
		t.TxEthEd = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthEd) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace represents the /nokia-conf/configure/lag/eth-cfm/mep/grace/eth-vsm-grace YANG schema element.
type NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace struct {
	RxEthVsmGrace *bool `path:"rx-eth-vsm-grace" module:"nokia-conf"`
	TxEthVsmGrace *bool `path:"tx-eth-vsm-grace" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) IsYANGGoStruct() {}

// GetRxEthVsmGrace retrieves the value of the leaf RxEthVsmGrace from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if RxEthVsmGrace is set, it can
// safely use t.GetRxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.RxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) GetRxEthVsmGrace() bool {
	if t == nil || t.RxEthVsmGrace == nil {
		return true
	}
	return *t.RxEthVsmGrace
}

// GetTxEthVsmGrace retrieves the value of the leaf TxEthVsmGrace from the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if TxEthVsmGrace is set, it can
// safely use t.GetTxEthVsmGrace() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.TxEthVsmGrace == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) GetTxEthVsmGrace() bool {
	if t == nil || t.TxEthVsmGrace == nil {
		return true
	}
	return *t.TxEthVsmGrace
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.RxEthVsmGrace == nil {
		var v bool = true
		t.RxEthVsmGrace = &v
	}
	if t.TxEthVsmGrace == nil {
		var v bool = true
		t.TxEthVsmGrace = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace.
func (*NokiaConf_Configure_Lag_EthCfm_Mep_Grace_EthVsmGrace) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_HashWeightThreshold represents the /nokia-conf/configure/lag/hash-weight-threshold YANG schema element.
type NokiaConf_Configure_Lag_HashWeightThreshold struct {
	Action E_NokiaConf_Configure_Lag_HashWeightThreshold_Action `path:"action" module:"nokia-conf"`
	Cost   *uint32                                              `path:"cost" module:"nokia-conf"`
	Value  *int32                                               `path:"value" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_HashWeightThreshold implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_HashWeightThreshold) IsYANGGoStruct() {}

// GetAction retrieves the value of the leaf Action from the NokiaConf_Configure_Lag_HashWeightThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Action is set, it can
// safely use t.GetAction() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Action == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) GetAction() E_NokiaConf_Configure_Lag_HashWeightThreshold_Action {
	if t == nil || t.Action == 0 {
		return NokiaConf_Configure_Lag_HashWeightThreshold_Action_down
	}
	return t.Action
}

// GetCost retrieves the value of the leaf Cost from the NokiaConf_Configure_Lag_HashWeightThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Cost is set, it can
// safely use t.GetCost() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Cost == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) GetCost() uint32 {
	if t == nil || t.Cost == nil {
		return 0
	}
	return *t.Cost
}

// GetValue retrieves the value of the leaf Value from the NokiaConf_Configure_Lag_HashWeightThreshold
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Value is set, it can
// safely use t.GetValue() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Value == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) GetValue() int32 {
	if t == nil || t.Value == nil {
		return 0
	}
	return *t.Value
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_HashWeightThreshold
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Action == 0 {
		t.Action = NokiaConf_Configure_Lag_HashWeightThreshold_Action_down
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_HashWeightThreshold"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_HashWeightThreshold) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_HashWeightThreshold.
func (*NokiaConf_Configure_Lag_HashWeightThreshold) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_Lacp represents the /nokia-conf/configure/lag/lacp YANG schema element.
type NokiaConf_Configure_Lag_Lacp struct {
	AdministrativeKey *int32                              `path:"administrative-key" module:"nokia-conf"`
	Mode              E_NokiaConf_Configure_Lag_Lacp_Mode `path:"mode" module:"nokia-conf"`
	SystemId          *string                             `path:"system-id" module:"nokia-conf"`
	SystemPriority    *int32                              `path:"system-priority" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_Lacp implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_Lacp) IsYANGGoStruct() {}

// GetAdministrativeKey retrieves the value of the leaf AdministrativeKey from the NokiaConf_Configure_Lag_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AdministrativeKey is set, it can
// safely use t.GetAdministrativeKey() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AdministrativeKey == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Lacp) GetAdministrativeKey() int32 {
	if t == nil || t.AdministrativeKey == nil {
		return 0
	}
	return *t.AdministrativeKey
}

// GetMode retrieves the value of the leaf Mode from the NokiaConf_Configure_Lag_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Mode is set, it can
// safely use t.GetMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Mode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Lacp) GetMode() E_NokiaConf_Configure_Lag_Lacp_Mode {
	if t == nil || t.Mode == 0 {
		return NokiaConf_Configure_Lag_Lacp_Mode_passive
	}
	return t.Mode
}

// GetSystemId retrieves the value of the leaf SystemId from the NokiaConf_Configure_Lag_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemId is set, it can
// safely use t.GetSystemId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Lacp) GetSystemId() string {
	if t == nil || t.SystemId == nil {
		return "00:00:00:00:00:00"
	}
	return *t.SystemId
}

// GetSystemPriority retrieves the value of the leaf SystemPriority from the NokiaConf_Configure_Lag_Lacp
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SystemPriority is set, it can
// safely use t.GetSystemPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SystemPriority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Lacp) GetSystemPriority() int32 {
	if t == nil || t.SystemPriority == nil {
		return 0
	}
	return *t.SystemPriority
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_Lacp
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_Lacp) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Mode == 0 {
		t.Mode = NokiaConf_Configure_Lag_Lacp_Mode_passive
	}
	if t.SystemId == nil {
		var v string = "00:00:00:00:00:00"
		t.SystemId = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Lacp) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_Lacp"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Lacp) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_Lacp) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_Lacp.
func (*NokiaConf_Configure_Lag_Lacp) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_LinkMapProfile represents the /nokia-conf/configure/lag/link-map-profile YANG schema element.
type NokiaConf_Configure_Lag_LinkMapProfile struct {
	ApplyGroups        []string                                                `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                                `path:"apply-groups-exclude" module:"nokia-conf"`
	Description        *string                                                 `path:"description" module:"nokia-conf"`
	FailureMode        E_NokiaConf_Configure_Lag_LinkMapProfile_FailureMode    `path:"failure-mode" module:"nokia-conf"`
	Link               map[string]*NokiaConf_Configure_Lag_LinkMapProfile_Link `path:"link" module:"nokia-conf"`
	LinkMapProfileId   *int32                                                  `path:"link-map-profile-id" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_LinkMapProfile implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_LinkMapProfile) IsYANGGoStruct() {}

// NewLink creates a new entry in the Link list of the
// NokiaConf_Configure_Lag_LinkMapProfile struct. The keys of the list are populated from the input
// arguments.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) NewLink(PortId string) (*NokiaConf_Configure_Lag_LinkMapProfile_Link, error) {

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*NokiaConf_Configure_Lag_LinkMapProfile_Link)
	}

	key := PortId

	// Ensure that this key has not already been used in the
	// list. Keyed YANG lists do not allow duplicate keys to
	// be created.
	if _, ok := t.Link[key]; ok {
		return nil, fmt.Errorf("duplicate key %v for list Link", key)
	}

	t.Link[key] = &NokiaConf_Configure_Lag_LinkMapProfile_Link{
		PortId: &PortId,
	}

	return t.Link[key], nil
}

// RenameLink renames an entry in the list Link within
// the NokiaConf_Configure_Lag_LinkMapProfile struct. The entry with key oldK is renamed to newK updating
// the key within the value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) RenameLink(oldK, newK string) error {
	if _, ok := t.Link[newK]; ok {
		return fmt.Errorf("key %v already exists in Link", newK)
	}

	e, ok := t.Link[oldK]
	if !ok {
		return fmt.Errorf("key %v not found in Link", oldK)
	}
	e.PortId = &newK

	t.Link[newK] = e
	delete(t.Link, oldK)
	return nil
}

// GetOrCreateLink retrieves the value with the specified keys from
// the receiver NokiaConf_Configure_Lag_LinkMapProfile. If the entry does not exist, then it is created.
// It returns the existing or new list member.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetOrCreateLink(PortId string) *NokiaConf_Configure_Lag_LinkMapProfile_Link {

	key := PortId

	if v, ok := t.Link[key]; ok {
		return v
	}
	// Panic if we receive an error, since we should have retrieved an existing
	// list member. This allows chaining of GetOrCreate methods.
	v, err := t.NewLink(PortId)
	if err != nil {
		panic(fmt.Sprintf("GetOrCreateLink got unexpected error: %v", err))
	}
	return v
}

// GetLink retrieves the value with the specified key from
// the Link map field of NokiaConf_Configure_Lag_LinkMapProfile. If the receiver is nil, or
// the specified key is not present in the list, nil is returned such that Get*
// methods may be safely chained.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetLink(PortId string) *NokiaConf_Configure_Lag_LinkMapProfile_Link {

	if t == nil {
		return nil
	}

	key := PortId

	if lm, ok := t.Link[key]; ok {
		return lm
	}
	return nil
}

// DeleteLink deletes the value with the specified keys from
// the receiver NokiaConf_Configure_Lag_LinkMapProfile. If there is no such element, the function
// is a no-op.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) DeleteLink(PortId string) {
	key := PortId

	delete(t.Link, key)
}

// AppendLink appends the supplied NokiaConf_Configure_Lag_LinkMapProfile_Link struct to the
// list Link of NokiaConf_Configure_Lag_LinkMapProfile. If the key value(s) specified in
// the supplied NokiaConf_Configure_Lag_LinkMapProfile_Link already exist in the list, an error is
// returned.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) AppendLink(v *NokiaConf_Configure_Lag_LinkMapProfile_Link) error {
	if v.PortId == nil {
		return fmt.Errorf("invalid nil key received for PortId")
	}

	key := *v.PortId

	// Initialise the list within the receiver struct if it has not already been
	// created.
	if t.Link == nil {
		t.Link = make(map[string]*NokiaConf_Configure_Lag_LinkMapProfile_Link)
	}

	if _, ok := t.Link[key]; ok {
		return fmt.Errorf("duplicate key for list Link %v", key)
	}

	t.Link[key] = v
	return nil
}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_LinkMapProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_LinkMapProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetDescription retrieves the value of the leaf Description from the NokiaConf_Configure_Lag_LinkMapProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Description is set, it can
// safely use t.GetDescription() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Description == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetDescription() string {
	if t == nil || t.Description == nil {
		return ""
	}
	return *t.Description
}

// GetFailureMode retrieves the value of the leaf FailureMode from the NokiaConf_Configure_Lag_LinkMapProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if FailureMode is set, it can
// safely use t.GetFailureMode() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.FailureMode == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetFailureMode() E_NokiaConf_Configure_Lag_LinkMapProfile_FailureMode {
	if t == nil || t.FailureMode == 0 {
		return NokiaConf_Configure_Lag_LinkMapProfile_FailureMode_per_link_hash
	}
	return t.FailureMode
}

// GetLinkMapProfileId retrieves the value of the leaf LinkMapProfileId from the NokiaConf_Configure_Lag_LinkMapProfile
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if LinkMapProfileId is set, it can
// safely use t.GetLinkMapProfileId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.LinkMapProfileId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) GetLinkMapProfileId() int32 {
	if t == nil || t.LinkMapProfileId == nil {
		return 0
	}
	return *t.LinkMapProfileId
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_LinkMapProfile
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.FailureMode == 0 {
		t.FailureMode = NokiaConf_Configure_Lag_LinkMapProfile_FailureMode_per_link_hash
	}
	for _, e := range t.Link {
		e.PopulateDefaults()
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Lag_LinkMapProfile struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) ΛListKeyMap() (map[string]interface{}, error) {
	if t.LinkMapProfileId == nil {
		return nil, fmt.Errorf("nil value for key LinkMapProfileId")
	}

	return map[string]interface{}{
		"link-map-profile-id": *t.LinkMapProfileId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_LinkMapProfile"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_LinkMapProfile) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_LinkMapProfile.
func (*NokiaConf_Configure_Lag_LinkMapProfile) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_LinkMapProfile_Link represents the /nokia-conf/configure/lag/link-map-profile/link YANG schema element.
type NokiaConf_Configure_Lag_LinkMapProfile_Link struct {
	ApplyGroups        []string                                               `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                               `path:"apply-groups-exclude" module:"nokia-conf"`
	PortId             *string                                                `path:"port-id" module:"nokia-conf"`
	PortType           E_NokiaConf_Configure_Lag_LinkMapProfile_Link_PortType `path:"port-type" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_LinkMapProfile_Link implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_LinkMapProfile_Link) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_LinkMapProfile_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_LinkMapProfile_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Lag_LinkMapProfile_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPortType retrieves the value of the leaf PortType from the NokiaConf_Configure_Lag_LinkMapProfile_Link
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortType is set, it can
// safely use t.GetPortType() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortType == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) GetPortType() E_NokiaConf_Configure_Lag_LinkMapProfile_Link_PortType {
	if t == nil || t.PortType == 0 {
		return 0
	}
	return t.PortType
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_LinkMapProfile_Link
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Lag_LinkMapProfile_Link struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_LinkMapProfile_Link"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_LinkMapProfile_Link) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_LinkMapProfile_Link.
func (*NokiaConf_Configure_Lag_LinkMapProfile_Link) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_PerLinkHash represents the /nokia-conf/configure/lag/per-link-hash YANG schema element.
type NokiaConf_Configure_Lag_PerLinkHash struct {
	Weighted *NokiaConf_Configure_Lag_PerLinkHash_Weighted `path:"weighted" module:"nokia-conf" yangPresence:"true"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_PerLinkHash implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_PerLinkHash) IsYANGGoStruct() {}

// GetOrCreateWeighted retrieves the value of the Weighted field
// or returns the existing field if it already exists.
func (t *NokiaConf_Configure_Lag_PerLinkHash) GetOrCreateWeighted() *NokiaConf_Configure_Lag_PerLinkHash_Weighted {
	if t.Weighted != nil {
		return t.Weighted
	}
	t.Weighted = &NokiaConf_Configure_Lag_PerLinkHash_Weighted{}
	return t.Weighted
}

// GetWeighted returns the value of the Weighted struct pointer
// from NokiaConf_Configure_Lag_PerLinkHash. If the receiver or the field Weighted is nil, nil
// is returned such that the Get* methods can be safely chained.
func (t *NokiaConf_Configure_Lag_PerLinkHash) GetWeighted() *NokiaConf_Configure_Lag_PerLinkHash_Weighted {
	if t != nil && t.Weighted != nil {
		return t.Weighted
	}
	return nil
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_PerLinkHash
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_PerLinkHash) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	t.Weighted.PopulateDefaults()
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_PerLinkHash) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_PerLinkHash"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_PerLinkHash) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_PerLinkHash) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_PerLinkHash.
func (*NokiaConf_Configure_Lag_PerLinkHash) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_PerLinkHash_Weighted represents the /nokia-conf/configure/lag/per-link-hash/weighted YANG schema element.
type NokiaConf_Configure_Lag_PerLinkHash_Weighted struct {
	AutoRebalance *bool `path:"auto-rebalance" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_PerLinkHash_Weighted implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_PerLinkHash_Weighted) IsYANGGoStruct() {}

// GetAutoRebalance retrieves the value of the leaf AutoRebalance from the NokiaConf_Configure_Lag_PerLinkHash_Weighted
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if AutoRebalance is set, it can
// safely use t.GetAutoRebalance() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.AutoRebalance == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_PerLinkHash_Weighted) GetAutoRebalance() bool {
	if t == nil || t.AutoRebalance == nil {
		return false
	}
	return *t.AutoRebalance
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_PerLinkHash_Weighted
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_PerLinkHash_Weighted) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.AutoRebalance == nil {
		var v bool = false
		t.AutoRebalance = &v
	}
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_PerLinkHash_Weighted) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_PerLinkHash_Weighted"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_PerLinkHash_Weighted) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_PerLinkHash_Weighted) ΛEnumTypeMap() map[string][]reflect.Type {
	return ΛEnumTypes
}

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_PerLinkHash_Weighted.
func (*NokiaConf_Configure_Lag_PerLinkHash_Weighted) ΛBelongingModule() string {
	return "nokia-conf"
}

// NokiaConf_Configure_Lag_Port represents the /nokia-conf/configure/lag/port YANG schema element.
type NokiaConf_Configure_Lag_Port struct {
	ApplyGroups        []string                                      `path:"apply-groups" module:"nokia-conf"`
	ApplyGroupsExclude []string                                      `path:"apply-groups-exclude" module:"nokia-conf"`
	HashWeight         NokiaConf_Configure_Lag_Port_HashWeight_Union `path:"hash-weight" module:"nokia-conf"`
	PortId             *string                                       `path:"port-id" module:"nokia-conf"`
	Priority           *uint32                                       `path:"priority" module:"nokia-conf"`
	SubGroup           NokiaConf_Configure_Lag_Port_SubGroup_Union   `path:"sub-group" module:"nokia-conf"`
}

// IsYANGGoStruct ensures that NokiaConf_Configure_Lag_Port implements the yang.GoStruct
// interface. This allows functions that need to handle this struct to
// identify it as being generated by ygen.
func (*NokiaConf_Configure_Lag_Port) IsYANGGoStruct() {}

// GetApplyGroups retrieves the value of the leaf ApplyGroups from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroups is set, it can
// safely use t.GetApplyGroups() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroups == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetApplyGroups() []string {
	if t == nil || t.ApplyGroups == nil {
		return nil
	}
	return t.ApplyGroups
}

// GetApplyGroupsExclude retrieves the value of the leaf ApplyGroupsExclude from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if ApplyGroupsExclude is set, it can
// safely use t.GetApplyGroupsExclude() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.ApplyGroupsExclude == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetApplyGroupsExclude() []string {
	if t == nil || t.ApplyGroupsExclude == nil {
		return nil
	}
	return t.ApplyGroupsExclude
}

// GetHashWeight retrieves the value of the leaf HashWeight from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if HashWeight is set, it can
// safely use t.GetHashWeight() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.HashWeight == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetHashWeight() NokiaConf_Configure_Lag_Port_HashWeight_Union {
	if t == nil || t.HashWeight == nil {
		return nil
	}
	return t.HashWeight
}

// GetPortId retrieves the value of the leaf PortId from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if PortId is set, it can
// safely use t.GetPortId() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.PortId == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetPortId() string {
	if t == nil || t.PortId == nil {
		return ""
	}
	return *t.PortId
}

// GetPriority retrieves the value of the leaf Priority from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if Priority is set, it can
// safely use t.GetPriority() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.Priority == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetPriority() uint32 {
	if t == nil || t.Priority == nil {
		return 32768
	}
	return *t.Priority
}

// GetSubGroup retrieves the value of the leaf SubGroup from the NokiaConf_Configure_Lag_Port
// struct. If the field is unset but has a default value in the YANG schema,
// then the default value will be returned.
// Caution should be exercised whilst using this method since when without a
// default value, it will return the Go zero value if the field is explicitly
// unset. If the caller explicitly does not care if SubGroup is set, it can
// safely use t.GetSubGroup() to retrieve the value. In the case that the
// caller has different actions based on whether the leaf is set or unset, it
// should use 'if t.SubGroup == nil' before retrieving the leaf's value.
func (t *NokiaConf_Configure_Lag_Port) GetSubGroup() NokiaConf_Configure_Lag_Port_SubGroup_Union {
	if t == nil || t.SubGroup == nil {
		return UnionUint32(1)
	}
	return t.SubGroup
}

// PopulateDefaults recursively populates unset leaf fields in the NokiaConf_Configure_Lag_Port
// with default values as specified in the YANG schema, instantiating any nil
// container fields.
func (t *NokiaConf_Configure_Lag_Port) PopulateDefaults() {
	if t == nil {
		return
	}
	ygot.BuildEmptyTree(t)
	if t.Priority == nil {
		var v uint32 = 32768
		t.Priority = &v
	}
	if t.SubGroup == nil {
		t.SubGroup = UnionUint32(1)
	}
}

// ΛListKeyMap returns the keys of the NokiaConf_Configure_Lag_Port struct, which is a YANG list entry.
func (t *NokiaConf_Configure_Lag_Port) ΛListKeyMap() (map[string]interface{}, error) {
	if t.PortId == nil {
		return nil, fmt.Errorf("nil value for key PortId")
	}

	return map[string]interface{}{
		"port-id": *t.PortId,
	}, nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Port) ΛValidate(opts ...ygot.ValidationOption) error {
	if err := ytypes.Validate(SchemaTree["NokiaConf_Configure_Lag_Port"], t, opts...); err != nil {
		return err
	}
	return nil
}

// Validate validates s against the YANG schema corresponding to its type.
func (t *NokiaConf_Configure_Lag_Port) SROSValidate(opts ...ygot.ValidationOption) error {
	return t.ΛValidate(opts...)
}

// ΛEnumTypeMap returns a map, keyed by YANG schema path, of the enumerated types
// that are included in the generated code.
func (t *NokiaConf_Configure_Lag_Port) ΛEnumTypeMap() map[string][]reflect.Type { return ΛEnumTypes }

// ΛBelongingModule returns the name of the module that defines the namespace
// of NokiaConf_Configure_Lag_Port.
func (*NokiaConf_Configure_Lag_Port) ΛBelongingModule() string {
	return "nokia-conf"
}
